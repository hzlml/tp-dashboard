[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 1,
      "-": 40
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/34931736?s\u003d400\u0026u\u003de20f008a9df74e1bad772c4a8572ccf2ed8c393f\u0026v\u003d4) | Nizar Mohamed| [Github](https://github.com/NizarMohd) | [Portfolio](docs/team/NizarMohd.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/59829631?s\u003d460\u0026v\u003d4?text\u003dterry) | Terry Tay | [Github](https://github.com/terrytay) | [Portfolio](docs/team/terrytay.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ganapathy Sanath Balaji | [Github](https://github.com/GanapathySanathBalaji) | [Portfolio](docs/team/ganapathysanathbalaji.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hong Quan | [Github](https://github.com/hongquan448) | [Portfolio](docs/team/hongquan.md)"
      }
    ],
    "authorContributionMap": {
      "terrytay": 1,
      "NizarMohd": 1,
      "GanapathySanathBalaji": 1,
      "hongquan448": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "img {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    margin-right: auto;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    width: auto;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "div {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    font-size: x-small;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "# Developer Guide    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## Table of content"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. [Introduction](#1-introduction)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    1.1. [Purpose](#11-purpose)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    1.2. [Target Reader](#12-target-reader)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    1.3. [Brief Description](#13-brief-description)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    1.4. [Main Features](#14-main-features)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. [Design](#2-design)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    2.1. [Architecture](#21-architecture)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    2.2. [Task Component](#22-task-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    2.3. [Study Area Component](#23-study-area-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    2.4. [Notes Component](#24-notes-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. [Implementation](#3-implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    3.1. [Scheduling Tasks](#31-scheduling-tasks)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    3.2. [Listing Study Areas](#32-listing-study-areas)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    3.3. [Operation of Notes](#33-operation-of-notes)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. [Testing](#4-testing)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "[Appendix A: Product Scope](#appendix-a-product-scope)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "[Appendix B: User Stories](#appendix-b-user-stories)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "[Appendix C: Non-Functional Requirements](#appendix-c-non-functional-requirements)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "[Appendix D: Glossary](#appendix-d-glossary)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "[Appendix E: Instruction for Manual Testing](#appendix-e-instructions-for-manual-testing)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### 1.1. Purpose"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "The document is meant to teach you on how OrgaNice! was developed and the design and implementations behind the software."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "With this document, you should have a better understanding of the framework of the application. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### 1.2. Target Reader"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "The target reader of this developer guide are:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "- Project Managers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "- Future Developers"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "- Build Verification Testers"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### 1.3. Brief Description"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "OrgaNice! is a task manager integrated with a Study Area search function. You can use it to manage your tasks, be it events or deadlines. On top of that, "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "it is capable of assisting students in finding Study Areas that meets their desired criteria."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### 1.4. Main Features"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. Scheduling Tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    - You can manage tasks based on priority for events and countdown for deadlines."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. Study Area. For more information of the design and implementation for this feature, click [here](#31-scheduling-tasks)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    - You can find a Study Area that meets your criteria. The software however have a limited number of supported "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    criteria. For more information of the design and implementation for this feature, click [here](#32-listing-study-areas)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "1. Notes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\t- You can enter notes based on school modules. Notes support undo and redo operations."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## 2. Design   "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": " {Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}    "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "[comment]: # (@@author GanapathySanathBalaji)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 2.1. Architecture  "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "![Architecture](images/Architecture.png)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cdiv\u003eFigure 1. Overall Architecture of OrgaNice!\u003c/div\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Duke - Main component which controls the flow of execution."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Ui - Component used to get input from the user and display results on the monitor."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Parser - Component used to abstract out the command based on user\u0027s input, so that the command can be executed later."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Command - Component contains information and implementation on how to execute various types of commands."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Task - Component contains details about handling the task list and related operations."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. StudyArea - Component contains details about handling queries for study area search."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Notes - Component contains details about Notes related operations."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Exception - Component contains the various types of exceptions encountered when OrgaNice! is run."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. ResourceLoader - Component handles loading and saving of the task list and study area details to local storage."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 2.2. Task Component  "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "[comment]: # (@@author GanapathySanathBalaji)  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The Task component depends on 3 other components,   "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 1. Command Component - The Command component issues instructions for the Task component to execute based on the user\u0027s input.  "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 2. UI Component - The UI component is used to display the results (and related exceptions) of the commands issued to the Task Component. "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 3. ResourceLoader Component - The ResourceLoader component is used to load the list of tasks stored previously when the application is started and is also used to store the current list of tasks to the local storage upon exit.   "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "![Task Component](images/TaskComponentUML.png)   "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cdiv\u003eFigure 2. Object Diagram for Task Component\u003c/div\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The task component contains 8 separate classes. They are as follows:  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  1. Task : Abstract class used to model a generic task. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  2. Event : Specialized task class used to model events.  "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  3. Deadline : Specialized task class used to model a deadline.   "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  4. TaskType : Enumeration class used to denote the various task types.   "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  5. TaskList : Container class used to store list of tasks and handle related operations. "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  6. SchedulableTask : Class used to model a task which is scheduled based on user\u0027s requirements.  "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  7. TaskComparator : Contains a custom comparator used to compare two schedulable tasks based on their "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  numberOfDaysLeft attribute.  "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  8.  TaskScheduler : Class used to check for feasibility and schedule a list of tasks based on user\u0027s requirements.     "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "[comment]: # (@@author NizarMohd)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### 2.3. Study Area Component  "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " The Study Area component depends on 3 other components,  "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  1. Command Component - The Command component issues instructions for the Study Area component to execute based on the "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  user\u0027s input. "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  2. UI Component - The UI component is used to display the results (and related exceptions) of the commands issued to "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  the Study Area Component."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  3. ResourceLoader Component - The ResourceLoader component is used to load data of all existing Study Areas in NUS "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  into text files when the User first run the software. Eventually, data will be referred from the created text file.   "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "![Study Area Component](images/StudyAreaObjectDiagram.png) "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003cdiv\u003eFigure 3. Object diagram for Study Area Component\u003c/div\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " The Study Area component contains 3 separate classes. They are as follows:  "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   1. Dictionary : Class to map user input to specific terms used in StudyAreaList."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   2. StudyArea : Class that is used to model Study Areas. "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   3. StudyAreaList : Class that handles the list of available Study Areas based on User input.  "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "terrytay"
        },
        "content": "[comment]: # (@@author terrytay)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "terrytay"
        },
        "content": "### 2.4. Notes Component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "terrytay"
        },
        "content": "![Notes Component](images/NotesComponent.png)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\u003cdiv\u003eFigure 4. Object diagram for Notes Component\u003c/div\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "terrytay"
        },
        "content": "The Notes component is self-contained apart from calling UI class for Strings output."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\u003cbr\u003e "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "terrytay"
        },
        "content": "Inside Notes component, there exists these classes:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "terrytay"
        },
        "content": "  "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "terrytay"
        },
        "content": "1. NotesInvoker : Class to start the Notes"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\t"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "terrytay"
        },
        "content": "2. Notes : Class to support operations for the modules in the Notes, acts as interface."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\t"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "terrytay"
        },
        "content": "3. Modulelist: Class to implement actual modules operations and store modules list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\t"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "terrytay"
        },
        "content": "4. Command : Package containing Command interface, Add command, Command Stack classes."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\t"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "terrytay"
        },
        "content": "5. Parser : Class to parse commands for command-based operations."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "terrytay"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "terrytay"
        },
        "content": "### 3.1. Scheduling Tasks "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "[comment]: # (@@author GanapathySanathBalaji)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### 3.1.1 Implementation "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   Inorder to schedule tasks based on the user\u0027s requirement a separate SchedulableTask class was created. "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 1. The user\u0027s requirements (Name, Time to complete it, Deadline) are captured for each of the tasks to be scheduled. "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 1. The requirements captured are stored in the SchedulableTask object. "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 1. Then, the TaskScheduler object finds the optimum schedule based on the user\u0027s requirements using the EDF "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " (Early Deadline First) algorithm."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 1. If a feasible schedule is found it is "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " displayed, else a message stating that a schedule based on the user\u0027s requirements can\u0027t be made is displayed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   The following sequence diagrams explain how tasks are scheduled."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " ![Overall Sequence Diagram](images/ScheduleOverall.png)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cdiv\u003eFigure 5. Overall Sequence Diagram\u003c/div\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " The three reference frames used are as follows:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * `Get information regarding the tasks from the user`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " ![Sub Diagram 1](images/ScheduleSub1.png)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " \u003cdiv\u003eFigure 6. Sub Diagram 1\u003c/div\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " \u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * `Check and Schedule tasks if feasible`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " ![Sub Diagram 2](images/ScheduleSub2.png)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " \u003cdiv\u003eFigure 7. Sub Diagram 2\u003c/div\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " \u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * `Add the scheduled tasks to current list of tasks`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " ![Sub Diagram 3](images/ScheduleSub3.png)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " \u003cdiv\u003eFigure 8. Sub Diagram 3\u003c/div\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " \u003cbr\u003e "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### 3.1.2 Alternatives"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Aspect : How to capture user\u0027s requirements and handle it."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " - Alternative 1 (Current Choice) : Create a separate SchedulableTask object to store user\u0027s requirements for each task "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                                    to be scheduled."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      - Pros : New class object can be customised without affecting core functionality of the product if the attributes provided by "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      the user (to tasks to be scheduled) changes."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      - Cons : New methods similar to previously implemented methods have to be created instead of being reused."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " - Alternative 2 : Modify existing event or deadline class to model user\u0027s requirements."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      - Pros : It reuses methods and reduces coupling between classes in the TaskComponent."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      - Cons : Major changes would be required throughout various components of the application to accommodate the new feature. "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     Finally the first alternative was implemented as it was easier to implement and maintain it if changes were required to "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "the user\u0027s requirements (e.g. Changes to the number of parameters provided by the user). "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "[comment]: # (@@author NizarMohd)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### 3.2. Listing Study Areas "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "#### 3.2.1 Implementation "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "The Study Area search is facilitated by StudyAreaList. In this class, it has the list of all existing Study Areas, "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "stored internally as an ArrayList. This ArrayList is called studyAreaList. "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "To list the Study Area, we iterate through the entire list of all existing Study Area and conduct a check. The check is "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "as follows :"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "If in each Study Area, the Study Area meets all the flags stated by the User, the Study Area is then added to the "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "list of available Study Area. If not, the iteration is skipped and move on to the subsequent Study Area."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "To do as mentioned above, the StudyAreaList class implements the following main methods :"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "- searchList() : "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    - This method will iterate through all the Study Areas in the ArrayList studyAreaList while calling other methods "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    to carry out the search. Once process has ended, the method will return a list of the Study Area, availStudyArea, "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    that meets the User requirement."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "- getFlagsInfo() : "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    - This method will retrieve the flags entered by User, at the same time validating the User input. The criteria "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    entered by the User will be returned as flags, an Array of Strings of fixed size 5 as the software only supports 5 "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    flags in version 2."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "- isAvailStudyArea() : "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    - This method does the check mentioned above and returns a boolean value. Based on the flags detected, "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    the method will iterate through the flags array and check if the Study Area\u0027s attribute matches each flag stated in"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    flags. If isAvailStudyArea returns as true for all flags, the Study Area is then added to the output list, "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    availStudyArea. "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Below would be a sequence diagram to demonstrate how the search algorithm is operated."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * `User enters search key` "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "![Study Area Sequence_Diagram_Main](images/usersLinteraction.png)  "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003cdiv\u003eFigure 9. Interaction between User and Study Area Search Interface\u003c/div\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * `StudyAreaCommand invokes searchList() of StudyAreaList` "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "![Study_Area_Sequence_Diagram_subModules](images/sLinteraction.png)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003cdiv\u003eFigure 10. Interaction within Study Area Search Interface\u003c/div\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "![Study_Area_Sequence_Diagram_subModules2](images/isAvailStudyArea.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003cdiv\u003eFigure 11. Interaction when isAvailStudyArea is invoked\u003c/div\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "You can refer [here](#appendix-d-glossary) for a detailed explanation on the terms used in this diagram"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "#### 3.2.2 Alternative "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Aspect: How to search based on User input."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "- Alternative 1 (Current Choice) :"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    Iterate through the list of all existing Study Areas. Then check if each Study Area "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "meets User\u0027s Criteria"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    - Pros : Lesser data structures required. Therefore lesser memory required."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    - Cons : Linear search, therefore, with bigger size of data, search may take longer. "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "- Alternative 2 : "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "There exists four flags : port availability, indoor, outdoor, capacity."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Create adjacency lists that maps the flag to the Study Area itself. If the Study Area contains that "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "attribute, the Study Area is added in that specific attribute list. Depending on the type of attribute, the adjacency"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "list can be implemented using different data structure."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "For example, let\u0027s take only the two study areas as the entire data set."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             __________________________________________________________"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Name: Opposite Town Green (Outside Starbucks)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Address: 2 College Avenue West Education Resource Centre,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Ground Level"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Faculty: Utown"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Port: true"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Indoor: false"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Maximum number of Pax: 4"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             __________________________________________________________"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             __________________________________________________________"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Name: Starbucks"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Address: 2 College Avenue West Education Resource Centre,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Ground Level"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Faculty: Utown"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Port: true"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Indoor: true"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Maximum number of Pax: 5"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             __________________________________________________________"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "             Please enter the location for your desired study area."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "This will result in the following adjacency lists : "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Environment: \u003cbr\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Indoor -\u003e {Starbucks} \u003cbr\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Outdoor -\u003e {Opposite Town Green (Outside Starbucks)} \u003cbr\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "*Data Structure* : 2D Array, with only two rows (For indoors and outdoors)\u003cbr\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Ports: \u003cbr\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Yes -\u003e {Opposite Town Green (Outside Starbucks), Starbucks}\u003cbr\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "No -\u003e null\u003cbr\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "*Data Structure* : 2D Array, with only two rows (For Yes and No)\u003cbr\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Capacity: "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "4 -\u003e {Opposite Town Green (Outside Starbucks)}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "5 -\u003e {Starbucks}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "*Data Structure* : HashMap\u003cInteger, ArrayList\u003cString\u003e\u003e "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "The creation and initialisation of the lists are done when the software is setting up.  Therefore, each flag "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "has its own list. Based on user criteria, concatenate an output list with the Study Areas that are found in all"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "of the relevant flag lists stated by the user. If more than one requirement is entered by the user, only the Study "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Areas appears in all the related attributes specified by the User will be added to the output list."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "- Pros : Data is categorised based on flags."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "- Cons : More memory is required as more data structures are used. Since methods invoked during the search are also "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "linear, time taken to complete the search will be longer if more data are present. Overall, this approach is harder "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "to implement."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Therefore, the first alternative is chosen, as it is much easier to implement and lesser memory is used while conducting the search."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "terrytay"
        },
        "content": "[comment]: # (@@author terrytay)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "terrytay"
        },
        "content": "### 3.3. Operation of Notes"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "terrytay"
        },
        "content": "#### 3.3.1 Implementation "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "terrytay"
        },
        "content": "The NotesInvoker class will create a Notes object. Notes acts as an Interface for the ModulesList class."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "terrytay"
        },
        "content": "Each module is mapped to an ArrayList of notes. This map is stored in the ModuleList class. The ModuleList class"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "terrytay"
        },
        "content": "contains operations to add, remove, enter and list modules."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "terrytay"
        },
        "content": "A ModuleManager class is used to hold operations for a module. These operations are achieved by working together"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "terrytay"
        },
        "content": "with the Parser class and Command class. Operations supported are add, list, undo, redo. "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "terrytay"
        },
        "content": "Add operations are fairly simple, primarily using the add method of hashmap library. The implementation of"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "terrytay"
        },
        "content": "undo and redo is stated here below."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "terrytay"
        },
        "content": "Each time an AddCommand object is called, CommandStack will determine if operation is add, undo or redo."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "terrytay"
        },
        "content": "If operation is to add notes, the notes will be added to the value in the module key. At the same time, "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "terrytay"
        },
        "content": "this note that is added is also added to a CommandStack list in the CommandStack class. The redoStack list in the "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "terrytay"
        },
        "content": "CommandStack class is then cleared."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "terrytay"
        },
        "content": "If operation is to undo added notes, the CommandStack will remove the last added note from"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "terrytay"
        },
        "content": "the CommandStack and pass it to the Command class to execute the undo action by removing it from the module"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "terrytay"
        },
        "content": "contained in the hashmap. Also, this note will be added to the redoStack list."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "terrytay"
        },
        "content": "If operation is to redo removed notes, the CommandStack will remove the last added note in redoStack list and"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "terrytay"
        },
        "content": "pass it to the Command class to execute the redo action by adding this note into the module contained in the"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "terrytay"
        },
        "content": "hashmap."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "terrytay"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "terrytay"
        },
        "content": "The reason why we chose two linked lists to support these operations is because it reduces the SLOC needed to"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "terrytay"
        },
        "content": "write the logic. An alternative is to actually remember the state of the hashmap before an operation and save"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "terrytay"
        },
        "content": "it to another hashmap. However, this approach will take up more memory and reduces the performance of the application. "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "terrytay"
        },
        "content": "[comment]: # (@@author )"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## 4. Testing "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## Appendix A: Product Scope "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### Target User Profile  "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Mainly NUS students and professors who :"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "* need to manage their tasks, events and deadlines"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "* prefer desktop app over other types"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "* are new to the faculty (or freshmen) , and require knowledge on conducive areas to study"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "* have specific needs for a conducive Study Area"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### Value proposition    "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "[comment]: # (to be finalised)  "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "You can efficiently manage tasks, in terms of priority. You can also efficiently find a study area that"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "meets your needs and is conducive, should you urgently need one."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## Appendix B: User Stories    "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": " |Version| As a ... | I want to ... | So that I can ...| "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": " |--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v1.0|new user|see list of commands supported|refer to them when I forget how to use the application|  "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v1.0|user|add a new task|keep track of it|  "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v1.0|user|edit a task|change it\u0027s details if required| "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v1.0|user|delete a task|remove tasks that are cancelled| "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v1.0|user|view my list of tasks sorted based on their date|be aware of all the tasks that are due/happening soon|  "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v1.0|user|view my list of tasks sorted based on their priority|be aware of the more important tasks|  "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v1.0|user|find a task by name|locate a task without having to go through the entire list|    "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v1.0|student|find a Study Area based on location and environment|have a conducive space to study|"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v1.0|professor|locate a Study Area that is outdoors| conduct consultations without worrying of making noise|"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v2.0|user|mark deadline as done|check to see if I have pending deadlines|"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v2.0|user|to delete a Module|clean up my finished notes|"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v2.0|user|create a Module|add notes inside|"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "terrytay"
        },
        "content": " |v2.0|user|undo an added note|increase my efficiency|"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "terrytay"
        },
        "content": " |v2.0|user|redo a removed notes|increase my efficiency|"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " |v2.0|user|create a schedule based on requirements|customise my tasks accordingly|"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "[comment]: # (@@NizarMohd) "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## Appendix C: Non-Functional Requirements    "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "* Environment Requirement :  "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    * Java 11"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    * 32-bit or 64-bit environment"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    * Command Line Interface"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    * Should work without internet access \u003cbr\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  * Quality Requirement :"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    * Usage should be intuitive, and easy to use even by a novice. \u003cbr\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  * Performance Requirement :"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    * Should respond quickly, buffer time of 2 seconds at most.\u003cbr\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  * Reliability Requirement: "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    * Data for Study Areas should be up to date and accurate.\u003cbr\u003e  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "[comment]: # (@@author NizarMohd)"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## Appendix D: Glossary    "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *flag* - Criteria that are supported by the software. Currently supported flags are, -i for indoors, -o for outdoors,"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " -p for Study Areas with ports and -s for the number of people that the Study Area should facilitate "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *available Study Area* - Study Areas that matches the User requirement, therefore _available_ for usage"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *availStudyAreas* - ArrayList of StudyArea objects that contains the list of available Study Areas"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *isAvail* - This is a boolean value returned by isAvailStudyArea. It returns true if the either one of the alternate "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " paths in [the sequence diagram](#interaction-within-organices-submodule) returns a true value"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *executeStudyCommand()* - This method executes the Study Area User Interface"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *hasPorts()* - This method returns true if the Study Area has a port, and false if otherwise"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *isIndoor()* - This method returns true if the Study Area is indoors, and false if otherwise"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *isSizeCapable()* - This method returns true if the maximum size of the Study Area is capable of containing the size staed"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " by user."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *containsSearchKey()* - This method returns true if the Study Area\u0027s name,faculty or address contains the search key "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " entered by the user. This method is invoked when under the [default](#interaction-within-organices-submodule) condition as search by name, address or locations "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " does not require any flags, instead it utilises a loose search. "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *ports_flag* - refers to \"-p\" flag"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *indoor_flag* - refers to \"-i\" flag"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *outdoor_flag* - refers to \"-o\" flag"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * *size_flag* - refers to \"-s\" flag"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "[comment]: # (@@NizarMohd)"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## Appendix E: Instructions for Manual Testing    "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " __NOTE__: These tests are not exhaustive and testers have to do more exploratory testing to ensure the accuracy of the "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " software\u0027s features."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### Testing for Study Area Search"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "#### Search by location, name, address "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * To test for accuracy of loose search, test \"bux\" to see if it returns locations related to Starbucks."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "#### Search by flags only "
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * To test for accuracy of flags, test either \"-p\", \"-i\", \"-o\" or \"-s {integer}\""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "#### Search with both, (1) location, name or address , and , (2) flags "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * To test for accuracy, test \"{location/name/address} {flags}\"."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * Since flags must come as a second argument in this case, test for \"{flags} {location/name/address}\""
      }
    ],
    "authorContributionMap": {
      "terrytay": 68,
      "NizarMohd": 268,
      "GanapathySanathBalaji": 129,
      "-": 18
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{Give product intro here}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 1,
      "-": 7
    }
  },
  {
    "path": "docs/UMLCode/AddScheduledTasksToList.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "mainframe sd Add the scheduled tasks to current list of tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "participant \"taskScheduler :TaskScheduler\" as b"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate b"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "participant \"taskList :TaskList\" as c"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b-\u003ec: tasks.addAll(toBeAddedToList)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate c"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "c--\u003eb"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate c"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate b"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 22
    }
  },
  {
    "path": "docs/UMLCode/Architecture.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "actor User"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "rectangle OrgaNice! {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent Parser"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent Duke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent ResourceLoader"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent Ui"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent Exception"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent StudyArea"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "storage Storage ["
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Local Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "User \u003c-right-\u003e (Ui)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Parser -down-\u003e (Command)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Duke -down-\u003e (ResourceLoader)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Duke -right-\u003e (Parser)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Command -right-\u003e (Exception)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Command -right-\u003e (Task)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Command -left-\u003e (Ui)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Task -left-\u003e (Ui)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "ResourceLoader -left-\u003e (Ui)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "StudyArea -left-\u003e (Ui)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "ResourceLoader -right-\u003e (Exception)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "StudyArea -down-\u003e (Exception)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "ResourceLoader -down-\u003e (StudyArea)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Command -right-\u003e (StudyArea)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "ResourceLoader -down-\u003e (Task)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "ResourceLoader -right-\u003e (Storage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 42
    }
  },
  {
    "path": "docs/UMLCode/CheckAndScheduleTasks.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "mainframe sd Check and Schedule tasks if feasible "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "participant \"taskScheduler :TaskScheduler\" as b"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate b"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "participant \"taskToBeScheduledNext :SchedulableTask\" as c"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "loop Task Queue is non-empty and schedule is feasible till current state"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "create c"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b-\u003ec : SchedulableTask taskToBeScheduledNext \u003d taskQueue.poll()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate c"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "c--\u003eb"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate c"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "opt Task with earliest deadline can be scheduled"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b-\u003eb : addTaskToList(ui,currentDay,startDate,\\nstartOfDay,endOfDay,defaultPriority,\\nscheduleCreated,taskToBeScheduledNext)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate b"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b--\u003eb"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate b"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "else Task with earliest deadline can\u0027t be scheduled"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b-\u003eb : scheduleNotFeasible()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate b"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b--\u003eb"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate b"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "end"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b-\u003ec !!: delete"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "end"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate b"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 48
    }
  },
  {
    "path": "docs/UMLCode/GetSchedulabeTaskInformation.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "mainframe sd Get information regarding the tasks from the user"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "participant \"taskScheduler :TaskScheduler\" as b"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate b"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "participant \"newSchedulableTask :SchedulableTask\" as c"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "loop Number of tasks specified by user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "create c"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b-\u003ec : SchedulableTask()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate c"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "c--\u003eb"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate c"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b-\u003ec : setDetails(splitDetails)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate c"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "c--\u003eb"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate c"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b-\u003eb : addTaskToQueue(newSchedulableTask)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate b"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b--\u003eb:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate b"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b-\u003ec !!: delete"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "end"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate b"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 40
    }
  },
  {
    "path": "docs/UMLCode/ScheduleOverall.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Actor User"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "participant \" :Duke\" as t"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "User -\u003e t: \"schedule x\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "loop Command entered isn\u0027t \"bye\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "participant \" parser:Parser\" as p"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "participant \"command:CreateScheduleCommand\" as a"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate t"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "t-\u003ep : parseCommand(fullCommand)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate p"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "create a"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "p-\u003ea: CreateScheduleCommand(isOneWordCommand, commandSplit)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate a"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "participant \"taskScheduler :TaskScheduler\" as b"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "create b"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "a-\u003eb : TaskScheduler(numberOfTasksToSchedule)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate b"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b--\u003ea"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate b"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "a--\u003ep : command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate a"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "p--\u003et : command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate p"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "t-\u003ea: executeCommand(taskList, ui)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate a"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "a-\u003eb : getTasks(ui)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate b"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "ref over b"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Get information regarding"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "the tasks from the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "end ref"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b--\u003ea"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate b"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "a-\u003eb: scheduleTasks(ui)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate b "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "ref over b"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Check and Schedule "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "tasks if feasible"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "end ref"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b--\u003ea: isFeasible"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate b"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "opt Feasible schedule exists"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "a-\u003eb : addScheduleToList(taskList, ui)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "activate b"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "ref over b"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Add the scheduled tasks "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "to current list of tasks"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "end ref"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "b--\u003ea"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate b"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "end"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "a--\u003et"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "t-\u003ea !!:delete"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "end"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "t--\u003eUser"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deactivate t"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "hide footbox "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 95
    }
  },
  {
    "path": "docs/UMLCode/TaskComponent.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent \"{abstract}\\nTask\" as Task"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent TaskList"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent \"Deadline\" as Deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent \"Event\" as Event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent TaskScheduler"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent SchedulableTask"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent TaskComparator"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "agent \"\u003c\u003cenumeration\u003e\u003e\\nTaskType\" as enTask"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Task \u003c|-- Deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Task \u003c|-- Event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "TaskList -down-\u003e Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Task -left-\u003e enTask"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Event .up.\u003e enTask"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Deadline .up.\u003e enTask"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "TaskScheduler -left-\u003e Task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "TaskScheduler .down.\u003e TaskComparator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "TaskComparator .down.\u003e SchedulableTask"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "TaskScheduler -right-\u003e SchedulableTask"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "TaskScheduler .up.\u003e TaskList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "TaskScheduler .down.\u003e Event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 27
    }
  },
  {
    "path": "docs/UMLCode/sLinteraction.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "participant \":StudyAreaCommand\" as StudyAreaCommand"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "participant \":StudyAreaList\" as StudyAreaList"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "participant \":StudyArea\" as StudyArea"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "StudyAreaCommand -\u003e StudyAreaList : searchList()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "activate StudyAreaList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  StudyAreaList -\u003e StudyAreaList: getFlagsInfo()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  activate StudyAreaList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyAreaList --\u003e StudyAreaList: flags"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  deactivate StudyAreaList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    loop every studyArea in StudyAreaList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyAreaList -\u003e StudyAreaList: isAvailstudyArea()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    activate StudyAreaList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      alt ports_flag"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyAreaList -\u003e StudyArea : hasPorts()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        activate StudyArea"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        deactivate StudyArea"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      else indoor_flag"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyAreaList -\u003e StudyArea : isIndoor()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        activate StudyArea"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "       deactivate StudyArea"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      else outdoor_flag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyAreaList -\u003e StudyArea : isIndoor()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        activate StudyArea"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        deactivate StudyArea"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      else size_flag"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyAreaList -\u003e StudyArea : getMaxPax()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        activate StudyArea"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        deactivate StudyArea"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      end"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyAreaList --\u003e StudyAreaList: isAvail"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    deactivate StudyAreaList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    opt isAvail"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      StudyAreaList -\u003e StudyAreaList: availStudyArea.add(studyArea)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    end"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  end"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "StudyAreaList --\u003e StudyAreaCommand: availStudyAreas"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "deactivate StudyAreaList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 49
    }
  },
  {
    "path": "docs/UMLCode/studyAreaObjectDiagram.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "object \"__:StudyAreaList__\" as sL"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "object \"__:Dictionary__\" as d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "object \"__:StudyArea__\" as sA"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "sL -\u003e sA"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "sL ..\u003e d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 14
    }
  },
  {
    "path": "docs/UMLCode/usersLinteraction.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "mainframe sd Interaction between StudyAreaCommand and study area package\u0027s submodules          qw   aa.."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "participant \":StudyAreaCommand\" as StudyAreaCommand"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "box \"study area package\\n\" #white"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "participant \":StudyAreaList\" as StudyAreaList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "participant \":StudyArea\" as StudyArea"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "StudyAreaCommand -\u003e StudyAreaList : searchList()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "activate StudyAreaList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  StudyAreaList -\u003e StudyAreaList: getFlagsInfo()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  activate StudyAreaList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyAreaList --\u003e StudyAreaList: flags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  deactivate StudyAreaList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    loop every studyArea in StudyAreaList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyAreaList -\u003e StudyAreaList: isAvailStudyArea()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    activate StudyAreaList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      alt ports_flag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyAreaList -\u003e StudyArea : hasPorts()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        activate StudyArea"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyArea --\u003e StudyAreaList : isAvail"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        deactivate StudyArea"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      else indoor_flag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyAreaList -\u003e StudyArea : isIndoor()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        activate StudyArea"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyArea --\u003e StudyAreaList : isAvail"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "       deactivate StudyArea"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      else outdoor_flag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyAreaList -\u003e StudyArea : isIndoor()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        activate StudyArea"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyArea --\u003e StudyAreaList : isAvail"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        deactivate StudyArea"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      else size_flag"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyAreaList -\u003e StudyArea : isSizeCapable()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        activate StudyArea"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyArea --\u003e StudyAreaList : isAvail"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        deactivate StudyArea"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      else default"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyAreaList -\u003e StudyArea : containsSearchKey()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        activate StudyArea"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyArea --\u003e StudyAreaList : isAvail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        deactivate StudyArea"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      end"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyAreaList --\u003e StudyAreaList: isAvail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    deactivate StudyAreaList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    opt isAvail"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      StudyAreaList -\u003e StudyAreaList: availStudyAreas.add(studyArea)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    end"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "StudyAreaList --\u003e StudyAreaCommand: availStudyAreas"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "deactivate StudyAreaList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 61
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "# OrgaNice! - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## Table Of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. [Introduction](#intro)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. [Features](#features) \u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.1. [Add new Deadline task](#add-deadline) \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.2. [Add new Event task](#add-event) \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.3. [Delete task](#delete) \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.4. [Mark deadline as done](#done) \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.5. [Edit task](#edit) \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.6. [Clear list of tasks](#clear) \u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.7. [View list of tasks](#view) \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.8. [View list of tasks sorted by their priority](#priority) \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.9. [View list of tasks in a countdown format](#countdown) \u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.10. [Search tasks](#search) \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.11. [View commands supported](#help) \u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.12. [Schedule tasks](#schedule) \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.13. [Study Area Search Feature](#studyArea) \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.14. [Exit the Application / Study Area interface](#exit) \u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.15. [Saving the data](#save-tasks) \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.16. [Clearing old tasks](#clear-old-tasks) \u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    3.17. [Viewing tasks in calendar format](#calendar) \u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. [FAQ](#faq)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. [Formats Used](#formats)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003ca name\u003d\"intro\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  OrgaNice! is a command line based application that can help academics with scheduling their tasks and keeping track of them.  Our application supports 2 types of tasks, they are as follows: "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * **Deadline** Tasks - Used to denote a task that needs to be finished by a deadline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     E.g, Assignments, Projects etc that are due on a specific date. "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * **Event** Tasks - Used to denote an activity that happens over a period of time."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    E.g, Lectures, Tutorial sessions can be stored as events."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " The application can add, edit and delete tasks. It also provides methods to search for tasks. Additionally, it has the ability of storing data to a physical location on the computer, so that the tasks always remain in memory.  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " As a secondary feature, the application allows students who are in search of a study area to locate one based on different conditions. The different conditions that could be specified include the location, size constraints and port facilities."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003ca name\u003d\"quick-start\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Download the latest OrgaNice!.jar from [here](https://github.com/AY1920S2-CS2113T-T12-3/tp/releases) and place it in an empty folder. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * Open Command Prompt. **NOTE: Please ensure that the command prompt is at full screen when running the jar file**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * Navigate to the folder with the jar."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * Type the following command:  java -jar OrgaNice!.jar to run it."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " A text based UI should with appear with the following lines."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Hello from"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        _______/\\\\\\\\\\_____________________________________________________/\\\\\\\\\\_____/\\\\\\____________________________________________/\\\\\\____________"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ______/\\\\\\///\\\\\\__________________________________________________\\/\\\\\\\\\\\\___\\/\\\\\\__________________________________________/\\\\\\\\\\\\\\_________"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        _____/\\\\\\/__\\///\\\\\\____________________/\\\\\\\\\\\\\\\\___________________\\/\\\\\\/\\\\\\__\\/\\\\\\___/\\\\\\__________________________________/\\\\\\\\\\\\\\\\\\_______"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        _____/\\\\\\______\\//\\\\\\___/\\\\/\\\\\\\\\\\\\\____/\\\\\\////\\\\\\___/\\\\\\\\\\\\\\\\\\_____\\/\\\\\\//\\\\\\_\\/\\\\\\__\\///_______/\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\\\\\___\\//\\\\\\\\\\\\\\_______"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        _____\\/\\\\\\_______\\/\\\\\\__\\/\\\\\\/////\\\\\\__\\//\\\\\\\\\\\\\\\\\\__\\////////\\\\\\____\\/\\\\\\\\//\\\\\\\\/\\\\\\___/\\\\\\____/\\\\\\//////_____/\\\\\\/////\\\\\\___\\//\\\\\\\\\\_______"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ______\\//\\\\\\______/\\\\\\___\\/\\\\\\___\\///____\\///////\\\\\\____/\\\\\\\\\\\\\\\\\\\\___\\/\\\\\\_\\//\\\\\\/\\\\\\__\\/\\\\\\___/\\\\\\___________/\\\\\\\\\\\\\\\\\\\\\\_____\\//\\\\\\_______"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ________\\///\\\\\\__/\\\\\\_____\\/\\\\\\___________/\\\\_____\\\\\\___/\\\\\\/////\\\\\\___\\/\\\\\\__\\//\\\\\\\\\\\\__\\/\\\\\\__\\//\\\\\\_________\\//\\\\///////_______\\///_______"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ____________\\///\\\\\\\\\\/______\\/\\\\\\__________\\//\\\\\\\\\\\\\\\\___\\//\\\\\\\\\\\\\\\\/\\\\_\\/\\\\\\___\\//\\\\\\\\\\__\\/\\\\\\___\\///\\\\\\\\\\\\\\\\___\\//\\\\\\\\\\\\\\\\\\\\______/\\\\\\_____"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ______________\\/////________\\///____________\\////////_____\\////////\\//___\\///_____\\/////___\\///______\\////////_____\\//////////______\\///_____"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        What is your name?"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "After providing the User\u0027s name, the application will proceed to list out the supported features."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Hello user!"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Welcome to OrgaNice! Below would be a list of commands useful for you!"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         OrgaNice! Supports the following commands"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Please enter the keywords followed by the information shown in the brackets"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         event \u003cevent details\u003e /d \u003cdate\u003e /s \u003cstart time\u003e /e \u003cend time\u003e /p \u003cpriority of event\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         ------------------------------------------- Create a new event"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         deadline \u003cdeadline details\u003e /d \u003cdate\u003e /t \u003cdue time\u003e /p \u003cpriority of deadline\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         ------------------------------------------- Create a new deadline"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         view -------------------------------------- View existing events"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         priority_view ----------------------------- View existing tasks based on priority"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         countdown --------------------------------- View existing tasks based on days left"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         clear ------------------------------------- Delete all tasks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         search \u003ckeyword found in task\u003e ------------ View existing task that contains the keyword"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         delete \u003cindex of task\u003e -------------------- Delete the task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         edit \u003cindex of task\u003e ---------------------- Edit the task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         done \u003cindex of task\u003e ---------------------- Mark the deadline as done"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         schedule \u003cnumber of task to be scheduled\u003e - Schedule tasks"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         help -------------------------------------- View List Of Commands Supported"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         bye --------------------------------------- Terminate task interface"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         study ------------------------------------- Enter Study Area search interface"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         notes ------------------------------------- Enter Notes"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Notes:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         *All dates should follow YYYY-MM-DD format"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         *All timing should follow 24 hour clock"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  * Some example commands you can try:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    * schedule {number of tasks}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    * view"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    * search exam"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    * bux -i (Inside Study Area Search Interface)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  * Refer to Section 3, Features for details of each command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003ca name\u003d\"features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## 3 Features "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "[comment]: # (@@author GanapathySanathBalaji)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"add-deadline\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.1. Add new Deadline task"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Adds a new deadline task to track a task which needs to be finished before a specific date."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `deadline \u003cdeadline details\u003e /d \u003cdate\u003e /t \u003cdue time\u003e /p \u003cpriority of deadline\u003e` - Adds a new Deadline task to the list of tasks"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The command creates a new Deadline task with the description, date, due time and priority value provided."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Note: The date and time should be provided in the correct format as mentioned [here](#formats)."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a successful addition message similar to the one in the example would appear."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an alert would be displayed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The following adds a Math assignment as a deadline task which is due on 04-05-2020 at 6 pm with a priority value of 2."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`deadline Math assignment /d 2020-05-04 /t 18:00 /p 2`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Expected outcome:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The Deadline task would be added to the list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a response similar to the following one would appear:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    \t A new task with the following information has been added."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    \t [D][PENDING] math assignment is due on May 4 2020 at 18:00"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    \t with priority 2"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"add-event\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.2 Add new Event task"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Adds a new deadline task to track a task which needs to be finished before a specific date."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `event \u003cevent details\u003e /d \u003cdate\u003e /s \u003cstart time\u003e /e \u003cend time\u003e /p \u003cpriority of event\u003e` - Adds a new Event task to the list of tasks"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The command creates a new Event task with the description, date, start time, end time and priority value provided."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Note: The date and time should be provided in the correct format as mentioned [here](#formats)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a successful addition message similar to the one in the example would appear."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an alert would be displayed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The following adds a Team Meeting which is set to take place on 06-05-2020 from 9 am to 12 pm with a priority value of 3, as an event to the list of tasks."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`event Team Meeting /d 2020-06-06 /s 09:00 /e 12:00 /p 3`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Expected outcome:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The Deadline task would be added to the list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a response similar to the following one would appear:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         A new task with the following information has been added."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         [E] Team Meeting at Jun 6 2020 from 09:00 to 12:00 with"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         priority 3"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"delete\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.3. Delete task"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If a task is done and you want to remove it from the list this command could be used. It deletes the task at the specified index, usually one of the various view command are run to look at the index of the task to be deleted."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "##### `delete \u003cindex number of task\u003e` - Deletes task at specified index"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The command deletes the task at the specifed index, if the index provided is valid."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a successful deletion message similar to the one in the example would appear."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an alert would be displayed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "To delete a task at the 3rd index of the list of tasks."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`delete 3`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The task would be deleted from the list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a response similar to the following one would appear:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Noted! I have removed this task:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         [E] meeting at Apr 4 2020 from 12:00 to 18:00 with"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         priority 2"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Now you have 2 task(s) in your list"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"done\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.4. Mark deadline as done"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the work to be completed for a deadline is done but you still want to keep it in the list, this command could be used. It marks the deadline at the specified index as done, usually one of the various view command are run to look at the index of the deadline to be deleted."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `done \u003cindex of deadline\u003e` - Mark the deadline at the specified index as done"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The command deletes the task at the specifed index, if the index provided is valid."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a successful deletion message similar to the one in the example would appear."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an alert would be displayed."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "To mark a deadline at the 1st index of the list of tasks as done."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The task would be marked as done."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a response similar to the following one would appear:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    \t Nice! I\u0027ve marked this deadline as done!"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    \t [D][COMPLETED] math assignment is due on May 4 2020 at"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    \t 18:00 with priority 2"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"edit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.5. Edit task"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If a task has any of it\u0027s details altered, you can use this command to edit the appropriate field directly. This saves you the trouble of manually deleting and adding a new task. This command is a multi-stage command so that it is easier for you to do it. This command changes the specified field of the task mentioned by it\u0027s index. To view the index of the task, one of the various command to view the list of tasks (view, priority_view, countdown) is run. "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Note: The date and time should be provided in the correct format as mentioned [here](#formats)."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Multi-Stage"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `edit \u003cindex number of task\u003e` - Used to edit task at specified index"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The interface then displays the task and the set of attributes of the task that can be edited, if the index is valid. You can then enter the field you would like to change and then the new value to change the field into. "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The command edits the task at the specifed index at the field mentioned by you."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a successful edit message displaying the updated task\u0027s information similar to the one in the example would appear."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an alert would be displayed."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "To edit the start time of the event at 2nd index of the list."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Multi Stage"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `edit 2` - Specify the index of task to be edited "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         The event details are as follows:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         [E] meeting at May 6 2020 from 14:00 to 18:00 with"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         priority 4"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Which field of the event to edit? (Enter Corresponding"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Number)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         1. Description"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         2. Date"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         3. Start Time"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         4. End Time"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         5. Priority"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `3` - Specify field to be edited based on list"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t Enter new Start Time:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `12:00` - Enter the new value to be changed to"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Updated Details:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         [E] meeting at May 6 2020 from 12:00 to 18:00 with"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         priority 4"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         The task at the mentioned index has been edited"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         successfully"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"clear\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.6. Clear list of tasks"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If you would like to clear the current list of tasks and start on a clean state, this command could be used. Clears the list of tasks stored."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `clear` - Clears the list of tasks"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The command clears the current list of tasks stored."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a successful deletion message similar to the one in the example would appear."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an alert would be displayed."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "To clear the current list of tasks."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`clear`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The list of tasks would be cleared."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a response similar to the following one would appear:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         The list of tasks is cleared."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"view\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.7. View list of tasks"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If you would like to view the current list of tasks, this command could be used. It shows the current list of tasks stored."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `view` - Displays the current list of tasks"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The command displays the current list of tasks stored."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a successful deletion message similar to the one in the example would appear."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an alert would be displayed."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "To view the current list of tasks."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`view`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The list of tasks would be displayed."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a response similar to the following one would appear:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Here is the list of tasks added so far:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         1) [E] exam at May 5 2020 from 12:00 to 14:00 with"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         priority 2"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         2) [E] meeting at May 6 2020 from 12:00 to 18:00 with"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         priority 4"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"priority\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.8. View list of tasks sorted by their priority"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If you would like to view the more important tasks from the current list of saved tasks first, this command could be used. It shows the current list of tasks after they are sorted based on their priority."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `priority_view` - Displays the current list of tasks sorted by priority"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The command displays the current list of tasks sorted by their priority."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a successful deletion message similar to the one in the example would appear."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an alert would be displayed."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "To view the current list of tasks sorted by their priority."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`priority_view`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The list of tasks would be displayed after they are sorted based on their priority."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a response similar to the following one would appear:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Here is the list of tasks added so far displayed in"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         decreasing order of priority:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         1) [E] meeting at May 6 2020 from 12:00 to 18:00 with"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         priority 4"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         2) [E] exam at May 5 2020 from 12:00 to 14:00 with"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         priority 2"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"countdown\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.9. View list of tasks in a countdown format"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If you would like to view the early tasks from the current list of saved tasks first along with the number of days left till the task, this command could be used. It shows the current list of tasks with the number of days left till each task, after they are sorted based on their date."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `countdown` - Displays the current list in countdown format"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The command displays the current list of tasks current list of tasks with the number of days left till each task sorted by their dates."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a successful deletion message similar to the one in the example would appear."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an alert would be displayed."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "To view the current list of tasks in countdown format."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`countdown`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The list of tasks would be displayed in the countdown format."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a response similar to the following one would appear:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Here is the list of tasks with sorted based on the number"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         of days left:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         1) [E] exam at May 5 2020 from 12:00 to 14:00 with"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         priority 2 ---\u003e 40 day(s) left"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         2) [E] meeting at May 6 2020 from 12:00 to 18:00 with"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         priority 4 ---\u003e 41 day(s) left"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"search\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.10. Search tasks"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If you would like to quickly find a task based on it\u0027s description, this command could be used. It performs a linear search of all tasks stored in the list at the point of execution and list"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "all the tasks containing the keyword in their description in a numbered list."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### Usage"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `search \u003ckeyword found in task\u003e` - Lists all matching tasks in the list containing the keyword "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The command displays all the tasks with description containg the keyword searched for in a numbered list."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Upon success a successful message similar to the one in the example would appear."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an alert would be displayed."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`search exam`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "All matching tasks in the list would be displayed in a numbered list."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "A response similar to the following one would appear:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         The list of tasks containing the mentioned keyword in"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         their description are as follows:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         1) [E] exam at May 5 2020 from 12:00 to 14:00 with"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         priority 2"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"help\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.11. View commands supported "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If you are a new user or forgot the syntax of any command, our help command could be used. The command displays the list of commands supported by the application."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `help` - Displays list of commands supported "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The command displays the list of commands supported by the application."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an invalid command alert would be displayed."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The application would be exited successfully."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "A response similar to the following one would appear:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         OrgaNice! Supports the following commands"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Please enter the keywords followed by the information shown in the brackets"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         event \u003cevent details\u003e /d \u003cdate\u003e /s \u003cstart time\u003e /e \u003cend time\u003e /p \u003cpriority of event\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         ------------------------------------------- Create a new event"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         deadline \u003cdeadline details\u003e /d \u003cdate\u003e /t \u003cdue time\u003e /p \u003cpriority of deadline\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         ------------------------------------------- Create a new deadline"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         view -------------------------------------- View existing events"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         priority_view ----------------------------- View existing tasks based on priority"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         countdown --------------------------------- View existing tasks based on days left"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         clear ------------------------------------- Delete all tasks"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         search \u003ckeyword found in task\u003e ------------ View existing task that contains the keyword"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         delete \u003cindex of task\u003e -------------------- Delete the task"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         edit \u003cindex of task\u003e ---------------------- Edit the task"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         done \u003cindex of task\u003e ---------------------- Mark the deadline as done"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         schedule \u003cnumber of task to be scheduled\u003e - Schedule tasks"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         help -------------------------------------- View List Of Commands Supported"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         bye --------------------------------------- Terminate task interface"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         study ------------------------------------- Enter Study Area search interface"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         notes ------------------------------------- Enter Notes"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Notes:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         *All dates should follow YYYY-MM-DD format"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         *All timing should follow 24 hour clock"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"schedule\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.12. Schedule tasks"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If you have a bunch of assignments, projects and exams happening over the next few weeks and are stressed out with "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "planning a schedule which can fulfill the requirements, our schedule task command can help you by creating a feasible "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "schedule. It creates a schedule based on the tasks details provided by you. "
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `schedule \u003cnumber of task to be scheduled\u003e` - Used to schedule a set of tasks specified by the user "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Then a set of lines are displayed which specify the format to be used to specify the new tasks to be scheduled. After you input the relevant data. The application would find a feasible schedule satisfying your constraints, if it is possible to do so. If it is possible, the list of events that were created when the task were scheduled is added to the current list of tasks. If it is impossible, a message to alert the user is specified too."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an invalid command alert would be displayed."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `schedule 3` - Schedule 3 tasks"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Enter tasks in the following format:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         \u003ctask name\u003e /f \u003cTime to finish task in days\u003e /d \u003cNumber of"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         days left from current day to finish it\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Enter details for task 1:"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `math exam /f 2 /d 10` - Details of first task"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t Enter details for task 2:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `physics exam /f 3 /d 7` - Details of second task"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t Enter details for task 3:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `chemistry exam /f 1 /d 4` - Details of third task     "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Details captured successfully."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         chemistry exam is scheduled from 2020-03-27 to"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         2020-03-27"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         physics exam is scheduled from 2020-03-28 to"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         2020-03-30"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         math exam is scheduled from 2020-03-31 to"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         2020-04-01"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Tasks successfully scheduled."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    "
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Future Enhancements"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   The current version of the application doesn\u0027t take into account the other tasks present, however the priority "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "values can still be used to decide the task which is more important. In v3.0 our application will support scheduling tasks "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "while avoiding tasks present previously and also add support for tasks to be scheduled preemptively (i.e, tasks can be "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "scheduled over non contiguous days) ."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "[comment]: # (@@author NizarMohd)     "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003ca name\u003d\"studyArea\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### 3.13 Study Area Search Feature"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "You can search for study areas based on criteria that you desire by using this feature. You are free to loosely search. "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "For example, if you enter as [this](#search-by-name-address-or-faculty), you will receive a list of  places related "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "to the name *Starbucks* as \"bux\" is a common abbreviation used for it."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003ca name\u003d\"enterStudyArea\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "#### 3.13.1 Entering Study Area Search Interface"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "To enter the Study Area search interface, you can enter \u0027study\u0027 in the main interface. You will then be "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "guided to the study area search interface. "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "`study`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Please enter the location for your desired study area."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Enter \"help\" for a list of supported flags. Flags should"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         only come after location, if a criteria for location is"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         entered. When you are done with the search, enter \"bye\"."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003ca name\u003d\"studyAreaSearch\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "#### 3.13.2 Start Search"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "You can start the search by entering the criteria desired. Supported criteria include name, address, faculty,"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "ports availability, environment and size capacity. For  name, address or faculty, you simply have to enter it"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "as a string. For other supported conditions, flags have to be used. "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Below are the supported flags: "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   * -s {size}  : To locate a study area that can facilitate the size of pax entered."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   * -p         : To locate a study area based on the availability of ports."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   * -i         : To locate a study area that are indoors."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   * -o         : To locate a study area that are outdoors."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Note: "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "{name\\address\\faculty} {flags} is the basic format to search for Study Areas. You can enter either argument, or both."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "If both arguments are specified, flags will have to precede either the name,address or faculty."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "#### Search by name, address or faculty "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "`bux`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Here are the available study areas!"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         __________________________________________________________"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Name: Opposite Town Green (Outside Starbucks)"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Address: 2 College Avenue West Education Resource Centre,"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Ground Level"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Faculty: Utown"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Port: true"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Indoor: false"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Maximum number of Pax: 4"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         __________________________________________________________"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         __________________________________________________________"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Name: Starbucks"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Address: 2 College Avenue West Education Resource Centre,"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Ground Level"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Faculty: Utown"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Port: true"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Indoor: true"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Maximum number of Pax: 5"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         __________________________________________________________"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Please enter the location for your desired study area."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "#### Search by name, address or faculty and with flags"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "`bux -o`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Here are the available study areas!"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         __________________________________________________________"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Name: Opposite Town Green (Outside Starbucks)"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Address: 2 College Avenue West Education Resource Centre,"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Ground Level"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Faculty: Utown"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Port: true"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Indoor: false"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Maximum number of Pax: 4"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         __________________________________________________________"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Please enter the location for your desired study area."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "__NOTE__: When using this format, flags must always come after the location, name or address. Else, the system will "
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "return an error message."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### Search by flags only "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage : "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "`-s 6`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Here are the available study areas!"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         __________________________________________________________"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Name: EA Level 4"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Address: 9 Engineering Drive 1,EA, Level 4, Outside Staff"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Offices"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Faculty: Engineering"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Port: true"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Indoor: false"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Maximum number of Pax: 6"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         __________________________________________________________"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "         Please enter the location for your desired study area."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "#### Future Enhancements"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   The current implementation does not include real-time availability of the study areas. In version 3.0 we hope to be"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   able to retrieve real-time availability of public study areas, like the ones in U-Town. In order to do so we would "
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   require access to real-time data like CCTV monitors of the study areas to detect if there is an available seat at "
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   a specific point of time at a specific area."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "[comment]: # (@@author )     "
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003ca name\u003d\"exit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.14. Exit the Application / Study Area interface"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "You use this command to exit the application. Before the actual application is exited the "
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "tasks currently in the list are stored in a file. This command is used for exiting the main interface and the"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "secondary study area search interface."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `bye` - Exit the Application / Study Area interface"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "The command when issued performs an exit."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Upon success a successful message similar to the one in the example would appear and the application would be exited."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "If the wrong format is used an invalid command alert would be displayed."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Depending on the current mode of execution, the application would either be exited successfully or would return to the main interface."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "A response similar to the following one would appear:"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1) If the \u0027bye\u0027 command is given in the main interface"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Goodbye! Hope to see you again!"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ``````````````````````````````````````````````````````````"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ````````````````````````````````:v(v\u0027`````````````````````"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ```````````````````````````,)4|ex` `L}````````````````````"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       `````````````````````````!s\"\u0027h `M:   ^z_;)T```````````````"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       `````````````````````````Z   u|}Z:        \"}``````````````"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ``````````````````````:\u003d?)                \u0027B?L\u0027```````````"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       `````````````````````\u0027Z                    ;Yp\"```````````"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       `````````````````````.e                      ?_```````````"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ```````````````````\u0027QDGH                    .5````````````"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ````````````````````I#g\u0027         \u0027_`        ||````````````"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ```````````:mX_``````YhL`      `\u0027q!`   ?     h````````````"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ```````````\u0027Qbs)|L\u003d_V\" \u0027Y}     ^\u0027q@\u0026b\u003dc\u003d_`  ,Z````````````"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ````````````q\u003e     \u0027T,   ,o\"    ;\"@c.   .sVx~`````````````"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ````````````c!             \"bh` `,p       z:``````````````"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       `````````````q.              ngDQmh8s     X\u0027``````````````"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ``````````````LY\"             :n}\u003e``b;   _V```````````````"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ````````````````q?,                ?;   \"V````````````````"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ``````````````KvR                  \u0027  )x_`````````````````"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ``````````````zjL                  GLY\"```````````````````"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ```````````````M                 .I)``````````````````````"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ```````````````Lz                `D:``````````````````````"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ``````````````vu`    (I)_;\"\".      P.`````````````````````"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ``````````````p     :X.\u0027:^,\"\u003dn    \"q``````````````````````"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       `````````````)0X?^:)I````````m\u0027   :j``````````````````````"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       `````````````.IGD8k\u0027`````````\u003c\u0026G55M```````````````````````"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "       ``````````````````````````````````````````````````````````"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "2) If the \"bye\" command is given during execution of the study area command,"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "           Thank you for using our study area search service!"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "[comment]: # (@@author GanapathySanathBalaji)"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"save-tasks\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.15. Saving the data"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The tasklist is saved automatically before the application is executed. There is no need to save manually."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"clear-old-tasks\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.16. Clearing old tasks"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The tasklist only includes the tasks which have date beyond the current date. This removes the need for you to manually find and delete the old tasks."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"calendar\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.17. Viewing tasks in calendar format [coming in v3.0]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The tasklist only includes the tasks which have date beyond the current date. This removes the need for you to manually find and delete the old tasks."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "[comment]: # (@@author )"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003ca name\u003d\"faq\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    Q: How to transfer the task list data from one computer to an other computer?"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    A: Just copy the \"TaskList.txt\" file which could be found at the same directory"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "       as the jar file and paste it to the location containing the jar file in the other"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "       computer. This should transfer the required data."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "       "
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    Q: The software says that library/TaskList.txt does not exist. What do I do?"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    A: Go to the software\u0027s root folder and check to see if the library folder exist. If so, delete the library folder "
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "       and rerun the software. The software would have created a fresh set of data files required for the system to run."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "       "
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    Q: The software says that library/locations.txt or library/dictionary.txt does not exist. What do I do?"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    A: Go to the software\u0027s root folder and check to see if the library folder exist. Proceed to check if TaskList.txt "
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "       exist. If so, transfer it to a temporary folder. Delete the library folder and rerun the software. Transfer the "
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "       content from the old TaskList.txt to the new TaskList.txt"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\u003ca name\u003d\"command-summary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "[comment]: # (@@author GanapathySanathBalaji)"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### OrgaNice Main Features"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`deadline \u003cdeadline details\u003e /d \u003cdate\u003e /t \u003cdue time\u003e /p \u003cpriority of deadline\u003e` - Adds a new Deadline task to the list of tasks \u003cbr\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`event \u003cevent details\u003e /d \u003cdate\u003e /s \u003cstart time\u003e /e \u003cend time\u003e /p \u003cpriority of event\u003e` - Adds a new Event task to the list of tasks \u003cbr\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`delete \u003cindex number of task\u003e` - Deletes task at specified index \u003cbr\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`done \u003cindex of deadline\u003e` - Mark the deadline at the specified index as done \u003cbr\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`edit \u003cindex number of task\u003e` - Used to edit task at specified index \u003cbr\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`clear` - Clears the list of tasks \u003cbr\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`view` - Displays the current list of tasks \u003cbr\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`priority_view` - Displays the current list of tasks sorted by priority \u003cbr\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`countdown` - Displays the current list in countdown format \u003cbr\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`search \u003ckeyword found in task\u003e` - Lists all matching tasks in the list containing the keyword \u003cbr\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`bye` - Exit the Application / Study Area interface \u003cbr\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`study` - Enter study area search interface \u003cbr\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### Study Area Search Interface"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "`{name\\address\\faculty} {flags}` - Returns a list of Study Areas, if any of the existing data matches the requirement "
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "entered. Click [here](#3132-start-search) for more details on how {name\\address\\faculty} and {flags} should be entered."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003ca name\u003d\"formats\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "## 6. Formats Used"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Time should be in the form of `HH:MM` (24 Hour Format, HH - Hour, MM - Minute) \u003cbr\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Date should be in the form of `YYYY-MM-DD` (YYYY - Year, MM - Month, DD - Day) \u003cbr\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 572,
      "NizarMohd": 221,
      "-": 17
    }
  },
  {
    "path": "docs/team/NizarMohd.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "# Nizar Mohd - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 6
    }
  },
  {
    "path": "docs/team/ganapathysanathbalaji.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "[comment]: # (@@author GanapathySanathBalaji)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cH1\u003e GanapathySanathBalaji - Project Portfolio \u003c/H1\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "# Project: OrgaNice!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "##  Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  OrgaNice! is a command line based application that can help academics with scheduling their tasks and keeping track of them. It also has additonal features such as note taking and finding study areas within NUS, to help academics."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Link : [RepoSense Dashboard](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dganapathysanathbalaji)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### Enhancements implemented:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "* **Major Enhancement:**  added the ability to **auto schedule** tasks based on the user\u0027s requirements"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* What it does: It allows the user to auto generate a schedule based on their requirements and add it to the list of tasks tracked by the application for later usage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Justification: This feature improves the product significantly as a user can now automate the process of schedule creation, which might be hard to do manually for a large number of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Highlights: This feature couldn\u0027t use the task class used to store generic tasks. Also, modifying it to make it suitable for this feature would have complicated our previous code in a lot of places. Hence, implementation was a bit challenging as the new objects created had to be designed to be able to easily interact with pre-existing classes. The implementation of the algorithm was a bit challenging too."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Credits: The EDF (Earliest Deadline First) algorithm was used to implement the task scheduler. The current implementation doesn\u0027t support task pre-emption and hence the tasks are run to completion, before the other tasks get a chance to run."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "* **Major Enhancement:**  added support for prioritized tasks and the ability to view tasks sorted by their priority"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* What it does: It allows user\u0027s to assign priority based on a task\u0027s importance when it is created. To provide flexibility, we allow the user to provide any integer value for the priority field. The user can also view tasks sorted based on their priorities."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Justification: This feature improves the product significantly as a user can now view the important tasks first and finish them before moving on to the less important tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Highlights: Since, this was a feature which was implemented at the very begining, the implementation wasn\u0027t hard. However, this increased the complexity of code written based on this feature."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "* **Minor Enhancement:** added a feature that allows the user to view the list of tasks sorted based on the date\u0027s along with the number of days left."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "* **Minor Enhancement:** added a feature that allows the user to edit the details of various tasks directly which saves the user from manually deleting and adding a new task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "* **Contributions to documentation:**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t*  Documented the majority of the features (3.1 to 3.12, 3.15 to 3.17)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Documented the command summary for the main features of OrgaNice!."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Documented the various formats (for time, date) used for commands (Formats Used section)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "* **Contributions to the DG:**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t*  Documented the architecture section, Task component and made their respective UML diagrams."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Documented the implementation for scheduling tasks, along with one main sequence diagram and three sub diagrams used as reference frames in the main diagram."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Documented a few user stories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "* **Contributions to  team-based tasks :**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Managed the release of v1.0 and v2.0."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Refactored code and created separate parser and command classes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Added user stories to the DG."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Maintained the issue tracker for a significant amount of time and handled all the issues/bugs raised during the PE-Dry run."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "* **Review/mentoring contributions:**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Reviewed the following PR\u0027s: "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t\t[#133](https://github.com/AY1920S2-CS2113T-T12-3/tp/pull/133), [#127](https://github.com/AY1920S2-CS2113T-T12-3/tp/pull/127), [#124](https://github.com/AY1920S2-CS2113T-T12-3/tp/pull/124), [#117](https://github.com/AY1920S2-CS2113T-T12-3/tp/pull/117), [#112](https://github.com/AY1920S2-CS2113T-T12-3/tp/pull/112), [#95](https://github.com/AY1920S2-CS2113T-T12-3/tp/pull/95), [#67](https://github.com/AY1920S2-CS2113T-T12-3/tp/pull/67), [#65](https://github.com/AY1920S2-CS2113T-T12-3/tp/pull/65), [#41](https://github.com/AY1920S2-CS2113T-T12-3/tp/pull/41)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Helped team by changing the runtest.bat and runtest.sh files to decrease the number of steps required to run the tests."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "* **Contributions beyond the project team:**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* I posted one response to [Issue#21](https://github.com/nus-cs2113-AY1920S2/forum/issues/21) on the main forum."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t* Reported 19 bugs during the [PE Dry Run](https://github.com/GanapathySanathBalaji/ped/issues)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "* **Contributions to the User Guide (Extracts)**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t\tThe sections I contributed to in the user guide are as follows."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t    Due to recommended page limit not all sections contributed by "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t    me have been shown below."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t    They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.12. Schedule tasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If you have a bunch of assignments, projects and exams happening over the next few weeks and are stressed out with "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "planning a schedule which can fulfill the requirements, our schedule task command can help you by creating a feasible "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "schedule. It creates a schedule based on the tasks details provided by you. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `schedule \u003cnumber of task to be scheduled\u003e` - Used to schedule a set of tasks specified by the user "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Then a set of lines are displayed which specify the format to be used to specify the new tasks to be scheduled. After you input the relevant data. The application would find a feasible schedule satisfying your constraints, if it is possible to do so. If it is possible, the list of events that were created when the task were scheduled is added to the current list of tasks. If it is impossible, a message to alert the user is specified too."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "If the wrong format is used an invalid command alert would be displayed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `schedule 3` - Schedule 3 tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Enter tasks in the following format:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         \u003ctask name\u003e /f \u003cTime to finish task in days\u003e /d \u003cNumber of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         days left from current day to finish it\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Enter details for task 1:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `math exam /f 2 /d 10` - Details of first task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t Enter details for task 2:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `physics exam /f 3 /d 7` - Details of second task"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t Enter details for task 3:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### `chemistry exam /f 1 /d 4` - Details of third task     "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Details captured successfully."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         chemistry exam is scheduled from 2020-03-27 to"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         2020-03-27"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         physics exam is scheduled from 2020-03-28 to"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         2020-03-30"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         math exam is scheduled from 2020-03-31 to"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         2020-04-01"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "         Tasks successfully scheduled."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    ________________________________________________________________________________________________"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### Future Enhancements"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   The current version of the application doesn\u0027t take into account the other tasks present, however the priority "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "values can still be used to decide the task which is more important. In v3.0 our application will support scheduling tasks "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "while avoiding tasks present previously and also add support for tasks to be scheduled preemptively (i.e, tasks can be "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "scheduled over non contiguous days) ."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "## 6. Formats Used"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Time should be in the form of `HH:MM` (24 Hour Format, HH - Hour, MM - Minute) \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Date should be in the form of `YYYY-MM-DD` (YYYY - Year, MM - Month, DD - Day) \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "**Contributions to the Developer Guide (Extracts)**:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        I contributed to the following sections in the Developer Guide."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Due to recommended page limit not all sections contributed by "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        me have been shown below."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        They showcase my ability to write technical documentation and"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 2.1. Architecture  "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "![Architecture](../images/Architecture.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cdiv\u003eFigure 1. Overall Architecture of OrgaNice!\u003c/div\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Duke - Main component which controls the flow of execution."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Ui - Component used to get input from the user and display results on the monitor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Parser - Component used to abstract out the command based on user\u0027s input, so that the command can be executed later."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Command - Component contains information and implementation on how to execute various types of commands."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Task - Component contains details about handling the task list and related operations."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. StudyArea - Component contains details about handling queries for study area search."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Notes - Component contains details about Notes related operations."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. Exception - Component contains the various types of exceptions encountered when OrgaNice! is run."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1. ResourceLoader - Component handles loading and saving of the task list and study area details to local storage."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 2.2. Task Component  "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "[comment]: # (@@author GanapathySanathBalaji)  "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The Task component depends on 3 other components,   "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 1. Command Component - The Command component issues instructions for the Task component to execute based on the user\u0027s input.  "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 2. UI Component - The UI component is used to display the results (and related exceptions) of the commands issued to the Task Component. "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 3. ResourceLoader Component - The ResourceLoader component is used to load the list of tasks stored previously when the application is started and is also used to store the current list of tasks to the local storage upon exit.   "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "![Task Component](../images/TaskComponentUML.png)   "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cdiv\u003eFigure 2. Object Diagram for Task Component\u003c/div\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "The task component contains 8 separate classes. They are as follows:  "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  1. Task : Abstract class used to model a generic task. "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  2. Event : Specialized task class used to model events.  "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  3. Deadline : Specialized task class used to model a deadline.   "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  4. TaskType : Enumeration class used to denote the various task types.   "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  5. TaskList : Container class used to store list of tasks and handle related operations. "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  6. SchedulableTask : Class used to model a task which is scheduled based on user\u0027s requirements.  "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  7. TaskComparator : Contains a custom comparator used to compare two schedulable tasks based on their "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  numberOfDaysLeft attribute.  "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "  8.  TaskScheduler : Class used to check for feasibility and schedule a list of tasks based on user\u0027s requirements."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "### 3.1. Scheduling Tasks "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### 3.1.1 Implementation "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   Inorder to schedule tasks based on the user\u0027s requirement a separate SchedulableTask class was created. "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 1. The user\u0027s requirements (Name, Time to complete it, Deadline) are captured for each of the tasks to be scheduled. "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 1. The requirements captured are stored in the SchedulableTask object. "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 1. Then, the TaskScheduler object finds the optimum schedule based on the user\u0027s requirements using the EDF "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " (Early Deadline First) algorithm."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " 1. If a feasible schedule is found it is "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " displayed, else a message stating that a schedule based on the user\u0027s requirements can\u0027t be made is displayed."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "   The following sequence diagrams explain how tasks are scheduled."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\t"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " ![Overall Sequence Diagram](../images/ScheduleOverall.png)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cdiv\u003eFigure 5. Overall Sequence Diagram\u003c/div\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " The three reference frames used are as follows:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * `Get information regarding the tasks from the user`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " ![Sub Diagram 1](../images/ScheduleSub1.png)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " \u003cdiv\u003eFigure 6. Sub Diagram 1\u003c/div\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " \u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * `Check and Schedule tasks if feasible`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " ![Sub Diagram 2](../images/ScheduleSub2.png)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " \u003cdiv\u003eFigure 7. Sub Diagram 2\u003c/div\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " \u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * `Add the scheduled tasks to current list of tasks`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " ![Sub Diagram 3](../images/ScheduleSub3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " \u003cdiv\u003eFigure 8. Sub Diagram 3\u003c/div\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " \u003cbr\u003e "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "#### 3.1.2 Alternatives"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "Aspect : How to capture user\u0027s requirements and handle it."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " - Alternative 1 (Current Choice) : Create a separate SchedulableTask object to store user\u0027s requirements for each task "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                                    to be scheduled."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      - Pros : New class object can be customised without affecting core functionality of the product if the attributes provided by "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      the user (to tasks to be scheduled) changes."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      - Cons : New methods similar to previously implemented methods have to be created instead of being reused."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " - Alternative 2 : Modify existing event or deadline class to model user\u0027s requirements."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      - Pros : It reuses methods and reduces coupling between classes in the TaskComponent."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "      - Cons : Major changes would be required throughout various components of the application to accommodate the new feature. "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     Finally the first alternative was implemented as it was easier to implement and maintain it if changes were required to "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "the user\u0027s requirements (e.g. Changes to the number of parameters provided by the user)."
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 242
    }
  },
  {
    "path": "docs/team/terrytay.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "terrytay": 1
    }
  },
  {
    "path": "src/main/java/calendarview/CalendarView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package calendarview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CalendarException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.BACK_IN_MAIN_INTERFACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.COL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.COMMA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.DAYS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.DEC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.DIVIDER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.ENTER_DESIRED_MONTH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.INVALID_MONTH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.INVALID_MONTH_RANGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.INVALID_YEAR;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.JAN;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MAP_CANNOT_BE_EMPTY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MAX_COL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MAX_LIST_SIZE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MAX_ROW;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MULTIPLE_WHITE_SPACES;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NON_INTEGER_YEAR;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NOW;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.ONLY_MONTH_AND_YEAR;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.PADDING;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.PADDING1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.PADDING2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.PADDING3;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.SPACE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.SPACES;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.TASKS_FOR;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "//@@author NizarMohd"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class deals with converting Tasks into Calendar view."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class CalendarView {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private HashMap\u003cInteger, LinkedList\u003cTask\u003e\u003e map;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static boolean exit \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private  LocalDate firstDay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static int month \u003d -1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static int year \u003d -1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private  int lastDay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private  int[] daysOfMonths \u003d new int[35];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructs the class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param inUi allows for interaction with the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public CalendarView(Ui inUi) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui \u003d inUi;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        getInput();                                     // year and month will be set if user enters correctly."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (year !\u003d -1 \u0026\u0026 month !\u003d -1) {       // check if year and month is set"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.setFirstDay();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.setLastDay();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            processDates();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This sets the mapping between days to Tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param inMap this is the incoming created by CalendarCommand."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void setMap(HashMap\u003cInteger, LinkedList\u003cTask\u003e\u003e inMap) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.map \u003d inMap;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method sets the first day val. This prevent double error messages when user enters invalid command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private void setFirstDay() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.firstDay \u003d YearMonth.of(year, month).atDay(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method sets the last day val. This prevent double error messages when user enters invalid command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private void setLastDay() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.lastDay \u003d this.firstDay.getMonth().length(this.firstDay.isLeapYear());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This print the days header."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printDays() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printOut(DIVIDER, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_COL; i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printOut(COL + DAYS[i] + PADDING1, false);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printOut(COL, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printOut(DIVIDER, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This process the dates of the month into its supposed box."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void processDates() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        int index \u003d this.firstDay.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        index \u003d index % MAX_COL;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d this.lastDay; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (index \u003e\u003d 35) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                index \u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.daysOfMonths[index] \u003d i;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private LinkedList\u003cTask\u003e processList(int day) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        LinkedList\u003cTask\u003e tasks \u003d this.map.get(day);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (tasks.size() \u003e MAX_LIST_SIZE) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            LinkedList\u003cTask\u003e temp \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (int i \u003d 0; i \u003c MAX_LIST_SIZE; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                temp.add(tasks.get(i));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.map.get(day).clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.map.get(day).addAll(temp);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assert this.map.get(day) !\u003d null : MAP_CANNOT_BE_EMPTY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.map.get(day);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This prints the content to be displayed in the box."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param row this is the row the box is at."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param i this is the height of the box that is currently being printed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param j this is the day which the box is at."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printContent(int row, int i, int j) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        int index \u003d row * MAX_COL + j;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        int day \u003d daysOfMonths[index];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (this.daysOfMonths[index] \u003d\u003d 0) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printOut(COL + SPACES + PADDING, false);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else if (this.daysOfMonths[index] \u003e 9) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printOut(COL + SPACES + PADDING3 + this.daysOfMonths[index], false);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printOut(COL + SPACES + PADDING2 + this.daysOfMonths[index], false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (map.containsKey(day)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (map.get(day).isEmpty()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printOut(COL + SPACES + PADDING, false);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    LinkedList\u003cTask\u003e tasks \u003d processList(day);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    Task task \u003d tasks.get(0);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    tasks.removeFirst();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printOut(COL + SPACE + task.getCalendarTaskDetails() + SPACE, false);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printOut(COL + SPACES + PADDING, false);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method prints the box itself."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param row this is the row that the box is currently being printed."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printBox(int row) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_ROW; i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (int j \u003d 0; j \u003c MAX_COL; j++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                printContent(row, i, j);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printOut(COL, true);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printOut(DIVIDER, true);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This prints the month which the calendar is being printed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printCurrentMonth() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printOut(TASKS_FOR + this.firstDay.getMonth().toString() + COMMA +  this.firstDay.getYear(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This checks if the month entered by user is correct."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param in this is the input by user."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws CalendarException this is the exception thrown when user entered the month wrongly."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void setMonth(String in) throws CalendarException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            int inMonth \u003d Integer.parseInt(in);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (inMonth \u003c JAN || inMonth \u003e DEC) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new CalendarException(INVALID_MONTH_RANGE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            month \u003d inMonth;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new CalendarException(INVALID_MONTH);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks the year entered by the user."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param in This is the input entered by the user."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws CalendarException is thrown when user enters the year wrongly."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void setYear(String in) throws CalendarException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            int inYear \u003d Integer.parseInt(in);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            int thisYear \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (inYear \u003c thisYear) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new CalendarException(INVALID_YEAR);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            year \u003d inYear;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new CalendarException(NON_INTEGER_YEAR);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks if the input length is 2, else it will throw an exception."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param input this is the input entered by the user."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws CalendarException if user enters input of length more than 2."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void checkInputLength(String[] input) throws CalendarException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (input.length !\u003d 2) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new CalendarException(ONLY_MONTH_AND_YEAR);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method will validate month and year input sequentially and prints an error message based on the combination"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * of wrong input pattern."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param input this is the input entered by the user for the month and year."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return a string of error message, if user enters input wrongly, else return null."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static String setMonthAndYear(String[] input) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringBuilder errMessage \u003d null;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {                               // try setting month"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            setMonth(input[0]);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (CalendarException e) {         // if error, catch the message"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            errMessage \u003d new StringBuilder(e.getMessage());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {                                    // try setting year"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            setYear(input[1]);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (CalendarException e1) {        // if error, catch message also."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (errMessage !\u003d null) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                errMessage.append(\" Also, \").append(e1.getMessage());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                errMessage \u003d new StringBuilder(e1.getMessage());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (errMessage !\u003d null) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return errMessage.toString();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method gets the input from the user."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void getInput() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(ENTER_DESIRED_MONTH);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean isWrongCommand \u003d true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (isWrongCommand) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String temp \u003d ui.getUserIn().toLowerCase();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String[] input \u003d temp.split(MULTIPLE_WHITE_SPACES);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (input[0].equals(NOW)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                month \u003d LocalDate.now().getMonthValue();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                year \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isWrongCommand \u003d false;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else if (input[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                exit \u003d true;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isWrongCommand \u003d false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    checkInputLength(input);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    String errMessage \u003d setMonthAndYear(input);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if (errMessage \u003d\u003d null) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        isWrongCommand \u003d false;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        ui.printMessage(errMessage);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method prints the calendar."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printCalendar() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (exit) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(BACK_IN_MAIN_INTERFACE);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        printCurrentMonth();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        printDays();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_ROW; i++) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            printBox(i);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 316,
      "GanapathySanathBalaji": 2
    }
  },
  {
    "path": "src/main/java/calendarview/TaskComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package calendarview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This comparator class allows for the priority queue to sort the tasks by its priority."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class TaskComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public int compare(Task task, Task t1) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (task.getPriority() \u003c t1.getPriority()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else if (task.getPriority() \u003d\u003d t1.getPriority()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 19
    }
  },
  {
    "path": "src/main/java/command/AddDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.DeadlineCreationDueTimeMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.DeadlineCreationFormatNotFollowedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.DeadlineDetailsNotProvidedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskCreationDateMissingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskCreationDescriptionMissingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskCreationPriorityMissingException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static command.AddEventCommand.DATE_BEFORE_CURRENT_DATE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * This command is used to add new deadlines to the TaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String SLASH_SYMBOL \u003d \"/\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** The new event to be added. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    Deadline newDeadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the AddCommand Object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Abstracts out the details from the user input and uses it to create a new deadline object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param deadlineDetails The array contains the information regarding the new deadline to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the wrong format is used to create an event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public AddDeadlineCommand(String[] deadlineDetails, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new DeadlineDetailsNotProvidedException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] details \u003d deadlineDetails[1].split(SLASH_SYMBOL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        isCorrectFormat(details);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String description \u003d details[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String date \u003d details[1].substring(2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String dueTime \u003d details[2].substring(2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String priority \u003d details[3].substring(2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        newDeadline \u003d  new Deadline(description, date, dueTime, priority, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assert !newDeadline.getDate().isBefore(LocalDate.now()) : DATE_BEFORE_CURRENT_DATE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the correct format is used to create a deadline, if not an exception is thrown."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param details Details entered by user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If any of the fields are missing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void isCorrectFormat(String[] details) throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (details.length !\u003d 4) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new DeadlineCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String description \u003d details[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            checkDescription(description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String date \u003d details[1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            checkDate(date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String dueTime \u003d details[2];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            checkDueTime(dueTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String priority \u003d details[3];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            checkPriority(priority);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (details[0].isBlank()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new TaskCreationDescriptionMissingException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (details[1].substring(2).isBlank()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new TaskCreationDateMissingException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (details[2].substring(2).isBlank()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new DeadlineCreationDueTimeMissingException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (details[3].substring(2).isBlank()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new TaskCreationPriorityMissingException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new DeadlineCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the description is provided in the correct format, throws an exception if wrong format is used."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param description String entered by user for description."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void checkDescription(String description) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new TaskCreationDescriptionMissingException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the date is provided in the correct format, throws an exception if wrong format is used."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param date String entered by user for date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void checkDate(String date) throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (date.charAt(0) !\u003d \u0027d\u0027 || date.charAt(1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new DeadlineCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (date.substring(2).isBlank()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new TaskCreationDateMissingException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the priority is provided in the correct format, throws an exception if wrong format is used."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority String entered by user for priority."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void checkPriority(String priority) throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (priority.charAt(0) !\u003d \u0027p\u0027 || priority.charAt(1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new DeadlineCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (priority.substring(2).isBlank()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new TaskCreationPriorityMissingException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the due time is provided in the correct format, throws an exception if wrong format is used."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param dueTime String entered by user for due time."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void checkDueTime(String dueTime) throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (dueTime.charAt(0) !\u003d \u0027t\u0027 || dueTime.charAt(1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new DeadlineCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (dueTime.substring(2).isBlank()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new DeadlineCreationDueTimeMissingException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui)   {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.addTask(newDeadline, ui);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 146,
      "NizarMohd": 2
    }
  },
  {
    "path": "src/main/java/command/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.EventCreationEndTimeMissingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.EventCreationFormatNotFollowedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.EventCreationStartTimeMissingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.EventDetailsNotProvidedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskCreationDateMissingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskCreationDescriptionMissingException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskCreationPriorityMissingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * This command is used to add new events to the TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String START_TIME_AFTER_END_TIME_ERROR_MESSAGE \u003d \"Start time after end time exception \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \"not thrown\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DATE_BEFORE_CURRENT_DATE_ERROR_MESSAGE \u003d \"Date past current day exception not thrown\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String SLASH_SYMBOL \u003d \"/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** The new event to be added. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    Event newEvent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the AddCommand Object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Abstracts out the details from the user input and uses it to create a new event object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param eventDetails The array contains the information regarding the new event to be added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the wrong format is used to create an event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public AddEventCommand(String[] eventDetails, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventDetailsNotProvidedException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] details \u003d eventDetails[1].split(SLASH_SYMBOL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        isCorrectFormat(details);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String description \u003d details[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String date \u003d details[1].substring(2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String startTime \u003d details[2].substring(2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String endTime \u003d details[3].substring(2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String priority \u003d details[4].substring(2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        newEvent \u003d  new Event(description,date,startTime,endTime,priority);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assert !newEvent.getStartTime().isAfter(newEvent.getEndTime()) : START_TIME_AFTER_END_TIME_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assert !newEvent.getDate().isBefore(LocalDate.now()) : DATE_BEFORE_CURRENT_DATE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the correct format is used to create an event, if not an exception is thrown."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param details Details entered by user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If any of the fields are missing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void isCorrectFormat(String[] details) throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (details.length !\u003d 5) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String description \u003d details[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            checkDescription(description);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String date \u003d details[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            checkDate(date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String startTime \u003d details[2];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            checkStartTime(startTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String endTime \u003d details[3];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            checkEndTime(endTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String priority \u003d details[4];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            checkPriority(priority);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the priority is provided in the correct format, throws an exception if wrong format is used."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority String entered by user for priority."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void checkPriority(String priority) throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (priority.charAt(0) !\u003d \u0027p\u0027 || priority.charAt(1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (priority.substring(2).isBlank()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new TaskCreationPriorityMissingException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the end time is provided in the correct format, throws an exception if wrong format is used."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param endTime String entered by user for end time."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void checkEndTime(String endTime) throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (endTime.charAt(0) !\u003d \u0027e\u0027 || endTime.charAt(1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (endTime.substring(2).isBlank()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventCreationEndTimeMissingException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the start time is provided in the correct format, throws an exception if wrong format is used."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param startTime String entered by user for start time."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void checkStartTime(String startTime) throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (startTime.charAt(0) !\u003d \u0027s\u0027 || startTime.charAt(1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (startTime.substring(2).isBlank()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventCreationStartTimeMissingException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the date is provided in the correct format, throws an exception if wrong format is used."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param date String entered by user for date."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void checkDate(String date) throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (date.charAt(0) !\u003d \u0027d\u0027 || date.charAt(1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (date.substring(2).isBlank()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new TaskCreationDateMissingException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the description is provided in the correct format, throws an exception if wrong format is used."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param description String entered by user for description."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void checkDescription(String description) throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new TaskCreationDescriptionMissingException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui)  {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.addTask(newEvent, ui);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 3,
      "GanapathySanathBalaji": 152,
      "NizarMohd": 2
    }
  },
  {
    "path": "src/main/java/command/CalendarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import calendarview.CalendarView;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import calendarview.TaskComparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.MisuseOfCalendarCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "//@@author NizarMohd"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class deals with the command used for Calendar View."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructs the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param isOneWordCommand checks to see if the user entered the command correctly."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws Exception is thrown if the user entered the command wrongly."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public CalendarCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new MisuseOfCalendarCommandException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method retrieves the mapping between the days to the current tasks for that month."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param tasks this is the list of tasks in taskList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param c this is the calendarView class that was instantiated to convert the tasks into calendar view."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return a hashMap that maps the days to its designated tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static HashMap\u003cInteger, LinkedList\u003cTask\u003e\u003e checkExistingTasks(ArrayList\u003cTask\u003e tasks, CalendarView c) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        HashMap\u003cInteger, LinkedList\u003cTask\u003e\u003e dayToTaskHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            LocalDate date \u003d task.getDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (date.getMonthValue() \u003d\u003d c.month \u0026\u0026 date.getYear() \u003d\u003d c.year) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                int day \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                dayToTaskHashMap.computeIfAbsent(day, k -\u003e new LinkedList\u003cTask\u003e());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                dayToTaskHashMap.get(day).add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                dayToTaskHashMap.get(day).sort(new TaskComparator());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return dayToTaskHashMap;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        CalendarView c \u003d new CalendarView(ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        HashMap\u003cInteger, LinkedList\u003cTask\u003e\u003e map \u003d checkExistingTasks(taskList.tasks, c);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        c.setMap(map);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        c.printCalendar();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 59,
      "GanapathySanathBalaji": 3
    }
  },
  {
    "path": "src/main/java/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.MisuseOfClearCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * This command is used to clear all the tasks in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the ClearCommand Object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the user given input follows the correct format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public ClearCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new MisuseOfClearCommandException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.clearTasks(ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 4,
      "GanapathySanathBalaji": 25,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Object represents a command and contains all the required information and implementation to execute it."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Executes the command based on the information provided by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param taskList Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This handles the interaction with Users."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If issues are found during execution of command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract void executeCommand(TaskList taskList, Ui ui) throws Exception;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 4,
      "GanapathySanathBalaji": 17
    }
  },
  {
    "path": "src/main/java/command/CommandWithIndex.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import exception.command.IndexNotIntegerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import exception.command.MissingIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class CommandWithIndex extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /** Denotes the index at which the executeCommand method will operate at. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Constructor for commands with index, or CommandWithIndex object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Creates a new CommandWithIndex object if the correct command is used."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commandSplit Contains information with regards to the index to be operated at."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws Exception If the index specified is invalid/ The wrong format is used for the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public CommandWithIndex(String[] commandSplit, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String errorMessage \u003d getErrorMessage(commandSplit[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new MissingIndexException(errorMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            setIndex(Integer.parseInt(commandSplit[1]));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IndexNotIntegerException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method gets the index where the process should be executed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return integer value, which denotes the index mentioned above."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static int getIndex() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method sets the value of the index attribute in CommandWithIndex object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param index this is the value of the index that constructor will set."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void setIndex(int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        CommandWithIndex.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method assigns the error message based on command used."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commandType this is the type of command entered by user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String value of the error message depending on command type."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getErrorMessage(String commandType) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return \"Index to delete not mentioned\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case \"edit\" :"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return \"Index to edit not mentioned\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case \"done\" :"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return \"Index to be marked as done not mentioned\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 73
    }
  },
  {
    "path": "src/main/java/command/CountdownCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.MisuseOfCountdownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Displays the list of tasks added so far in increasing order of their dates."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class CountdownCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the CountdownCommand Object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public CountdownCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new MisuseOfCountdownCommandException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.countdownView(ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 4,
      "GanapathySanathBalaji": 25,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/CreateScheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.MisuseOfScheduleCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.NumberOfTasksToBeScheduledNotAnIntegerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.NumberOfTasksToBeScheduledNotPositiveException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskScheduler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * This command is used to create schedule based on user input if its feasible."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class CreateScheduleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    TaskScheduler taskScheduler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the CreateScheduleCommand Object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Checks if the user given input follows the correct format and creates a new object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param commandSplit Contains the information regarding the number of tasks to be scheduled."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public CreateScheduleCommand(boolean isOneWordCommand, String[] commandSplit) throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new MisuseOfScheduleCommandException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            int numberOfTasksToSchedule \u003d Integer.parseInt(commandSplit[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (numberOfTasksToSchedule \u003c\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new NumberOfTasksToBeScheduledNotPositiveException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            taskScheduler \u003d new TaskScheduler(numberOfTasksToSchedule);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new NumberOfTasksToBeScheduledNotAnIntegerException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskScheduler.getTasks(ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (taskScheduler.scheduleTasks(ui)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(\"Tasks successfully scheduled.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            taskScheduler.addScheduleToList(taskList, ui);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(\"Tasks couldn\u0027t be scheduled.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 53
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Command is used to delete a task at a specific index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class DeleteCommand extends CommandWithIndex {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for DeleteCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new DeleteCommand object if the correct command is used."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param commandSplit     Contains information with regards to the index to be operated at."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the index specified is invalid/ The wrong format is used for the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public DeleteCommand(String[] commandSplit, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.deleteTask(getIndex(), ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 3,
      "GanapathySanathBalaji": 24,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "//@@ author NizarMohd"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class executes the done command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class DoneCommand extends CommandWithIndex {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Constructor for DoneCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Creates a new DoneCommand object if the correct command is used."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commandSplit     Contains information with regards to the index to be operated at."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws Exception If the index specified is invalid/ The wrong format is used for the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public DoneCommand(String[] commandSplit, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        taskList.marksAsDone(getIndex(), ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 28
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Command is used to delete a task at a specific index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EditCommand extends CommandWithIndex {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for commands with EditCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new EditCommand object if the correct command is used."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param commandSplit     Contains information with regards to the index to be operated at."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the index specified is invalid/ The wrong format is used for the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EditCommand(String[] commandSplit, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.editTask(getIndex(), ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 28
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Command is used to print the list of commands supported."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the HelpCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public HelpCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new InvalidHelpCommandException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printHelp(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 3,
      "GanapathySanathBalaji": 26,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/PriorityViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.MisuseOfPriorityCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Displays the list of tasks added so far in decreasing order of their priority."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class PriorityViewCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the PriorityViewCommand Object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public PriorityViewCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new MisuseOfPriorityCommandException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.priorityView(ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 4,
      "GanapathySanathBalaji": 26,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.SearchMissingTermsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Command used to perform a search of tasks whose description contain the keyword mentioned."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** The word to be searched for. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for SearchCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param commandSplit Contains the keyword to be searched for."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public SearchCommand(String[] commandSplit, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new SearchMissingTermsException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.keyword \u003d commandSplit[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.searchTasks(keyword, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 4,
      "GanapathySanathBalaji": 31,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/StudyAreaCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import exception.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import studyarea.StudyAreaList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.AVAILABLE_STUDY_AREAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.BYE_COMMAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.EMPTY_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.EMPTY_LOCATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.END_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_COMMAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.PROMPT_USER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.SHORT_DESCRIPTION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.START_STUDY_AREA_SEARCH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "//@@author NizarMohd"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the StudyAreaCommand class. It executes the StudyArea Search function and interact with Users accordingly."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class StudyAreaCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * List out all the StudyAreas that match with User\u0027s preference."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for StudyAreaCommand to interact with Users."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param availStudyAreas this is the list of all study areas in location.txt."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void printList(ArrayList\u003cStudyArea\u003e availStudyAreas, Ui ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (availStudyAreas.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(EMPTY_LIST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(AVAILABLE_STUDY_AREAS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (StudyArea studyArea : availStudyAreas) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printStudyArea(studyArea);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks if command is empty or short. It also trims the command and returns the trimmed command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param command This is the command entered by User."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String which is the trimmed version of the user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException when user enters a blank string or string of size 1."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static String validateCommand(String command) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (command.isBlank()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(EMPTY_LOCATION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else if (command.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(SHORT_DESCRIPTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Filters command based on User Input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param command This is the command entered by User."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for StudyAreaCommand to interact with Users."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param studyAreaList This contains all existing study areas."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return boolean status. False if User enters \"end\" , else will always return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if User enters invalid commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static boolean filterCommand(String command,StudyAreaList studyAreaList, Ui ui) throws"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            IllegalStudyAreaException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        command \u003d validateCommand(command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case BYE_COMMAND:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(END_MESSAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case HELP_COMMAND:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printStudyAreaHelp();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ArrayList\u003cStudyArea\u003e availStudyAreas \u003d studyAreaList.searchList(command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                printList(availStudyAreas, ui);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(PROMPT_USER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } catch (IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Executes the StudyArea search feature."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param studyAreaList This contains the list of all existing study area."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for StudyAreaCommand to interact with Users."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void executeStudyCommand(StudyAreaList studyAreaList, Ui ui)  {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(START_STUDY_AREA_SEARCH);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean status \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (status) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String command \u003d ui.getUserIn().toLowerCase();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                status \u003d filterCommand(command, studyAreaList,  ui);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } catch (IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 3,
      "NizarMohd": 114
    }
  },
  {
    "path": "src/main/java/command/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.MisuseOfViewCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Displays the list of tasks added so far."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the ViewCommand Object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public ViewCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new MisuseOfViewCommandException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.listTasks(ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 4,
      "GanapathySanathBalaji": 25,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/studyarea/StudyAreaCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package command.studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import exception.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyAreaList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.AVAILABLE_STUDY_AREAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.BYE_COMMAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.EMPTY_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.EMPTY_LOCATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.END_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_COMMAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.PROMPT_USER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.SHORT_DESCRIPTION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.START_STUDY_AREA_SEARCH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "//@@author NizarMohd"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the StudyAreaCommand class. It executes the StudyArea Search function and interact with Users accordingly."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class StudyAreaCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * List out all the StudyAreas that match with User\u0027s preference."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for StudyAreaCommand to interact with Users."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param availStudyAreas this is the list of all study areas in location.txt."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void printList(ArrayList\u003cStudyArea\u003e availStudyAreas, Ui ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (availStudyAreas.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(EMPTY_LIST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(AVAILABLE_STUDY_AREAS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (StudyArea studyArea : availStudyAreas) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printStudyArea(studyArea);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks if command is empty or short. It also trims the command and returns the trimmed command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param command This is the command entered by User."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String which is the trimmed version of the user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException when user enters a blank string or string of size 1."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static String validateCommand(String command) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (command.isBlank()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(EMPTY_LOCATION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else if (command.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(SHORT_DESCRIPTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Filters command based on User Input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param command This is the command entered by User."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for StudyAreaCommand to interact with Users."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param studyAreaList This contains all existing study areas."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return boolean status. False if User enters \"end\" , else will always return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if User enters invalid commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static boolean filterCommand(String command,StudyAreaList studyAreaList, Ui ui) throws"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            IllegalStudyAreaException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        command \u003d validateCommand(command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case BYE_COMMAND:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(END_MESSAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case HELP_COMMAND:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printStudyAreaHelp();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ArrayList\u003cStudyArea\u003e availStudyAreas \u003d studyAreaList.searchList(command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                printList(availStudyAreas, ui);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(PROMPT_USER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } catch (IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Executes the StudyArea search feature."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param studyAreaList This contains the list of all existing study area."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for StudyAreaCommand to interact with Users."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void executeStudyCommand(StudyAreaList studyAreaList, Ui ui)  {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(START_STUDY_AREA_SEARCH);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean status \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (status) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String command \u003d ui.getUserIn().toLowerCase();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                status \u003d filterCommand(command, studyAreaList,  ui);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } catch (IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 117
    }
  },
  {
    "path": "src/main/java/exception/CalendarException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "//@@author NizarMohd"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the exception for when the user enters commands illegally when viewing the calendar."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class CalendarException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public CalendarException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 12
    }
  },
  {
    "path": "src/main/java/exception/CustomException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public abstract class CustomException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public CustomException(String errorMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 8
    }
  },
  {
    "path": "src/main/java/exception/IllegalStudyAreaException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "//@@author NizarMohd"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is an extension of the Exception class that exist only for StudyArea related modules."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class IllegalStudyAreaException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public IllegalStudyAreaException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 13
    }
  },
  {
    "path": "src/main/java/exception/MisuseOfCalendarCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "//@@author NizarMohd"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This exception handles with when the user enters the calendar command wrongly."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class MisuseOfCalendarCommandException extends CustomException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public MisuseOfCalendarCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(\"Wrong command used for calendar command. (Should be :calendar )\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 2,
      "NizarMohd": 9
    }
  },
  {
    "path": "src/main/java/exception/NotesCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class NotesCommandException extends CustomException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public NotesCommandException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(\"Please enter a valid command. e.g. To add a module, enter \\\"add [modulename]\\\"\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 7
    }
  },
  {
    "path": "src/main/java/exception/NotesInvalidAddMessageException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class NotesInvalidAddMessageException extends CustomException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public NotesInvalidAddMessageException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(\"Please specify a message to add i.e. add [message here]\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 7
    }
  },
  {
    "path": "src/main/java/exception/command/DeadlineCompletionStatusNotABooleanException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class DeadlineCompletionStatusNotABooleanException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public DeadlineCompletionStatusNotABooleanException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Completion status should be a boolean value from the following list\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + \" [{True,TRUE,true},{False,FALSE,false}]\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 11
    }
  },
  {
    "path": "src/main/java/exception/command/DeadlineCreationDueTimeMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class DeadlineCreationDueTimeMissingException extends CustomException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public DeadlineCreationDueTimeMissingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Due time entered is empty, Please provide a valid due time\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 11
    }
  },
  {
    "path": "src/main/java/exception/command/DeadlineCreationFormatNotFollowedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_5;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class DeadlineCreationFormatNotFollowedException extends CustomException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public DeadlineCreationFormatNotFollowedException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Please follow the correct format to add a new deadline\" + System.lineSeparator() + HELP_DESCRIPTION_5);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 9,
      "NizarMohd": 3
    }
  },
  {
    "path": "src/main/java/exception/command/DeadlineDetailsNotProvidedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class DeadlineDetailsNotProvidedException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public DeadlineDetailsNotProvidedException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Deadline details are not provided\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/DescriptionContainsInvalidCharacterException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class DescriptionContainsInvalidCharacterException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public DescriptionContainsInvalidCharacterException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Description shouldn\u0027t contain \u0027/\u0027 and \u0027#\u0027 characters\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/EmptyDescriptionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EmptyDescriptionException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EmptyDescriptionException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Description shouldn\u0027t be empty\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/EventCreationEndTimeMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EventCreationEndTimeMissingException extends CustomException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventCreationEndTimeMissingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"End time entered is empty, Please provide a valid end time\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 11
    }
  },
  {
    "path": "src/main/java/exception/command/EventCreationFormatNotFollowedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_3;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EventCreationFormatNotFollowedException extends CustomException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventCreationFormatNotFollowedException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Please follow the correct format to add a new event\" + System.lineSeparator() + HELP_DESCRIPTION_3);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10,
      "NizarMohd": 2
    }
  },
  {
    "path": "src/main/java/exception/command/EventCreationStartTimeMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EventCreationStartTimeMissingException extends CustomException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventCreationStartTimeMissingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Start time entered is empty, Please provide a valid start time\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 11
    }
  },
  {
    "path": "src/main/java/exception/command/EventDetailsNotProvidedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EventDetailsNotProvidedException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventDetailsNotProvidedException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Event details are not provided\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 4,
      "GanapathySanathBalaji": 6
    }
  },
  {
    "path": "src/main/java/exception/command/EventStartTimeAfterEndTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EventStartTimeAfterEndTimeException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventStartTimeAfterEndTimeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Start time should be before End time\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/IllegalDoneCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class IllegalDoneCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public IllegalDoneCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 7
    }
  },
  {
    "path": "src/main/java/exception/command/IndexNotIntegerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class IndexNotIntegerException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public IndexNotIntegerException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Enter a valid integer index (1-based) to delete/edit/done the corresponding event \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + \"(format: delete/edit/done index)\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 4,
      "GanapathySanathBalaji": 7
    }
  },
  {
    "path": "src/main/java/exception/command/InvalidDateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class InvalidDateException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public InvalidDateException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Date provided is invalid or is in wrong format (Should be YYYY-MM-DD)\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/InvalidDueTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class InvalidDueTimeException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public InvalidDueTimeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Due time provided is invalid or in wrong format (Should be HH:MM) 24 Hr format\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/InvalidEndTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class InvalidEndTimeException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public InvalidEndTimeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"End time provided is invalid or in wrong format (Should be HH:MM) 24 Hr format\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/InvalidHelpCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class InvalidHelpCommandException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public InvalidHelpCommandException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Wrong command used to view command list (Should be :help )\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/InvalidStartTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class InvalidStartTimeException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public InvalidStartTimeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Start time provided is invalid or in wrong format (Should be HH:MM) 24 Hr format\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/MissingIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the exception pertaining any illegal command with index usage."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class MissingIndexException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public MissingIndexException(String errorMessage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 12
    }
  },
  {
    "path": "src/main/java/exception/command/MisuseOfClearCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class MisuseOfClearCommandException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public MisuseOfClearCommandException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Wrong command to clear events (Should be :clear )\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 8,
      "GanapathySanathBalaji": 1
    }
  },
  {
    "path": "src/main/java/exception/command/MisuseOfCountdownCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class MisuseOfCountdownCommandException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public MisuseOfCountdownCommandException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(\"Wrong command used to view countdown of events (Should be :countdown )\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 9
    }
  },
  {
    "path": "src/main/java/exception/command/MisuseOfPriorityCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class MisuseOfPriorityCommandException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public MisuseOfPriorityCommandException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(\"Wrong command used to view events sorted by priority (Should be :priority_view )\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 9
    }
  },
  {
    "path": "src/main/java/exception/command/MisuseOfScheduleCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class MisuseOfScheduleCommandException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public MisuseOfScheduleCommandException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Wrong command to create schedule events (Should be :schedule \u003cnumber of tasks\u003e )\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 9
    }
  },
  {
    "path": "src/main/java/exception/command/MisuseOfSetDoneWithEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class MisuseOfSetDoneWithEvent extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public MisuseOfSetDoneWithEvent() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(\"Task of event type cannot be marked as done\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 9
    }
  },
  {
    "path": "src/main/java/exception/command/MisuseOfViewCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class MisuseOfViewCommandException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public MisuseOfViewCommandException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(\"Wrong command used to view events (Should be :view )\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 9
    }
  },
  {
    "path": "src/main/java/exception/command/NumberOfTasksToBeScheduledNotAnIntegerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class NumberOfTasksToBeScheduledNotAnIntegerException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public NumberOfTasksToBeScheduledNotAnIntegerException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Number of tasks to be scheduled as mentioned is not an integer\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/NumberOfTasksToBeScheduledNotPositiveException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class NumberOfTasksToBeScheduledNotPositiveException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public NumberOfTasksToBeScheduledNotPositiveException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Number of tasks to be scheduled as mentioned is not a positive integer\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/SchedulableTaskDaysLeftNotIntegerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class SchedulableTaskDaysLeftNotIntegerException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public SchedulableTaskDaysLeftNotIntegerException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Number of days left should be an integer\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/SchedulableTaskDaysLeftNotPositiveException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class SchedulableTaskDaysLeftNotPositiveException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public SchedulableTaskDaysLeftNotPositiveException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Number of days left should be greater than 1\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/SchedulableTaskDaysToFinishMoreThanDaysLeftException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class SchedulableTaskDaysToFinishMoreThanDaysLeftException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public SchedulableTaskDaysToFinishMoreThanDaysLeftException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Number of days left should not be lesser than number of days to finish the task\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/SchedulableTaskDaysToFinishNotIntegerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class SchedulableTaskDaysToFinishNotIntegerException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public SchedulableTaskDaysToFinishNotIntegerException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Number of days to finish task should be an integer\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/SchedulableTaskDaysToFinishNotPositiveException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class SchedulableTaskDaysToFinishNotPositiveException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public SchedulableTaskDaysToFinishNotPositiveException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Number of days to finish should be greater than 1\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/SchedulableTaskEmptyDescriptionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class SchedulableTaskEmptyDescriptionException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public SchedulableTaskEmptyDescriptionException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Description of task shouldn\u0027t be empty\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/SchedulableTaskFormatNotFollowedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class SchedulableTaskFormatNotFollowedException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public SchedulableTaskFormatNotFollowedException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Please follow the format specified\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/SearchKeywordEmptyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class SearchKeywordEmptyException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public SearchKeywordEmptyException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Keyword to be used for search is empty\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/SearchMissingTermsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class SearchMissingTermsException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public SearchMissingTermsException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"The search string entered is empty.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 4,
      "GanapathySanathBalaji": 6
    }
  },
  {
    "path": "src/main/java/exception/command/TaskCreationDateMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskCreationDateMissingException extends CustomException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskCreationDateMissingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Date entered is empty, Please provide a valid date\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 11
    }
  },
  {
    "path": "src/main/java/exception/command/TaskCreationDescriptionMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskCreationDescriptionMissingException extends CustomException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskCreationDescriptionMissingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Description is empty, Please provide a valid description\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 11
    }
  },
  {
    "path": "src/main/java/exception/command/TaskCreationPriorityMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskCreationPriorityMissingException extends CustomException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskCreationPriorityMissingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Priority entered is empty, Please provide a valid priority value\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 11
    }
  },
  {
    "path": "src/main/java/exception/command/TaskDateBeforeCurrentDateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskDateBeforeCurrentDateException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskDateBeforeCurrentDateException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Date specified must be a current or a future date\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/exception/command/TaskPriorityNotIntegerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskPriorityNotIntegerException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskPriorityNotIntegerException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Priority should be an integer\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/notes/ModulesList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import notes.modules.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class ModulesList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    static ModulesList instance \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cString\u003e\u003e modules;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private ModulesList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.modules \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Singleton check for null instance before initializing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return ModuleList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static ModulesList getInstance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            instance \u003d new ModulesList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Create a module with code."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param code Module Code."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void createModule(String code) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        modules.putIfAbsent(code, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String success \u003d String.format(\"%s has been created\\n\", code);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(success);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Delete a module using its code."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param code Module code."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void deleteModule(String code) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (modules.containsKey(code)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(\"Are you sure you want to remove \" + code"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    + \"? [Y/N]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            if (input.nextLine().contains(\"Y\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                modules.remove(code);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                System.out.println(code + \" has been removed\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                System.out.println(\"Remove operation has been cancelled\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(\"Module is not found.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Retrieves a module\u0027s content from the module given the module code."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param code module code"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return module\u0027s content"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public ArrayList\u003cString\u003e getModule(String code) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (!modules.containsKey(code)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return modules.get(code);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Enters the module interface of moduleManager."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param code module code"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception for ModuleManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void enterModule(String code) throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (getModule(code) \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(\"Module not found.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            new ModuleManager(code, getModule(code));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Print all saved modules."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void listModules() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (modules.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(\"No modules have been added yet.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(modules.keySet());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void importModules(HashMap\u003cString, ArrayList\u003cString\u003e\u003e modules) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cString\u003e\u003e exportModules() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return this.modules;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 104
    }
  },
  {
    "path": "src/main/java/notes/Notes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class Notes {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    ModulesList modulesList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public Notes() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        modulesList \u003d ModulesList.getInstance();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        importModules();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Creates a module."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param code Module Code."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void createModule(String code) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        code \u003d code.toUpperCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        modulesList.createModule(code);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Deletes a module."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param code Module Code."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void deleteModule(String code) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        code \u003d code.toUpperCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        modulesList.deleteModule(code);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * To enter into the module notes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param code Module Code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception for moduleManager"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void enterModule(String code) throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        code \u003d code.toUpperCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        modulesList.enterModule(code);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private void importModules() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            File f \u003d new File(Constants.NOTES_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            if (f.createNewFile()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                System.out.println(Constants.NOTES_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cString\u003e\u003e modules \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            Scanner input \u003d new Scanner(f);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            while (input.hasNext()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                String code \u003d input.nextLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                ArrayList\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                String message \u003d input.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                while (!message.equals(\"-----\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    messages.add(message);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    message \u003d input.nextLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                modules.putIfAbsent(code, messages);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            modulesList.importModules(modules);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(\"Couldn\u0027t import modules.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Export modules when exiting app."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws IOException exception raised when exporting modules"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void exportModules() throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        FileWriter fw \u003d new FileWriter(Constants.NOTES_PATH);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e modules \u003d modulesList.exportModules();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        modules.forEach((key, messages) -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                fw.write(key + \"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                for (String message : messages) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    fw.write(message + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                fw.write(\"-----\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"Notes saved successfully.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Print all saved modules."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void listModules() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(Constants.LINE_BREAK);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        modulesList.listModules();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(Constants.LINE_BREAK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 111
    }
  },
  {
    "path": "src/main/java/notes/NotesInvoker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.NotesCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class NotesInvoker {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor to invoke Notes app."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws IOException exception for module import/export"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public NotesInvoker() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Notes notes \u003d new Notes();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(Constants.NOTES_WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(Constants.LINE_BREAK);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        displayMenu();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String choice;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                String userInput \u003d input.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                choice \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                String code;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                switch (choice) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                case \"add\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    code \u003d userInput.split(\" \")[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    notes.createModule(code);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                case \"remove\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    code \u003d userInput.split(\" \")[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    notes.deleteModule(code);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                case \"enter\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    code \u003d userInput.split(\" \")[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    notes.enterModule(code);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    notes.listModules();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                case \"exit\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    notes.exportModules();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                case \"help\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    displayMenu();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    System.out.println(Constants.INVALID_NOTES_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            } while (!choice.equals(\"exit\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new NotesCommandException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"Thank you for using notes.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private void displayMenu() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(Constants.ADD_MODULE_MESSAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(Constants.REMOVE_MODULE_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(Constants.ENTER_MODULE_MESSAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(Constants.LIST_MODULE_MESSAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(Constants.EXIT_MODULE_MESSAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(Constants.HELP_MODULE_MESSAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 71
    }
  },
  {
    "path": "src/main/java/notes/modules/ModuleManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package notes.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import notes.modules.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import notes.modules.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import notes.modules.command.CommandStack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import notes.modules.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import notes.modules.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class ModuleManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private ArrayList\u003cString\u003e messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private CommandStack commandStack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Manages the module e.g. overall commands and control."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param code module code"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param messages the notes in the module"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception for commandStack"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public ModuleManager(String code, ArrayList\u003cString\u003e messages) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.messages \u003d messages;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        commandStack \u003d new CommandStack();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        runInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private void runInstance() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(String.format(\"Notes for %s\", code));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        showMenu();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String userInput \u003d input.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new Parser().parseCommand(userInput, this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            executeCommand(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } while (!ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Takes the command and execute. Depending on whether it\u0027s add,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * redo or undo or others, it will run differently."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param command the command to be executed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void executeCommand(Command command) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (command instanceof AddCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            switch (((AddCommand) command).getUserCommandType()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            case \"add\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                commandStack.execute(command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            case \"undo\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                commandStack.undo();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            case \"redo\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                commandStack.redo();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private void showMenu() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"[add ...message...] to add a note\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"[undo] to undo\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"[redo] to redo\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"[list] to list notes\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"[exit] to exit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void addMessage(String message) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        messages.add(message);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"SUCCESS\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public ArrayList\u003cString\u003e getMessages() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return this.messages;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void removeMessage(String message) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        messages.remove(message);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"SUCCESS\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 87,
      "-": 4
    }
  },
  {
    "path": "src/main/java/notes/modules/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package notes.modules.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import notes.modules.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    ModuleManager moduleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private String userCommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructs a AddCommand Object to be executed later."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param moduleManager the class holding the arraylist of messages"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param message message per se"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param userCommandType add/undo/redo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public AddCommand(ModuleManager moduleManager, String message,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                      String userCommandType) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.moduleManager \u003d moduleManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.userCommandType \u003d userCommandType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public AddCommand(ModuleManager moduleManager, String userCommandType) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.moduleManager \u003d moduleManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.userCommandType \u003d userCommandType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        moduleManager.addMessage(message);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        moduleManager.removeMessage(message);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        execute();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public String getUserCommandType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return userCommandType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 42,
      "-": 2
    }
  },
  {
    "path": "src/main/java/notes/modules/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package notes.modules.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void execute();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void undo();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void redo();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 9,
      "-": 2
    }
  },
  {
    "path": "src/main/java/notes/modules/command/CommandStack.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package notes.modules.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class CommandStack {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Adapted from: https://www.developer.com/design"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * /article.php/3720566/Working-With-Design-Patterns-Memento.htm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private LinkedList\u003cCommand\u003e commandStack"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private LinkedList\u003cCommand\u003e redoStack"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Execute the given command, and add it to a undo stack and redo stack."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param command command parsed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void execute(Command command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        commandStack.addFirst(command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        redoStack.clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Undo a command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (commandStack.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(\"Nothing to undo.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Command command \u003d commandStack.removeFirst();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        command.undo();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        redoStack.addFirst(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Redo a command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (redoStack.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(\"You are at your latest action.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Command command \u003d redoStack.removeFirst();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        command.redo();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        commandStack.addFirst(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 51
    }
  },
  {
    "path": "src/main/java/notes/modules/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package notes.modules.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Implemented from https://github.com/se-edu/addressbook-level2/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * blob/master/src/seedu/addressbook/commands/ExitCommand.java."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * To check if command is exit command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param command the command parsed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return true if command parsed is exit command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return command instanceof ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 25,
      "-": 2
    }
  },
  {
    "path": "src/main/java/notes/modules/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package notes.modules.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private ArrayList\u003cString\u003e messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public ListCommand(ArrayList\u003cString\u003e messages) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.messages \u003d messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Displays the notes in the module."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"______________________________\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (messages.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(\"No notes have been added for this module yet.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"______________________________\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 33,
      "-": 2
    }
  },
  {
    "path": "src/main/java/notes/modules/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package notes.modules.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.NotesInvalidAddMessageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import notes.modules.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import notes.modules.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import notes.modules.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import notes.modules.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import notes.modules.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private String userCommandText;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Takes in the user input and parse it into understandable"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * commands and return the command needed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param moduleManager ModuleManager object used to manage modules."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param userInput input from the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return method to call Command of specific type"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception for invalid commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public Command parseCommand(String userInput, ModuleManager moduleManager) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            userCommandText \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            switch (userCommandText) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            case \"redo\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            case \"undo\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                return new AddCommand("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        moduleManager, userCommandText);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            case \"add\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                String message \u003d userInput.split(userCommandText + \" \")[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                return new AddCommand("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        moduleManager, message, userCommandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                return new ListCommand(moduleManager.getMessages());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            case \"exit\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                throw new Exception();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new NotesInvalidAddMessageException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Please specify a right command.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 49,
      "-": 2
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.CalendarCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.CountdownCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.CreateScheduleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.PriorityViewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.ViewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MULTIPLE_WHITE_SPACES;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * This class is used to parse the user input into executable commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ADD_DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ADD_EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String VIEW_COMMAND \u003d \"view\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String PRIORITY_VIEW_COMMAND \u003d \"priority_view\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String COUNTDOWN_VIEW_COMMAND \u003d \"countdown\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String CLEAR_COMMAND \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String SEARCH_COMMAND \u003d \"search\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EDIT_COMMAND \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EMPTY_COMMAND \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String CREATE_SCHEDULE_COMMAND \u003d \"schedule\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final  String CALENDAR_COMMAND \u003d \"calendar\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * This method takes in the user input parses it and returns the command to be executed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param fullCommand THe entire line of command entered by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return command The command parsed form the user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the wrong command/ wrong format is given by the user as an input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public Command parseCommand(String fullCommand) throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] commandSplit \u003d fullCommand.split(MULTIPLE_WHITE_SPACES,2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String commandType \u003d commandSplit[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean isOneWordCommand \u003d commandSplit.length \u003d\u003d 1 || commandSplit[1].isBlank();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case ADD_DEADLINE_COMMAND:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new AddDeadlineCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case ADD_EVENT_COMMAND:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new AddEventCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_COMMAND:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new EditCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case VIEW_COMMAND:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new ViewCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case PRIORITY_VIEW_COMMAND:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new PriorityViewCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case COUNTDOWN_VIEW_COMMAND:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new CountdownCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case CLEAR_COMMAND:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new ClearCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case SEARCH_COMMAND:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new SearchCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case DELETE_COMMAND:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new DeleteCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case HELP_COMMAND:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new HelpCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case CREATE_SCHEDULE_COMMAND:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new CreateScheduleCommand(isOneWordCommand, commandSplit);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case DONE_COMMAND:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new DoneCommand(commandSplit,isOneWordCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case CALENDAR_COMMAND:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new CalendarCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EMPTY_COMMAND:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Empty Line entered, Please enter a valid line\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            // Break statement can\u0027t be reached if added"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Invalid command entered, Please enter a valid command\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            // Break statement can\u0027t be reached if added"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 3,
      "NizarMohd": 15,
      "GanapathySanathBalaji": 86
    }
  },
  {
    "path": "src/main/java/resourceloader/BackUpData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package resourceloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "//@@author NizarMohd"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class contains all the back up data for Study Area Loader, in case locations.txt and dictionary.txt"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * does not exist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "class BackUpData {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    static final String BACKUP_DICTIONARY \u003d \"engineering~eng~engin~engine~foe\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"utown~university town~u-town~u town\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"maccommons~mccommons~mac commons\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"education resource centre~erc\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"stephen riady centre~stephen~riady~src\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"ocbc~frank~frank by ocbc\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"starbucks~bucks~bux~sbux\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"pc commons~pccommons~pccommon\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"yih~yusof ishak~yusof~ishak\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"supersnacks~super snacks~super snack\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    static final String BACKUP_LOCATIONS \u003d \"Opposite Town Green (Outside Starbucks)~2 College Avenue West Education \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"Resource Centre, Ground Level~Utown~true~false~4\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"Starbucks~2 College Avenue West Education Resource Centre, Ground Level~Utown~true~true~5\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"MacCommons~2 College Avenue West Education Resource Centre, Level 1~Utown~true~true~5\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"PC Commons~2 College Avenue West Education Resource Centre, Level 1~Utown~true~true~5\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"Ian and Peony Ferguson Study~2 College Ave West Education Resource Centre, Level 3~Utown~\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"true~true~4\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"The Study~2 College Ave West Education Resource Centre, Level 2~Utown~true~true~5\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"Town Plaza Seminar Rooms Waiting Lounge~2 College Ave West, Town Plaza, Level 2~Utown~true~\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"true~4\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"OCBC~2 College Ave West, Stephen Riady Centre, Ground Level~Utown~true~false~2\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"SuperSnacks~2 College Ave West, Stephen Riady Centre, Ground Level~Utown~true~true~4\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"EA Level 1~9 Engineering Drive 1,EA, Level 1~Engineering~true~true~4\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"EA Level 2~9 Engineering Drive 1,EA, Level 2~Engineering~true~true~4\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"EA Level 3~9 Engineering Drive 1,EA, Level 3~Engineering~true~true~4\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"EA Level 4~9 Engineering Drive 1,EA, Level 4, Outside Staff Offices~Engineering~true~false~6\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"EA Level 5~9 Engineering Drive 1,EA, Level 5, Outside of the door beside EA05~Engineering~true~\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"false~4\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"EA Level 6~9 Engineering Drive 1,EA, Level 6, EA06-23~Engineering~true~true~4\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"Central Library~Central Library 12 Kent Ridge Crescent~-~true~true~5\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"YIH Study Room~Yusof Ishak House, Level 2~-~true~true~4\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 42
    }
  },
  {
    "path": "src/main/java/resourceloader/StudyAreaLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package resourceloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import exception.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.Dictionary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.FILE_PATH_STUDYAREAS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.INCONSISTENT_DATA_STORAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MISSING_STUDY_AREA_DATA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class loads all the required information of Study Areas that is stored in location.txt."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class StudyAreaLoader {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private static final String DIVIDER \u003d \"~\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private String url;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public StudyAreaLoader(String url) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        loadFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Loads content from location.txt and dictionary.txt."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws IllegalStudyAreaException if file is not found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void loadFile() throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            this.file \u003d new File(this.url);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            Dictionary.loadDictionary();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }  catch (NullPointerException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new IllegalStudyAreaException(MISSING_STUDY_AREA_DATA);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new IllegalStudyAreaException(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Return the imported study area file as an ArrayList for the main controller"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * to add it to its database."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return buffer ArrayList of Location from study area file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws FileNotFoundException if location.txt does not exist."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws IllegalStudyAreaException if data stored is inconsistent"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public ArrayList\u003cStudyArea\u003e pushToDatabase() throws IllegalStudyAreaException, FileNotFoundException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ArrayList\u003cStudyArea\u003e buffer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Scanner input \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        while (input.hasNextLine()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String detailsOfLocation \u003d input.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String[] detailsBuffer \u003d detailsOfLocation.split(DIVIDER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            if (detailsBuffer.length !\u003d 6) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                String name \u003d detailsBuffer[0];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                throw new IllegalStudyAreaException(INCONSISTENT_DATA_STORAGE + \"at \" + name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            StudyArea studyArea \u003d new StudyArea(detailsBuffer[0], detailsBuffer[1], detailsBuffer[2],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    Boolean.parseBoolean(detailsBuffer[3]), Boolean.parseBoolean(detailsBuffer[4]),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    Integer.parseInt(detailsBuffer[5]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            buffer.add(studyArea);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        input.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return buffer;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //@@author NizarMohd"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method creates a new data file for locations.txt and dictionary.txt."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param filePath this is the path of the data file to be created."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IOException if cannot create file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void createNewStudyAreaData(String filePath) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Files.createFile(Paths.get(filePath));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        PrintWriter dataBuffer \u003d new PrintWriter(new File(filePath));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (filePath.equals(FILE_PATH_STUDYAREAS)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            dataBuffer.println(BackUpData.BACKUP_LOCATIONS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            dataBuffer.println(BackUpData.BACKUP_DICTIONARY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        dataBuffer.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "terrytay": 64,
      "NizarMohd": 32
    }
  },
  {
    "path": "src/main/java/resourceloader/TaskLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package resourceloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.FILE_PATH_DICTIONARY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.FILE_PATH_STUDYAREAS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Handles the task of loading and storing events."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskLoader {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_TASK_TYPE_MESSAGE \u003d \"Invalid task type identified when parsing tasks from \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \"taskList.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** Location of data file. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** Directory of data file. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private Path fileDirectory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for TaskLoader object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Initialises the object with the file path provided."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param filePath The location of the data file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskLoader(String filePath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.fileDirectory \u003d Paths.get(filePath).getParent();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Reads the list of events stored previously and returns it as an ArrayList of Events."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return events The list of events stored previously."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        File dataFile;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Scanner s;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            s \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                String details \u003d s.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                Task newTask \u003d parseTaskDetails(details);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }  catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            createNewDataFile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the Task details from the given string and returns a new task object with the specified details."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param details Contains all the details with regards to the task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return newTask The new task created with the details provided."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private Task parseTaskDetails(String details) throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Task newTask \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        char taskType \u003d details.charAt(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String taskDetails \u003d details.substring(2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTask \u003d parseDeadlineDetails(taskDetails);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTask \u003d parseEventDetails(taskDetails);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            // Error handling"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assert false : INVALID_TASK_TYPE_MESSAGE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the Deadline details from the given string and returns a new deadline object with the specified details."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param taskDescription Contains all the details with regards to the deadline."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return newEvent The new event created with the details provided."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private Deadline parseDeadlineDetails(String taskDescription) throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] details \u003d taskDescription.split(\"#\", 6);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String description \u003d details[0];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String date \u003d details[1];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String dueTime \u003d details[2];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String priority \u003d details[3];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(details[4]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(description, date, dueTime, priority, isDone);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return newDeadline;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the Event details from the given string and returns a new event object with the specified details."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param taskDescription Contains all the details with regards to the Event."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return newEvent The new event created with the details provided."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private Event parseEventDetails(String taskDescription) throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] details \u003d taskDescription.split(\"#\", 5);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String description \u003d details[0];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String date \u003d details[1];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String startTime \u003d details[2];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String endTime \u003d details[3];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String priority \u003d details[4];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Event newEvent \u003d new Event(description, date, startTime, endTime, priority);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new data file when the application is run for the first time."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void createNewDataFile() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Files.createDirectories(fileDirectory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Files.createFile(Paths.get(filePath));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            StudyAreaLoader.createNewStudyAreaData(FILE_PATH_STUDYAREAS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            StudyAreaLoader.createNewStudyAreaData(FILE_PATH_DICTIONARY);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Saves the list of current tasks to the data file."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param tasks Represents the current list of events."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void saveTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            for (Task task: tasks) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                fw.write(task.getFormattedDetails());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 164,
      "NizarMohd": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.StudyAreaCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import exception.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import notes.NotesInvoker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import resourceloader.StudyAreaLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import resourceloader.TaskLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyAreaList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Constants;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.BYE_COMMAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NOTES_COMMAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.STUDY_AREA_COMMAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is Duke class, which forms the main class of the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static TaskLoader taskLoader;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    protected static StudyAreaLoader studyAreaLoader;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static StudyAreaList studyAreaList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private static Parser parser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * This is the constructor to create a new Duke program every time user runs the main loop."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public Duke()  {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            setupLogger();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            parser \u003d new Parser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            taskLoader \u003d new TaskLoader(Constants.FILE_PATH_EVENTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            taskList \u003d new TaskList(taskLoader.loadFile());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            studyAreaLoader \u003d new StudyAreaLoader(Constants.FILE_PATH_STUDY_AREAS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            studyAreaList \u003d new StudyAreaList(studyAreaLoader.pushToDatabase());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (FileNotFoundException | IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            LOGGER.log(Level.SEVERE, Constants.EXCEPTION_ENCOUNTERED_MESSAGE, e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Runs all the command for tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private static void runCommands() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String fullCommand;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        fullCommand \u003d ui.getUserIn().trim().toLowerCase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        while (!fullCommand.equals(BYE_COMMAND)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                switchCommands(fullCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            } catch (Exception exception) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                ui.printMessage(exception.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }   finally {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                taskLoader.saveTasks(taskList.tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            fullCommand \u003d ui.getUserIn().trim().toLowerCase();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * This method will choose the commands to execute based on user input. Allows for abstraction."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param fullCommand this is the user input."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception when user enters any illegal commands."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private static void switchCommands(String fullCommand) throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (fullCommand.equals(STUDY_AREA_COMMAND)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            new StudyAreaCommand().executeStudyCommand(studyAreaList, ui);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } else if (fullCommand.equals(NOTES_COMMAND)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            new NotesInvoker();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            Command command \u003d parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command.executeCommand(taskList, ui);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    //@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void setupLogger() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        LOGGER.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ch.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        LOGGER.addHandler(ch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            FileHandler fh \u003d new FileHandler(Constants.DUKE_LOGGER_LOG);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fh.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.addHandler(fh);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.SEVERE, Constants.FILE_LOGGER_NOT_WORKING_MESSAGE, e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    //@@author ganapathysanathbalaji and NizarMohd"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * This method runs the program."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        LOGGER.log(Level.INFO, Constants.APPLICATION_STARTED_EXECUTION);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        LOGGER.log(Level.INFO, Constants.TASK_MODE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        runCommands();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        LOGGER.log(Level.INFO, Constants.APPLICATION_GOING_TO_EXIT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printByeMessage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        LOGGER.log(Level.INFO, Constants.APPLICATION_CLOSED_SUCCESSFULLY);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //@@author NizarMohd"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param args this is an optional argument."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 61,
      "NizarMohd": 37,
      "GanapathySanathBalaji": 41,
      "-": 4
    }
  },
  {
    "path": "src/main/java/studyarea/Dictionary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "//@@author NizarMohd"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class allows for User to loosely search certain names, address or faculties of StudyAreas."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Dictionary {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static final String FILEPATH \u003d \"library\" + File.separator + \"dictionary.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static final String DELIMITER \u003d \"~\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static HashMap\u003cString, String\u003e dictionary \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method loads the dictionary mapping from dictionary.text."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws FileNotFoundException if the file cannot be found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void loadDictionary() throws FileNotFoundException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Scanner in \u003d new Scanner(new File(FILEPATH));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String userIn \u003d in.nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String[] buffer \u003d userIn.split(DELIMITER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String out \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (String value : buffer) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    out \u003d value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    dictionary.put(value, out);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method finds a mapping from User input to a either StudyArea\u0027s name, address, or faculty."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param key this is the User input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return either StudyArea\u0027s name, address, or faculty if mapping is found, else return null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static String parseKey(String key) { //this method will be used within String.contains() method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String out \u003d DELIMITER;                // Since .contains() cannot have null as an argument, out is initialised"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (dictionary.containsKey(key)) {      // with delimiter because mapped data does not contain delimiter."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            out \u003d dictionary.get(key);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 55
    }
  },
  {
    "path": "src/main/java/studyarea/StudyArea.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.security.SecureRandom;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static java.lang.System.lineSeparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MAX_LINE_LENGTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.TAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the StudyArea class. All study area is stored as a Study Area object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class StudyArea {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private String faculty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private boolean hasPort;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private boolean isIndoor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private int maxPax;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private boolean isAvail;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructs a StudyArea class for a study area with its information"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Precondition: \u0027All variables have to be filled."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param name name of StudyArea"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param address address of StudyArea"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param faculty faculty of StudyArea"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param hasPort true for availability of ports, else false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isIndoor true for indoor, else false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param maxPax maximum number of seats for this StudyArea"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public StudyArea(String name, String address, String faculty, boolean hasPort,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                     boolean isIndoor, int maxPax) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.address \u003d address.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.hasPort \u003d hasPort;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.isIndoor \u003d isIndoor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.maxPax \u003d maxPax;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * This is the getter for the name attribute."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return general name of the StudyArea."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * This is the getter for the address attribute."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return physical address of the StudyArea."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return this.address;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * This is the getter for the faculty attribute."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return the name of the faculty that the StudyArea is located at."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public String getFaculty() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return this.faculty;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * This is the getter for the hasPort attribute."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return true if the StudyArea has ports and false if otherwise."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public boolean hasPort() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return this.hasPort;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * This is the getter for the isIndoor attribute."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return true if StudyArea is indoors and false if otherwise."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public boolean isIndoor() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return this.isIndoor;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * This is the getter for the maxPax attribute."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return maximum number of pax the StudyArea can hold."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    //@@author terrytay"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public Integer getMaxPax() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return this.maxPax;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Prints the StudyArea into a standard String format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return String value of all the attributes of the specific StudyArea."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //@@author NizarMohd"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String text \u003d TAB + \"Name: \" + this.name + lineSeparator()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + Ui.formatMessage(\"Address: \" + this.address, MAX_LINE_LENGTH)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + lineSeparator() + TAB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"Faculty: \" + this.faculty + lineSeparator() + TAB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"Port: \" + this.hasPort + lineSeparator() + TAB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"Indoor: \" + this.isIndoor + lineSeparator() + TAB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"Maximum number of Pax: \" + this.maxPax;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String line \u003d TAB + \"__________________________________________________________\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return line + lineSeparator() + text + lineSeparator() + line;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Checks if search key is found in Study Area\u0027s Name and Faculty attributes."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param key This is the search key entered by User."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return True if can be found in either case. False if not found in both cases."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public boolean containsSearchKey(String key) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (this.name.toLowerCase().contains(key) || this.name.toLowerCase().contains(Dictionary.parseKey(key))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (this.address.toLowerCase().contains(key) || this.address.toLowerCase().contains(Dictionary.parseKey(key))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.faculty.toLowerCase().contains((key))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                || this.faculty.toLowerCase().contains(Dictionary.parseKey(key));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks if the maximum size of the study area is capable of containing the desired size of people"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * stated by the User."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param size this is the size stated by the user."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return True if the size stated by the user is smaller than or equals to the maximum size of the Study Area."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public boolean isSizeCapable(String size) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return  Integer.parseInt(size) \u003c\u003d this.maxPax;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 103,
      "NizarMohd": 48
    }
  },
  {
    "path": "src/main/java/studyarea/StudyAreaList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import exception.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.DUPLICATE_FLAGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.DUPLICATE_FLAGS_LOG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.FLAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.FLAG_MISPLACED_LOG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.IDENTIFIER_MISSING_LOG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.INDOOR_FLAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MULTIPLE_WHITE_SPACES;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.NON_INTEGER_LOG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NON_POSITIVE_INTEGER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.NON_POSITIVE_INTEGER_LOG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NOT_INTEGER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NO_SIZE_INDICATED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.NO_SIZE_INDICATED_LOG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.ONLY_FLAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.OUTDOOR_FLAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.PORTS_FLAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.SIZE_FLAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.SPACE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.WRONG_FLAG_ARGUMENT_POSITION;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.WRONG_FLAG_LOG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.WRONG_FLAG_USAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the class that stores and manages all of the Study Areas in location.txt"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class StudyAreaList {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private ArrayList\u003cStudyArea\u003e studyAreaList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    // Assigns studyAreaList into object\u0027s studyAreaList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public StudyAreaList(ArrayList\u003cStudyArea\u003e studyAreaList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.studyAreaList \u003d studyAreaList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Gets the list of all the Locations in location.txt"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return ArrayList of StudyAreas."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ArrayList\u003cStudyArea\u003e getStudyAreaList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.studyAreaList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //@@author NizarMohd"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks for duplicate flags."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param flag this is the array of flags in the system."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param index this is the index referring to the specific flag to check for duplicate."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if flag is not null, ie: if flag has already been mentioned."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void checkDuplicate(String[] flag, int index) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (flag[index] !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            LOGGER.log(Level.INFO, DUPLICATE_FLAGS_LOG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(DUPLICATE_FLAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method check if command entered is only flags."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commands This is the string of commands entered by User."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param index This is the index in which the method is check if only flag exist."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if only flag is entered by user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void checkOnlyFlag(String[] commands, int index) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (commands[index].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            LOGGER.log(Level.INFO, IDENTIFIER_MISSING_LOG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(ONLY_FLAG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks if the command after the size flag is a valid integer."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commands this is the array of commands entered."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param index this is the index where the size flag is."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if command entered is not a valid integer."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void checkInteger(String[] commands, int index) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {                                     // try block is to test if command is integer"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            int size \u003d Integer.parseInt(commands[index + 1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (size \u003c\u003d 0) {                     // check if integer is positive, else throw exception."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                LOGGER.log(Level.INFO, NON_POSITIVE_INTEGER_LOG);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalStudyAreaException(NON_POSITIVE_INTEGER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (NumberFormatException e) {       // catch if command is not integer then throw exception"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            LOGGER.log(Level.INFO, NON_INTEGER_LOG);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(NOT_INTEGER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {   // catch if no string exist after \"-s\" and throw exception"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            LOGGER.log(Level.INFO, NO_SIZE_INDICATED_LOG);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(NO_SIZE_INDICATED);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method validate flags based on User input."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param flags this is the array of flags."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commands this is the full command entered by Users."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param index this is the index which the method is assigning the commands into the flags array."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param isNotFlag this is the boolean value that checks if the command entered is a flag."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if user enters command wrongly."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void checkFlag(String[] flags, String[] commands, int index, boolean isNotFlag) throws"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            IllegalStudyAreaException {                //isNotFlag is used to track previous instances of \"-\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (commands[index].equals(SIZE_FLAG)) {   // for instances of \"-s\", check if next string is integer or null."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            checkDuplicate(flags, 0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            checkInteger(commands, index);         // check if subsequent command is a valid integer."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else if (commands[index].contains(FLAG)) { // for instances \"-\" ,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            checkOnlyFlag(commands, index);             // check if only \"-\" exist, if true, then throw exception"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            switch (commands[index].charAt(1)) {        // if \"-p\", \"-i\" , \"-o\" then check if duplicate. Else, throw"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \u0027p\u0027:                               // exception for wrong usage of flag"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                checkDuplicate(flags, 2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \u0027i\u0027:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \u0027o\u0027:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                checkDuplicate(flags, 3);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                LOGGER.log(Level.INFO, WRONG_FLAG_LOG);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalStudyAreaException(WRONG_FLAG_USAGE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {                                         // if no instances of \"-\" or \"-s\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (!isNotFlag) {                            // and if there exist previous instances of \"-\" (i.e: -p EA)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                LOGGER.log(Level.INFO, FLAG_MISPLACED_LOG);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalStudyAreaException(WRONG_FLAG_ARGUMENT_POSITION);  // throw exception"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Obtains all the supported flags in this organiser app."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commands This is the User commands that has been split by spaces."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return special purpose String Array of a fixed size of 5 and fixed values where :\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *          index 0 : \"-s\"\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *          index 1 : Integer value of the size indicated.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *          index 2 : \"-p\"\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *          index 3 : \"-i\" or \"-o\" , depends on user input\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *          index 4: search key entered by User\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException when arguments for flags are invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static String[] getFlagsInfo(String[] commands) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] flags \u003d new String[5];"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringBuilder name \u003d new StringBuilder();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean isNotFlag \u003d true;                             // to keep track of instance \"-\" is input."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (int i \u003d 0; i \u003c commands.length; i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (commands[i].equals(SIZE_FLAG)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isNotFlag \u003d false;                              // update isNotFlag as false because command is a flag"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                checkFlag(flags, commands, i, false); // pass false instead of isNotFlag as only boolean logic"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                flags[0] \u003d SIZE_FLAG;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                flags[1] \u003d Integer.toString(Integer.parseInt(commands[i + 1]));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else if (commands[i].contains(FLAG)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isNotFlag \u003d false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                checkFlag(flags, commands, i,false);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                switch (commands[i].charAt(1)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                case \u0027p\u0027:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    flags[2] \u003d PORTS_FLAG;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                case \u0027i\u0027:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    flags[3] \u003d INDOOR_FLAG;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                case \u0027o\u0027:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    flags[3] \u003d OUTDOOR_FLAG;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    LOGGER.log(Level.INFO, WRONG_FLAG_LOG);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    throw new IllegalStudyAreaException(WRONG_FLAG_USAGE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else {                                              // if no previous instances of \"-\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (isNotFlag) {                                  // and if input is not a flag"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    name.append(commands[i]).append(SPACE);    // concatenate subsequent input that pass the control"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    flags[4] \u003d name.toString().trim();            // flag"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    checkFlag(flags, commands, i, false); // if has previous instances of \"-\" and input is not"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }                                                  // flag, pass false to throw exception."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return flags;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks if study area is available based on the current flag."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param flag This is the current flag."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param isAvail This is the current incremental availability status of the StudyArea based on previous flags."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param index This is the index the flag is at in the flags array."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param studyArea This is the current StudyArea that is inspected by the method."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param flags This is the flags array that has been entered by the User."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return The method returns a boolean value, true if the study area meets the criterion stated by the current"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *              flag and false if otherwise."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static boolean isAvailStudyArea(String flag, boolean isAvail, int index, StudyArea studyArea,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                                           String[] flags) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean carryOn \u003d flag !\u003d null \u0026\u0026 isAvail \u0026\u0026 index !\u003d 1; // carryOn indicates if current StudyArea iteration"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        // should continue."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (carryOn) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            switch (flag) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case PORTS_FLAG:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isAvail \u003d studyArea.hasPort();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case INDOOR_FLAG:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isAvail \u003d studyArea.isIndoor();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case OUTDOOR_FLAG:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isAvail \u003d !studyArea.isIndoor();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case SIZE_FLAG:  // allows user to find by capacity \u003c\u003d MaxPax"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isAvail \u003d studyArea.isSizeCapable(flags[1]);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            default:      // toLowerCase() so casing does not affect matching"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isAvail \u003d studyArea.containsSearchKey(flags[4].toLowerCase());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return isAvail;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Finds a list of StudyAreas based on User requirements."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param userIn This is the requirement entered by User"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return ArrayList of StudyAreas"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if User enters invalid commands."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ArrayList\u003cStudyArea\u003e searchList(String userIn) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] temp \u003d userIn.split(MULTIPLE_WHITE_SPACES);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] flags \u003d getFlagsInfo(temp);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ArrayList\u003cStudyArea\u003e availStudyAreas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (StudyArea studyArea : this.studyAreaList) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            boolean isAvail \u003d true;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (String flag : flags) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isAvail \u003d isAvailStudyArea(flag, isAvail, index, studyArea, flags);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (isAvail) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                availStudyAreas.add(studyArea);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return availStudyAreas;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 3,
      "NizarMohd": 242,
      "GanapathySanathBalaji": 10
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.DeadlineCompletionStatusNotABooleanException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.DescriptionContainsInvalidCharacterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.EmptyDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.InvalidDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.InvalidDueTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.SearchKeywordEmptyException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskDateBeforeCurrentDateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskPriorityNotIntegerException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.AT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.DATE_AFTER_CURRENT_DATE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.DATE_PATTERN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.DELIMITER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.EDIT_DATE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.EDIT_DESCRIPTION;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.ENTER_NEW_DATE_MESSAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.ENTER_NEW_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.ENTER_NEW_PRIORITY_MESSAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.ENTER_VALID_NUMBER_FROM_LIST_MESSAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.ERROR_MESSAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.INVALID_DATE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.INVALID_DATE_ENTERED;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.INVALID_OPTION_ENTERED;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.INVALID_PRIORITY_VALUE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.NEW_LINE_CHARACTER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NO;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.OPTION_TO_EDIT_DATE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.OPTION_TO_EDIT_DESCRIPTION;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.PRIORITY_NOT_INTEGER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.SEARCH_KEYWORD_EMPTY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.SPACE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.UPDATED_DETAILS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.WITH_PRIORITY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.WRONG_OPTION;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.YES;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "//@@author hongquan448"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongquan448"
        },
        "content": " * Represents an deadline and contains the related functions."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongquan448"
        },
        "content": " */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private static final int EDIT_DUE_TIME \u003d 3;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final int EDIT_PRIORITY \u003d 4;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String DEADLINE_IDENTIFIER \u003d \"D\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String DEADLINE_SYMBOL \u003d \"[D]\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String COMPLETED_SYMBOL \u003d \"[COMPLETED] \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String PENDING_SYMBOL \u003d \"[PENDING] \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String ON \u003d \" is due on \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String ENTER_NEW_DUE_TIME_MESSAGE \u003d \"Enter new due Time:\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String DEADLINE_DETAILS_AS_FOLLOWS_MESSAGE \u003d \"The deadline details are as follows:\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String ASK_FOR_OPTION_MESSAGE \u003d \"Which field of the deadline to edit? (Enter Corresponding \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            + \"Number)\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String OPTION_TO_EDIT_DUE_TIME \u003d \"3. Due Time\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String OPTION_TO_EDIT_PRIORITY \u003d \"4. Priority\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String OPTION_TO_EDIT_IS_DONE \u003d \"5. Completion Status\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private static final String INVALID_DUE_TIME \u003d \"Invalid due time entered by user\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private static final String INVALID_DUE_TIME_ENTERED \u003d \"Invalid due time entered by the user\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private static final String EMPTY_DESCRIPTION_MESSAGE \u003d \"Description provided is empty\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String ENTER_NEW_IS_DONE \u003d \"Enter new value for isDone:\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String IS_DONE_NOT_BOOLEAN \u003d \"Value entered for isDone field isn\u0027t a boolean value\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final String INVALID_IS_DONE_VALUE \u003d \"Invalid isDone value entered by user\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public static final int EDIT_COMPLETION_STATUS \u003d 5;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private LocalTime dueTime;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Setter for priority of the deadline."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param priority The new priority of the deadline."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Constructor for Deadline Class."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param description Description of the deadline."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param date Date of specified Deadline"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param dueTime Due time of specified deadline."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param priority Priority of specified deadline."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param status this is the status of isDone."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @throws Exception If wrong format is used for date, time fields."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public Deadline(String description, String date, String dueTime, String priority, boolean status) throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        taskType \u003d TaskType.Deadline;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        parseDescription(description);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        parseDate(date);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        parseDueTime(dueTime);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        parsePriority(priority);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        isDone \u003d status;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //@@author NizarMohd"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method sets isDone to true."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method retrieves isDone status."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return a boolean value depending on isDone status."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method converts the isDone status into a String."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String value in the format \"[{status}]\" where {status} is completed isDone is true and pending if"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *         otherwise"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toStringIsDone() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return COMPLETED_SYMBOL;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return PENDING_SYMBOL;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    //@@author hongquan448"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Returns the number of days left till the event."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @return Number of days till deadline."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public long numberOfDaysLeft() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        return ChronoUnit.DAYS.between(LocalDate.now(),this.date);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Parses the completion status from the string entered by user for the isDone field."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param isDone String entered by user for the priority field."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @throws Exception If the provided string isn\u0027t a boolean value."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private void parseCompletionStatus(String isDone) throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            parseDoneStatus(isDone);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            LOGGER.log(Level.INFO, IS_DONE_NOT_BOOLEAN);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new DeadlineCompletionStatusNotABooleanException();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Parses the completion status from the given string."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param isDone The string used to denote completion status."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @throws DeadlineCompletionStatusNotABooleanException If the entered string doesn\u0027t represent a boolean value."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private void parseDoneStatus(String isDone) throws DeadlineCompletionStatusNotABooleanException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        switch (isDone.strip()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        case \"TRUE\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        case \"True\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        case \"true\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        case \"False\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        case \"FALSE\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        case \"false\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new DeadlineCompletionStatusNotABooleanException();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            // break statement can\u0027t be reached if added"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Parses the priority from the string entered by user for the priority field."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param priority String entered by user for the priority field."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @throws Exception If the provided priority isn\u0027t an integer."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private void parsePriority(String priority) throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            this.priority \u003d Integer.parseInt(priority.strip());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            LOGGER.log(Level.INFO, PRIORITY_NOT_INTEGER);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new TaskPriorityNotIntegerException();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Parses the Due time from the string entered by user for the dueTime field."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param dueTime String entered by user for the dueTime field."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @throws Exception If the provided end time isn\u0027t valid."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private void parseDueTime(String dueTime) throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            this.dueTime \u003d LocalTime.parse(dueTime.strip());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            LOGGER.log(Level.INFO, INVALID_DUE_TIME);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new InvalidDueTimeException();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Parses the Date from the string entered by user for the date field."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param date String entered by user for the date field."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @throws Exception If the provided date isn\u0027t valid or is a past date."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private void parseDate(String date) throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            this.date \u003d LocalDate.parse(date.strip());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            LOGGER.log(Level.INFO, INVALID_DATE);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        if (this.date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            LOGGER.log(Level.INFO, DATE_AFTER_CURRENT_DATE);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new TaskDateBeforeCurrentDateException();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Parses the description from the string entered by user for the description field."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param description String entered by user for the description field."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @throws Exception If the description of the task provided is invalid."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private void parseDescription(String description) throws Exception {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        if (description.contains(\"/\") || description.contains(\"#\")) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new DescriptionContainsInvalidCharacterException();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    //@@author hongquan448"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Returns the information related to information in form of a string."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @return deadlineInfo Contains information related to the deadline."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public String getTaskInformation() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        String deadlineInfo \u003d DEADLINE_SYMBOL + toStringIsDone() + description + ON"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(DATE_PATTERN)) + AT + dueTime.toString()"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "                + WITH_PRIORITY + priority;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        return deadlineInfo;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Returns the priority of the specified deadline."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @return Priority of deadline."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Returns the date of the deadline."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @return Date of deadline."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Used to identify if the string contains the keyword specified in its description."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param keyword The keyword to be matched with the description."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @return containsKeyword Indicates the presence/absence of keyword in the deadline\u0027s description."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @throws Exception If no keyword is entered."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public boolean hasKeyword(String keyword) throws Exception {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        if (keyword.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            LOGGER.log(Level.INFO, SEARCH_KEYWORD_EMPTY);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new SearchKeywordEmptyException();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        boolean containsKeyword \u003d description.toLowerCase().contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        return containsKeyword;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Returns the deadline in the format used to store it in the data file."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @return formattedDeadlineDetails Contains the deadline details in the required format."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public String getFormattedDetails() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        String isDoneString \u003d Boolean.toString(getIsDone());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        String formattedDeadlineDetails \u003d DEADLINE_IDENTIFIER + DELIMITER + description + DELIMITER + date + DELIMITER"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "                + dueTime + DELIMITER + priority + DELIMITER + isDoneString + NEW_LINE_CHARACTER;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        return formattedDeadlineDetails;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    //@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Edits the event at the index specified."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Newly updated event."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public Deadline editDeadline(Ui ui) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        printOptionsToEdit(ui);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int fieldToBeEdited;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        fieldToBeEdited \u003d getFieldToBeEdited(ui);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        switch (fieldToBeEdited) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_DESCRIPTION:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editDescription(ui);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_DATE:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editDate(ui);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_DUE_TIME:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editDueTime(ui);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_PRIORITY:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editPriority(ui);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_COMPLETION_STATUS:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editCompletionStatus(ui);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.SEVERE, WRONG_OPTION);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        printUpdatedDetails(ui);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the priority field of the deadline."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editPriority(Ui ui) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_PRIORITY_MESSAGE);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newPriorityString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parsePriority(newPriorityString);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_PRIORITY_VALUE);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the isDone field of the deadline."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editCompletionStatus(Ui ui) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_IS_DONE);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newPriorityString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseCompletionStatus(newPriorityString);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_IS_DONE_VALUE);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the dueTime field of the deadline."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editDueTime(Ui ui) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_DUE_TIME_MESSAGE);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newStartTimeString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseDueTime(newStartTimeString);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_DUE_TIME_ENTERED);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the date field of the deadline."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editDate(Ui ui) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_DATE_MESSAGE);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newDateString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseDate(newDateString);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (this.date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    LOGGER.log(Level.INFO, DATE_AFTER_CURRENT_DATE);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    throw new TaskDateBeforeCurrentDateException();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_DATE_ENTERED);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the description field of the deadline."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editDescription(Ui ui) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_DESCRIPTION_MESSAGE);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newDescription \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseDescription(newDescription);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, EMPTY_DESCRIPTION_MESSAGE);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns an integer denoting the field selected to be edited later."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return fieldToBeEdited Corresponds to the field to be edited."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private int getFieldToBeEdited(Ui ui) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int fieldToBeEdited \u003d 0;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                fieldToBeEdited \u003d Integer.parseInt(ui.getUserIn());"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                boolean isInvalidOption \u003d fieldToBeEdited \u003e 5 || fieldToBeEdited \u003c\u003d 0;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (isInvalidOption) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    throw new Exception();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception exception) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_OPTION_ENTERED);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(ENTER_VALID_NUMBER_FROM_LIST_MESSAGE);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return fieldToBeEdited;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints the updated details of the deadline after an edit command."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with user."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printUpdatedDetails(Ui ui) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(UPDATED_DETAILS);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(this.getTaskInformation());"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints the list of fields that could be edited as a list."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with user."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printOptionsToEdit(Ui ui) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(DEADLINE_DETAILS_AS_FOLLOWS_MESSAGE);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(this.getTaskInformation());"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(ASK_FOR_OPTION_MESSAGE);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_DESCRIPTION);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_DATE);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_DUE_TIME);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_PRIORITY);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_IS_DONE);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printEmptyLine();"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //@@author NizarMohd"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getCalendarTaskDetails() {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String isDoneString \u003d isDone ? YES : NO;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String details \u003d DEADLINE_SYMBOL + isDoneString  + SPACE +  this.description;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (details.length() \u003e 25) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            details \u003d details.substring(0, 22);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            details \u003d details + \"...\";"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            StringBuilder detailsBuilder \u003d new StringBuilder(details);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            while (detailsBuilder.length() \u003c 25) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                detailsBuilder.append(SPACE);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            details \u003d detailsBuilder.toString();"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 244,
      "NizarMohd": 51,
      "hongquan448": 243
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.DescriptionContainsInvalidCharacterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.EmptyDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.EventStartTimeAfterEndTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.InvalidDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.InvalidEndTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.InvalidStartTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.SearchKeywordEmptyException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskDateBeforeCurrentDateException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskPriorityNotIntegerException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Constants;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.ENTER_NEW_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.SPACE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Represents an event and contains the related functions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EMPTY_DESCRIPTION_MESSAGE \u003d \"New description entered by user while editing \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \"the task is empty\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Setter for priority of the deadline."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority The new priority of the event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Getter function for Start Time of Event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Start time of event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Getter function for End Time of Event."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return End time of event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for Event Class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param date Date of specified Event."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param startTime Start time of specified event."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param endTime End time of specified event."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority Priority of specified event."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used for date, time or priority fields."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public Event(String description, String date, String startTime, String endTime, String priority)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskType \u003d TaskType.Event;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDescription(description);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDate(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseStartTime(startTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseEndTime(endTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (this.startTime.isAfter(this.endTime)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, Constants.START_TIME_AFTER_END_TIME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventStartTimeAfterEndTimeException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parsePriority(priority);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the priority from the string entered by user for the priority field."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority String entered by user for the priority field."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the provided priority isn\u0027t an integer."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parsePriority(String priority) throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.priority \u003d Integer.parseInt(priority.strip());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, Constants.PRIORITY_NOT_INTEGER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new TaskPriorityNotIntegerException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the End time from the string entered by user for the endTime field."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param endTime String entered by user for the endTime field."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the provided end time isn\u0027t valid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseEndTime(String endTime) throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.endTime \u003d LocalTime.parse(endTime.strip());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, Constants.INVALID_END_TIME);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new InvalidEndTimeException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the End time from the string entered by user for the startTime field."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param startTime String entered by user for the startTime field."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the provided start time isn\u0027t valid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseStartTime(String startTime) throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.startTime \u003d LocalTime.parse(startTime.strip());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, Constants.INVALID_START_TIME);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new InvalidStartTimeException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the Date from the string entered by user for the date field."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param date String entered by user for the date field."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the provided date isn\u0027t valid or is a past date."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseDate(String date) throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.date \u003d LocalDate.parse(date.strip());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, Constants.INVALID_DATE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (this.date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, Constants.DATE_AFTER_CURRENT_DATE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new TaskDateBeforeCurrentDateException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the description from the string entered by user for the description field."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param description String entered by user for the description field."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the description of the task provided is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseDescription(String description) throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (description.contains(Character.toString(\u0027/\u0027)) || description.contains(Character.toString(\u0027#\u0027))) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new DescriptionContainsInvalidCharacterException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the information related to information in form of a string."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return eventInfo Contains information related to the event."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public String getTaskInformation() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String eventInfo \u003d Constants.EVENT_SYMBOL + description + Constants.AT"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(Constants.DATE_PATTERN)) + Constants.FROM_PLAIN"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + startTime.toString() + Constants.TO + endTime.toString() + Constants.WITH_PRIORITY + priority;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return eventInfo;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the number of days left till the event."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Number of days till event."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public long numberOfDaysLeft() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return ChronoUnit.DAYS.between(LocalDate.now(),this.date);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public String getCalendarTaskDetails() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String details \u003d Constants.EVENT_SYMBOL + this.description;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (details.length() \u003e 25) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            details \u003d details.substring(0, 22);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            details \u003d details + \"...\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            StringBuilder detailsBuilder \u003d new StringBuilder(details);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            while (detailsBuilder.length() \u003c 25) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                detailsBuilder.append(SPACE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            details \u003d detailsBuilder.toString();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the priority of the specified event."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Priority of event."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the date of the event."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Date of event."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to identify if the string contains the keyword specified in its description."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The keyword to be matched with the description."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return containsKeyword Indicates the presence/absence of keyword in the event\u0027s description."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If keyword entered is empty."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public boolean hasKeyword(String keyword) throws Exception {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (keyword.equals(Constants.EMPTY_STRING)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, Constants.SEARCH_KEYWORD_EMPTY);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new SearchKeywordEmptyException();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean containsKeyword \u003d description.toLowerCase().contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return containsKeyword;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the event in the format used to store it in the data file."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return formattedEventDetails Contains the event details in the required format."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public String getFormattedDetails() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String formattedEventDetails \u003d Constants.EVENT_IDENTIFIER + Constants.DELIMITER + description"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + Constants.DELIMITER + date + Constants.DELIMITER + startTime + Constants.DELIMITER + endTime"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + Constants.DELIMITER + priority + Constants.NEW_LINE_CHARACTER;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return formattedEventDetails;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Edits the event at the index specified."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Newly updated event."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public Event editEvent(Ui ui) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        printOptionsToEdit(ui);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int fieldToBeEdited;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        fieldToBeEdited \u003d getFieldToBeEdited(ui);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        switch (fieldToBeEdited) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case Constants.EDIT_DESCRIPTION:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editDescription(ui);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case Constants.EDIT_DATE:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editDate(ui);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case Constants.EDIT_START_TIME:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editStartTime(ui);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case Constants.EDIT_END_TIME:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editEndTime(ui);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case Constants.EDIT_PRIORITY:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editPriority(ui);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.SEVERE, Constants.WRONG_OPTION);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.ERROR_MESSAGE);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        printUpdatedDetails(ui);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the priority field of the event."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editPriority(Ui ui) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.ENTER_NEW_PRIORITY_MESSAGE);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newPriorityString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parsePriority(newPriorityString);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, Constants.INVALID_PRIORITY_VALUE);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the endTime field of the event."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editEndTime(Ui ui) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.ENTER_NEW_END_TIME_MESSAGE);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newEndTimeString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseEndTime(newEndTimeString);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (this.endTime.isBefore(this.startTime)) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    LOGGER.log(Level.INFO, Constants.START_TIME_AFTER_END_TIME);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    throw new EventStartTimeAfterEndTimeException();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, Constants.INVALID_END_TIME_ENTERED);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the startTime field of the event."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editStartTime(Ui ui) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.ENTER_NEW_START_TIME_MESSAGE);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newStartTimeString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseStartTime(newStartTimeString);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (this.endTime.isBefore(this.startTime)) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    LOGGER.log(Level.INFO, Constants.START_TIME_AFTER_END_TIME);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    throw new EventStartTimeAfterEndTimeException();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, Constants.INVALID_START_TIME_ENTERED);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the date field of the event."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editDate(Ui ui) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.ENTER_NEW_DATE_MESSAGE);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newDateString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseDate(newDateString);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (this.date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    LOGGER.log(Level.INFO, Constants.DATE_AFTER_CURRENT_DATE);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    throw new TaskDateBeforeCurrentDateException();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, Constants.INVALID_DATE_ENTERED);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the description field of the event."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editDescription(Ui ui) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_DESCRIPTION_MESSAGE);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newDescription \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseDescription(newDescription);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, EMPTY_DESCRIPTION_MESSAGE);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns an integer denoting the field selected to be edited later."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return fieldToBeEdited Corresponds to the field to be edited."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private int getFieldToBeEdited(Ui ui) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int fieldToBeEdited \u003d 0;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                fieldToBeEdited \u003d Integer.parseInt(ui.getUserIn());"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                boolean isInvalidOption \u003d fieldToBeEdited \u003e 5 || fieldToBeEdited \u003c\u003d 0;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (isInvalidOption) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    throw new Exception();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception exception) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, Constants.INVALID_OPTION_ENTERED);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(Constants.ENTER_VALID_NUMBER_FROM_LIST_MESSAGE);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return fieldToBeEdited;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints the updated details of the event after an edit command."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with user."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printUpdatedDetails(Ui ui) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.UPDATED_DETAILS);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(this.getTaskInformation());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints the list of fields that could be edited as a list."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with user."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printOptionsToEdit(Ui ui) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.EVENT_DETAILS_AS_FOLLOWS_MESSAGE);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(this.getTaskInformation());"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.ASK_FOR_OPTION_MESSAGE);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.OPTION_TO_EDIT_DESCRIPTION);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.OPTION_TO_EDIT_DATE);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.OPTION_TO_EDIT_START_TIME);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.OPTION_TO_EDIT_END_TIME);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.OPTION_TO_EDIT_PRIORITY);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printEmptyLine();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 461,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/task/SchedulableTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.SchedulableTaskDaysLeftNotIntegerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.SchedulableTaskDaysLeftNotPositiveException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.SchedulableTaskDaysToFinishMoreThanDaysLeftException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.SchedulableTaskDaysToFinishNotIntegerException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.SchedulableTaskDaysToFinishNotPositiveException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.SchedulableTaskEmptyDescriptionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.SchedulableTaskFormatNotFollowedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class SchedulableTask {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final char SINGLE_SPACE \u003d \u0027 \u0027;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final char DAYS_LEFT_IDENTIFIER \u003d \u0027d\u0027;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final char DAYS_TO_FINISH_IDENTIFIER \u003d \u0027f\u0027;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public String taskDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public int numberOfDaysLeft;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public int numberOfDaysRequiredToFinishTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Sets the details of Schedulable Task object with the information provided in the splitDetails."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param splitDetails Contains all the details of the schedulable task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the details entered are invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void setDetails(String[] splitDetails) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (splitDetails.length !\u003d 3) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new SchedulableTaskFormatNotFollowedException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        setDescription(splitDetails[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        setNumberOfDaysToFinish(splitDetails[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        setNumberOfDaysLeft(splitDetails[2]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Sets the numberOfDaysLeft field from the user given data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param numberOfDaysLeft User given input for number of days left."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the number entered is not positive or is less than the number of days to finish the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void setNumberOfDaysLeft(String numberOfDaysLeft) throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (numberOfDaysLeft.charAt(0) !\u003d DAYS_LEFT_IDENTIFIER"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    || numberOfDaysLeft.charAt(1) !\u003d SINGLE_SPACE) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new SchedulableTaskFormatNotFollowedException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.numberOfDaysLeft \u003d Integer.parseInt(numberOfDaysLeft.substring(2).trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (this.numberOfDaysLeft \u003c 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new SchedulableTaskDaysLeftNotPositiveException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (this.numberOfDaysLeft \u003c this.numberOfDaysRequiredToFinishTask) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new SchedulableTaskDaysToFinishMoreThanDaysLeftException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new SchedulableTaskDaysLeftNotIntegerException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new SchedulableTaskFormatNotFollowedException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Sets the numberOfDaysToFinish field from the user given data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param numberOfDaysToFinish User given input for number of days to finish task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the number entered is not positive."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void setNumberOfDaysToFinish(String numberOfDaysToFinish) throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (numberOfDaysToFinish.charAt(0) !\u003d DAYS_TO_FINISH_IDENTIFIER"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    || numberOfDaysToFinish.charAt(1) !\u003d SINGLE_SPACE) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new SchedulableTaskFormatNotFollowedException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.numberOfDaysRequiredToFinishTask \u003d Integer.parseInt(numberOfDaysToFinish.substring(2)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    .trim());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (this.numberOfDaysRequiredToFinishTask \u003c 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new SchedulableTaskDaysToFinishNotPositiveException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new SchedulableTaskDaysToFinishNotIntegerException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new SchedulableTaskFormatNotFollowedException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Sets the input from the user given input."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param description User given input for description."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws SchedulableTaskEmptyDescriptionException If the description is empty."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void setDescription(String description) throws SchedulableTaskEmptyDescriptionException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new SchedulableTaskEmptyDescriptionException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.taskDescription \u003d description;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 100
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskType taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract int getPriority();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract boolean hasKeyword(String keyword) throws Exception;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract String getFormattedDetails();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract String getTaskInformation();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract long numberOfDaysLeft();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract String getCalendarTaskDetails();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 24
    }
  },
  {
    "path": "src/main/java/task/TaskComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskComparator implements Comparator\u003cSchedulableTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public int compare(SchedulableTask schedulableTask1, SchedulableTask schedulableTask2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return  schedulableTask1.numberOfDaysLeft - schedulableTask2.numberOfDaysLeft;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 13
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import exception.command.IllegalDoneCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import exception.command.MisuseOfSetDoneWithEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Constants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.DEADLINE_MARKED_AS_DONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.RE_ENTER_VALID_INDEX_TO_MARK_AS_DONE_MESSAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Handles all functions related to the list of events."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Stores the task\u0027s information."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the TaskList class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Overloaded constructor for TaskList class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param tasks The list of events the task\u0027s list of events is initialised with."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the number of tasks currently stored."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return The number of tasks stored currently."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Adds a new task to the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui      This allows Task List class to interact with User."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param newTask represents the new task to be added."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void addTask(Task newTask, Ui ui) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.NEW_TASK_ADDED_MESSAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(newTask.getTaskInformation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Displays the current list of tasks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void listTasks(Ui ui) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.TASK_LIST_AS_FOLLOWS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            int eventNumber \u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(eventNumber + Constants.CLOSING_BRACKET + task.getTaskInformation());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                eventNumber++;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.LIST_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Deletes the task at the specified index."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui    This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param index The index (1-based) of the task to be deleted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void deleteTask(int index, Ui ui) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (index \u003e tasks.size() | index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.TASK_AT_INDEX_DELETED_MESSAGE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(tasks.get(index - 1).getTaskInformation());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            tasks.remove(index - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.NOW_YOU_HAVE + tasks.size() + Constants.TASK_S_IN_YOUR_LIST);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, Constants.INDEX_TO_BE_DELETED_OUT_OF_BOUNDS_LOG);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.RE_ENTER_VALID_INDEX_TO_DELETE_MESSAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Calls a helper function to edit the task at the specified index."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui    This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param index The index (1-based) of the task to be deleted."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void editTask(int index, Ui ui) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (index \u003e tasks.size() | index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            /* Converting to \u00270\u0027 based index */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editTaskAtIndex(index - 1, ui);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.TASK_AT_INDEX_EDITED_MESSAGE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.RE_ENTER_VALID_INDEX_TO_EDIT_MESSAGE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Edits the task at the specified index."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param index The index of the task to be edited."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index provided is invalid (i.e, out of bounds)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editTaskAtIndex(int index, Ui ui) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        switch (tasks.get(index).taskType) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case Event:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event oldEvent \u003d (Event) tasks.get(index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event updatedEvent \u003d oldEvent.editEvent(ui);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            tasks.set(index, updatedEvent);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case Deadline:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Deadline oldDeadline \u003d (Deadline) tasks.get(index);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Deadline updatedDeadline \u003d oldDeadline.editDeadline(ui);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            tasks.set(index, updatedDeadline);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.SEVERE, Constants.INVALID_TASK_TYPE_LOG);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.ERROR_ENCOUNTERED_DURING_EXECUTION_MESSAGE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Clears all the tasks currently stored."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void clearTasks(Ui ui) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.TASK_LIST_CLEARED_MESSAGE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Lists all the tasks sorted by their priority by calling a helper function."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void priorityView(Ui ui) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ArrayList\u003cTask\u003e tasksSortedByPriority \u003d tasks;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        tasksSortedByPriority.sort(Comparator.comparingInt(Task::getPriority));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Collections.reverse(tasksSortedByPriority);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            printTasksSortedByPriority(ui, tasksSortedByPriority);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.LIST_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints the tasks sorted by their priority."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param tasksSortedByPriority The sorted list of tasks."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printTasksSortedByPriority(Ui ui, ArrayList\u003cTask\u003e tasksSortedByPriority) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.LIST_SORTED_BY_PRIORITY_MESSAGE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Task task : tasksSortedByPriority) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(taskNumber + Constants.CLOSING_BRACKET + task.getTaskInformation());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            taskNumber++;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Lists all the tasks sorted by date along with the days remaining by calling a helper function."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void countdownView(Ui ui) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ArrayList\u003cTask\u003e tasksSortedByDate \u003d tasks;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        tasksSortedByDate.sort(Comparator.comparing(Task::getDate));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            printTasksSortedByDate(ui, tasksSortedByDate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.LIST_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints the tasks sorted by date along with the days remaining."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param tasksSortedByDate The sorted list of tasks."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printTasksSortedByDate(Ui ui, ArrayList\u003cTask\u003e tasksSortedByDate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.LIST_SORTED_ON_DAYS_LEFT_MESSAGE);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Task task : tasksSortedByDate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (!task.getDate().isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(taskNumber + Constants.CLOSING_BRACKET + task.getTaskInformation()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        + Constants.ARROW_SYMBOL + task.numberOfDaysLeft() + Constants.DAYS_LEFT);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                taskNumber++;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Displays the list of tasks containing the keyword."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui      This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The keyword to be searched for."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the keyword is empty."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void searchTasks(String keyword, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean hasMatchedTask \u003d checkForMatchedTasks(keyword);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (hasMatchedTask) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.SEARCH_LIST_MESSAGE);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            printMatchedTasks(keyword, ui);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.SEARCH_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to check if there is at least one task containing the keyword in it\u0027s description."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The word used for search."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return true if at least one task has a description containing the keyword and false otherwise"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If keyword used is empty."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private boolean checkForMatchedTasks(String keyword) throws Exception {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean hasMatchedTask \u003d false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (task.hasKeyword(keyword)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                hasMatchedTask \u003d true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return hasMatchedTask;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Displays the list of tasks containing the keyword in their descriptions."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The word used for search."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the keyword is empty."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printMatchedTasks(String keyword, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (task.hasKeyword(keyword)) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(taskNumber + Constants.CLOSING_BRACKET + task.getTaskInformation());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                taskNumber++;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //@@author NizarMohd"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks if deadline has already been marked as done."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param deadline this is the deadline that the user is trying to mark as done."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui this object allows for interaction with the user."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalDoneCommandException is thrown when user tries to mark deadline as done when it has already been"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *          done."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void checkIfDone(Deadline deadline, Ui ui) throws IllegalDoneCommandException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (deadline.getIsDone()) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalDoneCommandException(\"Deadline has already been marked as done!\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks for the upper and lower bounds of index."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param index this is the index that is being checked."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalDoneCommandException is thrown when the user enters an index that is out of both bounds."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void checkIndexBounds(int index) throws IllegalDoneCommandException {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalDoneCommandException(RE_ENTER_VALID_INDEX_TO_MARK_AS_DONE_MESSAGE);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method executes the overall process to mark a deadline as done."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param task this is the task to be set as done."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui this object allows for interaction with User."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalDoneCommandException is thrown if user enters the done command wrongly."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws MisuseOfSetDoneWithEvent if User tries to set Event as done."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void executeDone(Task task, Ui ui) throws IllegalDoneCommandException, MisuseOfSetDoneWithEvent {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (task.taskType.equals(TaskType.Deadline)) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            checkIfDone(deadline, ui);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            deadline.setDone();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(DEADLINE_MARKED_AS_DONE);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(deadline.getTaskInformation());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new MisuseOfSetDoneWithEvent();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method sets tasks of deadline type at the specified index as done."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param index this is the index where the method will operate at."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui this allows for interaction with the user."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws MisuseOfSetDoneWithEvent if user tries to set events as done."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalDoneCommandException if user uses the done command wrongly."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void marksAsDone(int index, Ui ui) throws MisuseOfSetDoneWithEvent, IllegalDoneCommandException {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        index--;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        checkIndexBounds(index);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        executeDone(task, ui);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 295,
      "NizarMohd": 65
    }
  },
  {
    "path": "src/main/java/task/TaskScheduler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Handles creation of schedules based on user\u0027s requirements."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskScheduler {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NINE_AM \u003d \"09:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NINE_PM \u003d \"21:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String PRIORITY_FOR_SCHEDULED_TASKS \u003d \"0\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private int numberOfTasksToSchedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private PriorityQueue\u003cSchedulableTask\u003e taskQueue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private ArrayList\u003cTask\u003e toBeAddedToList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for TaskScheduler."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param numberOfTasksToSchedule Denotes the number of tasks to be scheduled."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskScheduler(int numberOfTasksToSchedule) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.numberOfTasksToSchedule \u003d numberOfTasksToSchedule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.taskQueue \u003d new PriorityQueue\u003c\u003e(numberOfTasksToSchedule, new TaskComparator());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        toBeAddedToList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to get details of the tasks to be scheduled from the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void getTasks(Ui ui) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.ENTER_TASKS_IN_THE_FOLLOWING_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.SCHEDULABLE_TASK_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (int taskNumber \u003d 1; taskNumber \u003c\u003d numberOfTasksToSchedule; taskNumber++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            SchedulableTask newSchedulableTask \u003d new SchedulableTask();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.ENTER_DETAILS + taskNumber + Constants.COLON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                String taskDetails \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                String[] splitDetails \u003d taskDetails.split(Constants.FORWARD_SLASH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                newSchedulableTask.setDetails(splitDetails);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                addTaskToQueue(newSchedulableTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                taskNumber--;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.DETAILS_CAPTURED_SUCCESSFULLY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Adds the task given to the queue."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param newSchedulableTask The task to be added to the queue."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void addTaskToQueue(SchedulableTask newSchedulableTask) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskQueue.add(newSchedulableTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a schedule based on the user\u0027s requirement if it\u0027s possible."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return isFeasible Denotes whether the user provided task is schedulable."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public boolean scheduleTasks(Ui ui) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int currentDay \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        LocalDate startDate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String startOfDay \u003d NINE_AM;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String endOfDay \u003d NINE_PM;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        StringBuilder scheduleCreated \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean isFeasible \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        while (!taskQueue.isEmpty() \u0026\u0026 isFeasible) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            SchedulableTask taskToBeScheduledNext \u003d taskQueue.poll();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            scheduleCreated.append(taskToBeScheduledNext.taskDescription).append(Constants.FROM)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    .append(LocalDate.now().plusDays(currentDay + 1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            startDate \u003d LocalDate.now().plusDays(currentDay);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (currentDay + taskToBeScheduledNext.numberOfDaysRequiredToFinishTask"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \u003e taskToBeScheduledNext.numberOfDaysLeft) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                isFeasible \u003d scheduleNotFeasible();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                currentDay \u003d addTaskToList(ui, currentDay, startDate, startOfDay, endOfDay,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        PRIORITY_FOR_SCHEDULED_TASKS, scheduleCreated, taskToBeScheduledNext);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (isFeasible) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(scheduleCreated.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return isFeasible;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns a false value to denote that the schedule is infeasible."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private boolean scheduleNotFeasible() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Adds the task mentioned to the list of tasks."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param currentDay The actual date."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param startDate The day at which the task starts."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param startOfDay The time at which the activities for the day starts at."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param endOfDay The time at which the activities for the day ends at."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param defaultPriority Denotes the default value of priority used for scheduled tasks."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param scheduleCreated Stores the schedule in form of a string."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param taskToBeScheduledNext Denotes the current task that is added to the schedule."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return The day the next task can be scheduled from if any."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private int addTaskToList(Ui ui, int currentDay, LocalDate startDate, String startOfDay, String endOfDay,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                              String defaultPriority, StringBuilder scheduleCreated,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                              SchedulableTask taskToBeScheduledNext) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        LocalDate endDate;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        currentDay +\u003d taskToBeScheduledNext.numberOfDaysRequiredToFinishTask;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        scheduleCreated.append(Constants.TO).append(LocalDate.now().plusDays(currentDay))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                .append(System.lineSeparator()).append(Constants.TAB);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        endDate \u003d LocalDate.now().plusDays(currentDay);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (LocalDate iterator \u003d startDate.plusDays(1); !iterator.isAfter(endDate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "             iterator \u003d iterator.plusDays(1)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                toBeAddedToList.add(new Event(taskToBeScheduledNext.taskDescription, iterator.toString(), startOfDay,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        endOfDay, defaultPriority));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(\"Unexpected error\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return currentDay;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Add the scheduled tasks to the current list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param taskList Contains the current list of tasks."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void addScheduleToList(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.tasks.addAll(toBeAddedToList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 153
    }
  },
  {
    "path": "src/main/java/task/TaskType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    Event, Deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 6
    }
  },
  {
    "path": "src/main/java/ui/Constants.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class contains all the constants required for Ui."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FILE_PATH_STUDYAREAS \u003d \"library\" + File.separator + \"locations.txt\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FILE_PATH_DICTIONARY \u003d \"library\" + File.separator + \"dictionary.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String MISSING_STUDY_AREA_DATA \u003d \"locations.txt is missing\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String LINE \u003d \"_______________________________________________________________________________\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"_________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final int MAX_LINE_LENGTH \u003d 58;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FLAG \u003d \"-\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String MULTIPLE_WHITE_SPACES \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DUPLICATE_FLAGS \u003d \"Duplicate flags entered!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String SIZE_FLAG \u003d \"-s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String PORTS_FLAG \u003d \"-p\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INDOOR_FLAG \u003d \"-i\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String OUTDOOR_FLAG \u003d \"-o\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NOT_INTEGER \u003d \"Argument used after size flag \\\"-s\\\" is not an integer\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String WRONG_FLAG_USAGE \u003d \"Flags indicated are wrongly used. Please enter \\\"help\\\" for the\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" supported flags!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String WRONG_FLAG_ARGUMENT_POSITION \u003d \"Flags are to be used only after location\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String START_STUDY_AREA_SEARCH \u003d \"Please enter the location for your desired study area. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"Enter \\\"help\\\" for a list of supported flags. Flags should only come after location, if a criteria for\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" location is entered. When you are done with the search, enter \\\"bye\\\".\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String PROMPT_USER \u003d \"Please enter the location for your desired study area.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FLAGS \u003d \"\\t Here is a list of supported flags!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t -p for study\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" areas with ports\" + System.lineSeparator() + \"\\t -i for study areas that are indoors\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + System.lineSeparator() + \"\\t -o for study areas that are outdoors\" + System.lineSeparator() + \"\\t \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"-s {size} for maximum number of pax\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String AVAILABLE_STUDY_AREAS \u003d \"Here are the available study areas!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String EMPTY_LIST \u003d \"Oops! Based on your criteria we were not able to find a compatible study\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" area!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String ONLY_FLAG \u003d \"Please enter the flag along with \\\"-\\\"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INCONSISTENT_DATA_STORAGE \u003d \"Data is wrongly stored in locations.txt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String TAB \u003d \"\\t \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NO_SIZE_INDICATED \u003d \"Max Size is not indicated. Please indicate accordingly!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String END_MESSAGE \u003d \"Thank you for using our study area search service!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String START_MESSAGE \u003d TAB + \"Welcome to OrgaNice! Below would be a list of commands useful \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"for you!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String GOODBYE_MESSAGE \u003d \"  Goodbye! Hope to see you again!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String EMPTY_LOCATION \u003d \"Location entered is empty! Please type a location to search for \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"StudyAreas!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NON_POSITIVE_INTEGER \u003d \"Integer entered cannot be zero or negative!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String HELP_DESCRIPTION_23 \u003d TAB + \"*All timing should follow 24 hour clock\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String HELP_DESCRIPTION_22 \u003d TAB + \"*All dates should follow YYYY-MM-DD format\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String HELP_DESCRIPTION_21 \u003d TAB + \"Notes:\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String HELP_DESCRIPTION_20 \u003d TAB + \"notes ------------------------------------- Enter Notes\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String HELP_DESCRIPTION_19 \u003d TAB + \"study ------------------------------------- Enter Study \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"Area search interface\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String HELP_DESCRIPTION_18 \u003d TAB + \"bye --------------------------------------- Terminate task\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" interface\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String HELP_DESCRIPTION_17 \u003d TAB + \"help -------------------------------------- View List Of \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"Commands Supported\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String HELP_DESCRIPTION_16 \u003d TAB + \"schedule \u003cnumber of task to be scheduled\u003e - Schedule tasks\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String HELP_DESCRIPTION_15 \u003d TAB + \"done \u003cindex of task\u003e ---------------------- Mark the \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \"deadline as done\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String HELP_DESCRIPTION_14 \u003d TAB + \"edit \u003cindex of task\u003e ---------------------- Edit the task\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String HELP_DESCRIPTION_13 \u003d TAB + \"delete \u003cindex of task\u003e -------------------- Delete the \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"task\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_12 \u003d TAB + \"search \u003ckeyword found in task\u003e ------------ View existing \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"task that contains the keyword\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_11 \u003d TAB + \"clear ------------------------------------- Delete\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" all tasks\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_10 \u003d TAB + \"countdown --------------------------------- View existing\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" tasks based on days left\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_9 \u003d TAB + \"priority_view ----------------------------- View existing \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"tasks based on priority\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_8 \u003d TAB + \"view -------------------------------------- View existing\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" events\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_7 \u003d TAB + \"------------------------------------------- Create a new \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"deadline\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_5 \u003d TAB + \"deadline \u003cdeadline details\u003e /d \u003cdate\u003e /t \u003cdue time\u003e /p \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\u003cpriority of deadline\u003e\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_4 \u003d TAB + \"------------------------------------------- Create a new \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"event\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_3 \u003d TAB + \"event \u003cevent details\u003e /d \u003cdate\u003e /s \u003cstart time\u003e \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"/e \u003cend time\u003e /p \u003cpriority of event\u003e\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_2 \u003d TAB + \"Please enter the keywords followed by the information\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" shown in the brackets\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_1 \u003d TAB + \"OrgaNice! Supports the following commands\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author NizarMohd-reused"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused from https://www.netclipart.com/isee/iRwmhJb_bt21-rj-transparent-background/ and https://asciiart.club/"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    //Image for public static final String DAB is obtained from the first link and then generated in second link."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DAB \u003d \"\\t ``````````````````````````````````````````````````````````\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ````````````````````````````````:v(v\u0027`````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ```````````````````````````,)4|ex` `L}````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t `````````````````````````!s\\\"\u0027h `M:   ^z_;)T```````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t `````````````````````````Z   u|}Z:        \\\"}``````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ``````````````````````:\u003d?)                \u0027B?L\u0027```````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t `````````````````````\u0027Z                    ;Yp\\\"```````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t `````````````````````.e                      ?_```````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ```````````````````\u0027QDGH                    .5````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ````````````````````I#g\u0027         \u0027_`        ||````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ```````````:mX_``````YhL`      `\u0027q!`   ?     h````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ```````````\u0027Qbs)|L\u003d_V\\\" \u0027Y}     ^\u0027q@\u0026b\u003dc\u003d_`  ,Z````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ````````````q\u003e     \u0027T,   ,o\\\"    ;\\\"@c.   .sVx~`````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ````````````c!             \\\"bh` `,p       z:``````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t `````````````q.              ngDQmh8s     X\u0027``````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ``````````````LY\\\"             :n}\u003e``b;   _V```````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ````````````````q?,                ?;   \\\"V````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ``````````````KvR                  \u0027  )x_`````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ``````````````zjL                  GLY\\\"```````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ```````````````M                 .I)``````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ```````````````Lz                `D:``````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ``````````````vu`    (I)_;\\\"\\\".      P.`````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ``````````````p     :X.\u0027:^,\\\"\u003dn    \\\"q``````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t `````````````)0X?^:)I````````m\u0027   :j``````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t `````````````.IGD8k\u0027`````````\u003c\u0026G55M```````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\t ``````````````````````````````````````````````````````````\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author NizarMohd-reused"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused logo from http://patorjk.com/software/taag/#p\u003ddisplay\u0026f\u003dGraffiti\u0026t\u003dTypeSomething with minor"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    // modifications. The website above allows for generation of fonts in ascii format. Therefore, logo is"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    // generated from the service provided by the website."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String LOGO \u003d \"_______/\\\\\\\\\\\\\\\\\\\\___________________________________________________\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"__/\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"__________________________________________/\\\\\\\\\\\\____________\" +  System.lineSeparator()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"______/\\\\\\\\\\\\///\\\\\\\\\\\\__________________________________________________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_________________________________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________\" +  System.lineSeparator()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\____________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___________________\\\\/\\\\\\\\\\\\/\\\\\\\\\\\\_\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_\\\\/\\\\\\\\\\\\___/\\\\\\\\\\\\__________________________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        +  System.lineSeparator()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_____/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___/\\\\\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\////\\\\\\\\\\\\___/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"__\\\\/\\\\\\\\\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\__\\\\///_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______\" +  System.lineSeparator()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\/////\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\////////\\\\\\\\\\\\___\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_\\\\/\\\\\\\\\\\\\\\\//\\\\\\\\\\\\\\\\/\\\\\\\\\\\\___/\\\\\\\\\\\\____/\\\\\\\\\\\\//////_____/\\\\\\\\\\\\/////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\\\\\\\\\____\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"___\" +  System.lineSeparator()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"______\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\___\\\\///____\\\\///////\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_\\\\/\\\\\\\\\\\\_\\\\//\\\\\\\\\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\___/\\\\\\\\\\\\___________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_____\" +  System.lineSeparator()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"________\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___________/\\\\\\\\_____\\\\\\\\\\\\___/\\\\\\\\\\\\/////\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_\\\\/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\_________\\\\//\\\\\\\\///////_______\\\\///_______\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        +  System.lineSeparator()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"____________\\\\///\\\\\\\\\\\\\\\\\\\\/______\\\\/\\\\\\\\\\\\__________\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/\\\\\\\\\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_\\\\/\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"_/\\\\\\\\\\\\_____\" +  System.lineSeparator()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"______________\\\\/////________\\\\///____________\\\\////////_____\\\\////////\\\\//___\\\\///_____\\\\/////__\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        +  \"_\\\\///______\\\\////////_____\\\\//////////______\\\\///_____\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NON_POSITIVE_INTEGER_LOG \u003d \"User entered a non positive integer\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NON_INTEGER_LOG \u003d \"User entered an invalid number for integer input\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DUPLICATE_FLAGS_LOG \u003d \"Duplicate flags entered by user\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String IDENTIFIER_MISSING_LOG \u003d \"Identifier not entered with flag by user\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NO_SIZE_INDICATED_LOG \u003d \"no string exist after \\\"-s\\\"\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String WRONG_FLAG_LOG \u003d \"Wrong flag used by user while searching for study areas\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String FLAG_MISPLACED_LOG \u003d \"Flag is placed in the wrong position in the user input\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NEW_TASK_ADDED_MESSAGE \u003d \"A new task with the following information has been added.\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String TASK_LIST_AS_FOLLOWS \u003d \"Here is the list of tasks added so far:\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String CLOSING_BRACKET \u003d \") \";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String SEARCH_EMPTY_MESSAGE \u003d \"No matched tasks found.\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String TASK_AT_INDEX_DELETED_MESSAGE \u003d \"Noted! I have removed this task:\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INDEX_TO_BE_DELETED_OUT_OF_BOUNDS_LOG \u003d \"Index specified to be deleted is out of bounds\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String RE_ENTER_VALID_INDEX_TO_DELETE_MESSAGE \u003d \"Invalid index entered. Please enter a valid\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \" index to be deleted\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String TASK_AT_INDEX_EDITED_MESSAGE \u003d \"The task at the mentioned index has been \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \"edited successfully\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String RE_ENTER_VALID_INDEX_TO_EDIT_MESSAGE \u003d \"Invalid index entered. Please enter a\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \" valid index to be edited\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String RE_ENTER_VALID_INDEX_TO_MARK_AS_DONE_MESSAGE \u003d \"Invalid index entered. Please enter a\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" valid index to be marked as done\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DEADLINE_MARKED_AS_DONE \u003d \"Nice! I\u0027ve marked this deadline as done!\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_TASK_TYPE_LOG \u003d \"Task type of the task to be edited not recognized\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ERROR_ENCOUNTERED_DURING_EXECUTION_MESSAGE \u003d \"Error encountered during execution\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String TASK_LIST_CLEARED_MESSAGE \u003d \"The list of tasks is cleared\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String LIST_SORTED_BY_PRIORITY_MESSAGE \u003d \"Here is the list of tasks added so far displayed \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \"in decreasing order of priority:\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String LIST_SORTED_ON_DAYS_LEFT_MESSAGE \u003d \"Here is the list of tasks with sorted based\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \" on the number of days left:\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ARROW_SYMBOL \u003d \" ---\u003e \";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DAYS_LEFT \u003d \" day(s) left\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String FROM \u003d \" is scheduled from \";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String TO \u003d \" to \";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String WRONG_FORMAT_MESSAGE \u003d \"Please follow the format specified. Renter details:\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_DETAILS \u003d \"Enter details for task \";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String COLON \u003d \":\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String FORWARD_SLASH \u003d \"/\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String SCHEDULABLE_TASK_FORMAT \u003d \"\u003ctask name\u003e /f \u003cTime to finish task in days\u003e\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \" /d \u003cNumber of days left from current day to finish it\u003e\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_TASKS_IN_THE_FOLLOWING_FORMAT \u003d \"Enter tasks in the following format:\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DETAILS_CAPTURED_SUCCESSFULLY \u003d \"Details captured successfully.\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final int EDIT_DESCRIPTION \u003d 1;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final int EDIT_DATE \u003d 2;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final int EDIT_START_TIME \u003d 3;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final int EDIT_END_TIME \u003d 4;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final int EDIT_PRIORITY \u003d 5;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \"Error encountered during execution\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DATE_PATTERN \u003d \"MMM d yyyy\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EVENT_SYMBOL \u003d \"[E] \";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String AT \u003d \" at \";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String WITH_PRIORITY \u003d \" with priority \";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DELIMITER \u003d \"#\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NEW_LINE_CHARACTER \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EVENT_IDENTIFIER \u003d \"E\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_NEW_PRIORITY_MESSAGE \u003d \"Enter new priority:\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_NEW_END_TIME_MESSAGE \u003d \"Enter new End Time:\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_NEW_START_TIME_MESSAGE \u003d \"Enter new Start Time:\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_NEW_DATE_MESSAGE \u003d \"Enter new Date:\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_NEW_DESCRIPTION_MESSAGE \u003d \"Enter new description:\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_VALID_NUMBER_FROM_LIST_MESSAGE \u003d \"Please enter a valid number from the list\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String UPDATED_DETAILS \u003d \"Updated Details:\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EVENT_DETAILS_AS_FOLLOWS_MESSAGE \u003d \"The event details are as follows:\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ASK_FOR_OPTION_MESSAGE \u003d \"Which field of the event to edit?\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \" (Enter Corresponding Number)\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String OPTION_TO_EDIT_DESCRIPTION \u003d \"1. Description\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String OPTION_TO_EDIT_DATE \u003d \"2. Date\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String OPTION_TO_EDIT_START_TIME \u003d \"3. Start Time\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String OPTION_TO_EDIT_END_TIME \u003d \"4. End Time\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String OPTION_TO_EDIT_PRIORITY \u003d \"5. Priority\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String START_TIME_AFTER_END_TIME \u003d \"Event start time after end time exception thrown\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String PRIORITY_NOT_INTEGER \u003d \"Task priority not integer exception thrown\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_END_TIME \u003d \"Invalid end time exception thrown\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_START_TIME \u003d \"Invalid start time exception thrown\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_DATE \u003d \"Invalid date exception thrown\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DATE_AFTER_CURRENT_DATE \u003d \"Date after current date exception thrown\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String SEARCH_KEYWORD_EMPTY \u003d \"Search keyword empty exception thrown\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String WRONG_OPTION \u003d \"Wrong option entered not handled by getFieldToBeEdited\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_PRIORITY_VALUE \u003d \"Invalid priority value entered by user\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_END_TIME_ENTERED \u003d \"Invalid end time entered by the user\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_START_TIME_ENTERED \u003d \"Invalid start time entered by user\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_DATE_ENTERED \u003d \"Invalid date entered by user\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_OPTION_ENTERED \u003d \"Invalid option entered by user\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String FROM_PLAIN \u003d \" from \";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String FILE_PATH_EVENTS \u003d \"library\" + File.separator + \"taskList.txt\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String FILE_PATH_STUDY_AREAS \u003d \"library\" + File.separator + \"locations.txt\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EXCEPTION_ENCOUNTERED_MESSAGE \u003d \"Exception encountered when Duke was constructed\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DUKE_LOGGER_LOG \u003d \"dukeLogger.log\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String FILE_LOGGER_NOT_WORKING_MESSAGE \u003d \"File Logger not working\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String APPLICATION_STARTED_EXECUTION \u003d \"Application started Execution\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String APPLICATION_GOING_TO_EXIT \u003d \"Application is going to exit\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String TASK_MODE \u003d \"Application transitioning to task mode\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String APPLICATION_CLOSED_SUCCESSFULLY \u003d \"Application closed successfully\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String SHORT_DESCRIPTION \u003d \"Description of location is too short!\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String STUDY_AREA_COMMAND \u003d \"study\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String TASK_S_IN_YOUR_LIST \u003d \" task(s) in your list\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NOW_YOU_HAVE \u003d \"Now you have \";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String SEARCH_LIST_MESSAGE \u003d \"The list of tasks containing the mentioned keyword in their\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \" description are as follows:\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String NOTES_COMMAND \u003d \"notes\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String NOTES_WELCOME_MESSAGE \u003d \"Welcome to OrgaNice\u0027s Notes!\\n\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            + \"Notes are stored based on modules.\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            + \"To get started: add a module, enter a module and start adding notes!\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String ADD_MODULE_MESSAGE \u003d \"[add modulecode] to add a module\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String REMOVE_MODULE_MESSAGE \u003d \"[remove modulecode] to add a module\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String ENTER_MODULE_MESSAGE \u003d \"[enter modulecode] to enter notes for its notes\";"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String LIST_MODULE_MESSAGE \u003d \"[list] to list modules\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String EXIT_MODULE_MESSAGE \u003d \"[exit] to go back to OrgaNice main page\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String HELP_MODULE_MESSAGE \u003d \"[help] to list all the commands again\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String INVALID_NOTES_COMMAND_MESSAGE \u003d \"Please enter a valid command.\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String LINE_BREAK \u003d \"______________________________\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String NOTES_PATH \u003d \"library/notes.txt\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String NOTES_FILE_NOT_FOUND \u003d \"No notes are created as of now. All notes will automatically\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            + \"be saved.\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DIVIDER \u003d \"-----------------------------------------------------------------------\""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"---------------------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"---------------------------\";"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String[] DAYS \u003d {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String SPACES \u003d \"                       \";"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String COL \u003d \"|\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String PADDING \u003d \"    \";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String PADDING1 \u003d \"                        \";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String PADDING2 \u003d \"   \";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String PADDING3 \u003d \"  \";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final int MAX_COL \u003d 7;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final int MAX_ROW \u003d 5;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final int JAN \u003d 1;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final int DEC \u003d 12;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final int MAX_LIST_SIZE \u003d 4;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String ENTER_DESIRED_MONTH \u003d \"Enter the month and year that you wish to see: \";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NON_INTEGER_YEAR \u003d \"Input entered for Year is not an integer. Please re-enter the year.\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INVALID_YEAR \u003d \"Invalid Year.\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INVALID_MONTH_RANGE \u003d \"Invalid Month range used. Must be within 1 - 12.\";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INVALID_MONTH \u003d \"Input entered for month is not an integer. Please re-enter the month.\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String TASKS_FOR \u003d \"Tasks for: \";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String COMMA \u003d \", \";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String MAP_CANNOT_BE_EMPTY \u003d \"Map cannot be empty\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NOW \u003d \"now\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String YES \u003d \"[Y]\";"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NO \u003d \"[N]\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String LIST_EMPTY_MESSAGE \u003d \"List of tasks is empty\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String ONLY_MONTH_AND_YEAR \u003d \"Please enter only month and year!\";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String BACK_IN_MAIN_INTERFACE \u003d \"You are now back in main interface. Enter \\\"help\\\" for a \""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"list of supported commands\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 20,
      "NizarMohd": 113,
      "GanapathySanathBalaji": 108,
      "-": 62
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static java.lang.System.lineSeparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.DAB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.FLAGS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.GOODBYE_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_10;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_11;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_12;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_13;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_14;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_15;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_16;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_17;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_18;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_19;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_20;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_21;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_22;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_23;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_4;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_5;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_7;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_8;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_9;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.LINE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.LOGO;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MAX_LINE_LENGTH;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.SPACE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.START_MESSAGE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.TAB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "//@@author NizarMohd"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * Contains functions used to interact with the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the constructor used to create the Ui class in Duke.run()."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructor assigns IO stream to the attributes of Ui."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param in This is the Input Stream for Ui."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param out This is the Output Stream for Ui."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method allows for other class to get User input."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String input from User."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getUserIn() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.in.nextLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method closes the Input Stream after usage is completed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.in.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Prints a line made up of \u0027_\u0027."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(LINE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method ensures that the message printed is within the standard length."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param message is the String that we intend to format to a standard length per line."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (message.equals(GOODBYE_MESSAGE + DAB)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.out.println(TAB + GOODBYE_MESSAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.out.println(DAB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.out.println(formatMessage(message, MAX_LINE_LENGTH));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method allows for StudyAreaCommand to print StudyArea based on its actual format,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * so that formatMessage method does not interfere with the initial format."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param studyArea This is the StudyArea to be printed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printStudyArea(StudyArea studyArea) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(studyArea.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    //@@author hongquan448"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Display welcome message."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(\"Hello from\" + System.lineSeparator() + LOGO);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(START_MESSAGE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        printHelp(false);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //@@author NizarMohd"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method prints the list of supported flags for the User."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printStudyAreaHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(FLAGS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Prints an empty line."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printEmptyLine() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Prints the closing message."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        printMessage(GOODBYE_MESSAGE + DAB);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    //@@author hongquan448"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Display the list of supported commands."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param withLine This boolean value states if the help message needs to print with or without lines."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public void printHelp(boolean withLine) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        if (withLine) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_2);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_3);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_4);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_5);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_7);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_8);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_9);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_10);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_11);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_12);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_13);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_14);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_15);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_16);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_17);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_18);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_19);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_20);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_21);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_22);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_23);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        if (withLine) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is a modification of a code from Stack Overflow to format strings into a standard length. Minor edition is"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * made to ensure suitability with the program."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method ensures that the message printed is within the standard\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * length."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param message is the String that we intend to format to a standard length\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *                per line.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param maxLength This is the standard length intended to be formatted."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String of standard length per line"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author NizarMohd-reused"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused from https://stackoverflow.com/questions/7528045/large-string-split-into-lines-with-maximum-length-in-java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    // with minor modification."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String formatMessage(String message, int maxLength) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        StringTokenizer token \u003d new StringTokenizer(message, SPACE);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder standardLengthMessage \u003d new StringBuilder(message.length());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        int lineLength \u003d 0;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        while (token.hasMoreTokens()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            String word \u003d token.nextToken();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (lineLength + word.length() \u003e maxLength) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                String temp \u003d standardLengthMessage.toString().trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                standardLengthMessage \u003d new StringBuilder(temp);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                standardLengthMessage.append(lineSeparator()).append(\"\\t \");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                lineLength \u003d 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            standardLengthMessage.append(word).append(SPACE);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            lineLength +\u003d word.length() + 1;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        return TAB + standardLengthMessage.toString().stripTrailing();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * This allows for other classes to print without formatMessage\u0027s format."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message This is the message to be printed."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param withLine This controls if nextLine have to be printed."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printOut(String message, boolean withLine) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        if (withLine) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            this.out.println(message);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            this.out.print(message);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 2,
      "GanapathySanathBalaji": 5,
      "NizarMohd": 154,
      "hongquan448": 49,
      "-": 34
    }
  },
  {
    "path": "src/test/java/calendarview/CalendarViewTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package calendarview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import exception.CalendarException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.INVALID_MONTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.INVALID_MONTH_RANGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.INVALID_YEAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NON_INTEGER_YEAR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.ONLY_MONTH_AND_YEAR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "//@@author NizarMohd"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "class CalendarViewTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *Raise an exception pertaining to an invalid lower bound range of month input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void setMonth_throwsException_InvalidMonthRange_lowerBound() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String in \u003d \"-1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            CalendarView.setMonth(in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fail(\"Should have raised an exception\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (CalendarException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assertEquals(INVALID_MONTH_RANGE, e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *Raise an exception pertaining to an invalid upper bound range of month input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void setMonth_throwsException_InvalidMonthRange_upperBound() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String in \u003d \"13\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            CalendarView.setMonth(in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fail(\"Should have raised an exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (CalendarException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assertEquals(INVALID_MONTH_RANGE, e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Raise an exception pertaining non-integer input of month value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void setMonth_throwsException_InvalidMonth() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String in \u003d \"may\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            CalendarView.setMonth(in);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fail(\"Should have raised an exception\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (CalendarException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assertEquals(INVALID_MONTH, e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Throws an exception for year input that has an integer value lesser than the current year.."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void setYear_throwsException_InvalidYear() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String in \u003d \"1999\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            CalendarView.setYear(in);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fail(\"Should have raised an exception\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (CalendarException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assertEquals(INVALID_YEAR, e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Throws an exception for year input that is not an integer value."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void setYear_throwsException_nonIntegerYear() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String in \u003d \"twenty-twenty\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            CalendarView.setYear(in);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fail(\"Should have raised an exception\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (CalendarException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assertEquals(NON_INTEGER_YEAR, e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Throws an exception pertaining to input length."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void checkInputLength() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String in \u003d \"month and year\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] input \u003d in.split(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            CalendarView.checkInputLength(input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fail(\"Should have raised an exception\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (CalendarException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assertEquals(ONLY_MONTH_AND_YEAR, e.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Checks for concatenation of two error message."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void setMonthAndYear_invalidMonth_invalidYear() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] input \u003d {\"may\", \"1999\"};"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String expected \u003d INVALID_MONTH + \" Also, \" + INVALID_YEAR;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(expected, CalendarView.setMonthAndYear(input));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Checks for concatenation of two error message."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void setMonthAndYear_invalidMonthRange_invalidYear() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] input \u003d {\"-1\", \"1999\"};"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String expected \u003d INVALID_MONTH_RANGE + \" Also, \" + INVALID_YEAR;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(expected, CalendarView.setMonthAndYear(input));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Checks for concatenation of two error message."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void setMonthAndYear_invalidMonth_nonIntegerYear() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] input \u003d {\"may\", \"oneNineNineNine\"};"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String expected \u003d INVALID_MONTH + \" Also, \" + NON_INTEGER_YEAR;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(expected, CalendarView.setMonthAndYear(input));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 131
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Contains all test regarding the Parser Class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_emptyAddEventCommand_throwException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"event\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty add command not identified\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Event details are not provided\",exception.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_emptyAddDeadlineCommand_throwException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"event\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty add command not identified\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Event details are not provided\",exception.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_emptyCommand_throwException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty command not identified\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Empty Line entered, Please enter a valid line\",exception.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidCommand_throwException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"list\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid command not identified\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Invalid command entered, Please enter a valid command\",exception.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidPriorityViewCommand_throwException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"priority_view of events\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid priority view command not identified\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Wrong command used to view events sorted by priority (Should be :priority_view )\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidCountdownViewCommand_throwException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"countdown of events\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid countdown view command not identified\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Wrong command used to view countdown of events (Should be :countdown )\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidViewCommand_throwException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"view events\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid view command not identified\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Wrong command used to view events (Should be :view )\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidClearCommand_throwException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"clear events\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid clear command not identified\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Wrong command to clear events (Should be :clear )\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidHelpCommand_throwException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"help for commands\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid help command not identified\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Wrong command used to view command list (Should be :help )\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_emptySearchCommand_throwException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"search \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty search command not identified\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"The search string entered is empty.\",exception.getMessage());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_emptyDeleteCommand_throwException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"delete \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty delete command not identified\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Index to delete not mentioned\", exception.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidDeleteCommand_throwException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"delete one\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid delete command not identified\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Enter a valid integer index (1-based) to delete/edit/done the corresponding event \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                            + \"(format: delete/edit/done index)\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 145
    }
  },
  {
    "path": "src/test/java/studyarea/StudyAreaListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.DUPLICATE_FLAGS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NON_POSITIVE_INTEGER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NOT_INTEGER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NO_SIZE_INDICATED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.ONLY_FLAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.WRONG_FLAG_ARGUMENT_POSITION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.WRONG_FLAG_USAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "class StudyAreaListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    StudyArea studyArea \u003d new StudyArea(\"mac commons\", \"utown\", \"nil\", true, true,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            5);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * An exception pertaining to duplicate flag should be raised if the string at flag[index] is not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * A dummy array of flags is created, and the first flag is accessed and used it to check duplicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * in the same location. The expected outcome is to return an exception since the string is not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void checkDuplicate_gotDuplicate_throwsException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String[] flag \u003d {\"-a\", \"-b\"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            StudyAreaList.checkDuplicate(flag, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            fail(\"Should have thrown an exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            assertEquals(DUPLICATE_FLAGS, e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * An exception pertaining to using only hyphen when declaring a flag."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * A dummy array is made with a flag inside that has no hyphen character. The expected outcome is to return"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * an exception since the input flag has only hyphen."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void checkOnlyFlag_onlyHyphenSign_raiseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String[] commands \u003d {\"-\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            StudyAreaList.checkOnlyFlag(commands, 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            fail(\"Should have thrown an exception\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            assertEquals(ONLY_FLAG, e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * An exception pertaining to either wrong flag position or invalid flag is raised when user"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * enters a flag that does not exist or user enters the flag before the search terms."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * The expected outcome is to return an exception as this test case inputs an invalid flag."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void checkFlag_FlagDoesNotExist_raiseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String[] commands \u003d {\"MacCommons\", \"-z\"};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String[] flags \u003d {null, null, null, null, \"MacCommons\"};"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            StudyAreaList.checkFlag(flags, commands,1, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            fail(\"Should have thrown an exception\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            assertEquals(WRONG_FLAG_USAGE, e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //@@author NizarMohd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * An exception pertaining to non Integer commands after using \"-s\"."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * The expected outcome is to return an exception as the size has to be an integer."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void checkInteger_nonIntegerSize_raiseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] commands \u003d { \"-s\", \"nonInteger\"};"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            StudyAreaList.checkInteger(commands, 0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fail(\"Should have raised an exception\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assertEquals(NOT_INTEGER, e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * An exception pertaining to empty integer after using \"-s\"."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * The expected outcome is to return an exception as the size has to be an integer."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void checkInteger_emptyInteger_raiseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] commands \u003d { \"-s\"};"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            StudyAreaList.checkInteger(commands,0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fail(\"Should have raised an exception\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assertEquals(NO_SIZE_INDICATED, e.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * An exception pertaining to non positive Integer after using \"-s\"."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * The expected outcome is to return an exception as the size has to be an integer."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void checkInteger_nonPositiveInteger_raiseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] commands \u003d { \"-s\", \"-1\"};"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            StudyAreaList.checkInteger(commands,0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fail(\"Should have raised an exception\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assertEquals(NON_POSITIVE_INTEGER, e.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * An exception pertaining to wrong position of flags when entering commands."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * The expected outcome is to return an exception as flags must come after location/name."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void checkFlag_wrongFlagsPosition_raiseException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] commands \u003d { \"-i\", \"EA\"};"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] flags \u003d { null, null, null, \"-i\", \"EA\"};"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            StudyAreaList.checkFlag(flags, commands,1, false);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fail(\"Should have raised an exception\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assertEquals(WRONG_FLAG_ARGUMENT_POSITION, e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * An exception pertaining wrong flag usage."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getFlagsInfo_throwsException_WrongFlag() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] commands \u003d {\"utown\", \"-z\"};"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String[] expectedFlags \u003d StudyAreaList.getFlagsInfo(commands);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fail(\"Should have thrown an exception\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assertEquals(WRONG_FLAG_USAGE, e.getMessage());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Test to check accuracy of method."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void isAvailStudyArea_assertTrue_location() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] flags \u003d {null, null, null, null, \"utown\"};"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertTrue(StudyAreaList.isAvailStudyArea(\"utown\", true, 4, studyArea, flags));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Test to check accuracy of method."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void isAvailStudyArea_assertFalse_location() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] flags \u003d {null, null, null, null, \"engine\"};"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertFalse(StudyAreaList.isAvailStudyArea(\"engine\", true, 4, studyArea, flags));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Test to check accuracy of method."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void isAvailStudyArea_assertTrue_flag() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] flags \u003d {null, null, \"-i\", null, null};"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertTrue(StudyAreaList.isAvailStudyArea(\"-i\", true, 2, studyArea, flags));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Test to check accuracy of method."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void isAvailStudyArea_assertFalse_flag() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] flags \u003d {null, null, \"-o\", null, null};"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertFalse(StudyAreaList.isAvailStudyArea(\"-o\", true, 2, studyArea, flags));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Test to check if exception is raised until searchList level."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void searchList_throwsException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String userIn \u003d \"-s\"; // test empty integer exception"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ArrayList\u003cStudyArea\u003e availStudyAreas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            availStudyAreas.add(studyArea);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            StudyAreaList studyAreaList \u003d new StudyAreaList(availStudyAreas);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            studyAreaList.searchList(userIn);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fail(\"Should have thrown an exception\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assertEquals(NO_SIZE_INDICATED, e.getMessage());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 58,
      "NizarMohd": 146
    }
  },
  {
    "path": "src/test/java/studyarea/StudyAreaTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static java.lang.System.lineSeparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "//@@author terrytay"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "class StudyAreaTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    StudyArea location1 \u003d new StudyArea(\"mac commons\", \"utown\", \"nil\", true, true,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            5);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void getAddress() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        assertEquals(\"utown\", location1.getAddress());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void getFaculty() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        assertEquals(\"nil\", location1.getFaculty());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void hasPort() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        assertEquals(true, location1.hasPort());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void isIndoor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        assertEquals(true, location1.isIndoor());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void getMaxPax() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        assertEquals(5, location1.getMaxPax());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        assertEquals(\"mac commons\", location1.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //@@author NizarMohd"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Checks for accurace of toString() format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String out \u003d \"\\t __________________________________________________________\" + lineSeparator()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "               + \"\\t Name: mac commons\" + lineSeparator()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "               + \"\\t Address: utown\" + lineSeparator()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "               + \"\\t Faculty: nil\" + lineSeparator()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "               + \"\\t Port: true\" + lineSeparator()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "               + \"\\t Indoor: true\" + lineSeparator()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "               + \"\\t Maximum number of Pax: 5\" + lineSeparator()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "               + \"\\t __________________________________________________________\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(out, location1.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Checks for accuracy of method."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void containsSearchKey_assertTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertTrue(location1.containsSearchKey(\"utown\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Checks for accuracy of method."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void containsSearchKey_assertFalse() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertFalse(location1.containsSearchKey(\"u-town\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Checks for accuracy of method."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void isSizeCapable_assertTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertTrue(location1.isSizeCapable(\"3\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Checks for accuracy of method."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void isSizeCapable_assertFalse() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertFalse(location1.isSizeCapable(\"10\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 41,
      "NizarMohd": 54
    }
  },
  {
    "path": "src/test/java/task/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Contains all the tests related to the Deadline class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void deadlineInformation() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"[D][PENDING] Assignment is due on Mar 21 2021 at 09:00 with priority 1\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Deadline(\"Assignment\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"1\", false).getTaskInformation());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void formattedDetails() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"D#Assignment#2021-03-21#09:00#1#false\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Deadline(\"Assignment\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"1\", false).getFormattedDetails());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createDeadline_invalidDate_throwException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"Assignment\", \"2021-03-021\", \"09:00\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"1\", false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid date not rejected\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Date provided is invalid or is in wrong format (Should be YYYY-MM-DD)\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createDeadline_invalidDueTime_throwException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"Assignment\", \"2021-03-21\", \"25:00\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"1\", false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid due time not rejected\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Due time provided is invalid or in wrong format (Should be HH:MM) 24 Hr format\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createDeadline_invalidPriority_throwException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"Assignment\", \"2021-03-21\", \"12:00\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"High\", false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid priority not rejected\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Priority should be an integer\",e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createDeadline_dateAlreadyPassed_throwException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"Assignment\", \"2020-03-21\", \"12:00\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"1\", false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Deadline before current date not rejected\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Date specified must be a current or a future date\",e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_emptyKeyword_throwException() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            boolean hasKeyword \u003d new Deadline(\"Assignment\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"1\", false).hasKeyword(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty keyword not detected\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Keyword to be used for search is empty\", e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_containsKeyword() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertTrue(new Deadline(\"Assignment\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                \"1\", false).hasKeyword(\"Assignment\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_doesntContainsKeyword() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertFalse(new Deadline(\"Assignment\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                \"1\", false).hasKeyword(\"Project\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void calendarDetails() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"[D][N] Assignment        \","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Deadline(\"Assignment\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"1\", false).getCalendarTaskDetails());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void calendarDetails_longDescription() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"[D][Y] Project proposa...\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Deadline(\"Project proposal submission\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"1\", true).getCalendarTaskDetails());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 114
    }
  },
  {
    "path": "src/test/java/task/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Contains all the tests related to the Event class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void eventInformation() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"[E] Team Meeting at Mar 21 2021 from 09:00 to 17:00 with priority 1\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Event(\"Team Meeting\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"17:00\", \"1\").getTaskInformation());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void formattedDetails() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"E#Team Meeting#2021-03-21#09:00#17:00#1\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Event(\"Team Meeting\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"17:00\", \"1\").getFormattedDetails());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidDate_throwException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-021\", \"09:00\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"17:00\", \"1\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid date not rejected\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Date provided is invalid or is in wrong format (Should be YYYY-MM-DD)\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidStartTime_throwException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2021-03-21\", \"25:00\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"17:00\", \"1\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid start time not rejected\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Start time provided is invalid or in wrong format (Should be HH:MM) 24 Hr format\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidEndTime_throwException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"10:70\", \"1\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid end time not rejected\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"End time provided is invalid or in wrong format (Should be HH:MM) 24 Hr format\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidPriority_throwException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"10:50\", \"High\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid priority not rejected\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Priority should be an integer\",e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_startTimeAfterEndTime_throwException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"08:50\", \"1\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Start time after end time not rejected\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Start time should be before End time\",e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_dateAlreadyPassed_throwException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2019-03-21\", \"09:00\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"09:50\", \"1\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Event before current date not rejected\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Date specified must be a current or a future date\",e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_emptyKeyword_throwException() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            boolean hasKeyword \u003d new Event(\"Team Meeting\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"17:00\", \"1\").hasKeyword(\"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty keyword not detected\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Keyword to be used for search is empty\", e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_containsKeyword() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(true, new Event(\"Team Meeting\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                \"17:00\", \"1\").hasKeyword(\"Meeting\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_doesntContainsKeyword() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(false, new Event(\"Team Meeting\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                \"17:00\", \"1\").hasKeyword(\"Class\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void calendarDetails() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"[E] Team Meeting         \","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Event(\"Team Meeting\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"17:00\", \"1\").getCalendarTaskDetails());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void calendarDetails_longDescription() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"[E] Programming worksh...\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Event(\"Programming workshop for high school students\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"17:00\", \"1\").getCalendarTaskDetails());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 135
    }
  },
  {
    "path": "src/test/java/task/SchedulableTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "class SchedulableTaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void scheduleTaskInformation() throws Exception {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        SchedulableTask newTaskToBeScheduled \u003d new SchedulableTask();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] taskDetails \u003d {\"Sample task\", \"f 1\", \"d 2\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(newTaskToBeScheduled.taskDescription, \"Sample task\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(newTaskToBeScheduled.numberOfDaysRequiredToFinishTask,1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(newTaskToBeScheduled.numberOfDaysLeft,2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void scheduleTask_invalidFormat_throwException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        SchedulableTask newTaskToBeScheduled \u003d new SchedulableTask();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] taskDetails \u003d {\"\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Please follow the format specified\",e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskDetails \u003d new String[]{\"\", \"\"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Please follow the format specified\",e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskDetails \u003d new String[]{\"\", \"\", \"\", \"\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Please follow the format specified\",e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskDetails \u003d new String[]{\"Sample task\", \"\", \"\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Please follow the format specified\",e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskDetails \u003d new String[]{\"Sample task\", \"f1\", \"\"};"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Please follow the format specified\",e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskDetails \u003d new String[]{\"Sample task\", \"f 1\", \"d2\"};"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Please follow the format specified\",e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskDetails \u003d new String[]{\"Sample task\", \"d 1\", \"f 2\"};"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Please follow the format specified\",e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void scheduleTask_emptyDescription_throwException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        SchedulableTask newTaskToBeScheduled \u003d new SchedulableTask();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] taskDetails \u003d {\" \", \"f 1\", \"d 2\"};"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Description of task shouldn\u0027t be empty\", e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void scheduleTask_emptyDaysToFinish_throwException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        SchedulableTask newTaskToBeScheduled \u003d new SchedulableTask();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] taskDetails \u003d {\"Sample task\", \"f \", \"d 2\"};"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Number of days to finish task should be an integer\", e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void scheduleTask_emptyDaysLeft_throwException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        SchedulableTask newTaskToBeScheduled \u003d new SchedulableTask();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] taskDetails \u003d {\"Sample task\", \"f 1\", \"d \"};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Number of days left should be an integer\", e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void scheduleTask_nonPositiveNumberOfDaysToFinish_throwException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        SchedulableTask newTaskToBeScheduled \u003d new SchedulableTask();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] taskDetails \u003d {\"Sample task\", \"f 0\", \"d 2\"};"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Number of days to finish should be greater than 1\", e.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskDetails \u003d new String[]{\"Sample task\", \"f -1\", \"d 2\"};"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Number of days to finish should be greater than 1\", e.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void scheduleTask_nonPositiveNumberOfDaysLeft_throwException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        SchedulableTask newTaskToBeScheduled \u003d new SchedulableTask();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] taskDetails \u003d {\"Sample task\", \"f 1\", \"d 0\"};"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Number of days left should be greater than 1\", e.getMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskDetails \u003d new String[]{\"Sample task\", \"f 1\", \"d -1\"};"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Number of days left should be greater than 1\", e.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void scheduleTask_DaysLeftLessThanDeadline_throwException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        SchedulableTask newTaskToBeScheduled \u003d new SchedulableTask();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] taskDetails \u003d {\"Sample task\", \"f 2\", \"d 1\"};"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTaskToBeScheduled.setDetails(taskDetails);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Number of days left should not be lesser than number of days to finish the task\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 156
    }
  },
  {
    "path": "src/test/java/task/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "//@@author GanapathySanathBalaji"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Contains all the test related to EventList class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    task.TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskListTest() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList \u003d new task.TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.addTask(new Event(\"Team Meeting\", \"2021-03-21\", \"09:00\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                \"17:00\", \"1\"),ui);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void deleteEvent_invalidIndex_throwException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            taskList.deleteTask(2,ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Invalid index entered. Please enter a valid index to be deleted\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchEvents_emptySearchKeyword_throwException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            taskList.searchTasks(\"\",ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty string search not identified\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Keyword to be used for search is empty\", exception.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void clearCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.clearTasks(ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(0, taskList.getTaskListSize());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 2,
      "GanapathySanathBalaji": 48
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "clear"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "event meeting /d 2021-05-05 /s 12:00 /e 13:00 /p 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "view"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deadline assignment /d 2021-05-02 /t 14:00 /p 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "priority_view"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "view"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "search"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "search meet"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "search homework"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "event team meeting"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "delete one"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "view"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "edit -1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "edit 2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "6"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "-1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "team meeting"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "view"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "help"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "edit 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "2"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "2020-01-01"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "2020-06-06"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "edit 1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "6"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "assignment"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "event"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "view list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "countdown view"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "study"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "help"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "erc"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "src"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "sbux"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-i -i"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-i -o"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-i"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-p"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-s"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-s wegf"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-s 8"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-s 1"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-i -"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-qef"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "bye"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 39,
      "NizarMohd": 18,
      "-": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "if exist ..\\library del ..\\library /Q"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 7,
      "-": 19
    }
  }
]
