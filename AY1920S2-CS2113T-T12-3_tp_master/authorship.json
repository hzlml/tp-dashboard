[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 1,
      "-": 40
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nizar Mohamed| [Github](https://github.com/NizarMohd) | [Portfolio](docs/team/NizarMohd.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/59829631?s\u003d460\u0026v\u003d4?text\u003dterry) | Terry Tay | [Github](https://github.com/terrytay) | [Portfolio](docs/team/terrytay.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ganapathy Sanath Balaji | [Github](https://github.com/GanapathySanathBalaji) | [Portfolio](docs/team/ganapathysanathbalaji.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hong Quan | [Github](https://github.com/hongquan448) | [Portfolio](docs/team/hongquan.md)"
      }
    ],
    "authorContributionMap": {
      "terrytay": 1,
      "NizarMohd": 1,
      "GanapathySanathBalaji": 1,
      "hongquan448": 1,
      "-": 4
    }
  },
  {
    "path": "library/dictionary.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "engineering~eng~engin~engine~foe"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": "utown~university town~u-town~u town"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "maccommons~mccommons~mac commons"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "education resource centre~erc"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "stephen riady centre~stephen~riady~src"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "ocbc~frank~frank by ocbc"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "starbucks~bucks~bux~sbux"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "pc commons~pccommons~pccommon"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "yih~yusof ishak~yusof~ishak"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "supersnacks~super snacks~super snack"
      }
    ],
    "authorContributionMap": {
      "terrytay": 10
    }
  },
  {
    "path": "library/locations.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "Opposite Town Green (Outside Starbucks)~2 College Avenue West Education Resource Centre, Ground Level~Utown~true~false~4"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": "Starbucks~2 College Avenue West Education Resource Centre, Ground Level~Utown~true~false~5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "MacCommons~2 College Avenue West Education Resource Centre, Level 1~Utown~true~true~5"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "PC Commons~2 College Avenue West Education Resource Centre, Level 1~Utown~true~true~5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "Ian and Peony Ferguson Study~2 College Ave West Education Resource Centre, Level 3~Utown~true~true~4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "The Study~2 College Ave West Education Resource Centre, Level 2~Utown~true~true~5"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "Town Plaza Seminar Rooms Waiting Area~2 College Ave West, Town Plaza, Level 2~Utown~true~true~4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "OCBC~2 College Ave West, Stephen Riady Centre, Ground Level~Utown~true~false~2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "SuperSnacks~2 College Ave West, Stephen Riady Centre, Ground Level~Utown~true~true~4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "EA Level 1~9 Engineering Drive 1,EA, Level 1~Engineering~true~true~4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "EA Level 2~9 Engineering Drive 1,EA, Level 2~Engineering~true~true~4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "EA Level 3~9 Engineering Drive 1,EA, Level 3~Engineering~true~true~4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "EA Level 4~9 Engineering Drive 1,EA, Level 4, Outside Staff Offices~Engineering~true~false~6"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "EA Level 5~9 Engineering Drive 1,EA, Level 5, Outside of the door beside EA05~Engineering~true~false~4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "EA Level 6~9 Engineering Drive 1,EA, Level 6, EA06-23~Engineering~true~true~4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "Central Library~Central Library 12 Kent Ridge Crescent~-~true~true~5"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "YIH Study Room~Yusof Ishak House, Level 2~-~true~true~4"
      }
    ],
    "authorContributionMap": {
      "terrytay": 17
    }
  },
  {
    "path": "src/main/java/bookingsystem/BookingSystem.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package bookingsystem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class BookingSystem extends StudyArea {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private boolean isAvailable \u003d true;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private String bookedBy \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructs a StudyArea class for a study area with its information"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Precondition: \u0027All variables have to be filled."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param name     name of StudyArea"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param address  address of StudyArea"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param faculty  faculty of StudyArea"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param hasPort  true for availability of ports, else false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isIndoor true for indoor, else false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param maxPax   maximum number of seats for this StudyArea"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public BookingSystem(String name, String address, String faculty, boolean hasPort, boolean isIndoor, int maxPax) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(name, address, faculty, hasPort, isIndoor, maxPax);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Logger logger \u003d Logger.getLogger(BookingSystem.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        logger.warning(\"This is a warning\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Method for booking study area."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param bookedBy id supplied by user in the form of matric number"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return true when successfully booked"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public boolean bookStudyArea(String bookedBy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (isBooked()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            if (isValidID(bookedBy)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                isAvailable \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                this.bookedBy \u003d bookedBy;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Check if study area is available."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return true if available"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public boolean isBooked() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return !(isAvailable);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Remove booking made by existing user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param id matric number of user that booked the system"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void removeBooking(String id) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (idMatchesBookedBy(id)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            this.isAvailable \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            bookedBy \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private boolean idMatchesBookedBy(String id) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return bookedBy.equals(id);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Check if id is a valid matric number."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param id matric number"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return true when it is valid"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public boolean isValidID(String id) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (id.length() !\u003d 9) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (!(Character.isAlphabetic(id.charAt(0)) \u0026\u0026 Character.isAlphabetic(id.charAt(id.length() - 1)))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 83
    }
  },
  {
    "path": "src/main/java/bookingsystem/Test.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package bookingsystem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "class Test {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Demonstrates a booking system for a study area."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Commands available are: book, check, cancel"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param args not in use"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        BookingSystem studyArea \u003d new BookingSystem(\"MacCommons\", \"ERC\", \"nil\", true,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                true, 5);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String command \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String userId \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        while (!\"bye\".equals(command)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(\"\\n_____________________________________________________________\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(\"Booking system for MacCommons\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(\"[book] to book the study area, [cancel] to cancel, [check] to \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    + \"check the \" + \"availability of the study area\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            System.out.println(\"_____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d input.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            case \"book\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                System.out.println(\"Please enter your id:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                userId \u003d input.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                System.out.println(\"Hang in there... Processing your booking.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                if (studyArea.bookStudyArea(userId)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    System.out.println(\"Your booking has been confirmed.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                } else if (!studyArea.isValidID(userId)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    System.out.println(\"Please enter a valid matric number.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    System.out.println(\"Sorry the study area is currently booked by someone else.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            case \"check\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                if (studyArea.isBooked()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    System.out.println(\"The study area is booked\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    System.out.println(\"It is free for booking\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            case \"cancel\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                if (studyArea.isBooked()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    System.out.println(\"Please enter your id\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    userId \u003d input.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    System.out.println(\"Hang in there... Processing your request\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    studyArea.removeBooking(userId);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    if (studyArea.isBooked()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        System.out.println(\"Sorry you are not the owner of the booking.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        System.out.println(\"Your booking has been cancelled.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    System.out.println(\"The study area is not booked at the moment.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                LOGGER.log(Level.INFO, \"Uncaught scenario\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                assert false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 72
    }
  },
  {
    "path": "src/main/java/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.DeadlineCreationFormatNotFollowedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.EventDetailsNotProvidedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static command.AddEventCommand.DATE_BEFORE_CURRENT_DATE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This command is used to add new deadlines to the TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String SLASH_SYMBOL \u003d \"/\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** The new event to be added. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    Deadline newDeadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the AddCommand Object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Abstracts out the details from the user input and uses it to create a new deadline object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param deadlineDetails The array contains the information regarding the new deadline to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the wrong format is used to create an event."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public AddDeadlineCommand(String[] deadlineDetails, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventDetailsNotProvidedException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] details \u003d deadlineDetails[1].split(SLASH_SYMBOL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (details.length !\u003d 4) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new DeadlineCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String description \u003d details[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String date \u003d details[1].substring(2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String dueTime \u003d details[2].substring(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String priority \u003d details[3].substring(2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        newDeadline \u003d  new Deadline(description, date, dueTime, priority);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assert !newDeadline.getDate().isBefore(LocalDate.now()) : DATE_BEFORE_CURRENT_DATE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.addTask(newDeadline, ui);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 49,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.EventCreationFormatNotFollowedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.EventDetailsNotProvidedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This command is used to add new events to the TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String START_TIME_AFTER_END_TIME_ERROR_MESSAGE \u003d \"Start time after end time exception \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \"not thrown\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DATE_BEFORE_CURRENT_DATE_ERROR_MESSAGE \u003d \"Date past current day exception not thrown\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String SLASH_SYMBOL \u003d \"/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /** The new event to be added. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    Event newEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the AddCommand Object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Abstracts out the details from the user input and uses it to create a new event object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param eventDetails The array contains the information regarding the new event to be added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used to create an event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public AddEventCommand(String[] eventDetails, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new EventDetailsNotProvidedException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] details \u003d eventDetails[1].split(SLASH_SYMBOL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (details.length !\u003d 5) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventCreationFormatNotFollowedException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String description \u003d details[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String date \u003d details[1].substring(2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String startTime \u003d details[2].substring(2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String endTime \u003d details[3].substring(2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String priority \u003d details[4].substring(2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        newEvent \u003d  new Event(description,date,startTime,endTime,priority);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assert !newEvent.getStartTime().isAfter(newEvent.getEndTime()) : START_TIME_AFTER_END_TIME_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assert !newEvent.getDate().isBefore(LocalDate.now()) : DATE_BEFORE_CURRENT_DATE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.addTask(newEvent, ui);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 32,
      "GanapathySanathBalaji": 20,
      "NizarMohd": 2
    }
  },
  {
    "path": "src/main/java/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.MisuseOfClearCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * This command is used to clear all the tasks in the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the ClearCommand Object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Checks if the user given input follows the correct format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public ClearCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new MisuseOfClearCommandException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.clearTasks(ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 24,
      "GanapathySanathBalaji": 4,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Object represents a command and contains all the required information and implementation to execute it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Executes the command based on the information provided by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param taskList Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This handles the interaction with Users."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If issues are found during execution of command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract void executeCommand(TaskList taskList, Ui ui) throws Exception;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 16,
      "GanapathySanathBalaji": 3,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/CountdownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.MisuseOfCountdownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Displays the list of tasks added so far in increasing order of their dates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class CountdownCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the CountdownCommand Object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public CountdownCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new MisuseOfCountdownCommandException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.countdownView(ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 24,
      "GanapathySanathBalaji": 4,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.DeleteCommandMissingIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.IndexNotIntegerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Command is used to delete a task at a specific index."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** Denotes the index at which the task should be deleted at. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    int indexToDelete;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the DeleteCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new DeleteCommand object if the correct command is used."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param commandSplit Contains information with regards to the index to be deleted at."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the index specified is invalid/ The wrong format is used for the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public DeleteCommand(String[] commandSplit, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new DeleteCommandMissingIndexException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            indexToDelete \u003d Integer.parseInt(commandSplit[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new IndexNotIntegerException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.deleteTask(indexToDelete, ui);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 33,
      "GanapathySanathBalaji": 6,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.EditCommandMissingIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.IndexNotIntegerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Command is used to delete a task at a specific index."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** Denotes the index at which the task should be edited at. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    int indexToEdit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the DeleteCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new DeleteCommand object if the correct command is used."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param commandSplit Contains information with regards to the index to be deleted at."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the index specified is invalid/ The wrong format is used for the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EditCommand(String[] commandSplit, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EditCommandMissingIndexException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            indexToEdit \u003d Integer.parseInt(commandSplit[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new IndexNotIntegerException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.editTask(indexToEdit, ui);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 40
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Command is used to print the list of commands supported."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the HelpCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public HelpCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new InvalidHelpCommandException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printHelp();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 23,
      "GanapathySanathBalaji": 4,
      "NizarMohd": 2
    }
  },
  {
    "path": "src/main/java/command/PriorityViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.MisuseOfPriorityCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Displays the list of tasks added so far in decreasing order of their priority."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class PriorityViewCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the PriorityViewCommand Object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public PriorityViewCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new MisuseOfPriorityCommandException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.priorityView(ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 24,
      "GanapathySanathBalaji": 4,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.SearchMissingTermsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Command used to perform a search of tasks whose description contain the keyword mentioned."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /** The word to be searched for. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for SearchCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param commandSplit Contains the keyword to be searched for."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public SearchCommand(String[] commandSplit, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new SearchMissingTermsException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.keyword \u003d commandSplit[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.searchTasks(keyword, ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 29,
      "GanapathySanathBalaji": 4,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/command/StudyAreaCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import studyarea.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import studyarea.StudyAreaList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.AVAILABLE_STUDY_AREAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.BYE_COMMAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.EMPTY_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.EMPTY_LOCATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.END_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.FLAGS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_COMMAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.PROMPT_USER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.START_STUDY_AREA_SEARCH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the StudyAreaCommand class. It executes the StudyArea Search function and interact with Users accordingly."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class StudyAreaCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * List out all the StudyAreas that match with User\u0027s preference."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for StudyAreaCommand to interact with Users."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param availStudyAreas this is the list of all study areas in location.txt."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void printList(ArrayList\u003cStudyArea\u003e availStudyAreas, Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (availStudyAreas.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(EMPTY_LIST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(AVAILABLE_STUDY_AREAS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (StudyArea studyArea : availStudyAreas) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printStudyArea(studyArea);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Filters command based on User Input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param command This is the command entered by User."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param studyAreaList This is the list of all StudyAreas in location.txt."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for StudyAreaCommand to interact with Users."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return boolean status. False if User enters \"end\" , else will always return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if User enters invalid commands."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static boolean filterCommand(String command, StudyAreaList studyAreaList, Ui ui) throws"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            IllegalStudyAreaException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (command.isBlank()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(EMPTY_LOCATION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case BYE_COMMAND:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(END_MESSAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case HELP_COMMAND:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printStudyAreaHelp();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ArrayList\u003cStudyArea\u003e availStudyAreas \u003d studyAreaList.searchList(command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    printList(availStudyAreas, ui);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printMessage(PROMPT_USER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } catch (IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Executes the StudyArea search feature."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for StudyAreaCommand to interact with Users."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param studyAreaList studyAreaList object that holds information on studyAreas available."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void runCommands(StudyAreaList studyAreaList, Ui ui)  {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(START_STUDY_AREA_SEARCH);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean status \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (status) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String command \u003d ui.getUserIn().toLowerCase();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                status \u003d filterCommand(command, studyAreaList, ui);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } catch (IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 5,
      "NizarMohd": 95
    }
  },
  {
    "path": "src/main/java/command/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.BYE_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.BYE_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Used to run all the functions related to tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Runs all the command for tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param taskList Refers to the current list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param ui UI object used to interact with user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param parser Object used to parse the user input into commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static void runCommands(TaskList taskList, Ui ui, Parser parser) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printHelp();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        fullCommand \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        while (!fullCommand.equals(BYE_COMMAND)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                command \u003d parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                command.executeCommand(taskList, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            } catch (Exception exception) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(exception.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fullCommand \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(BYE_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 24,
      "GanapathySanathBalaji": 7,
      "NizarMohd": 13
    }
  },
  {
    "path": "src/main/java/command/ViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.command.MisuseOfViewCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Displays the list of tasks added so far."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the ViewCommand Object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public ViewCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new MisuseOfViewCommandException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.listTasks(ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 24,
      "GanapathySanathBalaji": 4,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/exception/CustomException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public abstract class CustomException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public CustomException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 7
    }
  },
  {
    "path": "src/main/java/exception/command/DeadlineCreationFormatNotFollowedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_5;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class DeadlineCreationFormatNotFollowedException extends CustomException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public DeadlineCreationFormatNotFollowedException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Please follow the correct format to add a new deadline\" + System.lineSeparator() + HELP_DESCRIPTION_5);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 8,
      "NizarMohd": 2
    }
  },
  {
    "path": "src/main/java/exception/command/DeleteCommandMissingIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class DeleteCommandMissingIndexException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public DeleteCommandMissingIndexException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(\"Index to delete not mentioned\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 9
    }
  },
  {
    "path": "src/main/java/exception/command/EditCommandMissingIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EditCommandMissingIndexException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EditCommandMissingIndexException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Index to edited not mentioned\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 9
    }
  },
  {
    "path": "src/main/java/exception/command/EventCreationFormatNotFollowedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_3;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EventCreationFormatNotFollowedException extends CustomException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventCreationFormatNotFollowedException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Please follow the correct format to add a new event\" + System.lineSeparator() + HELP_DESCRIPTION_3);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 10,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/exception/command/EventDetailsNotProvidedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class EventDetailsNotProvidedException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public EventDetailsNotProvidedException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(\"Event details are not provided\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 9
    }
  },
  {
    "path": "src/main/java/exception/command/EventStartTimeAfterEndTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EventStartTimeAfterEndTimeException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventStartTimeAfterEndTimeException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Start time should be before End time\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 9
    }
  },
  {
    "path": "src/main/java/exception/command/IndexNotIntegerException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class IndexNotIntegerException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public IndexNotIntegerException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Enter a valid integer index (1-based) to delete/edit the corresponding event \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + \"(format: delete/edit index)\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 8,
      "GanapathySanathBalaji": 2
    }
  },
  {
    "path": "src/main/java/exception/command/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class InvalidDateException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public InvalidDateException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Date provided is invalid or is in wrong format (Should be YYYY-MM-DD)\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 9
    }
  },
  {
    "path": "src/main/java/exception/command/InvalidDueTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class InvalidDueTimeException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public InvalidDueTimeException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Due time provided is invalid or in wrong format (Should be HH:MM) 24 Hr format\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 9
    }
  },
  {
    "path": "src/main/java/exception/command/InvalidEndTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class InvalidEndTimeException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public InvalidEndTimeException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"End time provided is invalid or in wrong format (Should be HH:MM) 24 Hr format\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 9
    }
  },
  {
    "path": "src/main/java/exception/command/InvalidHelpCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class InvalidHelpCommandException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public InvalidHelpCommandException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Wrong command used to view command list (Should be :help )\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 9
    }
  },
  {
    "path": "src/main/java/exception/command/InvalidStartTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class InvalidStartTimeException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public InvalidStartTimeException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Start time provided is invalid or in wrong format (Should be HH:MM) 24 Hr format\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 9
    }
  },
  {
    "path": "src/main/java/exception/command/MisuseOfClearCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class MisuseOfClearCommandException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public MisuseOfClearCommandException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(\"Wrong command clear events (Should be :clear )\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 9
    }
  },
  {
    "path": "src/main/java/exception/command/MisuseOfCountdownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class MisuseOfCountdownCommandException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public MisuseOfCountdownCommandException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(\"Wrong command used to view countdown of events (Should be :countdown )\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 9
    }
  },
  {
    "path": "src/main/java/exception/command/MisuseOfPriorityCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class MisuseOfPriorityCommandException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public MisuseOfPriorityCommandException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(\"Wrong command used to view events sorted by priority (Should be :priority_view )\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 9
    }
  },
  {
    "path": "src/main/java/exception/command/MisuseOfViewCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class MisuseOfViewCommandException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public MisuseOfViewCommandException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(\"Wrong command used to view events (Should be :view )\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 9
    }
  },
  {
    "path": "src/main/java/exception/command/SearchKeywordEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class SearchKeywordEmptyException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public SearchKeywordEmptyException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Keyword to be used for search is empty\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 9
    }
  },
  {
    "path": "src/main/java/exception/command/SearchMissingTermsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class SearchMissingTermsException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public SearchMissingTermsException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        super(\"The search string entered is empty.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 9
    }
  },
  {
    "path": "src/main/java/exception/command/TaskDateBeforeCurrentDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskDateBeforeCurrentDateException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskDateBeforeCurrentDateException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Date specified must be a current or a future date\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 9
    }
  },
  {
    "path": "src/main/java/exception/command/TaskPriorityNotIntegerException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package exception.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.CustomException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskPriorityNotIntegerException extends CustomException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskPriorityNotIntegerException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        super(\"Priority should be an integer\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 9
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.CountdownCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.PriorityViewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.ViewCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * This class is used to parse the user input into executable commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ADD_DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ADD_EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String VIEW_COMMAND \u003d \"view\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String PRIORITY_VIEW_COMMAND \u003d \"priority_view\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String COUNTDOWN_VIEW_COMMAND \u003d \"countdown\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String CLEAR_COMMAND \u003d \"clear\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String SEARCH_COMMAND \u003d \"search\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EDIT_COMMAND \u003d \"edit\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String EMPTY_COMMAND \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * This method takes in the user input parses it and returns the command to be executed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param fullCommand THe entire line of command entered by the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return command The command parsed form the user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong command/ wrong format is given by the user as an input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public Command parseCommand(String fullCommand) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String[] commandSplit \u003d fullCommand.split(\" \",2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String commandType \u003d commandSplit[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        boolean isOneWordCommand \u003d commandSplit.length \u003d\u003d 1 || commandSplit[1].isBlank();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case ADD_DEADLINE_COMMAND:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new AddDeadlineCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case ADD_EVENT_COMMAND:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new AddEventCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_COMMAND:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d new EditCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case VIEW_COMMAND:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new ViewCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case PRIORITY_VIEW_COMMAND:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new PriorityViewCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case COUNTDOWN_VIEW_COMMAND:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new CountdownCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case CLEAR_COMMAND:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new ClearCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case SEARCH_COMMAND:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new SearchCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case DELETE_COMMAND:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new DeleteCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case HELP_COMMAND:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new HelpCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case EMPTY_COMMAND:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Empty Line entered, Please enter a valid line\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            // Break statement can\u0027t be reached if added"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Invalid command entered, Please enter a valid command\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            // Break statement can\u0027t be reached if added"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 63,
      "GanapathySanathBalaji": 22
    }
  },
  {
    "path": "src/main/java/resourceloader/BackUpData.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package resourceloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class contains all the back up data for Study Area Loader, in case locations.txt and dictionary.txt"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * does not exist."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "class BackUpData {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    static final String BACKUP_DICTIONARY \u003d \"engineering~eng~engin~engine~foe\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"utown~university town~u-town~u town\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"maccommons~mccommons~mac commons\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"education resource centre~erc\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"stephen riady centre~stephen~riady~src\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"ocbc~frank~frank by ocbc\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"starbucks~bucks~bux~sbux\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"pc commons~pccommons~pccommon\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"yih~yusof ishak~yusof~ishak\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"supersnacks~super snacks~super snack\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    static final String BACKUP_LOCATIONS \u003d \"Opposite Town Green (Outside Starbucks)~2 College Avenue West Education \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"Resource Centre, Ground Level~Utown~true~false~4\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"Starbucks~2 College Avenue West Education Resource Centre, Ground Level~Utown~true~false~5\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"MacCommons~2 College Avenue West Education Resource Centre, Level 1~Utown~true~true~5\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"PC Commons~2 College Avenue West Education Resource Centre, Level 1~Utown~true~true~5\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"Ian and Peony Ferguson Study~2 College Ave West Education Resource Centre, Level 3~Utown~\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"true~true~4\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"The Study~2 College Ave West Education Resource Centre, Level 2~Utown~true~true~5\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"Town Plaza Seminar Rooms Waiting Area~2 College Ave West, Town Plaza, Level 2~Utown~true~\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"true~4\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"OCBC~2 College Ave West, Stephen Riady Centre, Ground Level~Utown~true~false~2\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"SuperSnacks~2 College Ave West, Stephen Riady Centre, Ground Level~Utown~true~true~4\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"EA Level 1~9 Engineering Drive 1,EA, Level 1~Engineering~true~true~4\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"EA Level 2~9 Engineering Drive 1,EA, Level 2~Engineering~true~true~4\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"EA Level 3~9 Engineering Drive 1,EA, Level 3~Engineering~true~true~4\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"EA Level 4~9 Engineering Drive 1,EA, Level 4, Outside Staff Offices~Engineering~true~false~6\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"EA Level 5~9 Engineering Drive 1,EA, Level 5, Outside of the door beside EA05~Engineering~true~\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"false~4\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"EA Level 6~9 Engineering Drive 1,EA, Level 6, EA06-23~Engineering~true~true~4\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"Central Library~Central Library 12 Kent Ridge Crescent~-~true~true~5\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     + \"YIH Study Room~Yusof Ishak House, Level 2~-~true~true~4\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 40
    }
  },
  {
    "path": "src/main/java/resourceloader/StudyAreaLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package resourceloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.Dictionary;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.FILE_PATH_DICTIONARY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.FILE_PATH_STUDYAREAS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.INCONSISTENT_DATA_STORAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MISSING_STUDY_AREA_DATA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class loads all the required information of Study Areas that is stored in location.txt."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class StudyAreaLoader {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static final String DIVIDER \u003d \"~\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String url;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public StudyAreaLoader(String url) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        loadFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Loads content from location.txt and dictionary.txt."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if file is not found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void loadFile() throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.file \u003d new File(this.url);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            Dictionary.loadDictionary();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }  catch (NullPointerException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(MISSING_STUDY_AREA_DATA);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Return the imported study area file as an ArrayList for the main controller"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * to add it to its database."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return buffer ArrayList of Location from study area file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws FileNotFoundException if location.txt does not exist."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if data stored is inconsistent"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ArrayList\u003cStudyArea\u003e pushToDatabase() throws IllegalStudyAreaException, FileNotFoundException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ArrayList\u003cStudyArea\u003e buffer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Scanner input \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        while (input.hasNextLine()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String detailsOfLocation \u003d input.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String[] detailsBuffer \u003d detailsOfLocation.split(DIVIDER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (detailsBuffer.length !\u003d 6) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                String name \u003d detailsBuffer[0];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalStudyAreaException(INCONSISTENT_DATA_STORAGE + \"at \" + name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            StudyArea studyArea \u003d new StudyArea(detailsBuffer[0], detailsBuffer[1], detailsBuffer[2],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    Boolean.parseBoolean(detailsBuffer[3]), Boolean.parseBoolean(detailsBuffer[4]),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    Integer.parseInt(detailsBuffer[5]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            buffer.add(studyArea);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        input.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return buffer;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method creates a new data file for locations.txt and dictionary.txt."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param filePath this is the path of the data file to be created."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IOException if cannot create file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if the data files cannot be set to read-only."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void createNewStudyAreaData(String filePath) throws IOException, IllegalStudyAreaException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Files.createFile(Paths.get(filePath));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        PrintWriter dataBuffer \u003d new PrintWriter(new File(filePath));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (filePath.equals(FILE_PATH_STUDYAREAS)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            dataBuffer.println(BackUpData.BACKUP_LOCATIONS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            dataBuffer.println(BackUpData.BACKUP_DICTIONARY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        dataBuffer.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        File dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean isLocked \u003d dataFile.setWritable(false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (!isLocked) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(\"Cannot make read-only\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "terrytay": 35,
      "NizarMohd": 64
    }
  },
  {
    "path": "src/main/java/resourceloader/TaskLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package resourceloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.FILE_PATH_DICTIONARY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.FILE_PATH_STUDYAREAS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Handles the task of loading and storing events."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskLoader {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INVALID_TASK_TYPE_MESSAGE \u003d \"Invalid task type identified when parsing tasks from \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"taskList.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** Location of data file. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** Directory of data file. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private Path fileDirectory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for TaskLoader object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Initialises the object with the file path provided."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param filePath The location of the data file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskLoader(String filePath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.fileDirectory \u003d Paths.get(filePath).getParent();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Reads the list of events stored previously and returns it as an ArrayList of Events."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return events The list of events stored previously."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        File dataFile;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Scanner s;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            s \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                String details \u003d s.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                Task newTask \u003d parseTaskDetails(details);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }  catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            createNewDataFile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the Task details from the given string and returns a new task object with the specified details."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param details Contains all the details with regards to the task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return newTask The new task created with the details provided."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private Task parseTaskDetails(String details) throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Task newTask \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        char taskType \u003d details.charAt(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String taskDetails \u003d details.substring(2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTask \u003d parseDeadlineDetails(taskDetails);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            newTask \u003d parseEventDetails(taskDetails);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            // Error handling"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            assert false : INVALID_TASK_TYPE_MESSAGE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the Deadline details from the given string and returns a new deadline object with the specified details."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param taskDescription Contains all the details with regards to the deadline."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return newEvent The new event created with the details provided."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private Deadline parseDeadlineDetails(String taskDescription) throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] details \u003d taskDescription.split(\"#\", 5);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String description \u003d details[0];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String date \u003d details[1];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String dueTime \u003d details[2];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String priority \u003d details[3];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(description, date, dueTime, priority);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return newDeadline;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the Event details from the given string and returns a new event object with the specified details."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param taskDescription Contains all the details with regards to the Event."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return newEvent The new event created with the details provided."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private Event parseEventDetails(String taskDescription) throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] details \u003d taskDescription.split(\"#\", 5);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String description \u003d details[0];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String date \u003d details[1];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String startTime \u003d details[2];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String endTime \u003d details[3];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String priority \u003d details[4];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Event newEvent \u003d new Event(description, date, startTime, endTime, priority);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new data file when the application is run for the first time."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void createNewDataFile() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Files.createDirectories(fileDirectory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Files.createFile(Paths.get(filePath));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            StudyAreaLoader.createNewStudyAreaData(FILE_PATH_STUDYAREAS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            StudyAreaLoader.createNewStudyAreaData(FILE_PATH_DICTIONARY);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Saves the list of current tasks to the data file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param tasks Represents the current list of events."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void saveTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            for (Task task: tasks) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                fw.write(task.getFormattedDetails());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 156,
      "NizarMohd": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.TaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.StudyAreaCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import resourceloader.TaskLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import resourceloader.StudyAreaLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyAreaList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.DAB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.GOODBYE_MESSAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.INTERMEDIATE_MESSAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.WRONG_INPUT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is Duke class, which forms the main class of the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String FILE_PATH_EVENTS \u003d \"library\" + File.separator + \"taskList.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FILE_PATH_STUDY_AREAS \u003d \"library\" + File.separator + \"locations.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String EXCEPTION_ENCOUNTERED_MESSAGE \u003d \"Exception encountered when Duke was constructed\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DUKE_LOGGER_LOG \u003d \"dukeLogger.log\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FILE_LOGGER_NOT_WORKING_MESSAGE \u003d \"File Logger not working\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String APPLICATION_STARTED_EXECUTION \u003d \"Application started Execution\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String APPLICATION_GOING_TO_EXIT \u003d \"Application is going to exit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String TASK_MODE \u003d \"Application transitioning to task mode\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String STUDY_AREA_MODE \u003d \"Application transitioning to study area mode\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String WRONG_COMMAND \u003d \"Wrong command entered by user\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String APPLICATION_CLOSED_SUCCESSFULLY \u003d \"Application closed successfully\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static TaskLoader taskLoader;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    protected static StudyAreaLoader studyAreaLoader;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static StudyAreaList studyAreaList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private static Parser parser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the constructor to create a new Duke program every time user runs the main loop."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Duke()  {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            setupLogger();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            parser \u003d new Parser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            taskLoader \u003d new TaskLoader(FILE_PATH_EVENTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            taskList \u003d new TaskList(taskLoader.loadFile());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            studyAreaLoader \u003d new StudyAreaLoader(FILE_PATH_STUDY_AREAS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            studyAreaList \u003d new StudyAreaList(studyAreaLoader.pushToDatabase());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (FileNotFoundException | IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            LOGGER.log(Level.SEVERE, EXCEPTION_ENCOUNTERED_MESSAGE, e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private void setupLogger() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        LOGGER.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ch.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        LOGGER.addHandler(ch);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            FileHandler fh \u003d new FileHandler(DUKE_LOGGER_LOG);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fh.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            LOGGER.addHandler(fh);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            LOGGER.log(Level.SEVERE, FILE_LOGGER_NOT_WORKING_MESSAGE, e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method runs the program."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        LOGGER.log(Level.INFO, APPLICATION_STARTED_EXECUTION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean status \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (status) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            int mode \u003d ui.getMode();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            switch (mode) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case -1:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                LOGGER.log(Level.INFO, APPLICATION_GOING_TO_EXIT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                status \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                LOGGER.log(Level.INFO, TASK_MODE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                TaskCommand.runCommands(taskList, ui, parser);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(INTERMEDIATE_MESSAGE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                LOGGER.log(Level.INFO, STUDY_AREA_MODE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                StudyAreaCommand.runCommands(studyAreaList, ui);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(INTERMEDIATE_MESSAGE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                LOGGER.log(Level.INFO, WRONG_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(WRONG_INPUT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskLoader.saveTasks(taskList.tasks);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(GOODBYE_MESSAGE + DAB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        LOGGER.log(Level.INFO, APPLICATION_CLOSED_SUCCESSFULLY);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param args this is an optional argument."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 5,
      "GanapathySanathBalaji": 14,
      "NizarMohd": 104,
      "-": 11
    }
  },
  {
    "path": "src/main/java/studyarea/Dictionary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class allows for User to loosely search certain names, address or faculties of StudyAreas."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Dictionary {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static final String FILEPATH \u003d \"library\" + File.separator + \"dictionary.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static final String DELIMITER \u003d \"~\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static HashMap\u003cString, String\u003e dictionary \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method loads the dictionary mapping from dictionary.text."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws FileNotFoundException if the file cannot be found."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void loadDictionary() throws FileNotFoundException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Scanner in \u003d new Scanner(new File(FILEPATH));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String userIn \u003d in.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String[] buffer \u003d userIn.split(DELIMITER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String out \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (String value : buffer) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    out \u003d value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    dictionary.put(value, out);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method finds a mapping from User input to a either StudyArea\u0027s name, address, or faculty."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param key this is the User input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return either StudyArea\u0027s name, address, or faculty if mapping is found, else return null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static String parseKey(String key) { //this method will be used within String.contains() method"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String out \u003d DELIMITER;                // Since .contains() cannot have null as an argument, out is initialised"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (dictionary.containsKey(key)) {      // with delimiter because mapped data does not contain delimiter."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            out \u003d dictionary.get(key);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 54
    }
  },
  {
    "path": "src/main/java/studyarea/IllegalStudyAreaException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is an extension of the Exception class that exist only for StudyArea related modules."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class IllegalStudyAreaException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public IllegalStudyAreaException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 12
    }
  },
  {
    "path": "src/main/java/studyarea/StudyArea.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static java.lang.System.lineSeparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MAX_LINE_LENGTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.TAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the StudyArea class. All study area is stored as a Study Area object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class StudyArea {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String faculty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private boolean hasPort;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private boolean isIndoor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private int maxPax;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Constructs a StudyArea class for a study area with its information"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Precondition: \u0027All variables have to be filled."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param name name of StudyArea"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param address address of StudyArea"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param faculty faculty of StudyArea"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param hasPort true for availability of ports, else false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param isIndoor true for indoor, else false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param maxPax maximum number of seats for this StudyArea"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public StudyArea(String name, String address, String faculty, boolean hasPort,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     boolean isIndoor, int maxPax) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.address \u003d address.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.hasPort \u003d hasPort;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.isIndoor \u003d isIndoor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.maxPax \u003d maxPax;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the getter for the name attribute."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return general name of the StudyArea."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the getter for the address attribute."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return physical address of the StudyArea."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.address;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the getter for the faculty attribute."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return the name of the faculty that the StudyArea is located at."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getFaculty() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.faculty;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the getter for the hasPort attribute."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return true if the StudyArea has ports and false if otherwise."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public boolean hasPort() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.hasPort;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the getter for the isIndoor attribute."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return true if StudyArea is indoors and false if otherwise."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public boolean isIndoor() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.isIndoor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the getter for the maxPax attribute."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return maximum number of pax the StudyArea can hold."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Integer getMaxPax() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.maxPax;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Prints the StudyArea into a standard String format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String value of all the attributes of the specific StudyArea."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String text \u003d TAB + \"Name: \" + this.name + lineSeparator()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + Ui.formatMessage(\"Address: \" + this.address, MAX_LINE_LENGTH)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + lineSeparator() + TAB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"Faculty: \" + this.faculty + lineSeparator() + TAB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"Port: \" + this.hasPort + lineSeparator() + TAB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"Indoor: \" + this.isIndoor + lineSeparator() + TAB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"Maximum number of Pax: \" + this.maxPax;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String line \u003d TAB + \"__________________________________________________________\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return line + lineSeparator() + text + lineSeparator() + line;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 16,
      "NizarMohd": 98
    }
  },
  {
    "path": "src/main/java/studyarea/StudyAreaList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.DUPLICATE_FLAGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.DUPLICATE_FLAGS_LOG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.FLAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.FLAG_MISPLACED_LOG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.IDENTIFIER_MISSING_LOG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.INDOOR_FLAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MULTIPLE_WHITE_SPACES;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.NON_INTEGER_LOG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NON_POSITIVE_INTEGER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.NON_POSITIVE_INTEGER_LOG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NOT_INTEGER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.NO_SIZE_INDICATED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.NO_SIZE_INDICATED_LOG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.ONLY_FLAG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.OUTDOOR_FLAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.PORTS_FLAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.SIZE_FLAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.SPACE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.WRONG_FLAG_ARGUMENT_POSITION;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static ui.Constants.WRONG_FLAG_LOG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.WRONG_FLAG_USAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the class that stores and manages all of the Study Areas in location.txt"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class StudyAreaList {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private ArrayList\u003cStudyArea\u003e studyAreaList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    // Assigns studyAreaList into object\u0027s studyAreaList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public StudyAreaList(ArrayList\u003cStudyArea\u003e studyAreaList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.studyAreaList \u003d studyAreaList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Gets the list of all the Locations in location.txt"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return ArrayList of StudyAreas."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ArrayList\u003cStudyArea\u003e getStudyAreaList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.studyAreaList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks for duplicate flags."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param flag this is the array of flags in the system."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param index this is the index referring to the specific flag to check for duplicate."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if flag is not null, ie: if flag has already been mentioned."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void checkDuplicate(String[] flag, int index) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (flag[index] !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, DUPLICATE_FLAGS_LOG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(DUPLICATE_FLAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method check if command entered is only flags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commands This is the string of commands entered by User."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param index This is the index in which the method is check if only flag exist."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if only flag is entered by user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void checkOnlyFlag(String[] commands, int index) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (commands[index].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, IDENTIFIER_MISSING_LOG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(ONLY_FLAG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks if the command after the size flag is a valid integer."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commands this is the array of commands entered."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param index this is the index where the size flag is."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if command entered is not a valid integer."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void checkInteger(String[] commands, int index) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {                                     // try block is to test if command is integer"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            int size \u003d Integer.parseInt(commands[index + 1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (size \u003c\u003d 0) {                     // check if integer is positive, else throw exception."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, NON_POSITIVE_INTEGER_LOG);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalStudyAreaException(NON_POSITIVE_INTEGER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (NumberFormatException e) {       // catch if command is not integer then throw exception"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, NON_INTEGER_LOG);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(NOT_INTEGER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {   // catch if no string exist after \"-s\" and throw exception"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, NO_SIZE_INDICATED_LOG);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(NO_SIZE_INDICATED);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method validate flags based on User input."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param flags this is the array of flags."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commands this is the full command entered by Users."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param index this is the index which the method is assigning the commands into the flags array."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param isNotFlag this is the boolean value that checks if the command entered is a flag."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if user enters command wrongly."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void checkFlag(String[] flags, String[] commands, int index, boolean isNotFlag) throws"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            IllegalStudyAreaException {                //isNotFlag is used to track previous instances of \"-\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (commands[index].equals(SIZE_FLAG)) {   // for instances of \"-s\", check if next string is integer or null."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            checkDuplicate(flags, 0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            checkInteger(commands, index);         // check if subsequent command is a valid integer."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else if (commands[index].contains(FLAG)) { // for instances \"-\" ,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            checkOnlyFlag(commands, index);             // check if only \"-\" exist, if true, then throw exception"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            switch (commands[index].charAt(1)) {        // if \"-p\", \"-i\" , \"-o\" then check if duplicate. Else, throw"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \u0027p\u0027:                               // exception for wrong usage of flag"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                checkDuplicate(flags, 2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \u0027i\u0027:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \u0027o\u0027:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                checkDuplicate(flags, 3);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, WRONG_FLAG_LOG);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalStudyAreaException(WRONG_FLAG_USAGE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {                                         // if no instances of \"-\" or \"-s\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (!isNotFlag) {                            // and if there exist previous instances of \"-\" (i.e: -p EA)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, FLAG_MISPLACED_LOG);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalStudyAreaException(WRONG_FLAG_ARGUMENT_POSITION);  // throw exception"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Obtains all the supported flags in this organiser app."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commands This is the User commands that has been split by spaces."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return special purpose String Array of a fixed size of 5 and fixed values where :\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *          index 0 : \"-s\"\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *          index 1 : Integer value of the size indicated.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *          index 2 : \"-p\"\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *          index 3 : \"-i\" or \"-o\" , depends on user input\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *          index 4: search key entered by User\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException when arguments for flags are invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String[] getFlagsInfo(String[] commands) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] flags \u003d new String[5];"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringBuilder name \u003d new StringBuilder();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean isNotFlag \u003d true;                             // to keep track of instance \"-\" is input."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (int i \u003d 0; i \u003c commands.length; i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (commands[i].equals(SIZE_FLAG)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isNotFlag \u003d false;                              // update isNotFlag as false because command is a flag"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                checkFlag(flags, commands, i, false); // pass false instead of isNotFlag as only boolean logic"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                flags[0] \u003d SIZE_FLAG;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                flags[1] \u003d Integer.toString(Integer.parseInt(commands[i + 1]));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else if (commands[i].contains(FLAG)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isNotFlag \u003d false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                checkFlag(flags, commands, i,false);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                switch (commands[i].charAt(1)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                case \u0027p\u0027:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    flags[2] \u003d PORTS_FLAG;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                case \u0027i\u0027:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    flags[3] \u003d INDOOR_FLAG;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                case \u0027o\u0027:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    flags[3] \u003d OUTDOOR_FLAG;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    LOGGER.log(Level.INFO, WRONG_FLAG_LOG);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    throw new IllegalStudyAreaException(WRONG_FLAG_USAGE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else {                                              // if no previous instances of \"-\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (isNotFlag) {                                  // and if input is not a flag"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    name.append(commands[i]).append(SPACE);    // concatenate subsequent input that pass the control"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    flags[4] \u003d name.toString().trim();            // flag"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    checkFlag(flags, commands, i, false); // if has previous instances of \"-\" and input is not"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }                                                  // flag, pass false to throw exception."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return flags;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Checks if search key is found in Study Area\u0027s Name and Faculty attributes."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param name This is the Study Area\u0027s Name Attribute."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param address This is the Study Area\u0027s Address Attribute."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param faculty This is the Study Area\u0027s Faculty Attribute."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param key This is the search key entered by User."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return True if can be found in either case. False if not found in both cases."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static boolean containsKey(String name, String address, String faculty, String key) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (name.contains(key) || name.contains(Dictionary.parseKey(key))) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (address.contains(key) || address.contains(Dictionary.parseKey(key))) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return faculty.contains((key)) || faculty.contains(Dictionary.parseKey(key));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Finds a list of StudyAreas based on User requirements."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param userIn This is the requirement entered by User"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return ArrayList of StudyAreas"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if User enters invalid commands."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ArrayList\u003cStudyArea\u003e searchList(String userIn) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] temp \u003d userIn.split(MULTIPLE_WHITE_SPACES);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] flags \u003d getFlagsInfo(temp);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ArrayList\u003cStudyArea\u003e availStudyAreas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (StudyArea studyArea : this.studyAreaList) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            boolean isAvail \u003d true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (String flag : flags) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (flag !\u003d null \u0026\u0026 isAvail \u0026\u0026 index !\u003d 1) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    switch (flag) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    case PORTS_FLAG:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        isAvail \u003d studyArea.hasPort();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    case INDOOR_FLAG:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        isAvail \u003d studyArea.isIndoor();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    case OUTDOOR_FLAG:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        isAvail \u003d !studyArea.isIndoor();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    case SIZE_FLAG:  // allows user to find by capacity \u003c\u003d MaxPax"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        isAvail \u003d Integer.parseInt(flags[1]) \u003c\u003d studyArea.getMaxPax();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    default:      // toLowerCase() so casing does not affect matching"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        isAvail \u003d containsKey(studyArea.getName().toLowerCase(), studyArea.getAddress().toLowerCase(),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                                studyArea.getFaculty().toLowerCase(), flags[4].toLowerCase());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (isAvail) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                availStudyAreas.add(studyArea);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return availStudyAreas;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 3,
      "NizarMohd": 232,
      "GanapathySanathBalaji": 23
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.InvalidDateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.InvalidDueTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.SearchKeywordEmptyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskDateBeforeCurrentDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskPriorityNotIntegerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.AT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.DATE_AFTER_CURRENT_DATE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.DATE_PATTERN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.DELIMITER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.EDIT_DATE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.EDIT_DESCRIPTION;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.EMPTY_STRING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.ENTER_NEW_DATE_MESSAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.ENTER_NEW_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.ENTER_NEW_PRIORITY_MESSAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.ENTER_VALID_NUMBER_FROM_LIST_MESSAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.ERROR_MESSAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.INVALID_DATE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.INVALID_DATE_ENTERED;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.INVALID_OPTION_ENTERED;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.INVALID_PRIORITY_VALUE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.NEW_LINE_CHARACTER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.OPTION_TO_EDIT_DATE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.OPTION_TO_EDIT_DESCRIPTION;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.PRIORITY_NOT_INTEGER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.SEARCH_KEYWORD_EMPTY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.UPDATED_DETAILS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.WITH_PRIORITY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static task.Event.WRONG_OPTION;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Represents an deadline and contains the related functions."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static final int EDIT_DUE_TIME \u003d 3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final int EDIT_PRIORITY \u003d 4;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DEADLINE_IDENTIFIER \u003d \"D\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DEADLINE_SYMBOL \u003d \"[D] \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ON \u003d \" on \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_NEW_DUE_TIME_MESSAGE \u003d \"Enter new due Time:\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DEADLINE_DETAILS_AS_FOLLOWS_MESSAGE \u003d \"The deadline details are as follows:\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ASK_FOR_OPTION_MESSAGE \u003d \"Which field of the deadline to edit? (Enter Corresponding \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \"Number)\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String OPTION_TO_EDIT_DUE_TIME \u003d \"3. Due Time\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String OPTION_TO_EDIT_PRIORITY \u003d \"4. Priority\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static final String INVALID_DUE_TIME \u003d \"Invalid due time entered by user\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static final String INVALID_DUE_TIME_ENTERED \u003d \"Invalid due time entered by the user\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalTime dueTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Setter for priority of the deadline."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority The new priority of the deadline."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for Deadline Class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param description Description of the deadline."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param date Date of specified Deadline"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param dueTime Due time of specified deadline."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority Priority of specified deadline."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used for date, time fields."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public Deadline(String description, String date, String dueTime, String priority) throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskType \u003d TaskType.Deadline;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDescription(description);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDate(date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDueTime(dueTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parsePriority(priority);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the number of days left till the event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Number of days till deadline."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public long numberOfDaysLeft() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return ChronoUnit.DAYS.between(LocalDate.now(),this.date);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the priority from the string entered by user for the priority field."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority String entered by user for the priority field."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the provided priority isn\u0027t an integer."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parsePriority(String priority) throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.priority \u003d Integer.parseInt(priority.strip());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, PRIORITY_NOT_INTEGER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new TaskPriorityNotIntegerException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the Due time from the string entered by user for the dueTime field."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param dueTime String entered by user for the dueTime field."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the provided end time isn\u0027t valid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseDueTime(String dueTime) throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.dueTime \u003d LocalTime.parse(dueTime.strip());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, INVALID_DUE_TIME);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new InvalidDueTimeException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the Date from the string entered by user for the date field."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param date String entered by user for the date field."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the provided date isn\u0027t valid or is a past date."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseDate(String date) throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.date \u003d LocalDate.parse(date.strip());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, INVALID_DATE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (this.date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, DATE_AFTER_CURRENT_DATE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new TaskDateBeforeCurrentDateException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the description from the string entered by user for the description field."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param description String entered by user for the description field."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseDescription(String description) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the information related to information in form of a string."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return deadlineInfo Contains information related to the deadline."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public String getTaskInformation() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String deadlineInfo \u003d DEADLINE_SYMBOL + description + ON"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(DATE_PATTERN)) + AT + dueTime.toString()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + WITH_PRIORITY + priority;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return deadlineInfo;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the priority of the specified deadline."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Priority of deadline."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the date of the deadline."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Date of deadline."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to identify if the string contains the keyword specified in its description."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The keyword to be matched with the description."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return containsKeyword Indicates the presence/absence of keyword in the deadline\u0027s description."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If no keyword is entered."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public boolean hasKeyword(String keyword) throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (keyword.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, SEARCH_KEYWORD_EMPTY);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new SearchKeywordEmptyException();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean containsKeyword \u003d description.contains(keyword);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return containsKeyword;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the deadline in the format used to store it in the data file."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return formattedDeadlineDetails Contains the deadline details in the required format."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public String getFormattedDetails() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String formattedDeadlineDetails \u003d DEADLINE_IDENTIFIER + DELIMITER + description + DELIMITER + date + DELIMITER"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + dueTime + DELIMITER + priority + NEW_LINE_CHARACTER;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return formattedDeadlineDetails;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Edits the event at the index specified."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Newly updated event."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public Deadline editDeadline(Ui ui) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        printOptionsToEdit(ui);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int fieldToBeEdited;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        fieldToBeEdited \u003d getFieldToBeEdited(ui);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        switch (fieldToBeEdited) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_DESCRIPTION:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editDescription(ui);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_DATE:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editDate(ui);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_DUE_TIME:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editDueTime(ui);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_PRIORITY:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editPriority(ui);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.SEVERE, WRONG_OPTION);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        printUpdatedDetails(ui);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the priority field of the deadline."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editPriority(Ui ui) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_PRIORITY_MESSAGE);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newPriorityString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parsePriority(newPriorityString);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_PRIORITY_VALUE);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the dueTime field of the deadline."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editDueTime(Ui ui) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_DUE_TIME_MESSAGE);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newStartTimeString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseDueTime(newStartTimeString);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_DUE_TIME_ENTERED);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the date field of the deadline."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editDate(Ui ui) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_DATE_MESSAGE);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newDateString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseDate(newDateString);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (this.date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    LOGGER.log(Level.INFO, DATE_AFTER_CURRENT_DATE);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    throw new TaskDateBeforeCurrentDateException();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_DATE_ENTERED);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the description field of the deadline."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editDescription(Ui ui) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(ENTER_NEW_DESCRIPTION_MESSAGE);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String newDescription \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDescription(newDescription);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns an integer denoting the field selected to be edited later."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return fieldToBeEdited Corresponds to the field to be edited."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private int getFieldToBeEdited(Ui ui) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int fieldToBeEdited \u003d 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                fieldToBeEdited \u003d Integer.parseInt(ui.getUserIn());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                boolean isInvalidOption \u003d fieldToBeEdited \u003e 4 || fieldToBeEdited \u003c 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (isInvalidOption) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    throw new Exception();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception exception) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_OPTION_ENTERED);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(ENTER_VALID_NUMBER_FROM_LIST_MESSAGE);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return fieldToBeEdited;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints the updated details of the deadline after an edit command."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with user."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printUpdatedDetails(Ui ui) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(UPDATED_DETAILS);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(this.getTaskInformation());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints the list of fields that could be edited as a list."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with user."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printOptionsToEdit(Ui ui) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(DEADLINE_DETAILS_AS_FOLLOWS_MESSAGE);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(this.getTaskInformation());"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(ASK_FOR_OPTION_MESSAGE);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_DESCRIPTION);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_DATE);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_DUE_TIME);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_PRIORITY);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printEmptyLine();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 382,
      "NizarMohd": 2
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.EventStartTimeAfterEndTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.InvalidDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.InvalidEndTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.InvalidStartTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.SearchKeywordEmptyException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskDateBeforeCurrentDateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import exception.command.TaskPriorityNotIntegerException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Represents an event and contains the related functions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final int EDIT_DESCRIPTION \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final int EDIT_DATE \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final int EDIT_START_TIME \u003d 3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final int EDIT_END_TIME \u003d 4;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final int EDIT_PRIORITY \u003d 5;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \"Error encountered during execution\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DATE_PATTERN \u003d \"MMM d yyyy\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EVENT_SYMBOL \u003d \"[E] \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String AT \u003d \" at \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String FROM \u003d \" from \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String TO \u003d \" to \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String WITH_PRIORITY \u003d \" with priority \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DELIMITER \u003d \"#\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NEW_LINE_CHARACTER \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EVENT_IDENTIFIER \u003d \"E\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_NEW_PRIORITY_MESSAGE \u003d \"Enter new priority:\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_NEW_END_TIME_MESSAGE \u003d \"Enter new End Time:\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_NEW_START_TIME_MESSAGE \u003d \"Enter new Start Time:\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_NEW_DATE_MESSAGE \u003d \"Enter new Date:\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_NEW_DESCRIPTION_MESSAGE \u003d \"Enter new description:\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ENTER_VALID_NUMBER_FROM_LIST_MESSAGE \u003d \"Please enter a valid number from the list\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String UPDATED_DETAILS \u003d \"Updated Details:\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String EVENT_DETAILS_AS_FOLLOWS_MESSAGE \u003d \"The event details are as follows:\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ASK_FOR_OPTION_MESSAGE \u003d \"Which field of the event to edit?\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \" (Enter Corresponding Number)\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String OPTION_TO_EDIT_DESCRIPTION \u003d \"1. Description\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String OPTION_TO_EDIT_DATE \u003d \"2. Date\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String OPTION_TO_EDIT_START_TIME \u003d \"3. Start Time\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String OPTION_TO_EDIT_END_TIME \u003d \"4. End Time\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String OPTION_TO_EDIT_PRIORITY \u003d \"5. Priority\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String START_TIME_AFTER_END_TIME \u003d \"Event start time after end time exception thrown\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String PRIORITY_NOT_INTEGER \u003d \"Task priority not integer exception thrown\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_END_TIME \u003d \"Invalid end time exception thrown\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_START_TIME \u003d \"Invalid start time exception thrown\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_DATE \u003d \"Invalid date exception thrown\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DATE_AFTER_CURRENT_DATE \u003d \"Date after current date exception thrown\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String SEARCH_KEYWORD_EMPTY \u003d \"Search keyword empty exception thrown\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String WRONG_OPTION \u003d \"Wrong option entered not handled by getFieldToBeEdited\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_PRIORITY_VALUE \u003d \"Invalid priority value entered by user\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_END_TIME_ENTERED \u003d \"Invalid end time entered by the user\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_START_TIME_ENTERED \u003d \"Invalid start time entered by user\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_DATE_ENTERED \u003d \"Invalid date entered by user\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_OPTION_ENTERED \u003d \"Invalid option entered by user\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Setter for priority of the deadline."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority The new priority of the event."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Getter function for Start Time of Event."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Start time of event."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Getter function for End Time of Event."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return End time of event."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for Event Class."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param date Date of specified Event."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param startTime Start time of specified event."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param endTime End time of specified event."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority Priority of specified event."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used for date, time or priority fields."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public Event(String description, String date, String startTime, String endTime, String priority)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskType \u003d TaskType.Event;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDescription(description);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDate(date);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseStartTime(startTime);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseEndTime(endTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (this.startTime.isAfter(this.endTime)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, START_TIME_AFTER_END_TIME);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new EventStartTimeAfterEndTimeException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parsePriority(priority);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the priority from the string entered by user for the priority field."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority String entered by user for the priority field."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the provided priority isn\u0027t an integer."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parsePriority(String priority) throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.priority \u003d Integer.parseInt(priority.strip());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, PRIORITY_NOT_INTEGER);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new TaskPriorityNotIntegerException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the End time from the string entered by user for the endTime field."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param endTime String entered by user for the endTime field."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the provided end time isn\u0027t valid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseEndTime(String endTime) throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.endTime \u003d LocalTime.parse(endTime.strip());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, INVALID_END_TIME);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new InvalidEndTimeException();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the End time from the string entered by user for the startTime field."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param startTime String entered by user for the startTime field."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the provided start time isn\u0027t valid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseStartTime(String startTime) throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.startTime \u003d LocalTime.parse(startTime.strip());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, INVALID_START_TIME);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new InvalidStartTimeException();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the Date from the string entered by user for the date field."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param date String entered by user for the date field."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the provided date isn\u0027t valid or is a past date."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseDate(String date) throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.date \u003d LocalDate.parse(date.strip());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, INVALID_DATE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (this.date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, DATE_AFTER_CURRENT_DATE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new TaskDateBeforeCurrentDateException();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the description from the string entered by user for the description field."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param description String entered by user for the description field."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseDescription(String description) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the information related to information in form of a string."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return eventInfo Contains information related to the event."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public String getTaskInformation() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String eventInfo \u003d EVENT_SYMBOL + description + AT + date.format(DateTimeFormatter.ofPattern(DATE_PATTERN))"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + FROM + startTime.toString() + TO + endTime.toString() + WITH_PRIORITY + priority;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return eventInfo;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the number of days left till the event."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Number of days till event."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public long numberOfDaysLeft() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return ChronoUnit.DAYS.between(LocalDate.now(),this.date);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the priority of the specified event."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Priority of event."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the date of the event."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Date of event."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to identify if the string contains the keyword specified in its description."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The keyword to be matched with the description."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return containsKeyword Indicates the presence/absence of keyword in the event\u0027s description."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If keyword entered is empty."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public boolean hasKeyword(String keyword) throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (keyword.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, SEARCH_KEYWORD_EMPTY);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new SearchKeywordEmptyException();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean containsKeyword \u003d description.contains(keyword);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return containsKeyword;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the event in the format used to store it in the data file."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return formattedEventDetails Contains the event details in the required format."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public String getFormattedDetails() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String formattedEventDetails \u003d EVENT_IDENTIFIER + DELIMITER + description + DELIMITER + date + DELIMITER"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + startTime + DELIMITER + endTime + DELIMITER + priority + NEW_LINE_CHARACTER;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return formattedEventDetails;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Edits the event at the index specified."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Newly updated event."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public Event editEvent(Ui ui) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        printOptionsToEdit(ui);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int fieldToBeEdited;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        fieldToBeEdited \u003d getFieldToBeEdited(ui);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        switch (fieldToBeEdited) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_DESCRIPTION:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editDescription(ui);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_DATE:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editDate(ui);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_START_TIME:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editStartTime(ui);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_END_TIME:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editEndTime(ui);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case EDIT_PRIORITY:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editPriority(ui);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.SEVERE, WRONG_OPTION);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        printUpdatedDetails(ui);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the priority field of the event."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editPriority(Ui ui) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_PRIORITY_MESSAGE);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newPriorityString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parsePriority(newPriorityString);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_PRIORITY_VALUE);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the endTime field of the event."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editEndTime(Ui ui) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_END_TIME_MESSAGE);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newEndTimeString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseEndTime(newEndTimeString);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (this.endTime.isBefore(this.startTime)) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    LOGGER.log(Level.INFO, START_TIME_AFTER_END_TIME);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    throw new EventStartTimeAfterEndTimeException();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_END_TIME_ENTERED);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the startTime field of the event."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editStartTime(Ui ui) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_START_TIME_MESSAGE);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newStartTimeString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseStartTime(newStartTimeString);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (this.endTime.isBefore(this.startTime)) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    LOGGER.log(Level.INFO, START_TIME_AFTER_END_TIME);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    throw new EventStartTimeAfterEndTimeException();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_START_TIME_ENTERED);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the date field of the event."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editDate(Ui ui) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(ENTER_NEW_DATE_MESSAGE);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String newDateString \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                parseDate(newDateString);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (this.date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    LOGGER.log(Level.INFO, DATE_AFTER_CURRENT_DATE);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    throw new TaskDateBeforeCurrentDateException();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_DATE_ENTERED);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to edit the description field of the event."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editDescription(Ui ui) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(ENTER_NEW_DESCRIPTION_MESSAGE);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String newDescription \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDescription(newDescription);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns an integer denoting the field selected to be edited later."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return fieldToBeEdited Corresponds to the field to be edited."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private int getFieldToBeEdited(Ui ui) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int fieldToBeEdited \u003d 0;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean exceptionEncountered;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            exceptionEncountered \u003d false;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                fieldToBeEdited \u003d Integer.parseInt(ui.getUserIn());"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                boolean isInvalidOption \u003d fieldToBeEdited \u003e 5 || fieldToBeEdited \u003c 0;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (isInvalidOption) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    throw new Exception();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception exception) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                LOGGER.log(Level.INFO, INVALID_OPTION_ENTERED);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(ENTER_VALID_NUMBER_FROM_LIST_MESSAGE);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                exceptionEncountered \u003d true;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } while (exceptionEncountered);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return fieldToBeEdited;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints the updated details of the event after an edit command."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with user."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printUpdatedDetails(Ui ui) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(UPDATED_DETAILS);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(this.getTaskInformation());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints the list of fields that could be edited as a list."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with user."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printOptionsToEdit(Ui ui) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(EVENT_DETAILS_AS_FOLLOWS_MESSAGE);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(this.getTaskInformation());"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(ASK_FOR_OPTION_MESSAGE);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_DESCRIPTION);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_DATE);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_START_TIME);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_END_TIME);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(OPTION_TO_EDIT_PRIORITY);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printEmptyLine();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 463
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskType taskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract int getPriority();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract boolean hasKeyword(String keyword) throws Exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract String getFormattedDetails();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract String getTaskInformation();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public abstract long numberOfDaysLeft();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 20
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Handles all functions related to the list of events."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Stores the task\u0027s information."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the TaskList class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Overloaded constructor for TaskList class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param tasks The list of events the task\u0027s list of events is initialised with."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the number of tasks currently stored."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return The number of tasks stored currently."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Adds a new task to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui      This allows Task List class to interact with User."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param newTask represents the new task to be added."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void addTask(Task newTask, Ui ui) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.NEW_TASK_ADDED_MESSAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(newTask.getTaskInformation());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Displays the current list of tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void listTasks(Ui ui) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.TASK_LIST_AS_FOLLOWS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            int eventNumber \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(eventNumber + Constants.CLOSING_BRACKET + task.getTaskInformation());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                eventNumber++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.LIST_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Deletes the task at the specified index."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui    This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param index The index (1-based) of the task to be deleted."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void deleteTask(int index, Ui ui) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (index \u003e tasks.size() | index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            tasks.remove(index - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.TASK_AT_INDEX_DELETED_MESSAGE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.INFO, Constants.INDEX_TO_BE_DELETED_OUT_OF_BOUNDS_LOG);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.RE_ENTER_VALID_INDEX_TO_DELETE_MESSAGE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Calls a helper function to edit the task at the specified index."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui    This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param index The index (1-based) of the task to be deleted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void editTask(int index, Ui ui) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (index \u003e tasks.size() | index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            /* Converting to \u00270\u0027 based index */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            editTaskAtIndex(index - 1, ui);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.TASK_AT_INDEX_EDITED_MESSAGE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.RE_ENTER_VALID_INDEX_TO_EDIT_MESSAGE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Edits the task at the specified index."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param index The index of the task to be edited."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index provided is invalid (i.e, out of bounds)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void editTaskAtIndex(int index, Ui ui) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        switch (tasks.get(index).taskType) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case Event:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event oldEvent \u003d (Event) tasks.get(index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event updatedEvent \u003d oldEvent.editEvent(ui);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            tasks.set(index, updatedEvent);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        case Deadline:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Deadline oldDeadline \u003d (Deadline) tasks.get(index);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Deadline updatedDeadline \u003d oldDeadline.editDeadline(ui);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            tasks.set(index, updatedDeadline);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            LOGGER.log(Level.SEVERE, Constants.INVALID_TASK_TYPE_LOG);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.ERROR_ENCOUNTERED_DURING_EXECUTION_MESSAGE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Clears all the tasks currently stored."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void clearTasks(Ui ui) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.TASK_LIST_CLEARED_MESSAGE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Lists all the tasks sorted by their priority by calling a helper function."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void priorityView(Ui ui) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ArrayList\u003cTask\u003e tasksSortedByPriority \u003d tasks;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        tasksSortedByPriority.sort(Comparator.comparingInt(Task::getPriority));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Collections.reverse(tasksSortedByPriority);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            printTasksSortedByPriority(ui, tasksSortedByPriority);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.LIST_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints the tasks sorted by their priority."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param tasksSortedByPriority The sorted list of tasks."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printTasksSortedByPriority(Ui ui, ArrayList\u003cTask\u003e tasksSortedByPriority) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.LIST_SORTED_BY_PRIORITY_MESSAGE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Task task : tasksSortedByPriority) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(taskNumber + Constants.CLOSING_BRACKET + task.getTaskInformation());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            taskNumber++;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Lists all the tasks sorted by date along with the days remaining by calling a helper function."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void countdownView(Ui ui) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ArrayList\u003cTask\u003e tasksSortedByDate \u003d tasks;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        tasksSortedByDate.sort(Comparator.comparing(Task::getDate));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            printTasksSortedByDate(ui, tasksSortedByDate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.LIST_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints the tasks sorted by date along with the days remaining."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param tasksSortedByDate The sorted list of tasks."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printTasksSortedByDate(Ui ui, ArrayList\u003cTask\u003e tasksSortedByDate) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printMessage(Constants.LIST_SORTED_ON_DAYS_LEFT_MESSAGE);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Task task : tasksSortedByDate) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (!task.getDate().isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(taskNumber + Constants.CLOSING_BRACKET + task.getTaskInformation()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        + Constants.ARROW_SYMBOL + task.numberOfDaysLeft() + Constants.DAYS_LEFT);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                taskNumber++;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Displays the list of tasks containing the keyword."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui      This allows TaskList class to interact with User."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The keyword to be searched for."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the keyword is empty."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void searchTasks(String keyword, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean hasMatchedTask \u003d checkForMatchedTasks(keyword);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (hasMatchedTask) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            printMatchedTasks(keyword, ui);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printMessage(Constants.LIST_EMPTY_MESSAGE);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to check if there is at least one task containing the keyword in it\u0027s description."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The word used for search."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return true if at least one task has a description containing the keyword and false otherwise"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If keyword used is empty."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private boolean checkForMatchedTasks(String keyword) throws Exception {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean hasMatchedTask \u003d false;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (task.hasKeyword(keyword)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                hasMatchedTask \u003d true;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return hasMatchedTask;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Displays the list of tasks containing the keyword in their descriptions."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The word used for search."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param ui Used to interact with the user."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If the keyword is empty."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void printMatchedTasks(String keyword, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            if (task.hasKeyword(keyword)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printMessage(taskNumber + Constants.CLOSING_BRACKET + task.getTaskInformation());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                taskNumber++;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 287,
      "hongquan448": 4
    }
  },
  {
    "path": "src/main/java/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    Event, Deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 5
    }
  },
  {
    "path": "src/main/java/ui/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class contains all the constants required for Ui."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FILE_PATH_STUDYAREAS \u003d \"library\" + File.separator + \"locations.txt\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FILE_PATH_DICTIONARY \u003d \"library\" + File.separator + \"dictionary.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String MISSING_STUDY_AREA_DATA \u003d \"locations.txt is missing\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String BYE_MESSAGE \u003d \"Bye!!!!!!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String LINE \u003d \"_______________________________________________________________________________\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"_________________\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final int MAX_LINE_LENGTH \u003d 58;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FLAG \u003d \"-\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String MULTIPLE_WHITE_SPACES \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DUPLICATE_FLAGS \u003d \"Duplicate flags entered!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String SIZE_FLAG \u003d \"-s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String PORTS_FLAG \u003d \"-p\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INDOOR_FLAG \u003d \"-i\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String OUTDOOR_FLAG \u003d \"-o\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NOT_INTEGER \u003d \"Argument used after size flag \\\"-s\\\" is not an integer\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String WRONG_FLAG_USAGE \u003d \"Flags indicated are wrongly used. Please enter \\\"help\\\" for the\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" supported flags!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String WRONG_FLAG_ARGUMENT_POSITION \u003d \"Flags are to be used only after location\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String START_STUDY_AREA_SEARCH \u003d \"Please enter the location for your desired study area. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"Enter \\\"help\\\" for a list of supported flags. Flags should only come after location, if a criteria for\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" location is entered. When you are done with the search, enter \\\"bye\\\".\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String PROMPT_USER \u003d \"Please enter the location for your desired study area.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FLAGS \u003d \"\\t Here is a list of supported flags!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t -p for study\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" areas with ports\" + System.lineSeparator() + \"\\t -i for study areas that are indoors\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + System.lineSeparator() + \"\\t -o for study areas that are outdoors\" + System.lineSeparator() + \"\\t \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"-s {size} for maximum number of pax\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String AVAILABLE_STUDY_AREAS \u003d \"Here are the available study areas!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String EMPTY_LIST \u003d \"Oops! Based on your criteria we were not able to find a compatible study\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" area!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String ONLY_FLAG \u003d \"Please enter the flag along with \\\"-\\\"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INCONSISTENT_DATA_STORAGE \u003d \"Data is wrongly stored in locations.txt\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String TAB \u003d \"\\t \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NO_SIZE_INDICATED \u003d \"Max Size is not indicated. Please indicate accordingly!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String END_MESSAGE \u003d \"Thank you for using our study area search service!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String START_MESSAGE \u003d \"Welcome to OrgaNice! To start, enter \\\"task\\\" to start\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" your task list! If you are in the mood to mug and you\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" want to start your study area list, enter \\\"study\\\" !If\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" you want to exit, enter \\\"bye\\\" !\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String WRONG_INPUT \u003d \"Wrong input! Please enter either \\\"task\\\" or \\\"study\\\" only!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String TASK_COMMAND \u003d \"task\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String STUDY_COMMAND \u003d \"study\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String GOODBYE_MESSAGE \u003d \"  Goodbye! Hope to see you again!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INTERMEDIATE_MESSAGE \u003d \"Please enter \\\"task\\\" to continue with your event list or\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" \\\"study\\\" to continue with your study area list. To leave, enter \\\"bye\\\".\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String EMPTY_LOCATION \u003d \"Location entered is empty! Please type a location to search for \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"StudyAreas!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NON_POSITIVE_INTEGER \u003d \"Integer entered cannot be zero or negative!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_20 \u003d TAB + \"*There are 4 levels of priority, with 1 being the most \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"urgent, and 4 being the least urgent\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_19 \u003d TAB + \"*All timing should follow 24 hour clock\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_18 \u003d TAB + \"*All dates should follow YYYY-MM-DD format\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_17 \u003d TAB + \"Notes:\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_16 \u003d TAB + \"bye --------------------------------------- Terminate task\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" interface\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_15 \u003d TAB + \"help -------------------------------------- View List Of \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"Commands Supported\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_14 \u003d TAB + \"edit \u003cindex number of task\u003e --------------- Edit the task\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_13 \u003d TAB + \"delete \u003cindex number of task\u003e ------------- Delete the \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"task\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_12 \u003d TAB + \"search \u003ckeyword found in task\u003e ------------ View existing \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"task that contains the keyword\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_11 \u003d TAB + \"clear ------------------------------------- Delete\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" all tasks\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_10 \u003d TAB + \"countdown --------------------------------- View existing\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" tasks based on days left\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_9 \u003d TAB + \"priority_view ----------------------------- View existing \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"tasks based on priority\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_8 \u003d TAB + \"view -------------------------------------- View existing\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" events\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_7 \u003d TAB + \"------------------------------------------- Create a new \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"deadline\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_5 \u003d TAB + \"deadline \u003cdeadline details\u003e /d \u003cdate\u003e /t \u003cdue time\u003e /p \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\u003cpriority of deadline\u003e\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_4 \u003d TAB + \"------------------------------------------- Create a new \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"event\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_3 \u003d TAB + \"event \u003cevent details\u003e /d \u003cdate\u003e /s \u003cstart time\u003e \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"/e \u003cend time\u003e /p \u003cpriority of event\u003e\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_2 \u003d TAB + \"Please enter the keywords followed by the information\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" shown in the brackets\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_DESCRIPTION_1 \u003d TAB + \"OrgaNice! Supports the following commands\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author NizarMohd-reused"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //Reused from https://www.netclipart.com/isee/iRwmhJb_bt21-rj-transparent-background/ and https://asciiart.club/"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //Image for public static final String DAB is obtained from the first link and then generated in second link."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DAB \u003d \"\\t ``````````````````````````````````````````````````````````\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ````````````````````````````````:v(v\u0027`````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ```````````````````````````,)4|ex` `L}````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````````````````!s\\\"\u0027h `M:   ^z_;)T```````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````````````````Z   u|}Z:        \\\"}``````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````````````:\u003d?)                \u0027B?L\u0027```````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````````````\u0027Z                    ;Yp\\\"```````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````````````.e                      ?_```````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ```````````````````\u0027QDGH                    .5````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ````````````````````I#g\u0027         \u0027_`        ||````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ```````````:mX_``````YhL`      `\u0027q!`   ?     h````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ```````````\u0027Qbs)|L\u003d_V\\\" \u0027Y}     ^\u0027q@\u0026b\u003dc\u003d_`  ,Z````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ````````````q\u003e     \u0027T,   ,o\\\"    ;\\\"@c.   .sVx~`````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ````````````c!             \\\"bh` `,p       z:``````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````q.              ngDQmh8s     X\u0027``````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````LY\\\"             :n}\u003e``b;   _V```````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ````````````````q?,                ?;   \\\"V````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````KvR                  \u0027  )x_`````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````zjL                  GLY\\\"```````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ```````````````M                 .I)``````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ```````````````Lz                `D:``````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````vu`    (I)_;\\\"\\\".      P.`````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````p     :X.\u0027:^,\\\"\u003dn    \\\"q``````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````)0X?^:)I````````m\u0027   :j``````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````.IGD8k\u0027`````````\u003c\u0026G55M```````````````````````\" + System.lineSeparator()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````````````````````````````````````````````````\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author NizarMohd-reused"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //Reused logo from http://patorjk.com/software/taag/#p\u003ddisplay\u0026f\u003dGraffiti\u0026t\u003dTypeSomething with minor"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    // modifications. The website above allows for generation of fonts in ascii format. Therefore, logo is"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    // generated from the service provided by the website."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String LOGO \u003d \"_______/\\\\\\\\\\\\\\\\\\\\___________________________________________________\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"__/\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"__________________________________________/\\\\\\\\\\\\____________\" +  System.lineSeparator()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"______/\\\\\\\\\\\\///\\\\\\\\\\\\__________________________________________________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_________________________________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________\" +  System.lineSeparator()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\____________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___________________\\\\/\\\\\\\\\\\\/\\\\\\\\\\\\_\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_\\\\/\\\\\\\\\\\\___/\\\\\\\\\\\\__________________________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        +  System.lineSeparator()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_____/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___/\\\\\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\////\\\\\\\\\\\\___/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"__\\\\/\\\\\\\\\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\__\\\\///_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______\" +  System.lineSeparator()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\/////\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\////////\\\\\\\\\\\\___\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_\\\\/\\\\\\\\\\\\\\\\//\\\\\\\\\\\\\\\\/\\\\\\\\\\\\___/\\\\\\\\\\\\____/\\\\\\\\\\\\//////_____/\\\\\\\\\\\\/////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\\\\\\\\\____\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"___\" +  System.lineSeparator()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"______\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\___\\\\///____\\\\///////\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_\\\\/\\\\\\\\\\\\_\\\\//\\\\\\\\\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\___/\\\\\\\\\\\\___________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_____\" +  System.lineSeparator()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"________\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___________/\\\\\\\\_____\\\\\\\\\\\\___/\\\\\\\\\\\\/////\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_\\\\/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\_________\\\\//\\\\\\\\///////_______\\\\///_______\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        +  System.lineSeparator()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"____________\\\\///\\\\\\\\\\\\\\\\\\\\/______\\\\/\\\\\\\\\\\\__________\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/\\\\\\\\\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_\\\\/\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"_/\\\\\\\\\\\\_____\" +  System.lineSeparator()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        + \"______________\\\\/////________\\\\///____________\\\\////////_____\\\\////////\\\\//___\\\\///_____\\\\/////__\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        +  \"_\\\\///______\\\\////////_____\\\\//////////______\\\\///_____\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NON_POSITIVE_INTEGER_LOG \u003d \"User entered a non positive integer\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NON_INTEGER_LOG \u003d \"User entered an invalid number for integer input\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DUPLICATE_FLAGS_LOG \u003d \"Duplicate flags entered by user\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String IDENTIFIER_MISSING_LOG \u003d \"Identifier not entered with flag by user\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NO_SIZE_INDICATED_LOG \u003d \"no string exist after \\\"-s\\\"\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String WRONG_FLAG_LOG \u003d \"Wrong flag used by user while searching for study areas\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String FLAG_MISPLACED_LOG \u003d \"Flag is placed in the wrong position in the user input\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String NEW_TASK_ADDED_MESSAGE \u003d \"A new task with the following information has been added.\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String TASK_LIST_AS_FOLLOWS \u003d \"Here is the list of tasks added so far:\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String CLOSING_BRACKET \u003d \") \";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String LIST_EMPTY_MESSAGE \u003d \"The list is empty.\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String TASK_AT_INDEX_DELETED_MESSAGE \u003d \"The task at the mentioned index has been deleted\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INDEX_TO_BE_DELETED_OUT_OF_BOUNDS_LOG \u003d \"Index specified to be deleted is out of bounds\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String RE_ENTER_VALID_INDEX_TO_DELETE_MESSAGE \u003d \"Invalid index entered. Please enter a valid\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \" index to be deleted\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String TASK_AT_INDEX_EDITED_MESSAGE \u003d \"The task at the mentioned index has been \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \"edited successfully\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String RE_ENTER_VALID_INDEX_TO_EDIT_MESSAGE \u003d \"Invalid index entered. Please enter a\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \" valid index to be edited\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_TASK_TYPE_LOG \u003d \"Task type of the task to be edited not recognized\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ERROR_ENCOUNTERED_DURING_EXECUTION_MESSAGE \u003d \"Error encountered during execution\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String TASK_LIST_CLEARED_MESSAGE \u003d \"The list of tasks is cleared.\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String LIST_SORTED_BY_PRIORITY_MESSAGE \u003d \"Here is the list of tasks added so far displayed \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \"in decreasing order of priority:\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String LIST_SORTED_ON_DAYS_LEFT_MESSAGE \u003d \"Here is the list of tasks with sorted based\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            + \" on the number of days left:\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ARROW_SYMBOL \u003d \" ---\u003e \";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DAYS_LEFT \u003d \" day(s) left\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 152,
      "GanapathySanathBalaji": 30,
      "-": 4
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static java.lang.System.lineSeparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.BYE_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.DAB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.FLAGS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.GOODBYE_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_10;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_11;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_12;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_13;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_14;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_15;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_16;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_17;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_18;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_19;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_20;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_4;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_7;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_8;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.HELP_DESCRIPTION_9;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.LINE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.LOGO;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.MAX_LINE_LENGTH;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.SPACE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.START_MESSAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.STUDY_COMMAND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.TAB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static ui.Constants.TASK_COMMAND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Contains functions used to interact with the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the constructor used to create the Ui class in Duke.run()."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructor assigns IO stream to the attributes of Ui."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param in This is the Input Stream for Ui."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param out This is the Output Stream for Ui."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Returns the mode (event features or StudyArea features or exit) based on User input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return an integer which is assigned to each mode."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public int getMode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String userIn \u003d this.in.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        switch (userIn) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case TASK_COMMAND :"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case STUDY_COMMAND :"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case BYE_COMMAND :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method allows for other class to get User input."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String input from User."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getUserIn() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.in.nextLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method closes the Input Stream after usage is completed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.in.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Prints a line made up of \u0027_\u0027."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(LINE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * This method ensures that the message printed is within the standard length."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param message is the String that we intend to format to a standard length per line."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (message.equals(GOODBYE_MESSAGE + DAB)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.out.println(TAB + GOODBYE_MESSAGE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.out.println(DAB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.out.println(formatMessage(message, MAX_LINE_LENGTH));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method allows for StudyAreaCommand to print StudyArea based on its actual format,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * so that formatMessage method does not interfere with the initial format."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param studyArea This is the StudyArea to be printed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printStudyArea(StudyArea studyArea) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(studyArea.toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Display welcome message."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(\"Hello from\" + System.lineSeparator() + LOGO);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String name \u003d this.in.nextLine();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(TAB + \"Hello \" + name + \"!\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        printMessage(START_MESSAGE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method prints the list of supported flags for the User."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printStudyAreaHelp() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(FLAGS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Prints an empty line."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void printEmptyLine() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Display the list of supported commands."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_3);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_4);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_5);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_7);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_8);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_9);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_10);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_11);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_12);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_13);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_14);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_15);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_16);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_17);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_18);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_19);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(HELP_DESCRIPTION_20);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is a modification of a code from Stack Overflow to format strings into a standard length. Minor edition is"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * made to ensure suitability with the program."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method ensures that the message printed is within the standard\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * length."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param message is the String that we intend to format to a standard length\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *                per line.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param maxLength This is the standard length intended to be formatted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String of standard length per line"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author NizarMohd-reused"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //Reused from https://stackoverflow.com/questions/7528045/large-string-split-into-lines-with-maximum-length-in-java"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    // with minor modification."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static String formatMessage(String message, int maxLength) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringTokenizer token \u003d new StringTokenizer(message, SPACE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringBuilder standardLengthMessage \u003d new StringBuilder(message.length());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        int lineLength \u003d 0;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (token.hasMoreTokens()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String word \u003d token.nextToken();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (lineLength + word.length() \u003e maxLength) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                String temp \u003d standardLengthMessage.toString().trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                standardLengthMessage \u003d new StringBuilder(temp);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                standardLengthMessage.append(lineSeparator()).append(\"\\t \");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                lineLength \u003d 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            standardLengthMessage.append(word).append(SPACE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            lineLength +\u003d word.length() + 1;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return TAB + standardLengthMessage.toString().stripTrailing();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 26,
      "GanapathySanathBalaji": 7,
      "NizarMohd": 186,
      "hongquan448": 2,
      "-": 2
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Contains all test regarding the Parser Class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_emptyAddEventCommand_throwException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"event\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty add command not identified\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            assertEquals(\"Event details are not provided\",exception.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_emptyAddDeadlineCommand_throwException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d parser.parseCommand(\"event\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty add command not identified\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Event details are not provided\",exception.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_emptyCommand_throwException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty command not identified\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Empty Line entered, Please enter a valid line\",exception.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidCommand_throwException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d parser.parseCommand(\"list\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid command not identified\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Invalid command entered, Please enter a valid command\",exception.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidPriorityViewCommand_throwException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d parser.parseCommand(\"priority_view of events\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid priority view command not identified\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Wrong command used to view events sorted by priority (Should be :priority_view )\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidCountdownViewCommand_throwException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d parser.parseCommand(\"countdown of events\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid countdown view command not identified\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Wrong command used to view countdown of events (Should be :countdown )\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidViewCommand_throwException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d parser.parseCommand(\"view events\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid view command not identified\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Wrong command used to view events (Should be :view )\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidClearCommand_throwException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d parser.parseCommand(\"clear events\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid clear command not identified\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Wrong command clear events (Should be :clear )\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidHelpCommand_throwException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d parser.parseCommand(\"help for commands\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid help command not identified\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Wrong command used to view command list (Should be :help )\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_emptySearchCommand_throwException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d parser.parseCommand(\"search \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty search command not identified\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"The search string entered is empty.\",exception.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_emptyDeleteCommand_throwException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d parser.parseCommand(\"delete \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty delete command not identified\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Index to delete not mentioned\", exception.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void parseCommand_invalidDeleteCommand_throwException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d parser.parseCommand(\"delete one\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid delete command not identified\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Enter a valid integer index (1-based) to delete/edit the corresponding event \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                            + \"(format: delete/edit index)\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 11,
      "GanapathySanathBalaji": 133
    }
  },
  {
    "path": "src/test/java/studyarea/StudyAreaListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "class StudyAreaListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * An exception pertaining to duplicate flag should be raised if the location at flag[index] is not null."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * A dummy array of flags is created, and the first flag is assessed and used it to check duplicate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the same location. The expected outcome is to return an exception since the location contains null."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void checkDuplicate_gotDuplicate_raiseException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String[] flag \u003d {\"-a\", \"-b\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Assertions.assertThrows(IllegalStudyAreaException.class, () -\u003e StudyAreaList.checkDuplicate(flag, 0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * An exception pertaining to flag missing hyphen should be raised when flag has no hyphen."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * A dummy array is made with a flag inside that has no hyphen character. The expected outcome is to return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * an exception since the input flag has no hyphen."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void checkOnlyFlag_withoutHyphenSign_raiseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] commands \u003d {\"s\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Assertions.assertThrows(IllegalStudyAreaException.class, () -\u003e StudyAreaList.checkOnlyFlag(commands, 0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * An exception pertaining to either wrong flag position or invalid flag is raised when user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * enters a flag that does not exist or user enters the flag before the search terms."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * The expected outcome is to return an exception as this test case inputs an invalid flag."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void checkFlag_FlagDoesNotExist_raiseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] commands \u003d {\"MacCommons\", \"-z\"};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] flags \u003d {};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(IllegalStudyAreaException.class, () -\u003e StudyAreaList.checkFlag(flags, commands,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                1, false));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 21,
      "-": 21
    }
  },
  {
    "path": "src/test/java/studyarea/StudyAreaTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "class StudyAreaTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyArea location1 \u003d new StudyArea(\"mac commons\", \"utown\", \"nil\", true, true,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            5);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getAddress() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(\"utown\", location1.getAddress());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getFaculty() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(\"nil\", location1.getFaculty());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void hasPort() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(true, location1.hasPort());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void isIndoor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(true, location1.isIndoor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getMaxPax() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(5, location1.getMaxPax());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(\"mac commons\", location1.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 13,
      "NizarMohd": 28
    }
  },
  {
    "path": "src/test/java/task/event/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Contains all the test related to EventList class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    task.TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public TaskListTest() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList \u003d new task.TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.addTask(new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                \"17:00\", \"1\"),ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void deleteEvent_invalidIndex_throwException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            taskList.deleteTask(2,ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Invalid index entered. Please enter a valid index to be deleted\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchEvents_emptySearchKeyword_throwException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            taskList.searchTasks(\"\",ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty string search not identified\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Keyword to be used for search is empty\", exception.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void clearCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        taskList.clearTasks(ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(0, taskList.getTaskListSize());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 5,
      "GanapathySanathBalaji": 44
    }
  },
  {
    "path": "src/test/java/task/event/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package task.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Contains all the tests related to the Event class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void eventInformation() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"[E] Team Meeting at Mar 21 2020 from 09:00 to 17:00 with priority 1\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"17:00\", \"1\").getTaskInformation());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void formattedDetails() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"E#Team Meeting#2020-03-21#09:00#17:00#1\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"17:00\", \"1\").getFormattedDetails());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidDate_throwException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-021\", \"09:00\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"17:00\", \"1\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid date not rejected\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Date provided is invalid or is in wrong format (Should be YYYY-MM-DD)\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidStartTime_throwException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"25:00\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"17:00\", \"1\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid start time not rejected\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Start time provided is invalid or in wrong format (Should be HH:MM) 24 Hr format\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidEndTime_throwException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"10:70\", \"1\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid end time not rejected\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"End time provided is invalid or in wrong format (Should be HH:MM) 24 Hr format\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidPriority_throwException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"10:50\", \"High\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid priority not rejected\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Priority should be an integer\",e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_startTimeAfterEndTime_throwException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"08:50\", \"1\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Start time after end time not rejected\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Start time should be before End time\",e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_dateAlreadyPassed_throwException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2019-03-21\", \"09:00\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"09:50\", \"1\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Event before current date not rejected\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Date specified must be a current or a future date\",e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_emptyKeyword_throwException() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            boolean hasKeyword \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"17:00\", \"1\").hasKeyword(\"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty keyword not detected\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Keyword to be used for search is empty\", e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_containsKeyword() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(true, new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                \"17:00\", \"1\").hasKeyword(\"Meeting\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_doesntContainsKeyword() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(false, new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                \"17:00\", \"1\").hasKeyword(\"Class\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 121
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "task"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "clear"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "event meeting /d 2020-05-05 /s 12:00 /e 13:00 /p 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "view"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "deadline assignment /d 2020-05-02 /t 14:00 /p 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "priority_view"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "view"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "search"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "search meet"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "search homework"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "event team meeting"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "delete one"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "view"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "edit 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "6"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "-1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "team meeting"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "view"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "edit 2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "2"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "2020-01-01"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "2020-06-06"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "edit 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "5"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "assignment"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "view list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "bye"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "countdown view"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "bye"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "study"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "help"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "erc"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "src"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "sbux"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-i -i"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-i -o"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-i"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-p"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-s"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-s wegf"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-s 8"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-s 1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "-qef"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "bye"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "terrytay": 1,
      "GanapathySanathBalaji": 36,
      "NizarMohd": 17,
      "-": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "if exist ..\\library del ..\\library"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 7,
      "-": 19
    }
  }
]
