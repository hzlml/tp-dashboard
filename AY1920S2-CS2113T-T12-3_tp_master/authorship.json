[
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nizar Mohamed| [Github](https://github.com/NizarMohd) | [Portfolio](docs/team/NizarMohd.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/59829631?s\u003d460\u0026v\u003d4?text\u003dterry) | Terry Tay | [Github](https://github.com/terrytay) | [Portfolio](docs/team/terrytay.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ganapathy Sanath Balaji | [Github](https://github.com/GanapathySanathBalaji) | [Portfolio](docs/team/ganapathysanathbalaji.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hong Quan | [Github](https://github.com/hongquan448) | [Portfolio](docs/team/hongquan.md)"
      }
    ],
    "authorContributionMap": {
      "terrytay": 1,
      "NizarMohd": 1,
      "GanapathySanathBalaji": 1,
      "hongquan448": 1,
      "-": 4
    }
  },
  {
    "path": "library/locations.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "MacCommons~2 College Ave West Education Resource Centre~Utown~true~true~5"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "OCBC~2 College Ave West, Stephen Riady Centre~Utown~true~false~2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "EA Level 3~9 Engineering Drive 1,EA~Engineering~true~true~4"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "EA Level 2~9 Engineering Drive 1~Engineering~true~true~4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "EA Level 1~9 Engineering Drive 1~Engineering~true~true~4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "EA Level 4~9 Engineering Drive 1, Outside Staff Offices~Engineering~true~false~6"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "EA Level 5~9 Engineering Drive 1, Outside of the door beside EA05~Engineering~true~false~4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "EA Level 6~9 Engineering Drive 1, EA06-23~Engineering~true~true~4"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 8
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * This command is used to add new events to the event list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /** The new event to be added. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    Event newEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the AddCommand Object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Abstracts out the details from the user input and uses it to create a new event object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param eventDetails The array contains the information regarding the new event to be added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used to create an event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public AddCommand(String[] eventDetails, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Wrong format used to add an event\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String[] details \u003d eventDetails[1].split(\"/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String description \u003d details[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String date \u003d details[1].substring(2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String startTime \u003d details[2].substring(2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String endTime \u003d details[3].substring(2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String priority \u003d details[4].substring(2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        newEvent \u003d  new Event(description,date,startTime,endTime,priority);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void executeCommand(EventList eventList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        eventList.addEvent(newEvent, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 40
    }
  },
  {
    "path": "src/main/java/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * This command is used to clear all the events in the list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the ClearCommand Object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Checks if the user given input follows the correct format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public ClearCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Wrong command clear events (Should be :clear )\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void executeCommand(EventList eventList) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        eventList.clearEvents(ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 27
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Object represents a command and contains all the required information and implementation to execute it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /** Object used to handle user interactions. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Executes the command based on the information provided by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param eventList Contains the list of tasks on which the commands are executed on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If issues are found during execution of command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public abstract void executeCommand(EventList eventList) throws Exception;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 22
    }
  },
  {
    "path": "src/main/java/command/CountdownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Displays the list of events added so far in increasing order of their dates."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class CountdownCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the CountdownCommand Object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public CountdownCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Wrong command used to view countdown of events (Should be :countdown )\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void executeCommand(EventList eventList) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        eventList.countdownView(ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 27
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Command is used to delete an event at a specific index."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /** Denotes the index at which the event should be deleted at. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    int indexToDelete;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the DeleteCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Creates a new object if the correct command is used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param commandSplit Contains information with regards to the index to be deleted at."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the index specified is invalid/ The wrong format is used for the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public DeleteCommand(String[] commandSplit, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Index to delete not mentioned\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            indexToDelete \u003d Integer.parseInt(commandSplit[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Enter a valid index (1-based) to delete the corresponding event\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void executeCommand(EventList eventList) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        eventList.deleteEvent(indexToDelete, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 37
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import static ui.Ui.BYE_COMMAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Used to run all the functions related to events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class EventCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Runs all the command for events."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param eventList Refers to the current list of events."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param ui UI object used to interact with user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param parser Object used to parse the user input into commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static void runCommands(EventList eventList, Ui ui, Parser parser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        eventList.printHelp();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String fullCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        fullCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        while (!fullCommand.equals(BYE_COMMAND)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                command \u003d parser.parseCommand(fullCommand, ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                command.executeCommand(eventList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            } catch (Exception exception) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                ui.printWithIndentation(exception.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            ui.printEmptyLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            fullCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printByeMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 43,
      "NizarMohd": 2
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Command is used to print the list of commands supported."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the HelpCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public HelpCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Wrong command used to view command list (Should be :help )\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void executeCommand(EventList eventList) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        eventList.printHelp();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 27
    }
  },
  {
    "path": "src/main/java/command/PriorityViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Displays the list of events added so far in decreasing order of their priority."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class PriorityViewCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the PriorityViewCommand Object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public PriorityViewCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Wrong command used to view events sorted by priority (Should be :priority_view )\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void executeCommand(EventList eventList) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        eventList.priorityView(ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 27
    }
  },
  {
    "path": "src/main/java/command/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Command used to perform a search of events whose description contain the keyword mentioned."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /** The word to be searched for. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for SearchCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param commandSplit Contains the keyword to be searched for."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public SearchCommand(String[] commandSplit, boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (isOneWordCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"The search string entered is empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.keyword \u003d commandSplit[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void executeCommand(EventList eventList) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        eventList.searchEvents(keyword, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 32
    }
  },
  {
    "path": "src/main/java/command/StudyAreaCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import studyarea.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import studyarea.StudyAreaList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the StudyAreaCommand class. It executes the StudyArea Search function and interact with Users accordingly."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class StudyAreaCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * List out all the StudyAreas that match with User\u0027s preference."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for StudyAreaCommand to interact with Users."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param availStudyAreas this is the list of all study areas in location.txt."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void printList(ArrayList\u003cStudyArea\u003e availStudyAreas, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (availStudyAreas.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(Ui.EMPTY_LIST);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(Ui.AVAILABLE_STUDY_AREAS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (StudyArea studyArea : availStudyAreas) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printStudyArea(studyArea);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Filters command based on User Input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param command This is the command entered by User."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param studyAreaList This is the list of all StudyAreas in location.txt."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for StudyAreaCommand to interact with Users."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return boolean status. False if User enters \"end\" , else will always return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if User enters invalid commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static boolean filterCommand(String command, StudyAreaList studyAreaList, Ui ui) throws"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            IllegalStudyAreaException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (command.isBlank()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalStudyAreaException(Ui.EMPTY_LOCATION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case Ui.BYE_COMMAND:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(Ui.END_MESSAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            case Ui.HELP_COMMAND:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(Ui.FLAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ArrayList\u003cStudyArea\u003e availStudyAreas \u003d studyAreaList.searchList(command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    printList(availStudyAreas, ui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printMessage(Ui.PROMPT_USER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } catch (IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Executes the StudyArea search feature."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for StudyAreaCommand to interact with Users."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param studyAreaList studyAreaList object that holds information on studyAreas available."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void runCommands(StudyAreaList studyAreaList, Ui ui)  {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(Ui.START_STUDY_AREA_SEARCH);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean status \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (status) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String command \u003d ui.getUserIn();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                status \u003d filterCommand(command, studyAreaList, ui);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } catch (IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 6,
      "NizarMohd": 84
    }
  },
  {
    "path": "src/main/java/command/ViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Displays the list of events added so far."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Constructor for the ViewCommand Object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Creates a new object if the correct format is used."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param isOneWordCommand Denotes whether the user given input is single or multi worded."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong format is used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public ViewCommand(boolean isOneWordCommand) throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        if (!isOneWordCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Wrong command used to view events (Should be :view )\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void executeCommand(EventList eventList) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        eventList.listEvents(ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 27
    }
  },
  {
    "path": "src/main/java/deadline/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "package deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongquan448"
        },
        "content": " * Represents an deadline and contains the related functions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongquan448"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private LocalTime dueTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Constructor for Deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *Class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param description Description of the deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param date Date of specified Deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param dueTime Due time of specified deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param priority Priority of specified deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @throws Exception If wrong format is used for date, time fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public Deadline(String description, String date, String dueTime, String priority) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        parseDescription(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        parseDate(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        parseDueTime(dueTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        parsePriority(priority);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private void parsePriority(String priority) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            this.priority \u003d Integer.parseInt(priority.strip());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new Exception(\"Priority should be an integer\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private void parseDueTime(String dueTime) throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            this.dueTime \u003d LocalTime.parse(dueTime.strip());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new Exception(\"Due time provided is invalid or in wrong format (Should be HH:MM)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private void parseDate(String date) throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            this.date \u003d LocalDate.parse(date.strip());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new Exception(\"Date provided is invalid or is in wrong format (Should be YYYY-MM-DD)\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    private void parseDescription(String description) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Returns the information related to information in form of a string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @return deadlineInfo Contains information related to the deadline."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public String getDeadlineInformation() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        String deadlineInfo \u003d description + \" on \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" at \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "                + dueTime.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        return deadlineInfo;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Returns the priority of the specified deadline."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @return Priority of deadline."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Returns the date of the deadline."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @return Date of deadline."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Used to identify if the string contains the keyword specified in its description."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param keyword The keyword to be matched with the description."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @return containsKeyword Indicates the presence/absence of keyword in the deadline\u0027s description."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @throws Exception If no keyword is entered."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public boolean hasKeyword(String keyword) throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        if (keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            throw new Exception(\"Keyword is empty\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        boolean containsKeyword \u003d description.contains(keyword);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        return containsKeyword;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Returns the deadline in the format used to store it in the data file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @return formattedDeadlineDetails Contains the deadline details in the required format."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public String getFormattedDetails() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        String formattedDeadlineDetails \u003d description + \"#\" + date + \"#\" + dueTime + \"#\" + priority;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        return formattedDeadlineDetails;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongquan448": 117
    }
  },
  {
    "path": "src/main/java/deadline/DeadlineList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "package deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongquan448"
        },
        "content": " * Handles all functions related to the list of deadlines."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongquan448"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "public class DeadlineList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /** Stores the deadline information. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public ArrayList\u003cDeadline\u003e deadlines;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Constructor for the DeadlineList class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public DeadlineList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        deadlines \u003d new ArrayList\u003cDeadline\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public DeadlineList(ArrayList\u003cDeadline\u003e deadlines) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Adds a new deadline to the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param newDeadline Deadline represents the new deadline tot be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for the deadline class to interact with Users."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void addDeadline(Deadline newDeadline, Ui ui) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        deadlines.add(newDeadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(\"A new deadline with the following information has been added.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(newDeadline.getDeadlineInformation());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Displays the current list of deadlines."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for the deadline class to interact with Users."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void listDeadlines(Ui ui) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        System.out.println(\"Here is the list of deadlines added so far:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        int deadlineNumber \u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        for (Deadline deadline: deadlines) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(deadlineNumber + \") \" + deadline.getDeadlineInformation());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            deadlineNumber++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Deletes the deadline at the specified index."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param index The index (1-based) of the deadline to be deleted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for the deadline class to interact with Users."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void deleteDeadline(int index, Ui ui) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            deadlines.remove(index - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(\"The deadline at the mentioned index has been deleted\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(\"Enter a valid index\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Clears all the deadlines currently stored."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for the deadline class to interact with Users."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void clearDeadlines(Ui ui) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        deadlines.clear();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(\"The list of deadlines is cleared.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Lists all the tasks sorted by their priority."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for the deadline class to interact with Users."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void priorityView(Ui ui) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ArrayList\u003cDeadline\u003e deadlinesSortedByPriority \u003d deadlines;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        deadlinesSortedByPriority.sort(Comparator.comparingInt(Deadline::getPriority));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        Collections.reverse(deadlinesSortedByPriority);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        int deadlineNumber \u003d 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        for (Deadline deadline:deadlinesSortedByPriority) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(deadlineNumber + \") \" + deadline.getDeadlineInformation());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            deadlineNumber++;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        if (deadlineNumber \u003d\u003d 1) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(\"The list is empty.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Lists all the tasks sorted by date along with the days remaining."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for the deadline class to interact with Users."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void countdownView(Ui ui) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ArrayList\u003cDeadline\u003e deadlinesSortedByDate \u003d deadlines;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        deadlinesSortedByDate.sort(Comparator.comparing(Deadline::getDate));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        int deadlineNumber \u003d 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        for (Deadline deadline:deadlinesSortedByDate) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(deadlineNumber + \") \" + deadline.getDeadlineInformation());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            deadlineNumber++;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        if (deadlineNumber \u003d\u003d 1) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(\"The list is empty.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Displays the list of deadlines containing the keyword."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param keyword The keyword to be searched for."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for the deadline class to interact with Users."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void searchDeadlines(String keyword, Ui ui) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        int deadlineNumber \u003d 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        for (Deadline deadline:deadlines) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "                if (deadline.hasKeyword(keyword)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printMessage(deadlineNumber + \") \" + deadline.getDeadlineInformation());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "                    deadlineNumber++;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        if (deadlineNumber \u003d\u003d 1) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(\"The list is empty.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * Adds a new deadline to the list by parsing information from the user given string"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * and calling {@link #addDeadline(Deadline, Ui)} if the information is given in the correct format"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * to add the deadline."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * @param deadlineDetails Contains all the information related to the deadline as provided by the user."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows for the deadline class to interact with Users."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void add(String deadlineDetails, Ui ui) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            String[] details \u003d deadlineDetails.split(\" \",2)[1].split(\"/\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            String description \u003d details[0];"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            String date \u003d details[1].substring(2);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            String dueTime \u003d details[2].substring(2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            String priority \u003d details[3].substring(2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            Deadline newDeadline \u003d  new Deadline(description,date,dueTime, priority);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            addDeadline(newDeadline, ui);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        } catch (IndexOutOfBoundsException | DateTimeParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(\"Wrong format to add deadlines\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongquan448": 148,
      "NizarMohd": 32
    }
  },
  {
    "path": "src/main/java/event/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Represents an event and contains the related functions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for Event Class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param date Date of specified Event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param startTime Start time of specified event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param endTime End time of specified event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority Priority of specified event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used for date, time or priority fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public Event(String description, String date, String startTime, String endTime, String priority)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDescription(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDate(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseStartTime(startTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseEndTime(endTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parsePriority(priority);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (this.startTime.isAfter(this.endTime)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Start time should be before End time\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (this.date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Date specified must be a current or a future date\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parsePriority(String priority) throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.priority \u003d Integer.parseInt(priority.strip());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Priority should be an integer\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseEndTime(String endTime) throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.endTime \u003d LocalTime.parse(endTime.strip());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"End time provided is invalid or in wrong format (Should be HH:MM)\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseStartTime(String startTime) throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.startTime \u003d LocalTime.parse(startTime.strip());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Start time provided is invalid or in wrong format (Should be HH:MM)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseDate(String date) throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.date \u003d LocalDate.parse(date.strip());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Date provided is invalid or is in wrong format (Should be YYYY-MM-DD)\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseDescription(String description) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the information related to information in form of a string."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return eventInfo Contains information related to the event."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public String getEventInformation() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String eventInfo \u003d description + \" at \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" from \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + startTime.toString() + \" to \" + endTime.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return eventInfo;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the priority of the specified event."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Priority of event."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the date of the event."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Date of event."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to identify if the string contains the keyword specified in its description."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The keyword to be matched with the description."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return containsKeyword Indicates the presence/absence of keyword in the event\u0027s description."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If keyword entered is empty."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public boolean hasKeyword(String keyword) throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Keyword is empty\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean containsKeyword \u003d description.contains(keyword);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return containsKeyword;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the event in the format used to store it in the data file."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return formattedEventDetails Contains the event details in the required format."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public String getFormattedDetails() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String formattedEventDetails \u003d description + \"#\" + date + \"#\" + startTime + \"#\" + endTime + \"#\" + priority;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return formattedEventDetails;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 1,
      "GanapathySanathBalaji": 133
    }
  },
  {
    "path": "src/main/java/event/EventList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Handles all functions related to the list of events."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** Stores the event information. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the EventList class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        events \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Adds a new event to the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows Event List class to interact with User."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param newEvent Event represents the new event tot be added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void addEvent(Event newEvent, Ui ui) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        events.add(newEvent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(\"A new event with the following information has been added.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(newEvent.getEventInformation());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Displays the current list of events."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows Event List class to interact with User."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void listEvents(Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(\"Here is the list of events added so far:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int eventNumber \u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Event event: events) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(eventNumber + \") \" + event.getEventInformation());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            eventNumber++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Deletes the event at the specified index."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows Event List class to interact with User."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param index The index (1-based) of the event to be deleted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void deleteEvent(int index, Ui ui) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            events.remove(index - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(\"The event at the mentioned index has been deleted\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(\"Enter a valid index\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Clears all the events currently stored."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows Event List class to interact with User."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void clearEvents(Ui ui) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        events.clear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(\"The list of events is cleared.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Lists all the tasks sorted by their priority."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows Event List class to interact with User."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void priorityView(Ui ui) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsSortedByPriority \u003d events;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        eventsSortedByPriority.sort(Comparator.comparingInt(Event::getPriority));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Collections.reverse(eventsSortedByPriority);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int eventNumber \u003d 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Event event:eventsSortedByPriority) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(eventNumber + \") \" + event.getEventInformation());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            eventNumber++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (eventNumber \u003d\u003d 1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(\"The list is empty.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Lists all the tasks sorted by date along with the days remaining."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows Event List class to interact with User."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void countdownView(Ui ui) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsSortedByDate \u003d events;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        eventsSortedByDate.sort(Comparator.comparing(Event::getDate));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int eventNumber \u003d 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Event event:eventsSortedByDate) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(eventNumber + \") \" + event.getEventInformation());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            eventNumber++;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (eventNumber \u003d\u003d 1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(\"The list is empty.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Displays the list of events containing the keyword."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows Event List class to interact with User."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The keyword to be searched for."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void searchEvents(String keyword, Ui ui) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int eventNumber \u003d 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Event event:events) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (event.hasKeyword(keyword)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printMessage(eventNumber + \") \" + event.getEventInformation());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    eventNumber++;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (eventNumber \u003d\u003d 1) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(\"The list is empty.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Adds a new event to the list by parsing information from the user given string"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * and calling {@link #addEvent(Event, Ui)} if the information is given in the correct format"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * to add the event."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This allows Event List class to interact with User."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param eventDetails Contains all the information related to the event as provided by the user."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void add(String eventDetails, Ui ui) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String[] details \u003d eventDetails.split(\" \",2)[1].split(\"/\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String description \u003d details[0];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String date \u003d details[1].substring(2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String startTime \u003d details[2].substring(2);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String endTime \u003d details[3].substring(2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String priority \u003d details[4].substring(2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event newEvent \u003d  new Event(description,date,startTime,endTime,priority);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            addEvent(newEvent, ui);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IndexOutOfBoundsException | DateTimeParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(\"Wrong format to add events\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Display the list of supported commands."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"OrgaNice! Supports the following commands\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"Please enter the keywords followed by the information shown in the brackets\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"add \u003cevent details\u003e /d \u003cdate\u003e /s \u003cstart time\u003e /e \u003cend time\u003e /p \u003cpriority \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                + \"of event\u003e\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"------------------------------------------- Create a new event\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"view -------------------------------------- View existing events\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"priority_view ----------------------------- View existing events based \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                + \"on priority\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"countdown --------------------------------- View existing events based on\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                + \" days left\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"clear ------------------------------------- Delete all events\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"search \u003ckeyword found in event\u003e ----------- View existing events that contains \""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                + \"the keyword\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"delete \u003cindex number of event\u003e ------------ Delete the event\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"help -------------------------------------- View List Of Commands Supported\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"bye --------------------------------------- Terminate program\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"Notes:\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"*All dates should follow YYYY-MM-DD format\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"*All timing should follow 24 hour clock\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printWithIndentation(\"*There are 4 levels of priority, with 1 being the most urgent, and 4 being the \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                + \"least urgent\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 50,
      "GanapathySanathBalaji": 128,
      "NizarMohd": 37
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import command.ClearCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import command.CountdownCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import command.PriorityViewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import command.ViewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * This class is used to parse the user input into executable commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String ADD_COMMAND \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String VIEW_COMMAND \u003d \"view\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String PRIORITY_VIEW_COMMAND \u003d \"priority_view\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String COUNTDOWN_VIEW_COMMAND \u003d \"countdown\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String CLEAR_COMMAND \u003d \"clear\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String SEARCH_COMMAND \u003d \"search\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String EMPTY_COMMAND \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * This method takes in the user input parses it and returns the command to be executed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param fullCommand THe entire line of command entered by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param ui Object used to handle interactions with user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return command The command parsed form the user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws Exception If the wrong command/ wrong format is given by the user as an input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public Command parseCommand(String fullCommand, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String[] commandSplit \u003d fullCommand.split(\" \",2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String commandType \u003d commandSplit[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        boolean isOneWordCommand \u003d commandSplit.length \u003d\u003d 1 || commandSplit[1].isBlank();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case ADD_COMMAND:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new AddCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case VIEW_COMMAND:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new ViewCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case PRIORITY_VIEW_COMMAND:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new PriorityViewCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case COUNTDOWN_VIEW_COMMAND:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new CountdownCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case CLEAR_COMMAND:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new ClearCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case SEARCH_COMMAND:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new SearchCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case DELETE_COMMAND:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new DeleteCommand(commandSplit, isOneWordCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case HELP_COMMAND:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            command \u003d new HelpCommand(isOneWordCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        case EMPTY_COMMAND:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Empty Line entered, Please enter a valid line\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            // Break statement can\u0027t be reached if added"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new Exception(\"Invalid command entered, Please enter a valid command\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            // Break statement can\u0027t be reached if added"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 78
    }
  },
  {
    "path": "src/main/java/resourceloader/EventLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package resourceloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Handles the task of loading and storing events."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EventLoader {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** Location of data file. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** Directory of data file. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private Path fileDirectory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for EventLoader object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Initialises the object with the file path provided."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param filePath The location of the data file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventLoader(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.fileDirectory \u003d Paths.get(filePath).getParent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Reads the list of events stored previously and returns it as an ArrayList of Events."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return events The list of events stored previously."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public ArrayList\u003cEvent\u003e loadFile() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        File dataFile;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Scanner s;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            s \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                String eventDescription \u003d s.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                Event newEvent \u003d parseEventDetails(eventDescription);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                events.add(newEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }  catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            createNewDataFile();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the Event details from the given string and returns a new event object with the specified details."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param taskDescription Contains all the details with regards to the Event."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return newEvent The new event created with the details provided."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private Event parseEventDetails(String taskDescription) throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] splitDescription \u003d taskDescription.split(\"#\", 5);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String description \u003d splitDescription[0];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String date \u003d splitDescription[1];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String startTime \u003d splitDescription[2];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String endTime \u003d splitDescription[3];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String priority \u003d splitDescription[4];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Event newEvent \u003d new Event(description, date, startTime, endTime, priority);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new data file when the application is run for the first time."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void createNewDataFile() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Files.createDirectories(fileDirectory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Files.createFile(Paths.get(filePath));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Saves the list of current tasks to the data file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param events Represents the current list of events."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void saveEvents(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            for (Event event: events) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                fw.write(event.getFormattedDetails());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 112,
      "NizarMohd": 1
    }
  },
  {
    "path": "src/main/java/resourceloader/StudyAreaLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package resourceloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class loads all the required information of Study Areas that is stored in location.txt."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class StudyAreaLoader {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static final String DIVIDER \u003d \"~\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private final String url;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public StudyAreaLoader(String url) throws FileNotFoundException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        loadFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Loads url into file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @throws FileNotFoundException if file is not present error"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void loadFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            file \u003d new File(url);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new FileNotFoundException(\"File not found.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Return the imported study area file as an ArrayList for the main controller"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * to add it to its database."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return buffer ArrayList of Location from study area file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws FileNotFoundException if location.txt does not exist."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if data stored is inconsistent"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ArrayList\u003cStudyArea\u003e pushToDatabase() throws FileNotFoundException, IllegalStudyAreaException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ArrayList\u003cStudyArea\u003e buffer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Scanner input \u003d new Scanner(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        while (input.hasNextLine()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String detailsOfLocation \u003d input.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String[] detailsBuffer \u003d detailsOfLocation.split(DIVIDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (detailsBuffer.length !\u003d 6) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                throw new IllegalStudyAreaException(Ui.INCONSISTENT_DATA_STORAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            StudyArea studyArea \u003d new StudyArea(detailsBuffer[0], detailsBuffer[1], detailsBuffer[2],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    Boolean.parseBoolean(detailsBuffer[3]), Boolean.parseBoolean(detailsBuffer[4]),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    Integer.parseInt(detailsBuffer[5]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            buffer.add(studyArea);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return buffer;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 47,
      "NizarMohd": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import command.StudyAreaCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import resourceloader.EventLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import resourceloader.StudyAreaLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyAreaList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is Duke class, which forms the main class of the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static EventLoader eventLoader;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    protected static StudyAreaLoader studyAreaLoader;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private static EventList eventList \u003d new EventList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static StudyAreaList studyAreaList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private static Parser parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the constructor to create a new Duke program every time user runs the main loop."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Duke()  {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            parser \u003d new Parser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            eventLoader \u003d new EventLoader(Ui.FILE_PATH_EVENTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            eventList \u003d new EventList(eventLoader.loadFile());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            studyAreaLoader \u003d new StudyAreaLoader(Ui.FILE_PATH_STUDYAREAS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            studyAreaList \u003d new StudyAreaList(studyAreaLoader.pushToDatabase());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (FileNotFoundException | IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            // Handle issue later"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method runs the program."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean status \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (status) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            int mode \u003d ui.getMode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            switch (mode) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case -1:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                status \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                EventCommand.runCommands(eventList, ui, parser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                StudyAreaCommand.runCommands(studyAreaList, ui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.printMessage(Ui.WRONG_INPUT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            ui.printWithIndentation(Ui.INTERMEDIATE_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        eventLoader.saveEvents(eventList.events);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printMessage(Ui.GOODBYE_MESSAGE + Ui.DAB);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param args this is an optional argument."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 14,
      "NizarMohd": 55,
      "GanapathySanathBalaji": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/studyarea/IllegalStudyAreaException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is an extension of the Exception class that exist only for StudyArea related modules."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class IllegalStudyAreaException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public IllegalStudyAreaException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 14
    }
  },
  {
    "path": "src/main/java/studyarea/StudyArea.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static java.lang.System.lineSeparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the StudyArea class. All study area is stored as a Study Area object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class StudyArea {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String faculty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private boolean hasPort;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private boolean isIndoor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private int maxPax;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Constructs a StudyArea class for a study area with its information"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Precondition: \u0027All variables have to be filled."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param name name of StudyArea"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param address address of StudyArea"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param faculty faculty of StudyArea"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param hasPort true for availability of ports, else false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param isIndoor true for indoor, else false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param maxPax maximum number of seats for this StudyArea"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public StudyArea(String name, String address, String faculty, boolean hasPort,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                     boolean isIndoor, int maxPax) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.address \u003d address.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.hasPort \u003d hasPort;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.isIndoor \u003d isIndoor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.maxPax \u003d maxPax;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the getter for the name attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return general name of the StudyArea."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the getter for the address attribute."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return physical address of the StudyArea."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the getter for the faculty attribute."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return the name of the faculty that the StudyArea is located at."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getFaculty() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.faculty;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the getter for the hasPort attribute."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return true if the StudyArea has ports and false if otherwise."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public boolean hasPort() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.hasPort;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the getter for the isIndoor attribute."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return true if StudyArea is indoors and false if otherwise."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public boolean isIndoor() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.isIndoor;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the getter for the maxPax attribute."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return maximum number of pax the StudyArea can hold."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Integer getMaxPax() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.maxPax;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Prints the StudyArea into a standard String format."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String value of all the attributes of the specific StudyArea."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String text \u003d Ui.TAB + \"Name: \" + this.name + lineSeparator() + Ui.TAB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                + \"Address: \" + this.address + lineSeparator() + Ui.TAB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                + \"Faculty: \" + this.faculty + lineSeparator() + Ui.TAB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                + \"Port: \" + this.hasPort + lineSeparator() + Ui.TAB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                + \"Indoor: \" + this.isIndoor + lineSeparator() + Ui.TAB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"Average number of Pax: \" + this.maxPax;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        String line \u003d Ui.TAB + \"__________________________________________________________\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return line + lineSeparator() + text + lineSeparator() + line;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 22,
      "NizarMohd": 89
    }
  },
  {
    "path": "src/main/java/studyarea/StudyAreaList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the class that stores and manages all of the Study Areas in location.txt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class StudyAreaList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private ArrayList\u003cStudyArea\u003e studyAreaList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    // Assigns studyAreaList into object\u0027s studyAreaList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public StudyAreaList(ArrayList\u003cStudyArea\u003e  studyAreaList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.studyAreaList \u003d studyAreaList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Gets the list of all the Locations in location.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return ArrayList of StudyAreas."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ArrayList\u003cStudyArea\u003e getStudyAreaList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.studyAreaList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Obtains all the supported flags in this organiser app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commands This is the User commands that has been split by spaces."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String Array of a fixed size of 5"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException when arguments for flags are invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String[] getFlagsInfo(String[] commands) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] flags \u003d new String[5];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringBuilder name \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean isNotFlag \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (int i \u003d 0; i \u003c commands.length; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            if (commands[i].equals(Ui.SIZE_FLAG)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isNotFlag \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    int size \u003d Integer.parseInt(commands[i + 1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if (flags[0] \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        flags[0] \u003d Ui.SIZE_FLAG;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        flags[1] \u003d Integer.toString(size);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        i++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        throw new IllegalStudyAreaException(Ui.DUPLICATE_FLAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    throw new IllegalStudyAreaException(Ui.NOT_INTEGER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    throw new IllegalStudyAreaException(Ui.NO_SIZE_INDICATED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            } else if (commands[i].contains(Ui.FLAG)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isNotFlag \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (commands[i].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    throw new IllegalStudyAreaException(Ui.ONLY_FLAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                switch (commands[i].charAt(1)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                case \u0027p\u0027:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if (flags[2] \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        flags[2] \u003d Ui.PORTS_FLAG;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        throw new IllegalStudyAreaException(Ui.DUPLICATE_FLAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                case \u0027i\u0027:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if (flags[3] \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        flags[3] \u003d Ui.INDOOR_FLAG;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        throw new IllegalStudyAreaException(Ui.DUPLICATE_FLAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    throw new IllegalStudyAreaException(Ui.WRONG_FLAG_USAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (isNotFlag) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    name.append(commands[i]).append(Ui.SPACE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    flags[4] \u003d name.toString().trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    throw new IllegalStudyAreaException(Ui.WRONG_FLAG_ARGUMENT_POSITION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return flags;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Checks if search key is found in Study Area\u0027s Name and Faculty attributes."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param name This is the Study Area\u0027s Name Attribute."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param faculty This is the Study Area\u0027s Faculty Attribute."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param key This is the search key entered by User."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return True if can be found in either case. False if not found in both cases."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static boolean containsKey(String name, String faculty, String key) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (name.toLowerCase().contains(key.toLowerCase())) { //toLowerCase() so casing does not affect matching."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return faculty.toLowerCase().contains(key.toLowerCase()); // if first check is false, return true depends on"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        // second check."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Finds a list of StudyAreas based on User requirements."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param userIn This is the requirement entered by User"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return ArrayList of StudyAreas"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException if User enters invalid commands."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ArrayList\u003cStudyArea\u003e searchList(String userIn) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String[] temp \u003d userIn.split(Ui.MULTIPLE_WHITE_SPACES);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String[] flags \u003d getFlagsInfo(temp);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ArrayList\u003cStudyArea\u003e availStudyAreas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (StudyArea studyArea : this.studyAreaList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                boolean isAvail \u003d true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                for (String flag : flags) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if (flag !\u003d null \u0026\u0026 isAvail) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        switch (flag) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        case Ui.PORTS_FLAG:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                            isAvail \u003d studyArea.hasPort();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        case Ui.INDOOR_FLAG:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                            isAvail \u003d studyArea.isIndoor();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                        case Ui.SIZE_FLAG:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                            isAvail \u003d Integer.toString(studyArea.getMaxPax()).equals(flags[1]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                            flags[1] \u003d null; //so as to skip iteration on flags[1]."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                            isAvail \u003d containsKey(studyArea.getName(), studyArea.getFaculty(), flags[4]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (isAvail) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    availStudyAreas.add(studyArea);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return availStudyAreas;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new IllegalStudyAreaException(e.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 26,
      "NizarMohd": 123
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "public abstract class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * TaskList is an abstract class that oversees all task-related classes."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * The current task-related classes are events, deadlines, assignments"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * TaskList stores all tasks in one large array, allowing the user to access the priorityView and countdownView of"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     * all tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public abstract void priorityView();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public abstract void countdownView();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongquan448"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public abstract void searchTasks();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongquan448": 17
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Contains functions used to interact with the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String FILE_PATH_EVENTS \u003d \"library\" + File.separator + \"eventList.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String FILE_PATH_STUDYAREAS \u003d \"library\" + File.separator + \"locations.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String BYE_MESSAGE \u003d \"Bye!!!!!!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String LINE \u003d \"_______________________________________________________________________________\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"_____\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final int MAX_LINE_LENGTH \u003d 55;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final int ADDRESS_MAX_LENGTH \u003d 48;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String FLAG \u003d \"-\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String MULTIPLE_WHITE_SPACES \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String DUPLICATE_FLAGS \u003d \"Duplicate flags entered!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String SIZE_FLAG \u003d \"-s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String PORTS_FLAG \u003d \"-p\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String INDOOR_FLAG \u003d \"-i\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String NOT_INTEGER \u003d \"Argument used after size flag \\\"-s\\\" is not an integer\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String WRONG_FLAG_USAGE \u003d \"Flags indicated are wrongly used. Please enter \\\"help\\\" for the\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            + \" supported flags!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String WRONG_FLAG_ARGUMENT_POSITION \u003d \"Flags are to be used only after location\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String START_STUDY_AREA_SEARCH \u003d \"Please enter the location for your desired study area. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            + \"Enter \\\"help\\\" for a list of supported flags. Flags should only come after location, if a criteria for\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" location is entered. When you are done with the search, enter \\\"bye\\\".\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String PROMPT_USER \u003d \"Please enter the location for your desired study area.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FLAGS \u003d \"Here is a list of supported flags!\\n\\t -p for study areas with ports\\n\\t\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            + \" -i for study areas that are indoors\\n\\t -s {size} for maximum number of pax\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String AVAILABLE_STUDY_AREAS \u003d \"Here are the available study areas!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String EMPTY_LIST \u003d \"Oops! Based on your criteria we were not able to find a compatible study\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            + \"area!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String ONLY_FLAG \u003d \"Please enter the flag along with \\\"-\\\"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String INCONSISTENT_DATA_STORAGE \u003d \"Data is wrongly stored in locations.txt\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String TAB \u003d \"\\t \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String NO_SIZE_INDICATED \u003d \"Max Size is not indicated. Please indicate accordingly!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String END_MESSAGE \u003d \"Thank you for using our study area search service!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String START_MESSAGE \u003d \"Welcome to OrgaNice! To start, enter \\\"event\\\" to start\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            + \"    your event list! If you are in the mood to mug and you\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            + \"    want to start your study area list, enter \\\"study\\\" !If\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            + \"    you want to exit, enter \\\"bye\\\" !\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String WRONG_INPUT \u003d \"Wrong input! Please enter either \\\"event\\\" or \\\"study\\\" only!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String STUDY_COMMAND \u003d \"study\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String GOODBYE_MESSAGE \u003d \"  Goodbye! Hope to see you again!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static final String INTERMEDIATE_MESSAGE \u003d \"Please enter \\\"event\\\" to continue with your event list or\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"    \\\"study\\\" to continue with your study area list. To leave, enter \\\"bye\\\".\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String EMPTY_LOCATION \u003d \"Location entered is empty! Please type a location to search for \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"StudyAreas!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author NizarMohd-reused"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //Reused from https://www.netclipart.com/isee/iRwmhJb_bt21-rj-transparent-background/ and https://asciiart.club/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    //Image for public static final String DAB is obtained from the first link and then generated in second link."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DAB \u003d \"\\t ``````````````````````````````````````````````````````````\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ````````````````````````````````:v(v\u0027`````````````````````\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ```````````````````````````,)4|ex` `L}````````````````````\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````````````````!s\\\"\u0027h `M:   ^z_;)T```````````````\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````````````````Z   u|}Z:        \\\"}``````````````\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````````````:\u003d?)                \u0027B?L\u0027```````````\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````````````\u0027Z                    ;Yp\\\"```````````\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````````````.e                      ?_```````````\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ```````````````````\u0027QDGH                    .5````````````\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ````````````````````I#g\u0027         \u0027_`        ||````````````\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ```````````:mX_``````YhL`      `\u0027q!`   ?     h````````````\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ```````````\u0027Qbs)|L\u003d_V\\\" \u0027Y}     ^\u0027q@\u0026b\u003dc\u003d_`  ,Z````````````\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ````````````q\u003e     \u0027T,   ,o\\\"    ;\\\"@c.   .sVx~`````````````\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ````````````c!             \\\"bh` `,p       z:``````````````\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````q.              ngDQmh8s     X\u0027``````````````\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````LY\\\"             :n}\u003e``b;   _V```````````````\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ````````````````q?,                ?;   \\\"V````````````````\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````KvR                  \u0027  )x_`````````````````\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````zjL                  GLY\\\"```````````````````\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ```````````````M                 .I)``````````````````````\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ```````````````Lz                `D:``````````````````````\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````vu`    (I)_;\\\"\\\".      P.`````````````````````\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````p     :X.\u0027:^,\\\"\u003dn    \\\"q``````````````````````\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````)0X?^:)I````````m\u0027   :j``````````````````````\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t `````````````.IGD8k\u0027`````````\u003c\u0026G55M```````````````````````\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"\\t ``````````````````````````````````````````````````````````\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the constructor used to create the Ui class in Duke.run()."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructor assigns IO stream to the attributes of Ui."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param in This is the Input Stream for Ui."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param out This is the Output Stream for Ui."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Returns the mode (event features or StudyArea features or exit) based on User input."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return an integer which is assigned to each mode."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public int getMode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String userIn \u003d this.in.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        switch (userIn) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case EVENT_COMMAND :"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case STUDY_COMMAND :"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case BYE_COMMAND :"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method allows for other class to get User input."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String input from User."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getUserIn() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.in.nextLine();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method closes the Input Stream after usage is completed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.in.close();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Prints a line made up of \u0027_\u0027."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"_________________________________________________________________________________\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                + \"_______________\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Prints the user given line with an indentation."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param line The line to be printed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void printWithIndentation(String line) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println(\"    \" + line);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * This method ensures that the message printed is within the standard length."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @param message is the String that we intend to format to a standard length per line."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (message.equals(GOODBYE_MESSAGE + DAB)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            this.out.println(GOODBYE_MESSAGE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.out.println(DAB);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            this.out.println(message);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method allows for StudyAreaCommand to print StudyArea based on its actual format,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * so that formatMessage method does not interfere with the initial format."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param studyArea This is the StudyArea to be printed."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printStudyArea(StudyArea studyArea) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(studyArea.toString());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Display welcome message."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author NizarMohd-reused"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        //Reused logo from http://patorjk.com/software/taag/#p\u003ddisplay\u0026f\u003dGraffiti\u0026t\u003dTypeSomething with minor"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        // modifications. The website above allows for generation of fonts in ascii format. Therefore, logo is"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        // generated from the service provided by the website."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String logo \u003d \"_______/\\\\\\\\\\\\\\\\\\\\_____________________________________________________/\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"__________________________________________/\\\\\\\\\\\\____________\\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"______/\\\\\\\\\\\\///\\\\\\\\\\\\__________________________________________________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_________________________________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________\\n\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_____/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\____________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___________________\\\\/\\\\\\\\\\\\/\\\\\\\\\\\\_\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_\\\\/\\\\\\\\\\\\___/\\\\\\\\\\\\__________________________________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_____/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\___/\\\\\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\////\\\\\\\\\\\\___/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"__\\\\/\\\\\\\\\\\\//\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\__\\\\///_______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______\\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\/////\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\////////\\\\\\\\\\\\___\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_\\\\/\\\\\\\\\\\\\\\\//\\\\\\\\\\\\\\\\/\\\\\\\\\\\\___/\\\\\\\\\\\\____/\\\\\\\\\\\\//////_____/\\\\\\\\\\\\/////\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\\\\\\\\\____\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"___\\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"______\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\___\\\\///____\\\\///////\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_\\\\/\\\\\\\\\\\\_\\\\//\\\\\\\\\\\\/\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\___/\\\\\\\\\\\\___________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_____\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"________\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___________/\\\\\\\\_____\\\\\\\\\\\\___/\\\\\\\\\\\\/////\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_\\\\/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\_________\\\\//\\\\\\\\///////_______\\\\///_______\\n\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"____________\\\\///\\\\\\\\\\\\\\\\\\\\/______\\\\/\\\\\\\\\\\\__________\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/\\\\\\\\\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_\\\\/\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\___\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"_/\\\\\\\\\\\\_____\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"______________\\\\/////________\\\\///____________\\\\////////_____\\\\////////\\\\//___\\\\///_____\\\\/////__\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                +  \"_\\\\///______\\\\////////_____\\\\//////////______\\\\///_____\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String name \u003d this.in.nextLine();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out.println(TAB + \"Hello \" + name + \"!\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        printWithIndentation(START_MESSAGE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Prints an empty line."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void printEmptyLine() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Prints the bye message."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        printWithIndentation(\"Bye!!!!!\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 78,
      "GanapathySanathBalaji": 7,
      "NizarMohd": 159,
      "hongquan448": 2,
      "-": 4
    }
  },
  {
    "path": "src/test/java/event/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Contains all the tests related to the Event class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void eventInformation() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"Team Meeting at Mar 21 2020 from 09:00 to 17:00\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"17:00\", \"1\").getEventInformation());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void formattedDetails() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"Team Meeting#2020-03-21#09:00#17:00#1\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"17:00\", \"1\").getFormattedDetails());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidDate_throwException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-021\", \"09:00\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"17:00\", \"1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid date not rejected\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Date provided is invalid or is in wrong format (Should be YYYY-MM-DD)\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidStartTime_throwException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"25:00\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"17:00\", \"1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid start time not rejected\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Start time provided is invalid or in wrong format (Should be HH:MM)\",e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidEndTime_throwException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"10:70\", \"1\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid end time not rejected\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"End time provided is invalid or in wrong format (Should be HH:MM)\",e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidPriority_throwException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"10:50\", \"High\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid priority not rejected\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Priority should be an integer\",e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_startTimeAfterEndTime_throwException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"08:50\", \"1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Start time after end time not rejected\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Start time should be before End time\",e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_dateAlreadyPassed_throwException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2019-03-21\", \"09:00\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"09:50\", \"1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Event before current date not rejected\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Date specified must be a current or a future date\",e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_emptyKeyword_throwException() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            boolean hasKeyword \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"17:00\", \"1\").hasKeyword(\"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty keyword not detected\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Keyword is empty\", e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_containsKeyword() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(true, new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                \"17:00\", \"1\").hasKeyword(\"Meeting\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_doesntContainsKeyword() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(false, new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                \"17:00\", \"1\").hasKeyword(\"Class\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 118
    }
  },
  {
    "path": "src/test/java/studyarea/StudyAreaTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "class StudyAreaTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyArea location1 \u003d new StudyArea(\"mac commons\", \"utown\", \"nil\", true, true,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            5);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getAddress() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(\"utown\", location1.getAddress());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getFaculty() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(\"nil\", location1.getFaculty());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void hasPort() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(true, location1.hasPort());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void isIndoor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(true, location1.isIndoor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getMaxPax() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(5, location1.getMaxPax());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(\"mac commons\", location1.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 13,
      "NizarMohd": 28
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "terrytay": 1,
      "-": 1
    }
  },
  {
    "path": "text-ui-test/library/locations.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "MacCommons~2 College Ave West Education Resource Centre~Utown~true~true~5"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": "OCBC~2 College Ave West, Stephen Riady Centre~Utown~true~false~2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "EA Level 3~9 Engineering Drive 1,EA~Engineering~true~true~4"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "EA Level 2~9 Engineering Drive 1~Engineering~true~true~4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "EA Level 1~9 Engineering Drive 1~Engineering~true~true~4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "EA Level 4~9 Engineering Drive 1, Outside Staff Offices~Engineering~true~false~6"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "EA Level 5~9 Engineering Drive 1, Outside of the door beside EA05~Engineering~true~false~4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "EA Level 6~9 Engineering Drive 1, EA06-23~Engineering~true~true~4"
      }
    ],
    "authorContributionMap": {
      "terrytay": 8
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "terrytay": 2,
      "-": 21
    }
  }
]
