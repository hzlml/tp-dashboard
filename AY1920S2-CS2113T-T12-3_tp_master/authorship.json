[
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nizar Mohamed| [Github](https://github.com/NizarMohd) | [Portfolio](docs/team/NizarMohd.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/59829631?s\u003d460\u0026v\u003d4?text\u003dterry) | Terry Tay | [Github](https://github.com/terrytay) | [Portfolio](docs/team/terrytay.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ganapathy Sanath Balaji | [Github](https://github.com/GanapathySanathBalaji) | [Portfolio](docs/team/ganapathysanathbalaji.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongquan448"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hong Quan | [Github](https://github.com/hongquan448) | [Portfolio](docs/team/hongquan.md)"
      }
    ],
    "authorContributionMap": {
      "terrytay": 1,
      "NizarMohd": 1,
      "GanapathySanathBalaji": 1,
      "hongquan448": 1,
      "-": 4
    }
  },
  {
    "path": "library/eventList.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "terrytay": 1
    }
  },
  {
    "path": "library/locations.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "MacCommons~2 College Ave West Education Resource Centre~Utown~true~true~5"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "OCBC~2 College Ave West, Stephen Riady Centre~Utown~true~false~2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "EA Level 3~9 Engineering Drive 1,EA~Engineering~true~true~4"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "EA Level 2~9 Engineering Drive 1~Engineering~true~true~4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "EA Level 1~9 Engineering Drive 1~Engineering~true~true~4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "EA Level 4~9 Engineering Drive 1, Outside Staff Offices~Engineering~true~false~6"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "EA Level 5~9 Engineering Drive 1, Outside of the door beside EA05~Engineering~true~false~4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "EA Level 6~9 Engineering Drive 1, EA06-23~Engineering~true~true~4"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 8
    }
  },
  {
    "path": "src/main/java/event/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Represents an event and contains the related functions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for Event Class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param date Date of specified Event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param startTime Start time of specified event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param endTime End time of specified event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param priority Priority of specified event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @throws Exception If wrong format is used for date, time or priority fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public Event(String description, String date, String startTime, String endTime, String priority)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDescription(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseDate(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseStartTime(startTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parseEndTime(endTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        parsePriority(priority);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (this.startTime.isAfter(this.endTime)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Start time should be before End time\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (this.date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Date specified must be a current or a future date\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parsePriority(String priority) throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.priority \u003d Integer.parseInt(priority.strip());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Priority should be an integer\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseEndTime(String endTime) throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.endTime \u003d LocalTime.parse(endTime.strip());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"End time provided is invalid or in wrong format (Should be HH:MM)\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseStartTime(String startTime) throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.startTime \u003d LocalTime.parse(startTime.strip());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Start time provided is invalid or in wrong format (Should be HH:MM)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseDate(String date) throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            this.date \u003d LocalDate.parse(date.strip());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Date provided is invalid or is in wrong format (Should be YYYY-MM-DD)\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void parseDescription(String description) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the information related to information in form of a string."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return eventInfo Contains information related to the event."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public String getEventInformation() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String eventInfo \u003d description + \" at \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" from \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                + startTime.toString() + \" to \" + endTime.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return eventInfo;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the priority of the specified event."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Priority of event."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the date of the event."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return Date of event."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Used to identify if the string contains the keyword specified in its description."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The keyword to be matched with the description."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return containsKeyword Indicates the presence/absence of keyword in the event\u0027s description."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public boolean hasKeyword(String keyword) throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            throw new Exception(\"Keyword is empty\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        boolean containsKeyword \u003d description.contains(keyword);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return containsKeyword;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Returns the event in the format used to store it in the data file."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return formattedEventDetails Contains the event details in the required format."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public String getFormattedDetails() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String formattedEventDetails \u003d description + \"#\" + date + \"#\" + startTime + \"#\" + endTime + \"#\" + priority;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return formattedEventDetails;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 133
    }
  },
  {
    "path": "src/main/java/event/EventList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Handles all functions related to the list of events."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** Stores the event information. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for the EventList class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        events \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Adds a new event to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param newEvent Event represents the new event tot be added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void addEvent(Event newEvent) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        events.add(newEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printWithIndentation(\"A new event with the following information has been added.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printWithIndentation(newEvent.getEventInformation());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Displays the current list of events."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void listEvents() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        System.out.println(\"Here is the list of events added so far:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int eventNumber \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Event event: events) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printWithIndentation(eventNumber + \") \" + event.getEventInformation());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            eventNumber++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Deletes the event at the specified index."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param index The index (1-based) of the event to be deleted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void deleteEvent(int index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            events.remove(index - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printWithIndentation(\"The event at the mentioned index has been deleted\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printWithIndentation(\"Enter a valid index\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Clears all the events currently stored."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void clearEvents() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        events.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printWithIndentation(\"The list of events is cleared.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Lists all the tasks sorted by their priority."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void priorityView() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsSortedByPriority \u003d events;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        eventsSortedByPriority.sort(Comparator.comparingInt(Event::getPriority));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Collections.reverse(eventsSortedByPriority);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int eventNumber \u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Event event:eventsSortedByPriority) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printWithIndentation(eventNumber + \") \" + event.getEventInformation());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            eventNumber++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (eventNumber \u003d\u003d 1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printWithIndentation(\"The list is empty.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Lists all the tasks sorted by date along with the days remaining."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void countdownView() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsSortedByDate \u003d events;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        eventsSortedByDate.sort(Comparator.comparing(Event::getDate));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int eventNumber \u003d 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Event event:eventsSortedByDate) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printWithIndentation(eventNumber + \") \" + event.getEventInformation());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            eventNumber++;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (eventNumber \u003d\u003d 1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printWithIndentation(\"The list is empty.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Displays the list of events containing the keyword."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param keyword The keyword to be searched for."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void searchEvents(String keyword) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        int eventNumber \u003d 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        for (Event event:events) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                if (event.hasKeyword(keyword)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    ui.printWithIndentation(eventNumber + \") \" + event.getEventInformation());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    eventNumber++;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        if (eventNumber \u003d\u003d 1) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printWithIndentation(\"The list is empty.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Adds a new event to the list by parsing information from the user given string"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * and calling {@link #addEvent(Event)} if the information is given in the correct format"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * to add the event."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param eventDetails Contains all the information related to the event as provided by the user."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void add(String eventDetails) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String[] details \u003d eventDetails.split(\" \",2)[1].split(\"/\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String description \u003d details[0];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String date \u003d details[1].substring(2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String startTime \u003d details[2].substring(2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String endTime \u003d details[3].substring(2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            String priority \u003d details[4].substring(2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event newEvent \u003d  new Event(description,date,startTime,endTime,priority);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            addEvent(newEvent);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IndexOutOfBoundsException | DateTimeParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printWithIndentation(\"Wrong format to add events\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printWithIndentation(e.getMessage());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 174
    }
  },
  {
    "path": "src/main/java/resourceloader/EventLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package resourceloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Handles the task of loading and storing events."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class EventLoader {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** Location of data file. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /** Directory of data file. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private Path fileDirectory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Constructor for EventLoader object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Initialises the object with the file path provided."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param filePath The location of the data file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public EventLoader(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        this.fileDirectory \u003d Paths.get(filePath).getParent();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Reads the list of events stored previously and returns it as an ArrayList of Events."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return events The list of events stored previously."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public ArrayList\u003cEvent\u003e loadFile() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        File dataFile;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Scanner s;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            s \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                String eventDescription \u003d s.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                Event newEvent \u003d parseEventDetails(eventDescription);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                events.add(newEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }  catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            createNewDataFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printWithIndentation(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Parses the Event details from the given string and returns a new event object with the specified details."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param taskDescription Contains all the details with regards to the Event."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @return newEvent The new event created with the details provided."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private Event parseEventDetails(String taskDescription) throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String[] splitDescription \u003d taskDescription.split(\"#\", 5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String description \u003d splitDescription[0];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String date \u003d splitDescription[1];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String startTime \u003d splitDescription[2];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String endTime \u003d splitDescription[3];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String priority \u003d splitDescription[4];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Event newEvent \u003d new Event(description, date, startTime, endTime, priority);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Creates a new data file when the application is run for the first time."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private void createNewDataFile() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Files.createDirectories(fileDirectory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Files.createFile(Paths.get(filePath));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Saves the list of current tasks to the data file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * @param events Represents the current list of events."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void saveEvents(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            for (Event event: events) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                fw.write(event.getFormattedDetails());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 115
    }
  },
  {
    "path": "src/main/java/resourceloader/Loader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package resourceloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Loader is a resource loader for all the external data that is within our java program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Examples of resources will be task data, study locations etc.."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * Loader is an interface that enables subsequent loaders to be made and disciplined,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": " * i.e. locationsLoader, organiserLoader.."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public interface Loader {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void loadFile() throws FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public File getFile();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 17
    }
  },
  {
    "path": "src/main/java/resourceloader/StudyAreaLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package resourceloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.IllegalStudyAreaException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.INCONSISTENT_DATA_STORAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class loads all the required information of Study Areas that is stored in location.txt."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class StudyAreaLoader implements Loader {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private static final String DIVIDER \u003d \"~\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private final String url;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public StudyAreaLoader(String url) throws FileNotFoundException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        loadFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public void loadFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            file \u003d new File(url);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            throw new FileNotFoundException(\"File not found.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public File getFile() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return this.file;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * Return the imported study area file as an ArrayList for the main controller"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * to add it to its database."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     * @return buffer ArrayList of Location from study area file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws FileNotFoundException if location.txt does not exist."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ArrayList\u003cStudyArea\u003e pushToDatabase() throws FileNotFoundException, IllegalStudyAreaException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ArrayList\u003cStudyArea\u003e buffer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        Scanner input \u003d new Scanner(file);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        while (input.hasNextLine()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String detailsOfLocation \u003d input.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "terrytay"
        },
        "content": "            String[] detailsBuffer \u003d detailsOfLocation.split(DIVIDER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (detailsBuffer.length !\u003d 6) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalStudyAreaException(INCONSISTENT_DATA_STORAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            StudyArea studyArea \u003d new StudyArea(detailsBuffer[0], detailsBuffer[1], detailsBuffer[2],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    Boolean.parseBoolean(detailsBuffer[3]), Boolean.parseBoolean(detailsBuffer[4]),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "terrytay"
        },
        "content": "                    Integer.parseInt(detailsBuffer[5]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            buffer.add(studyArea);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        return buffer;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 45,
      "NizarMohd": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import resourceloader.EventLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    private static final String FILE_PATH \u003d \"library\" + File.separator + \"eventList.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static EventLoader eventLoader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String ADD_COMMAND \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String VIEW_COMMAND \u003d \"view\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String PRIORITY_VIEW_COMMAND \u003d \"priority_view\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String COUNTDOWN_VIEW_COMMAND \u003d \"countdown\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String CLEAR_COMMAND \u003d \"clear\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String SEARCH_COMMAND \u003d \"search\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_INDEX_MESSAGE \u003d \"Enter a valid index\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String INVALID_COMMAND_MESSAGE \u003d \"Enter a valid command\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public static final String BYE_MESSAGE \u003d \"Bye!!!!!!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    static EventList eventList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello \" + in.nextLine());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        eventLoader \u003d new EventLoader(FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        eventList \u003d new EventList(eventLoader.loadFile());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        runCommands();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        eventLoader.saveEvents(eventList.events);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    private static void runCommands() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        command \u003d in.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        while (!command.equals(BYE_COMMAND)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                String commandType \u003d command.split(\" \")[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                switch (commandType) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                case ADD_COMMAND:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    eventList.add(command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                case VIEW_COMMAND:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    eventList.listEvents();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                case PRIORITY_VIEW_COMMAND:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    eventList.priorityView();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                case COUNTDOWN_VIEW_COMMAND:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    eventList.countdownView();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                case CLEAR_COMMAND:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    eventList.clearEvents();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                case SEARCH_COMMAND:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    eventList.searchEvents(command.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                case DELETE_COMMAND:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    eventList.deleteEvent(Integer.parseInt(command.split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    System.out.println(INVALID_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                System.out.println(INVALID_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                System.out.println(INVALID_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            command \u003d in.nextLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        System.out.println(BYE_MESSAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 3,
      "GanapathySanathBalaji": 73,
      "-": 20
    }
  },
  {
    "path": "src/main/java/studyarea/IllegalStudyAreaException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is an extension of the Exception class that exist only for Study Area related modules."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class IllegalStudyAreaException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public IllegalStudyAreaException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 14
    }
  },
  {
    "path": "src/main/java/studyarea/StudyArea.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static java.lang.System.lineSeparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.ADDRESS_MAX_LENGTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.TAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.formatMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the Study Area class. All study area is stored as a Study Area object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": "public class StudyArea {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String faculty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private boolean hasPort;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private boolean isIndoor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private int maxPax;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Constructs a Location class for a study area location with its information"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Precondition: \u0027All variables have to be filled."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param name name of study location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param address address of study location"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param faculty faculty of study location"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param hasPort true for availability of ports, else false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param isIndoor true for indoor, else false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param maxPax maximum number of seats for this study area"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "terrytay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public StudyArea(String name, String address, String faculty, boolean hasPort,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    boolean isIndoor, int maxPax) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.address \u003d formatMessage(address, ADDRESS_MAX_LENGTH).trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.hasPort \u003d hasPort;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.isIndoor \u003d isIndoor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.maxPax \u003d maxPax;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getFaculty() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.faculty;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public boolean hasPort() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.hasPort;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public boolean isIndoor() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.isIndoor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Integer getMaxPax() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.maxPax;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Prints the StudyArea into a standard String format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String value of all the attributes of the specific StudyArea."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String text \u003d TAB + \"Name: \" + this.name + lineSeparator() + TAB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                 + \"Address: \" + this.address + lineSeparator() + TAB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                 + \"Faculty: \" + this.faculty + lineSeparator() + TAB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                 + \"Port: \" + this.hasPort + lineSeparator() + TAB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                 + \"Indoor: \" + this.isIndoor + lineSeparator() + TAB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                 + \"Average number of Pax: \" + this.maxPax;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String line \u003d TAB + \"__________________________________________________________\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return line + lineSeparator() + text + lineSeparator() + line;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 12,
      "NizarMohd": 69
    }
  },
  {
    "path": "src/main/java/studyarea/StudyAreaCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.AVAILABLE_STUDY_AREAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.EMPTY_LIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.END_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.END_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.FLAGS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.HELP_COMMAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.MAX_LINE_LENGTH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.PROMPT_USER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.START_STUDY_AREA_SEARCH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.formatMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the Study Area Command class. It executes the Study Area Search function and interact with Users accordingly."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class StudyAreaCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * List out all the study areas that match with User\u0027s preference."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param availStudyAreas this is the list of all study areas in location.txt."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void printList(ArrayList\u003cStudyArea\u003e availStudyAreas) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (availStudyAreas.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            System.out.println(formatMessage(EMPTY_LIST, MAX_LINE_LENGTH));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            System.out.println(formatMessage(AVAILABLE_STUDY_AREAS, MAX_LINE_LENGTH));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (StudyArea studyArea : availStudyAreas) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                System.out.println(studyArea.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Filters command based on User Input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param command This is the command entered by User."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param studyAreaList This is the list of all Study Areas in location.txt."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return boolean status. False if User enters \"end\" , else will always return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static boolean filterCommand(String command,StudyAreaList studyAreaList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case END_COMMAND :"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            System.out.println(formatMessage(END_MESSAGE, MAX_LINE_LENGTH));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        case HELP_COMMAND :"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            System.out.println(FLAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ArrayList\u003cStudyArea\u003e availStudyAreas \u003d studyAreaList.searchList(command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                printList(availStudyAreas);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                System.out.println(formatMessage(PROMPT_USER, MAX_LINE_LENGTH));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } catch (IllegalStudyAreaException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                System.out.println(formatMessage(e.getMessage(), MAX_LINE_LENGTH));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Executes the Study Area search feature."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param args this is temporary."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws FileNotFoundException If location.txt does not ext, this exception is thrown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException If data is inconsistent while loading available list, this exception is thrown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException, IllegalStudyAreaException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        System.out.println(formatMessage(START_STUDY_AREA_SEARCH, MAX_LINE_LENGTH));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyAreaList studyAreaList \u003d new StudyAreaList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean status \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (status) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String command \u003d in.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            status \u003d filterCommand(command, studyAreaList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 93
    }
  },
  {
    "path": "src/main/java/studyarea/StudyAreaList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import resourceloader.StudyAreaLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.DUPLICATE_FLAGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.FLAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.INDOOR_FLAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.MULTIPLE_WHITE_SPACES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.NOT_INTEGER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.NO_SIZE_INDICATED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.ONLY_FLAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.PORTS_FLAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.SIZE_FLAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.SPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.WRONG_FLAG_ARGUMENT_POSITION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static studyarea.Utility.WRONG_FLAG_USAGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the class that stores and manages all of the Study Areas in location.txt"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class StudyAreaList {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private ArrayList\u003cStudyArea\u003e studyAreaList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Setup a resource loader to import the file by creating a new"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * LocationLoader class. The file is then load onto the software and then"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * parsed as an ArrayList to be stored in location in this StudyArea class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws FileNotFoundException to be edited"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public StudyAreaList() throws FileNotFoundException, IllegalStudyAreaException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StudyAreaLoader studyAreaLoader \u003d new StudyAreaLoader(\"library/locations.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        studyAreaLoader.loadFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.studyAreaList \u003d studyAreaLoader.pushToDatabase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Gets the list of all the Locations in location.txt"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return ArrayList of StudyAreas."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ArrayList\u003cStudyArea\u003e getStudyAreaList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.studyAreaList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Obtains all the supported flags in this organiser app."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param commands This is the User commands that has been split by spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String Array of a fixed size of 5"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalStudyAreaException when arguments for flags are invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String[] getFlagsInfo(String[] commands) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] flags \u003d new String[5];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringBuilder name \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean isNotFlag \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (int i \u003d 0; i \u003c commands.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (commands[i].equals(SIZE_FLAG)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isNotFlag \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    int size \u003d Integer.parseInt(commands[i + 1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if (flags[0] \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        flags[0] \u003d SIZE_FLAG;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        flags[1] \u003d Integer.toString(size);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        i++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        throw new IllegalStudyAreaException(DUPLICATE_FLAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    throw new IllegalStudyAreaException(NOT_INTEGER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    throw new IllegalStudyAreaException(NO_SIZE_INDICATED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else if (commands[i].contains(FLAG)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                isNotFlag \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (commands[i].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    throw new IllegalStudyAreaException(ONLY_FLAG);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                switch (commands[i].charAt(1)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                case \u0027p\u0027:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if (flags[2] \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        flags[2] \u003d PORTS_FLAG;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        throw new IllegalStudyAreaException(DUPLICATE_FLAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                case \u0027i\u0027:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if (flags[3] \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        flags[3] \u003d INDOOR_FLAG;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        throw new IllegalStudyAreaException(DUPLICATE_FLAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    throw new IllegalStudyAreaException(WRONG_FLAG_USAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (isNotFlag) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    name.append(commands[i]).append(SPACE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    flags[4] \u003d name.toString().trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    throw new IllegalStudyAreaException(WRONG_FLAG_ARGUMENT_POSITION);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return flags;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Checks if search key is found in Study Area\u0027s Name and Faculty attributes."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param name This is the Study Area\u0027s Name Attribute."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param faculty This is the Study Area\u0027s Faculty Attribute."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param key This is the search key entered by User."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return True if can be found in either case. False if not found in both cases."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static boolean containsKey(String name, String faculty, String key) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if (name.toLowerCase().contains(key.toLowerCase())) { //toLowerCase() so casing does not affect matching."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return faculty.toLowerCase().contains(key.toLowerCase()); // if first check is false, return true depends on"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        // second check."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * Finds a list of StudyAreas based on User requirements."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param userIn This is the requirement entered by User"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return ArrayList of StudyAreas"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ArrayList\u003cStudyArea\u003e searchList(String userIn) throws IllegalStudyAreaException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] temp \u003d userIn.split(MULTIPLE_WHITE_SPACES);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] flags \u003d getFlagsInfo(temp);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ArrayList\u003cStudyArea\u003e availStudyAreas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (StudyArea studyArea : this.studyAreaList) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            boolean isAvail \u003d true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (String flag : flags) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (flag !\u003d null \u0026\u0026 isAvail) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    switch (flag) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    case PORTS_FLAG:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        isAvail \u003d studyArea.hasPort();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    case INDOOR_FLAG:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        isAvail \u003d studyArea.isIndoor();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    case SIZE_FLAG:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        isAvail \u003d Integer.toString(studyArea.getMaxPax()).equals(flags[1]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        flags[1] \u003d null; //so as to skip iteration on flags[1]."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        isAvail \u003d containsKey(studyArea.getName(), studyArea.getFaculty(), flags[4]);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (isAvail) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                availStudyAreas.add(studyArea);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return availStudyAreas;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 170
    }
  },
  {
    "path": "src/main/java/studyarea/Utility.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class holds all the Utilities required for the Study Area related classes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Utility {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final int MAX_LINE_LENGTH \u003d 55;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final int ADDRESS_MAX_LENGTH \u003d 48;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FLAG \u003d \"-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String MULTIPLE_WHITE_SPACES \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DUPLICATE_FLAGS \u003d \"Duplicate flags entered!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String SIZE_FLAG \u003d \"-s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String PORTS_FLAG \u003d \"-p\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INDOOR_FLAG \u003d \"-i\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NOT_INTEGER \u003d \"Argument used after size flag \\\"-s\\\" is not an integer\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String WRONG_FLAG_USAGE \u003d \"Flags indicated are wrongly used. Please enter \\\"help\\\" for the\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" supported flags!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String WRONG_FLAG_ARGUMENT_POSITION \u003d \"Flags are to be used only after location\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String START_STUDY_AREA_SEARCH \u003d \"Please enter the location for your desired study area. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"Enter \\\"help\\\" for a list of supported flags. Flags should only come after location, if a criteria for\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" location is entered. When you are done with the search, enter \\\"end\\\".\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String PROMPT_USER \u003d \"Please enter the location for your desired study area.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FLAGS \u003d \"\\t Here is a list of supported flags!\\n\\t -p for study areas with ports\\n\\t\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \" -i for study areas that are indoors\\n\\t -s {size} for maximum number of pax\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String AVAILABLE_STUDY_AREAS \u003d \"Here are the available study areas!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String EMPTY_LIST \u003d \"Oops! Based on your criteria we were not able to find a compatible study\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            + \"area!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String ONLY_FLAG \u003d \"Please enter the flag along with \\\"-\\\"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INCONSISTENT_DATA_STORAGE \u003d \"Data is wrongly stored in locations.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String END_COMMAND \u003d \"end\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String TAB \u003d \"\\t \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NO_SIZE_INDICATED \u003d \"Max Size is not indicated. Please indicate accordingly!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String END_MESSAGE \u003d \"Thank you for using our study area search service!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method ensures that the message printed is within the standard\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * length."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param message is the String that we intend to format to a standard length\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *                per line.\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param maxLength This is the standard length intended to be formatted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String of standard length per line"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static String formatMessage(String message, int maxLength) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringTokenizer token \u003d new StringTokenizer(message, SPACE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringBuilder standardLengthMessage \u003d new StringBuilder(message.length());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        int lineLength \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (token.hasMoreTokens()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String word \u003d token.nextToken();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (lineLength + word.length() \u003e maxLength) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                standardLengthMessage.append(\"\\n\\t \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                lineLength \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            standardLengthMessage.append(word).append(SPACE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            lineLength +\u003d word.length() + 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return TAB + standardLengthMessage.toString().stripTrailing();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 64
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Contains functions used to interact with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     * Prints a line made up of \u0027_\u0027."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        System.out.println(\"____________________________________________________________________________________\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    public void printWithIndentation(String line) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        System.out.println(\"    \" + line);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 18
    }
  },
  {
    "path": "src/test/java/event/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "package event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " * Contains all the tests related to the Event class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void eventInformation() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"Team Meeting at Mar 21 2020 from 09:00 to 17:00\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"17:00\", \"1\").getEventInformation());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void formattedDetails() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(\"Team Meeting#2020-03-21#09:00#17:00#1\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                        \"17:00\", \"1\").getFormattedDetails());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidDate_throwException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-021\", \"09:00\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"17:00\", \"1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid date not rejected\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Date provided is invalid or is in wrong format (Should be YYYY-MM-DD)\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidStartTime_throwException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"25:00\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"17:00\", \"1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid start time not rejected\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Start time provided is invalid or in wrong format (Should be HH:MM)\",e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidEndTime_throwException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"10:70\", \"1\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid end time not rejected\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"End time provided is invalid or in wrong format (Should be HH:MM)\",e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_invalidPriority_throwException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"10:50\", \"High\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Invalid priority not rejected\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Priority should be an integer\",e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_startTimeAfterEndTime_throwException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"08:50\", \"1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Start time after end time not rejected\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Start time should be before End time\",e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void createEvent_dateAlreadyPassed_throwException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            Event event \u003d new Event(\"Team Meeting\", \"2019-03-21\", \"09:00\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"09:50\", \"1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Event before current date not rejected\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Date specified must be a current or a future date\",e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_emptyKeyword_throwException() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            boolean hasKeyword \u003d new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                    \"17:00\", \"1\").hasKeyword(\"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            fail(\"Empty keyword not detected\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "            assertEquals(\"Keyword is empty\", e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_containsKeyword() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(true, new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                \"17:00\", \"1\").hasKeyword(\"Meeting\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    void searchKeyword_doesntContainsKeyword() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "        assertEquals(false, new Event(\"Team Meeting\", \"2020-03-21\", \"09:00\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "                \"17:00\", \"1\").hasKeyword(\"Class\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GanapathySanathBalaji"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GanapathySanathBalaji": 118
    }
  },
  {
    "path": "src/test/java/resourceloader/StudyAreaLoaderTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package resourceloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import studyarea.StudyArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "class StudyAreaLoaderTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyAreaLoader locationLoader \u003d new StudyAreaLoader(\"library/locations.txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyAreaLoaderTest() throws FileNotFoundException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    void getFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        locationLoader.loadFile();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "terrytay"
        },
        "content": "        assertEquals(new File(\"library/locations.txt\"), locationLoader.getFile());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 19,
      "NizarMohd": 4
    }
  },
  {
    "path": "src/test/java/studyarea/StudyAreaListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "class StudyAreaListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyAreaList studyAreaList \u003d new StudyAreaList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyAreaListTest() throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getStudyAreaList() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(new StudyArea(\"OCBC\",\"2 College Ave West, Stephen Riady Centre\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"-\",true,false,2).getAddress(),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                studyAreaList.getStudyAreaList().get(1).getAddress());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 19
    }
  },
  {
    "path": "src/test/java/studyarea/StudyAreaTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "terrytay"
        },
        "content": "package studyarea;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "terrytay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "terrytay"
        },
        "content": "class StudyAreaTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    StudyArea location1 \u003d new StudyArea(\"mac commons\", \"utown\", \"nil\", true, true,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            5);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getAddress() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(\"utown\", location1.getAddress());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getFaculty() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(\"nil\", location1.getFaculty());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void hasPort() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(true, location1.hasPort());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void isIndoor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(true, location1.isIndoor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getMaxPax() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(5, location1.getMaxPax());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "terrytay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        assertEquals(\"mac commons\", location1.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "terrytay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "terrytay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "terrytay": 13,
      "NizarMohd": 28
    }
  }
]
