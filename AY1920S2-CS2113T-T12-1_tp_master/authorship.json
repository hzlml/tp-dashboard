[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Project Template for the tP"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a small CLI Java project. It uses Gradle for build automation and GitHub Actions for CI."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. **IMPORTANT: Locate the `build.gradle` file** in the project directory, select it, and click `OK`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the set up is complete, you can locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end. Also note how Intellij is now using Gradle to run your code (you can make Intellij run the code without Gradle [this way](tutorials/assets/RunUsingIntellij.png))."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "## Build Automation using Gradle"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "This project is already configured to use Gradle. Read the following tutorial to learn how to use gradle to do tasks such as running tests, checking code against teh style rules, and generating the JAR file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "To run _I/O redirection_ tests (aka _Text ui tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "To run JUnit tests (after you have added JUnit tests), you can run the `test` Gradle task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "The project is already configured to use [GitHub actions](https://github.com/features/actions). When you push a commit to your fork or PR against an upstream repo, GitHub actions will run automatically to build and verify the product."
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "MeLoveCarbs": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.2.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    implementation(\"com.google.guava:guava:28.2-jre\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    mainClassName \u003d \"WhenFree\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    archiveBaseName \u003d \"WhenFree\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    archiveVersion \u003d \"2.1\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "MeLoveCarbs": 7
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | CK | [Github](https://github.com/synCKun) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hong Wei Yang | [Github](https://github.com/MeLoveCarbs) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Xi Zhi | [Github](https://github.com/lowxizhi) | [Portfolio](docs/team/lowxizhi.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Matthew Chan | [Github](https://github.com/matthewc97) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 1,
      "lowxizhi": 1,
      "synCKun": 1,
      "-": 4,
      "MeLoveCarbs": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "# WhenFree - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "By: `AY1920S2-CS2113T-T12-1`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [1. Setting up](#1-setting-up)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * [1.1. Prerequites](#11-Prerequisites)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    * [1.2. Setting up project](#12-Setting-up-project)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    * [1.3. Verifying setup](#13-Verifying-setup)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [2. Design](#2-design)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.1. Architecture](#21-architecture)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.2. UI component](#22-ui-component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [2.3. Logic component](#23-logic-component)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [2.4. Model component](#24-model-component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [2.5. Storage component](#25-storage-component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [2.6. Common component](#26-common-classes)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [3. Implementation](#3-implementation)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.1. Add new contact](#31-add-new-contact)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.2. List all contacts](#32-list-all-contacts)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.3. Display timetable of selected contacts](#33-display-timetable-of-selected-contacts)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.4. Schedule a new meeting](#34-schedule-a-new-meeting)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.5. Edit a contact\u0027s timetable](#35-edit-a-contacts-timetable)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.6. Delete a scheduled meeting](#36-delete-a-scheduled-meeting)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* [3.7. Delete a contact](#37-delete-a-contact)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.8. List all scheduled meetings](#38-list-all-scheduled-meetings)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix A: Product Scope](#appendix-a-product-scope)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [A.1. Target user profile](#a1-target-user-profile)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [A.2. Value proposition](#a2-value-proposition)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix C: Use Cases](#appendix-c-use-cases)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix D: Non-Functional Requirements](#appendix-d-non-functional-requirements)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix E: Glossary](#appendix-e-glossary)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* [Appendix F: Instructions for Manual Testing](#appendix-g-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [F.1. Launch and Shutdown](#f1-launch-and-shutdown)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [F.2. Setting up profile](#f2-setting-up-profile)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [F.3. Scheduling a meeting](#f3-scheduling-a-meeting)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [F.4. Deleting a meeting](#f4-deleting-a-meeting)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [F.5. Deleting a contact](#f5-deleting-a-contact)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [F.6. Editing a schedule](#f6-editing-a-schedule)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [F.7. Saving data](#f7-saving-data)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 1. Setting up"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 1.1 Prerequisites\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Ensure Java Development Kit(JDK) is 11 or above."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. IDE of your choice. \u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :bulb: We recommend IntelliJ IDE since this project is built upon the features of IntelliJ"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3. The setting up of this project would assume that Intellij IDE is your preferred choice of IDE."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 1.2 Setting up the project\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Fork this repository and ```git clone``` it onto your computer."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. Open Intellij (if you are not in the welcome screen, click File \u003e Close Project to close the existing project dialog first)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3. Set up the correct JDK version"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1. Click Configure \u003e Structure for New Projects and then Project Settings \u003e Project \u003e Project SDK"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    2. If JDK 11 is listed in the drop down, select it. If it is not, click New... and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    3. Click OK"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    4. Click Import Project"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :information_source:  IMPORTANT: Locate the build.gradle file in the project directory, select it, and click OK"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 1.3 Verifying Setup"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Open ```Gradle``` from the vertical right tabs and type ```gradle run``` to build the project."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. Try out a few commands as shown on the CLI menu."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to Table of Contents](#table-of-contents)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 2.1. Architecture"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![Architecture Diagram](images/architecture.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 1. Architecture diagram of the WhenFree application*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 1. shows the high-level design of the WhenFree application. WhenFree"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "adopts an n-tier style architecture where higher layers make use of the services provided by the lower layers."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Here is a quick overview of each layer/component and the sub-components residing in it."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* UI: The Command Line user interface of the application."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* Commons: A collection of classes containing constants such as messages for ```common.exception```, modules that cannot be formatted, etc."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Logic: The main control unit of the application which handles the business logic of the application."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* Model: Holds the data of the application in memory to be easily accessed by methods that requires it."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* Storage: Writes data from Model component to hard disk, and reads previously saved data from hard disk into Model component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 2.2. UI component"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The UI component represents the Command Line user interface of the application. It serves the purpose of facilitating the "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "usage of the application and providing information requested by the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The UI component consists of the `TextUI` class. `TextUI` is called by 2 classes, `WhenFree` and `CommandHandler` to print"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "messages in the user\u0027s console. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "`TextUI` is called by the main class `WhenFree` which runs the application, to display the welcome message, menu message and exit message. "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "These messages enhances the usability rather than the functionality of the application."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "`TextUI` is also called by the `CommandHandler` class which interprets user input and initializes the execution of commands. "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "`TextUI` displays messages that indicate the successful execution of a command. Importantly, these messages include requested information by commands such as [List all contacts](#32-list-all-contacts), [List all scheduled meetings](#38-list-all-scheduled-meetings) and [Display timetable of selected commands](#33-display-timetable-of-selected-contacts),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "which are key to the functionality of the application. The implementation of these 3 features whose functionality involves the `TextUI` class are described in Section 3 below."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Additionally, `TextUI` is called by both `WhenFree` and `CommandHandler` classes to display error messages when exceptions are caught."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### 2.3. Logic component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cimg src\u003d\"images/logiccomponent.png\" width\u003d\"80%\"\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 2. Overview of Logic component*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 2. shows an overview of the Logic component. The ```LogicManager``` class is the brain and backbone of the logic component. It depends on 3 sub-components: ```schedulelogic``` ```modulelogic``` ```command```."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "First, ```command``` sub-component interprets and initializes user commands. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Afterwards, LogicManager instantiates```schedulelogic``` and ```modulelogic``` sub-components via ```CommandHandler``` to enable the generation of common time slots from NUSMODS links."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "LogicManager forms a whole-part relationship with the classes in the Model component, mainly ```ContactList``` and ```MeetingList``` where all the data generated from user commands would be stored. Besides, ```LogicManager``` also stores a ```mainUser:Contact``` containing the user\u0027s timetable"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "which is used to store scheduled meetings."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "#### 2.3.1. logic.commands component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```commands``` component interprets the user command and call the ```modulelogic``` and ```schedulelogic``` components to execute the commands."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```commands``` consists of the class ```CommandHandler```."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "#### 2.3.2. logic.modulelogic component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The modulelogic component retrives modules and module information from NUSMODS links."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The modulelogic component consists of 4 classes: ```TimetableParser``` ```ModuleApiParser``` ```ModuleHandler``` ```LessonsGenerator```."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. ```LessonsGenerator``` uses the ```TimetableParser``` class to acquire the modules a user is taking, including the timeslots of those modules."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. ```LessonsGenerator``` also uses ```Modulehandler``` to retrieve a set of information related to a specific module."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3. With both information, ```LessonsGenerator``` is able to dynamically generate the user\u0027s time-slots stored in ```ArrayList\u003cString[]\u003e``` via a series of Key-Value pair hashing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "4. ```Arraylist\u003cString[]\u003e ``` contains the start/end time, days and weeks of all modules the user is taking."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cimg src\u003d\"images/modulelogic.png\" width\u003d\"80%\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 3. Class diagram of the logic.modulelogic component*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 3. shows the interaction between the 4 classes in ```logic.modulelogic``` sub-component whenever a new user keys in his/her NUSMODS link."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. ```ModuleApiParser``` controls the API fetching logic and instantiates a HTTP GET request object to fetch a Json object from the open-sourced NUSMOD API server via ```parse()```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. ```ModuleApiParser ``` is called by ```ModuleHandler``` every time a new module is requested."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "4. Subsequently, ```ModuleHandler``` would clean the data and filter out any blacklisted modules provided by ```ModuleApiParser```, and stores the information into an ```ArrayList\u003cArrayList\u003cString\u003e\u003e``` data structure to be used by ```LessonsGenerator```."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "   Blacklisted modules are filtered out based on the data from ```common.BlacklistedModule```. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3. Next, ```TimetableParser``` fetches the module information a user is currently taking from his/her timetable link via ```parse()```. ```parse()``` and ```parseModule()```  makes use of regex to sift through timetable link provided by user in the form of ```String``` object and stores"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "the information in a ```Map\u003cString, ArrayList\u003cString\u003e\u003e``` data structure as seen from the figure. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "4. This sub-component also depends on the ```common.Messages``` class to provide the exception message when an incorrect link is being parsed.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cimg src\u003d\"images/LessonsGenerator.jpg\"\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 4. Sequence diagram of the logic.modulelogic component*"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 4. shows an overview of the UML sequence of the entire logic.modulelogic component.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```LessonsGenerator``` collates the returned data structure from both ```ModuleHandler``` and ```TimetableParser```, calling```.lessonsChecker()``` simultaneously to create a set of information containing the start-time, end-time, day, weeks of the modules that a user is taking."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "The information returned from ```LessonsGenerator``` would then be used in ```Command``` component."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "#### 2.3.3. logic.schedulelogic component"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The purpose of the ```schedulelogic``` component is to put together several ```Contact```s\u0027 schedules into a combined schedule. "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```schedulelogic``` component is used by the [`Display timetable of selected contacts`](#33-Display-timetable-of-selected-contacts) "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "feature to obtain a combined schedule of selected ```Contact```s."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```schedulelogic``` component consists of the class ```ScheduleHandler```. The key interactions of `ScheduleHandler ` "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "with 2 classes, ```CommandHandler``` and ```Contact```, are explained in the class "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "diagram and description below."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cimg src\u003d\"images/schedulelogic.png\" width\u003d\"80%\"\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 5. Class diagram of the logic.schedulelogic component*"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "A `ScheduleHandler` object can be created by the `CommandHandler` class with the `ScheduleHandler()` constructor, and is passed an ArrayList of `Contact`s."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The `ScheduleHandler` object retrieves the schedule of each `Contact` using `Contact#getMySchedule()`, and uses the retrieved "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "schedule to fill up its private class variable, combinedSchedule. `CommandHandler` can retrieve the combined schedule generated "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "by the `ScheduleHandler` object by calling `ScheduleHandler#getCombinedSchedule()`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "[Section 3.3](#3-implementation) below explains in detail how the ```schedulelogic``` component is used in the "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "implementation of the [`Display timetable of selected contacts`](#33-display-timetable-of-selected-contacts) feature."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 2.4. Model component"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cimg src\u003d\"images/modelcomponent.png\" width\u003d\"50%\"\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 6. Overview diagram of the Model component*"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```model``` component holds data generated in the application in memory. The data can be accessed by methods that require"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "it when the application is running. The model component contains 2 sub-components: ```meetings``` and ```contacts```."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "#### 2.4.1. model.meetings component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cimg src\u003d\"images/meetingscomponent.png\" width\u003d\"50%\"\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 7. Class diagram of the model.meetings component*"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "The ```meetings``` component of our application consists of 2 classes: ```Meeting``` and ```MeetingList```."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "1. ```Meeting``` is used to represent a meeting that the user has scheduled. It contains the name, start and end date, day and time of the meeting. It also contains getter methods, not shown in the diagram, which are used to access its attributes."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "2. ```MeetingList``` is used to store a list of all meetings. It contains a ```ArrayList\u003cMeeting\u003e``` which is updated every time the user adds or deletes a meeting. There are also getter methods not shown in the diagram."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "#### 2.4.2. model.contacts component"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cimg src\u003d\"images/contactscomponent.png\" width\u003d\"50%\"\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 8. Class diagram of the model.contacts component*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "The ```contacts``` component of our application consists of 2 classes: ```Contact``` and ```ContactList```."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "1. ```Contact``` consists of information of a member\u0027s name and schedule."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    * The information of a contact\u0027s schedule is stored in blocks of 30 minutes interval for 13 weeks and 7 days a week."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    * By default, the first ```Contact``` added will be the main user of the application."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    * It contains logic to convert time into 30-minute blocks for easy processing and check if a slot is valid for scheduling a meeting or editing."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    * It also contains a private class ```Slot```, not shown in the diagram, used exclusively by ```Contact```. ```Slot``` contains information about a time slot and contains logic to convert its attributes."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "2. ```ContactList``` is a ```ArrayList\u003cContact\u003e``` which new ```Contact``` are added to. It also contains getter methods not shown in the diagram."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 2.5. Storage component"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cimg src\u003d\"images/storage_class_diagram.png\" width\u003d\"50%\"\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 9. Class diagram of the storage component*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 9. shows the structure of Storage. It is created by WhenFree class to handle the loading and saving of scheduled meetings and member schedules."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "synCKun"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "synCKun"
        },
        "content": "- can save `Contact` objects in .txt format and read it back."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "synCKun"
        },
        "content": "- can save scheduled meetings in .txt format and read it back."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 2.6. Common component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Classes used by multiple components are in the ```commons``` package. These includes exception classes, information of "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "blacklisted modules as well as output messages to be shown to users when exception occurs."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to Table of Contents](#table-of-contents)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "This section describes how the main features of our application are implemented."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "There are 6 main features: [Add new contact](#31-add-new-contact), [List all contacts](#32-list-all-contacts), [Display timetable of selected contacts](#33-display-timetable-of-selected-contacts), [Schedule a new meeting](#34-schedule-a-new-meeting), [Edit a contact\u0027s timetable](#35-edit-a-contacts-timetable), [Delete a scheduled meeting](#36-delete-a-scheduled-meeting), [Delete a contact](#37-delete-a-contact) and [List all scheduled meetings](#38-list-all-scheduled-meetings)."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.1 Add new contact"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![Add Contact](images/AddContact.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 10. Sequence diagram of the implementation of the `Add new contact` feature*"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 10. shows the sequence diagram of how a new contact is added."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Given below is an example usage scenario of the `Add new contact` feature."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. The user running the application invokes the ```LogicManager``` by typing ```name nusmodslink```, followed by kbd:[enter] key."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. ```LogicManager```would then request for a new contact by calling ```CommandHandler```."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3. ```CommandHandler``` would call ```generate()``` on ```LessonsGenerator``` to retrieve the lesson\u0027s start/end time, start/end day, and the number of weeks the lesson is held."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "4. ```CommandHandler``` would also instantiate a new ```Contact``` and append the busy slots that were previously generated by ```generate()```."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "5. Subsequently, control would be shifted back to ```LogicManager``` where the new ```Contact``` would be returned by ```CommandHandler```."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "6. ```LogicManager``` checks if the ```Contact``` is a main user and calls ```setMainUser()``` accordingly."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "7. The final procedure is to append the new ```Contact``` into ```ContactList``` found in the ```model``` component."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "synCKun"
        },
        "content": "#### 3.1.1 Design Considerations"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "**Aspect 1: Optimizing fetching of module information**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Alternative 1(current choice): Instantiate a ```ModuleHandler``` every time there\u0027s a request for a module information. \u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Pros: The classes are intuitively separated and data structures returned is understandable. \u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Cons: Program runs slower for every extra timetable or extra modules taken since its a new instantiation of a ```ModuleHandler```. \u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Alternative 2: Instantiate ```ModuleHandler``` once for every user.  \u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Pros: Takes up less memory and setup time for every timetable provided compared to alternative 1. \u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Cons: The data structure returned by ```ModuleHandler``` would be complicated and confusing for new developers. \u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "**Aspect 2: Ways of storing blacklisted module**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Alternative 1(current choice): Create a ```common.BlacklistedModule``` and hash every hard-coded blacklisted module as a constant ```HashSet```."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1. **Pros**: There is no need for user to download the blacklisted module, and only the JAR file is required to run this entire application. \u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Also, user do not need to have a one time set-up where they would wait several minutes for the application to dynamically pull the blacklisted modules from Nusmods API server. \u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    2. **Cons**: If the blacklisted modules from Nusmods API gets updated to the conventional 13 weeks programme, developers would have to manually delete the information of those modules from"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        the blacklist, resulting in time wasted everytime there\u0027s an update to module information. \u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Alternative 2: Dynamically pull the data from Nusmods API server once when user starts the application to retrieve the blacklisted modules, and then periodically update the "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "blacklisted modules every semester. \u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1. **Pros**: The blacklisted modules would be up to date and there is no need for developers to manually edit the ```common.BlacklistedModule``` class. \u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    2. **Cons**: The one-time set up of pulling the data is very time consuming(~2 minutes waiting time), resulting is bad user experience. \u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Alternative 3: Requires user to download the list of blacklisted modules in addition to the JAR file. \u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1. **Pros**: User do not have to wait for the one-time set up and the file would be up to date as long as the application is not deprecated."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    2. **Cons**: Developers would still have to run the method to dynamically pull the blacklisted modules, although it would be less prone to mistake caused by editing the hard-coded blacklist as mentioned in"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "       Alternative 1. Furthermore, users are required to download the blacklisted file published by the developers every semester in order for the list to be up-to-date."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Ultimately we decided to go with **Alternative 1** since it is the most user-friendly as our targeted users do not have to download another file and just downloading the jar would do. On the developer side, updates would still be required every semester, but our focus is to make the application as user-centric as possible."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.2 List all contacts"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![Add Contact](images/ListContact.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 11. Sequence diagram of the implementation of the `List all contacts` feature*"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 11. shows the sequence diagram of listing all contacts saved in the application. "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "It consists of 4 classes:```LogicManager Commandhandler TextUI ContactList``` ."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Given below is an example usage scenario of the ```List all contacts``` feature."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. The user invokes the LogicManager by typing ```contacts```, followed by kbd:[enter] key."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. The ```LogicManager``` would then request to list all contacts via ```CommandHandler```."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3. The ```CommandHandler``` would call ```getContactList()``` on ```ContactList``` from storage and then using the ContactList retrieved, it then calls ```ListMsgUI()``` from ```TextUI``` class."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "4. The result is that ```TextUI``` would return a ```System.out.println``` of all the contacts the user have."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.3 Display timetable of selected contacts"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "![DisplayTimetable](images/DisplayTimetable.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 12. Sequence diagram of the implementation of the `Display timetable of selected contacts` feature*"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 12. shows the sequence diagram of displaying a combined timetable of selected contacts. "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "It consists of 5 classes:```LogicManager``` ```Commandhandler``` ```ScheduleHandler``` ```Contact``` ```TextUI``` ."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Given below is an example usage scenario of the ```Display timetable of selected contacts``` feature."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "1. The user invokes the LogicManager by entering ```timetable \u003ccontact index A\u003e \u003ccontact index B\u003e```."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e:information_source: ```\u003ccontact index A\u003e``` and ```\u003ccontact index B\u003e``` represent the ```Contact```s whose combined timetable is "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    to be displayed."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "2. The ```LogicManager``` requests to display the combined timetable via ```CommandHandler```."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "3. The ```CommandHandler``` retrieves ```Contact```s from ```ContactList``` using the contacts\u0027 index passed into the "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "command, to generate ```ArrayList\u003cContact\u003e```."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e:information_source: This step is omitted in the sequence diagram to keep it concise."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "3. The ```CommandHandler``` calls the ScheduleHandler constructor ```ScheduleHandler(ArrayList\u003cContacts\u003e)```."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "4. For each ```Contact```, ```ScheduleHandler``` retrieves its schedule by calling ```getSchedule()```. ```ScheduleHandler``` "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "then uses the retrieved schedule to fill a combined schedule, adding all \"busy\" time blocks of the retrieved schedule into the"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "combined schedule."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "5. ```CommandHandler``` retrieves the final combined schedule and calls ```TextUI``` to print the combined schedule."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "6. ```TextUI``` returns a ```System.out.println``` of the combined schedule in an ASCII timetable diagram. "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.4 Schedule a new meeting"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![ScheduleMeeting](images/ScheduleMeeting_seq.png)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 13. Sequence diagram of the implementation of the `Schedule a new meeting` feature*"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 13 shows the sequence diagram of scheduling a new meeting at a given time slot."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "synCKun"
        },
        "content": "It consists of 5 classes:```LogicManager``` ```Commandhandler``` ```Contact``` `Meeting` `MeetingList`."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Given below is an example usage scenario of the ```Schedule a new meeting``` feature."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "synCKun"
        },
        "content": "1. The user invokes the LogicManager by entering `schedule \u003cmeeting name\u003e \u003cstart date\u003e \u003cstart time\u003e \u003cend date\u003e \u003cend time\u003e`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "synCKun"
        },
        "content": "2. The `LogicManager` requests to schedule a new meeting via `CommandHandler`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "synCKun"
        },
        "content": "3. If the indicated timeframe is available, "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t1. a new `Meeting` is instantiated with the meeting name, start date, start time, end date and end time."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t2. This new `Meeting` object is then added into `MeetingList`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t3. Lastly, `CommandHandler` calls `addBusyBlocks()` on `mainUser:Contacts` to mark the indicated timeframe as \"busy\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "synCKun"
        },
        "content": "4. If the indicated timeframe is not available, an exception will be thrown to inform user."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "synCKun"
        },
        "content": "#### 3.4.1 Design Considerations"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "synCKun"
        },
        "content": "**Aspect 1: **"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.5 Edit a contact\u0027s timetable"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "![EditContact](images/EditContact.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 14. Sequence diagram of the implementation of the `Edit a contact\u0027s timetable` feature*"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 14. shows the sequence diagram of editing the schedule (timetable) of a selected contact at a given time slot. "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "It consists of 3 classes:```LogicManager``` ```Commandhandler``` ```Contact```."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Given below is an example usage scenario of the ```Edit a contact\u0027s timetable``` feature."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "1. The user invokes the LogicManager by entering ```edit \u003ccontact index\u003e \u003ctime slot\u003e```."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e:information_source: The original user input formats for ```EditCommand``` are: "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    \u003cbr\u003e```edit busy \u003ccontact index\u003e \u003cstart day\u003e \u003cstart time\u003e \u003cend day\u003e \u003cend time\u003e``` and "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    \u003cbr\u003e```edit free \u003ccontact index\u003e \u003cstart day\u003e \u003cstart time\u003e \u003cend day\u003e \u003cend time\u003e```, "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    \u003cbr\u003efor editing the ```Contact```\u0027s schedule to \"busy\" and \"free\" at the given time slot respectively. "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    We generalise ```edit busy``` and ```edit free``` as ```edit``` in the sequence diagram as their execution are similar. "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    We also represent ```\u003cstart day\u003e \u003cstart time\u003e \u003cend day\u003e \u003cend time\u003e``` as ```\u003ctime slot\u003e``` in the sequence diagram to"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    keep it concise."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "2. The ```LogicManager``` requests to edit a contact\u0027s schedule via ```CommandHandler```."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "3. The ```CommandHandler``` retrieves ```Contact``` from ```ContactList``` using the contact\u0027s index passed into the "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "command."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e:information_source: This step is omitted in the sequence diagram to keep it concise."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "4. The ```CommandHandler``` calls ```editSchedule(time slot)``` of ```Contact```."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "If ```edit busy```, the schedule of `Contact` will be marked as \"busy\" for the given time slot. If ```edit free```, the "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "schedule of `Contact` will be marked as \"free\" for the given time slot."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The schedule of the `Contact` is edited and saved in the application."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "synCKun"
        },
        "content": "#### 3.5.1 Design Considerations"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "**Aspect 1: Clash of ```Meeting```\u0027s time slot and ```EditContact```\u0027s time slot when editing main user\u0027s schedule**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The implementation described above would allow the overwrite of any time blocks in the ```Contact```\u0027s schedule. This  "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "would be problematic when editing the main user\u0027s schedule, which contains ```Meeting```s\u0027 time slots. A possible problematic "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "scenario is if we edit over a ```Meeting```\u0027s time slot and set the time slot to \"free\", we would subsequently be able to schedule "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "another meeting at the same time slot. This results in multiple ```Meeting```s occupying the same time slot."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* Alternative 1(current choice): Disallow the overwrite of ```Meeting```\u0027s time slot. If ```EditContact```\u0027s time slot "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "clashes with any ```Meeting```\u0027s time slot, throw error to discontinue edit of that time slot."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* Alternative 2: Allow the overwrite of ```Meeting```\u0027s time slot. If ```EditContact```\u0027s time slot clashes with any "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "```Meeting```\u0027s time slot, remove the ```Meeting``` from ```MeetingList```. "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "We chose Alternative 1 for these reasons:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "1. The intended purpose of the edit function is to make amendments to schedules pulled"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " from NUSMODS so that additional \"busy\" slots or \"free\" slots can be visualized in the timetable, not to edit over meetings. "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "2. Editing of a ```Meeting```\u0027s time slot to be \"free\" will be equivalent to deleting the ```Meeting```, for "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "which there is a dedicated feature implemented. This causes unnecessary overhead in functionality."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "3. Alternative 1 is easier to implement. When a clash is detected, Alternative 1 requires only the throwing of exception, "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "whereas Alternative 2 requires the removal of ```Meeting``` from ```MeetingList```.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "![EditContact](images/EditContact_checkvalid.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 15. Sequence diagram of checking if an edit is valid in the `Edit a contact\u0027s timetable` feature*"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 15. shows the sequence diagram illustrating the implementation of Alternative 1. Checking validity of "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "edit is done before editSchedule() of `Contact` is called, as shown in Fig 14. "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "1. This path is optional, and is only implemented if `Contact` the main user."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "2. `CommandHandler` calls isValidEdit(time slot) of the `Contact` class."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "3. isValidEdit(time slot) uses the `Contact`\u0027s schedule to check if any of the time blocks within the time slot is a"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    \"meeting\" time block. "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "4. If no  \"meeting\" time block is detected within the time slot, the edit is valid. The program continues running and "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    editSchedule() will be called."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "5. If a \"meeting\" time block is detected within the time slot, the edit is invalid. An invalid exception is thrown by "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    `Contact`, and the user will be informed that the edit is invalid."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e:information_source: `TextUI` and `Exception` classes which are involved in generating the exception, and displaying the exception message"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    to the user are omitted to keep the sequence diagram concise."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.6 Delete a scheduled meeting"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![DeleteMeeting](images/DeleteMeeting_seq.png)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 16. Sequence diagram of the implementation of the `Delete a scheduled meeting` feature*"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 16. shows the sequence diagram of the ```DeleteMeeting``` command."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "synCKun"
        },
        "content": "It consists of 3 classes:```LogicManager``` ```CommandHandler``` ```MeetingList``` `Contact`."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Given below is an example usage scenario of the ```Delete a scheduled meeting``` feature."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "synCKun"
        },
        "content": "1. The user running the application invokes the ```LogicManager``` by typing ```delete \u003cmeeting index\u003e```."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "synCKun"
        },
        "content": "2. ```LogicManager```would then request ```CommandHandler``` for deletion."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "synCKun"
        },
        "content": "3. ```CommandHandler``` will check if target meeting index exists. If it exists, a method call ```addFreeBlocks()``` will be made on the `mainUser:Contact` which will make the indicated timeframe back to \"free\" again. In addition, `CommandHandler` will also make a method call, `delete()`, on `MeetingList` which will find and remove the meeting at the given index. If it does not exist, an exception will be thrown."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "synCKun"
        },
        "content": "4. Subsequently, the updated list of meetings and schedule of the mainUser will be saved in the application."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "synCKun"
        },
        "content": "### 3.7 Delete a contact"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![DeleteContact](images/DeleteContact_seq.png)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 17. Sequence diagram of the implementation of the `Delete a contact` feature*"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 17. shows the sequence diagram of the ```DeleteContact``` command."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "synCKun"
        },
        "content": "It consists of 3 classes:```LogicManager``` ```CommandHandler``` ```ContactList```."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Given below is an example usage scenario of the ```Delete a contact``` feature*"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "synCKun"
        },
        "content": "1. The user running the application invokes the ```LogicManager``` by typing ```delete \u003ccontact name\u003e```."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "synCKun"
        },
        "content": "2. ```LogicManager```would then request ```CommandHandler``` for deletion."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "synCKun"
        },
        "content": "3. ```CommandHandler``` will check if target contact is the main user. If it is the main user, no contact will be removed and an exception will be thrown to inform user. If it is not the main user, a method call ```remove()``` will be requested on ```ContactList``` which will find and remove the contact with the matching name."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "synCKun"
        },
        "content": "5. Subsequently, the new list of contacts will be saved in the application."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.8 List all scheduled meetings"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cimg src\u003d\"images/ListMeetings_seq.png\" width\u003d\"80%\"\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "*Fig 18. Sequence diagram of the implementation of the `List all scheduled meetings` feature*"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Fig 18. shows the sequence diagram of the ```List all scheduled meetings``` feature."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "synCKun"
        },
        "content": "It consists of 3 classes:```LogicManager``` ```CommandHandler``` ```MeetingList```."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Given below is an example usage scenario of how the ```ListMeetings``` command behaves."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "synCKun"
        },
        "content": "1. The user running the application invokes the ```LogicManager``` by typing ```meetings```."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "synCKun"
        },
        "content": "2. ```LogicManager```would then request ```CommandHandler``` for the list."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "synCKun"
        },
        "content": "3. ```CommandHandler``` will call ```listMeetings()``` on ```MeetingList```, which will display every scheduled meetings that has been created."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to Table of Contents](#table-of-contents)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### A.1. Target user profile"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Our application, WhenFree, is for NUS students and teaching assistants looking to save time finding"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "free-slots for their project meetings, consultations etc. It allow users to add their team members and tutees respectively, and"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "finding a time-slot where everyone would be free."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Target user profile:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Our application if for users that are comfortable using CLI apps and prefer desktop applications rather than phone apps."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Our application targets users in NUS that wish to easily find free-slots amongst their peers studying in NUS as well."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Our application tracks the meetings the user have and shows them on a timetable generated dynamically in CLI."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### A.2. Value proposition"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* By using this application, NUS students/staff are able to save time planning schedule for their group meetings by simply providing"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "the application with their respective NUSMODS website link instead of manually keying in their timetable individually."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Our application allows NUS students/staff to save their scheduled meeting into their timetable. Our application would take the user\u0027s"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "meetings into account when scheduling a common timeslot timetable."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Our application provides NUS students/staff with a friendly CLI-based timetable interface when scheduling common-timeslots."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "|v1.0| As a student | I want to delete the meetings in the calendar| so that I can afford to make mistakes while planning for the meeting. |"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "|v1.0| student with many friends | I want to schedule lunch dates with my friends | so that i can maintain my social circle.  |"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "|v1.0| As a TA | I want to organize my timetable and consult sessions | so that it can all be in one place.  |"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "|v1.0| As a student who uses various calendars | I want to schedule everything in one place | so that i can access all my events from one medium.  |"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "|v1.0| As a forgetful student | I tend to forget which project meetings I have planned for the week and hence| so the application allows me to save the schedule and look through it for reference.  |"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "|v1.0| As a busy student | I want to have more family outings without sacrificing my lecture/tutorial timings |  so that I can score good grades and have a life both at the same time. |"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "|v2.0| As an impatient student | I want to directly copy/paste timetable links | so that i can instantly generate suitable time slots for our project meetings. |"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "|v2.0| As a student | I want to use this to be organized in terms of what meetings i have for the coming week | so that I would be a responsible team member who shows up at every meeting. |"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "|v2.0| As a busy student | I want to use this application to manage my schedule  | so that i can plan my time wisely. |"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "|v2.0| As a TA | I want to use this to schedule consults and marking sessions without sacrificing my tutorial/lecture slots | so that I can get the best TA award and maintain my grades at the same time. |"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "|v2.0| As a lazy student | I want to use this application to automatically sync my previous meeting onto a new schedule profile | so that I can automatically block out dates instead of typing it manually. |"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "|v2.0| As a student | I want to see the list of upcoming meeting dates  | so that i can remind myself which meetings i have to go for in the coming week. |"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "|v2.1| As a  | a | a |"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to Table of Contents](#table-of-contents)"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix C: Use Cases"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "(For all use cases below, the **System** is WhenFree and the **Actor** is the ```user```, unless otherwise stated.)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```$xslt"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case: Add contacts"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1) User has a group of team mates for a certain project."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2) User wants to add the timetable of his/her teammates to schedule a common time-slot."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3) User keys in the member\u0027s name and timetables into application ."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "4) System adds the nusmods timetable of team members."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects invalid name containing all numbers - System catches it and use case resumes from step 3."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects invalid nusmods URL - System catches it and use case resumes from step 3."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```$xslt"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case: Delete contacts"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "MSS: "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1) User wants to delete the members of a particular project since the project has finished."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2) User keys in the command together with the name of the contact."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3) System deletes the contact from the user\u0027s storage."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects an invalid name - System catches it and use case resumes from step 2."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```$xslt"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case: List contacts"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1) User wants to see the current list of saved contacts he/she has previously keyed."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2) User keys in the command without any additional paramters."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3) System lists the contact from the user\u0027s storage."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```$xslt"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case: Schedule meetings"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1) User has a common time-slot chosen via our application and wants to schedule it into his/her timetable."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2) User keys in the command together with the start and end date, start and end time."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3) System stores the scheduled meeting."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "4) System blocks out the scheduled meeting in his/her timetable."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects start date later than end date - System catches it and use case resumes from step 2."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects start/end date not within this week or next week - System catches it and use case resumes from step 2."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects start/end time is not in blocks of 30minutes - System catches it and use case resumes from step 2."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```$xslt"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case: Edit timetable slots"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1) User realised lecturer has cancelled a particular lecture time-slot and is free during that time."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2) User keys in the command, with the start/end date, start/end time that he/she is free."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3) System free up the timetable slots."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects start date later than end date - System catches it and use case resumes from step 2."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects start/end date not within this week or next week - System catches it and use case resumes from step 2."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects start/end time is not in blocks of 30minutes - System catches it and use case resumes from step 2."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects that user did not specify if he/she wants to free or block the slot/s - System catches it and use case resume from step 2."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```$xslt"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case: List meetings"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1) User wants to see the current list of saved meetings he/she has previously keyed."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2) User keys in the command without any additional paramters."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3) System lists the meetings from the user\u0027s storage."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```$xslt"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case: Delete meetings"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1) User has an urgent stuff on a particular scheduled meeting slot and wish to delete the scheduled meeting in application."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2) User keys in the command together with the index of the meeting. Index is gotten by listing the meetings."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3) System deletes the meeting and reflects it in user\u0027s timetable."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects an invalid index - System catches it and use case resumes from step 2."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```$xslt"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case: Show(more) timetable/s"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1) User wants to see the common timeslots together with 3 of his/her contacts to schedule a common meeting timeslot."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2) User keys in the command together with the index of the contacts."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3) System generates a dynamic timetable for this week."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "4) User wants to see next weeks timetable with all the common timeslots among his contacts as well."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "5) User types in the command \"more\"."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "6) System generates two timetable side by side, each representing this week and next week\u0027s timetable."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Extension:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects that \"more\" is keyed in without \"timetable\" command preceding it- System catches it and use case resumes from step 2."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* System detects that index of the contacts is invalid - System catches it and use case resumes from step 2."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to Table of Contents](#table-of-contents)"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 SDK or above installed."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. Should be able to hold up to hundreds of meetings and timetables without a noticeable increase in application\u0027s performance and latency."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3. A fast typist user preferring CLI applications, with above average typing speed(\u003e65wpm) for regular English text should be able to accomplish most tasks faster than a GUI application using mouse."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "4. Should come with automated unit tests in case you encounter any bugs while developing new feature, and it should be open sourced for the anyone."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "5. Should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "6. Should not exceed 100MB in size given normal usage."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to Table of Contents](#table-of-contents)"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix E: Glossary"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* **Blacklisted modules** - Blacklisted modules are modules that doesn\u0027t follow the conventional 13 weeks programme and as such, the JSON pulled from NUSMODS api is unable to be processed by ```Logic.modulelogic``` component."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* **Mainstream OS** -Windows, LinuxOS, OS-X(MacOS)"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to Table of Contents](#table-of-contents)"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "## Appendix F: Instructions for Manual Testing"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\u003e :information_source: These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing.  \u003cbr\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\u003e :information_source: We also recommend testers to have a stable internet connection throughout the tests to successfully pull the data from nusmods API."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### F.1. Launch and Shutdown"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1. Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    2. Double click the jar file"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "   "
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Expected: The CLI application would be running with our logo: WhenFree."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :bulb: You can also open the cmd terminal from windows or bash terminal from linux/mac os and key in ```java -jar WhenFree-2.1.jar``` to access the application."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. Shutting down"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1. Type ```exit``` followed by kbd:[enter] key to exit."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Expected: Application should shut down with an exit message, intermediate contacts and meetings would be saved."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :information_source: The test cases below are provided such that it should be executable without showing any errors if followed sequentially from F.2 onwards."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### F.2. Setting up profile"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Set up your contacts profile"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1.Test case: ```Tommy https://nusmods.com/timetable/sem-2/share?CFG1002\u003dLEC:06\u0026CG2023\u003dPLEC:02,LAB:03,PTUT:02\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2113T\u003dLEC:C01\u0026GES1020\u003dTUT:2,LEC:1\u0026SPH2101\u003dLEC:1,TUT:6``` \u003cbr\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Expected: A new main contact will be added. Name: Tommy, with his respective modules."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :bulb: Note that the first user added to the contact will be the main user of the application. Meeting schedule will be stored into main user\u0027s timetable."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     "
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    2. Test case: ```Patricia https://nusmods.com/timetable/sem-2/share?CG2023\u003dPLEC:03,PTUT:03,LAB:06\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:01,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2113T\u003dLEC:C01\u0026LAT1201\u003dLEC:1``` \u003cbr\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "       Test case: ```Agnus https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:03,PTUT:03\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:09,LEC:1\u0026CS2113T\u003dLEC:C01``` \u003cbr\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "       Test case: ```Jerry https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:04,PLEC:02,PTUT:01\u0026CS3235\u003dTUT:3,LEC:1``` \u003cbr\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "       "
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Expected: 3 new contacts will be added, with their respective modules."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    3. Test case: ```Timmy https://nusmods.com/timetable/sem-2/brokenlink``` \u003cbr\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Expected: Contact is not updated into contact list as nusmods URL is invalid \u003cbr\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :information_source: Names must not contain purely integers. It should either be entirely alphabetical or alphanumerical."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### F.3. Scheduling a meeting"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Setting up a meeting among all contacts."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1. Prerequisites: Type ```timetable 0 1 2 3``` to show the combined timetable of all members."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    2. Check to see if there are any empty slots. Slots marked with ```X``` means the slot is taken up."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    3. Scheduling of meeting is allowed as long as ```X``` is not marked in the main user\u0027s timetable."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    4. Test case: ```schedule test_meeting startDate startTime endDate endTime``` \u003cbr\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :bulb: startDate/endDate is found in the ```timetable``` command. For eg, scheduling 16th April 11:30am to 16th April 3pm would be ```schedule testMeeting 16 11:30 16 15:00```. "
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                                                                                                                                                                                                                                                                                                                                                                                                                                                            "
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :bulb:Type ```schedule``` to see the required format."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :information_source: startTime and endTime should strictly be in 30minutes blocks, startDay and endDay should strictly follow the date given in ```timetable```  command."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                       "
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### F.4. Deleting a meeting "
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Deleting a scheduled meeting."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1. Prerequisites: Type ```meetings``` to list down all meetings in the main user\u0027s timetable."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    2. Test case: ```delete 1```. \u003cbr\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Expected: The meeting scheduled previously in F.3 is deleted. If no meeting is scheduled at all, an error would be shown to user. \u003cbr\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    3. Test case: ```delete 0``` \u003cbr\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Expected: No meeting would be deleted since the index starts from 1 \u003cbr\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :bulb: Type ```delete``` to see the required format."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                                                                                                                                                                                                                                                                                                                                                                                "
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### F.4. Deleting a contact"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Deleting a contact."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1. Prerequisites: Type ```contacts``` to list down all the contacts currently stored."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    2. Test case: ```delete name```. \u003cbr\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Expected: The desired contact would be deleted\u003cbr\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :information_source: You cannot delete main user contact."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                                                                                                                                                                                                                                    "
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :bulb: Type ```delete``` to see the required format."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### F.6. Editing a schedule "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Editing main user\u0027s timetable"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1. Prerequisites: Type ```timetable``` to check which slots from the main user timetable to free up or block out."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    2. Test case: ```edit free 0 startDate startTime endDate endTime``` \u003cbr\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Expected: The date and time given would be free up \u003cbr\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    3. Test case: ```edit busy 0 startDate startTime endDate endTime``` \u003cbr\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Expected: The date and time given would be blocked out \u003cbr\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    4. Other incorrect edit commands to try: not stating whether it is ```free``` or ```busy```, ```startTime endTime``` doesn\u0027t follow 30minutes blocks."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :bulb: Type ```edit``` to see the required format."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "  "
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### F.7. Saving data"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Data is saved automatically in the ```/data``` directory where the jar file is located in."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. Loading previously scheduled meetings."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1. Prerequisites: ```/data/meeting_list.txt``` is not empty."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    2. The text file stores every meeting in each line, and it contains information of the meeting name, start/end date, start/end time."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    3. Expected: The stored meetings would be shown in the application via ```meetings``` command and is also reflected in the ```timetable``` command."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :information_source: Note that you can\u0027t manually add meeting simply by editing ```/data/meeting_list.txt``` since the meetings generated would also be reflected in the main user\u0027s timetable. Editing it manually would corrupt the timetable schedule."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3. Loading previously stored contacts."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    1. Prequisites: ```/data``` directory contains at least one contact file in the form of ```name_schedule.txt```."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    2. The text file stores all 13 weeks schedule of a particular contact. The weeks are line separated and each word represents a block of 30minutes time."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    3. Expected: The stored contacts would be shown in application via ```contacts```."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    \u003e :information_source: It is suggested not to manually edit the contacts file directly since it could potentially corrupt your data. We highly recommend scheduling meetings directly via the application instead."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to Table of Contents](#table-of-contents)"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 47,
      "lowxizhi": 242,
      "synCKun": 81,
      "-": 24,
      "MeLoveCarbs": 338
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "synCKun"
        },
        "content": "# WhenFree"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "synCKun"
        },
        "content": "WhenFree is a friendly scheduler chatbot that helps you find common free time among you and your friends, using just the NUSMODS links to your school timetable."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 1,
      "synCKun": 2,
      "-": 5
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "synCKun"
        },
        "content": "# WhenFree - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "synCKun"
        },
        "content": " * [1. Introduction](#introduction)  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "synCKun"
        },
        "content": " * [2. Quick Start](#quick-start)  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "synCKun"
        },
        "content": " * [3. Features](#features)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "synCKun"
        },
        "content": " * [4. FAQ](#faq)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "synCKun"
        },
        "content": " * [5. Command Summary](#command-summary)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "synCKun"
        },
        "content": " "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "synCKun"
        },
        "content": "WhenFree is a scheduler chatbot that helps you find common free time among your and your friends, "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "using just the NUSMODS links to your school timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "WhenFree is for NUS students who want to save time gathering their friends\u0027 schedules to set up a "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "meeting, whether for a long project discussion or a quick meal. With an easy-to-use command line interface, anyone can"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "set up and use this application easily by following along this User Guide."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Get ready the NUSMODS links of you and your friends, and let\u0027s get started!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "1. Ensure that you have Java 11 or later versions of Java installed on your computer. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    - To check the version of Java on your computer, follow the instructions [here](https://www.wikihow.com/Check-Your-Java-Version-in-the-Windows-Command-Line). "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    - To download the latest version of Java on your computer, visit [here](https://www.oracle.com/java/technologies/javase-downloads.html)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "2. Download the .jar file of our latest release of WhenFree, V2.1 [here](https://github.com/AY1920S2-CS2113T-T12-1/tp/releases)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "3. Copy the downloaded .jar file to an empty folder."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "4. Open Command Prompt or Terminal and navigate to the folder using ```cd \u003cfolder_path\u003e```."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "5. Run the .jar file using ```java -jar \u003cfile_name.jar\u003e```."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "[NOTE] Please resize the terminal to full screen mode to make full use of our CLI ASCII art."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "You will see this welcome message if you have done the above steps correctly."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![welcome Message](images/welcome_msg.png)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The following part of the User Guide will explain the features of WhenFree in detail. You can follow along as we go through each of the features if you are starting out, or skip ahead to the [Command Summary](#command-summary) to see the commands of all features."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- [Add a new contact](#add-a-new-contact)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- [List all contacts](#list-all-contacts-contacts)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- [Display timetable of selected contacts](#display-timetable-of-selected-contacts-timetable)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "- [Schedule a new meeting](#schedule-a-new-meeting-schedule)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "synCKun"
        },
        "content": "- [List all meetings](#list-all-meetings-meetings)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "synCKun"
        },
        "content": "- [Edit a contact\u0027s timetable](#edit-a-contacts-timetable-edit)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "synCKun"
        },
        "content": "- [Delete an item](#delete-an-item-delete)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "synCKun"
        },
        "content": "- [Exit application](#exit-the-application-exit)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Add a new contact"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Adds you or your friend into the list of contacts. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "You will need to key in `\u003cContact Name\u003e` and `\u003cNUSMODS link\u003e` of the "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "contact."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* You must add in your (main user\u0027s) contact before you can use the application. "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "If you try to enter a command before adding in your contact, WhenFree will remind"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "you to key in your contact first. You can add as many contacts as you want thereafter."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* `\u003cContact Name\u003e`  should be a single word containing only alpha characters. It should not contain any whitespaces."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* Detalied instructions to obtain the NUSMODS links to the NUSMODS timetable can be found in the [FAQ](#faq) section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    \u003cContact Name\u003e \u003cNUSMODS link\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "synCKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Juan https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:06,PLEC:02,PTUT:01"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "synCKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "synCKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Tommy https://nusmods.com/timetable/sem-2/share?CG2027\u003dLEC:01,TUT:01\u0026CS2101\u003d\u0026CS2113T\u003dLEC:C01"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "synCKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![](images/add_contact_op.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to list of Features](#features)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### List all contacts: `contacts`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Displays index and name of all contacts stored in the program."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* This feature is usually used preceding [`Display timetable of selected contacts`](#display-timetable-of-selected-contacts-timetable),  [`Edit a contact\u0027s timetable`](#edit-a-contacts-timetable-edit) or `Delete a contact` features, to check for `\u003cContact Index\u003e` and `\u003cContact Name\u003e` of a contact."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    contacts "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    contacts"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![](images/contacts_op.png)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to list of Features](#features)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Display timetable of selected contacts: `timetable`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "There are 3 use cases illustrated below: to display the main user\u0027s timetable, to display the timetable of a selected contact, "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "and to display a combined timetable of multiple selected contacts."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* For all 3 uses cases, the `timetable` command shows only the current week\u0027s timetable. **To see up to two weeks of timetable, enter `more` command after the `timetable` command.** "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- You can check `\u003cContact Index\u003e` of the contact(s) whose timetable you wish to display, by listing all contacts using "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "[`contacts`](#list-all-contacts-contacts)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "synCKun"
        },
        "content": "**Use case 1:** Displays your (main user\u0027s) timetable."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    timetable "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    timetable"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![timetable](images/timetable_op.PNG)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "A cross in a 30-minute square of the timetable represents \"busy\", while an empty square represents \"free\"."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "**Use case 2:** Displays the timetable of a selected contact. You will need to key in `\u003cContact Index\u003e` of the selected contact."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* Both `timetable` and `timetable 0 ` display your (main user\u0027s) timetable."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    timetable \u003cContact Index\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    timetable 1"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![timetable 1](images/timetable_1_command_op.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "**Use case 3:** Displays the combined timetable of multiple selected contacts. You will need to key in `\u003cContact Index\u003e` of each of the selected contacts."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* You can enter as many contacts as you wish"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "   "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "   "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    timetable \u003cContact A Index\u003e \u003cContact B index\u003e ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "   "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "   "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    timetable 0 1"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![timetable 0 1](images/timetable_0_1_op.png)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "synCKun"
        },
        "content": "**Extended view:** Displays up to 2 weeks of timetable."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* Extended view is applied to the most recent timetable command"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    more"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    more"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![more](images/more_command_op.png)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to list of Features](#features)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Schedule a new meeting: `schedule`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Schedules a new meeting at a specified time slot and adds it into the meeting list. You will need to key in "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "synCKun"
        },
        "content": "`\u003cMeeting Name\u003e`, and specify the meeting time slot with `\u003cStart Date\u003e` `\u003cStart Time\u003e` `\u003cEnd Date\u003e` `\u003cEnd Time\u003e`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* You can schedule a meeting on only the current week and the next week, for which your timetable can be displayed with the "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "[`timetable`](#display-timetable-of-selected-contacts-timetable) and `more` commands"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* Hence, `\u003cStart Date\u003e` and `\u003cEnd Date\u003e` represents the date number you wish to schedule the meeting on, within the current "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "week and the next week, from the current date onwards. For example, if the date today is 27 April:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * You can schedule a meeting on 29 April this week with `\u003cStart Date\u003e` and `\u003cEnd Date\u003e` as `29`. "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * You can schedule a meeting on 6 May next week with `\u003cStart Date\u003e` and `\u003cEnd Date\u003e` as `6`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * You will not be able to schedule a meeting with `\u003cStart Date\u003e` and `\u003cEnd Date\u003e` as `26`. Even though 26 April is within"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    this week, the date has passed. The future date 26 May is also not within the current week and the next week."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* `\u003cStart Time\u003e` and `\u003cEnd Time\u003e` should be in the 24-hour HH:MM format. For example, the time 3pm should be represented"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "as `15:00`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* `\u003cMeeting Name\u003e` should be a single word with no whitespace character."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* Scheduling a meeting will modify only your (main user\u0027s) timetable, to be busy at the specified time slot. "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Timetables of other contacts will not be modified."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* You cannot schedule a meeting if your timetable is busy at the specified time slot. When Free will remind you to check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "your timetable if you try to schedule a meeting during a time slot which you are busy for."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    schedule \u003cMeeting Name\u003e \u003cStart Date\u003e \u003cStart Time\u003e \u003cEnd Date\u003e \u003cEnd Time\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    schedule meeting 11 17:00 11 19:00"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![schedule meeting 11 17:00 11 19:00](images/schedule_meeting_11_1700_11_1900_op.png)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to list of Features](#features)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "synCKun"
        },
        "content": "### List all meetings: `meetings`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "synCKun"
        },
        "content": "List all scheduled meetings stored in program."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* This feature is usually used preceding `Delete a meeting` feature, to check for `\u003cMeeting Indec\u003e` a meeting."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    meetings"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    meetings"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![meetings](images/meetings_op.png)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to list of Features](#features)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Edit a contact\u0027s timetable: `edit`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "There are 2 use cases illustrated below: to edit a contact\u0027s timetable to **\"busy\"** for a specified time slot, and"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "to edit a contact\u0027s timetable to **\"free\"** for a specified time slot."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* You can edit the contact\u0027s timetable for only the current week and the next week, for which your timetable can be displayed "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "with the [`timetable \u003cContact Index\u003e`](#display-timetable-of-selected-contacts-timetable) and `more` commands"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* Hence, `\u003cStart Date\u003e` and `\u003cEnd Date\u003e` represents the date number you wish to edit the timetable for, within the current "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "week and the next week, from the current date onwards. For example, if the date today is 27 April:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * You can edit the timetable on 29 April this week with `\u003cStart Date\u003e` and `\u003cEnd Date\u003e` as `29`. "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * You can edit the timetable on 6 May next week with `\u003cStart Date\u003e` and `\u003cEnd Date\u003e` as `6`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * You will not be able to edit the timetable with `\u003cStart Date\u003e` and `\u003cEnd Date\u003e` as `26`. Even though 26 April is within"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    this week, the date has passed. The future date 26 May is also not within the current week and the next week."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* `\u003cStart Time\u003e` and `\u003cEnd Time\u003e` should be in the 24-hour HH:MM format. For example, the time 3pm should be represented"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "as `15:00`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "* You can check `\u003cContact Index\u003e` of the contact whose timetable you wish to edit, by listing all contacts using "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "[`contacts`](#list-all-contacts-contacts)."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "**Use case 1:** Edits a contact\u0027s timetable to be **\"busy\"** for a specified time slot. You need to key in `\u003cContact Index\u003e`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "synCKun"
        },
        "content": "of the contact, and specify the time slot to be marked **\"busy\"** with `\u003cStart Date\u003e` `\u003cStart Time\u003e` `\u003cEnd Date\u003e` `\u003cEnd Time\u003e`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    edit busy \u003cContact Index\u003e \u003cStart Date\u003e \u003cStart Time\u003e \u003cEnd Date\u003e \u003cEnd Time\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    edit busy 0 11 09:00 11 10:00"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![edit busy 0 11 09:00 11 10:00](images/edit_busy_0_11_0900_11_1000_op.png)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "**Use case 2:** Edits a contact\u0027s timetable to be **\"free\"** for a specified time slot. You need to key in `\u003cContact Index\u003e`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                of the contact, and specify the time slot to be marked **\"free\"** with `\u003cStart Date\u003e` `\u003cStart Time\u003e` `\u003cEnd Date\u003e` `\u003cEnd Time\u003e`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    edit free \u003cContact Index\u003e \u003cStart Date\u003e \u003cStart Time\u003e \u003cEnd Date\u003e \u003cEnd Time\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    edit free 0 11 09:00 11 10:00"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![edit free 0 11 09:00 11 10:00](images/edit_free_0_11_0900_11_1000_op.png)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to list of Features](#features)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "synCKun"
        },
        "content": "### Delete an item: `delete`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "synCKun"
        },
        "content": "There are 2 use cases illustrated below: to delete a scheduled meeting and to delete a contact from the list."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "synCKun"
        },
        "content": "- You can check `\u003cMeeting Index\u003e` of the meeting you wish to delete, by first listing all meetings using [`meetings`](#list-all-meetings-meetings)."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "synCKun"
        },
        "content": "- You can check `\u003cContact Name\u003e` of the contact you wish to delete, by first listing all added contacts using [`contacts`](#list-all-contacts-contacts)."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "synCKun"
        },
        "content": "**Use case 1:** Deletes a **meeting** from the meeting list. You will need to key in **Meeting Index** of the meeting you wish to delete."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    delete \u003cMeeting Index\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    delete 1"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![delete 1](images/delete_1_op.png)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "synCKun"
        },
        "content": "**Use case 2:** Deletes a **contact** from the contact list. You will need to key in **Contact Name** of the contact you wish to delete."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    delete \u003cContact Name\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    delete Tommy"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![delete Tommy](images/delete_Tommy_op.png)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to list of Features](#features)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### Exit the application: `exit`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Exits the application and ends the current session."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    exit"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    exit"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![exit](images/exit_op.png)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to list of Features](#features)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "synCKun"
        },
        "content": "**A**: Copy the `data` folder in the program directory and paste into the selected directory "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "containing the .jar file in another computer."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "**Q**: How do I prevent file corruption? "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "synCKun"
        },
        "content": "**A**: Ensure that you do not abruptly exit the application and do not edit delete the data file "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "while application is still running, or outside of the application."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "**Q**: How can I create a NUSMODS timetable?"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "synCKun"
        },
        "content": "**A**: Visit the [NUSMODS website](https://nusmods.com/) to create a NUSMODS timetable."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "**Q**: How do I obtain the NUSMODS links to my NUSMODS timetable?"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "synCKun"
        },
        "content": "**A**:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "synCKun"
        },
        "content": " 1) Visit the [NUSMODS website](https://nusmods.com/) in your browser. If you do not already have a NUSMODS timetable saved in your browser, you can create a new one. Else, you will be brought to your saved NUSMODS timetable.\u003cbr\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " 2) Click on the red \"Share/Sync\" button located at the bottom right of the page."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "![](images/NUSMODS_step2.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " 3) Click on the red copy icon next to the NUSMODS link in the pop-up box."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "![](images/NUSMODS_step1.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " 4) Paste the link into the CLI for the [`add a new contact`](#add-a-new-contact) feature."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to the top](#whenfree---user-guide)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Feature | Format | Example usage"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "synCKun"
        },
        "content": "------- | ------ | -------------"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Adding a new contact | `\u003cname\u003e \u003cNUSMODS link\u003e` | `Juan https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:01,PTUT:01\u0026CG2027\u003dTUT:01,LEC:01\u0026CG2028\u003dTUT:01,LAB:02,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:08,LEC:1\u0026CS2113T\u003dLEC:C01`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "synCKun"
        },
        "content": "List all contacts | `contacts` | `contacts`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Display timetable of selected contacts | `timetable` \u003cbr/\u003e\u003cbr/\u003e `timetable \u003cMember Index\u003e` \u003cbr/\u003e\u003cbr/\u003e `timetable \u003cMember A Index\u003e \u003cMember B Index\u003e` | `timetable` \u003cbr/\u003e\u003cbr/\u003e `timetable 1` \u003cbr/\u003e\u003cbr/\u003e `timetable 0 1 2`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Extend view of timetable | `more` | `more`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Schedule a new meeting | `schedule \u003cMeeting Name\u003e \u003cStart Date\u003e \u003cStart Time\u003e \u003cEnd Date\u003e \u003cEnd Time\u003e` | `schedule meeting 3 17:00 3 19:00`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Edit a contact\u0027s timetable | `edit busy \u003cContact Index\u003e \u003cStart Date\u003e \u003cStart Time\u003e \u003cEnd Date\u003e \u003cEnd Time\u003e` \u003cbr/\u003e\u003cbr/\u003e `edit free \u003cContact Index\u003e \u003cStart Date\u003e \u003cStart Time\u003e \u003cEnd Date\u003e \u003cEnd Time\u003e` | `edit busy 0 2 22:00 2 23:00` \u003cbr/\u003e\u003cbr/\u003e `edit free 0 2 22:00 2 23:00`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Delete an item | `delete \u003cMeeting Index\u003e` \u003cbr/\u003e\u003cbr/\u003e `delete \u003cContact Name\u003e` | `delete 1` \u003cbr/\u003e\u003cbr/\u003e `delete alex`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "synCKun"
        },
        "content": "List all scheduled meetings | `meetings` | `meetings`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Exit application | `exit` | `exit`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "synCKun"
        },
        "content": "[\u0026#8593; Return to the top](#whenfree---user-guide)"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 16,
      "lowxizhi": 164,
      "synCKun": 188,
      "-": 29,
      "MeLoveCarbs": 5
    }
  },
  {
    "path": "docs/team/lowxizhi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "# Low Xi Zhi - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 6
    }
  },
  {
    "path": "docs/team/melovecarbs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\u003cH1\u003e melovecarbs - Project Portfolio \u003c/H1\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "# Project: WhenFree"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "##  Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "  WhenFree is a command line based application capable of finding common time-slots among team members and schedule meetings accordingly. It also have additional features such as add/delete/edit meetings and can save the data onto hard-disk for future use."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Link : [RepoSense Dashboard](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dmelovecarbs)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### Enhancements implemented:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* **Major Enhancement:**  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Developed the foundation of WhenFree\u0027s architecture, ie the ```modulelogic``` component. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * This component is responsible for accessing NUSMODS api and parsing user\u0027s nusmods URL into the modules the user is taking. After which an algorithm using HashMap and HashSet is used to filter out the specific lesson details the user is taking. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * The filter lesson details are an integral part of WhenFree and is called as an API in other logic component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * This API call also takes into account the modules that doesn\u0027t follow the standard 13-week per semester convention (approximately 200 modules out of ~10,000 modules) and informs user to manually key in the timetable for those modules. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Responsible for creating the Junit test classes in ```Logic.modulelogic``` component, ensuring that the \u003e90% of the code from the component is covered and there are no defects since an error in this API might break the whole application which relies on nusmods URL to add contacts."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* **Major Enhancement:**  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Responsible for refactoring the architecture of the project source code to follow the UI-logic-model-storage component in V2.0 by creating additional manager class:```LogicManager.java``` to manage the component. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Originally, the classes are all jumbled up and does not follow a specific set of order. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * By refactoring it into UI-logic-model-storage hierarchy, every class created is organized into their respective components and classes wouldn\u0027t be exposed to components it is not using, reducing the effect of coupling."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* **Minor Enhancement:** "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Developed the Contact class in the model component, which is responsible for holding all the information of a particular contact. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * The class stores the individual\u0027s timetable, as well as several methods to convert user\u0027s input into slots to be inserted into the timetable."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* **Minor Enhancement:** "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Added capabilities for meetings to be deleted and reflected onto user\u0027s timetable."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* **Contributions to documentation:**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Documented the ```modulelogic``` subcomponent in the ```logic``` component, as well as LogicManager responsible for managing all the subcomponents in logic component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Documented the```common``` components which holds various classes with static variables used in other components."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* **Contributions to the DG:**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Documented design section: ```2.2.1 Architecture 2.2.3```"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Documented design section: ```Logic component 2.2.6 Common component```"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Documented implementation section: ```3.3.1 Add a new contact```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Docuemented implementation section: ```3.3.2 List all contacts```"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* **Contributions to team-based tasks :**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Jointly released V1.0, V2.0 and V2.1 together with team mates, taking into account the must have features for each version."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Set up team organization and set up issues that needs to be solved for every milestone."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Set up shadowJar and related dependencies in gradle for the team."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Documented settings section: ```1. Setting Up``` of Developer Guide."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Documented Appendix A of Developer\u0027s guide: ```Appendix A: Product Scope```"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Documented Appendix B of Developer\u0027s guide: ```Appendix B: User Stories```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Documented Appendix C of Developer\u0027s guide: ```Appendix C: Use Cases```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Documented Appendix D of Developer\u0027s guide: ```Appendix D: Non-functional requirement```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Documented Appendix E of Developer\u0027s guide: ```Appendix E: Glossary```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* Documented Appendix F of Developer\u0027s guide: ```Appendix F: Instructions for Manual Testing```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Looked through all the issue feedback from PED dry run and fixed major issue that could cause our application to crash. Issues related to user guide are assigned to teammates respectively depending on their roles for this project."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Refactor code in WhenFree.java (application\u0027s main class) to be more compact."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* **Review/mentoring contributions:**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Provided help to team mates facing issues with gradle and checkStyle and how to resolve the errors caused by github CI tool. Ensuring that we abide by the rule of: \"Do not merge any pull requests that doesn\u0027t pass the continuous integration tool\", preventing errors from snowballing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Provided the skeleton code of the application to kick-start the project and for everyone to have something to work on."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Provided help to teammates that were unsure of the syntax to use when writing UML sequence diagram from [this website](https://sequencediagram.org/) and sharing my source code under ```/docs/UML source code```."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* **Contributions beyond the project team:**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Provided solutions to problems/difficulties other teams were facing and discover bugs that causes wrong repl submission. For eg: [repl bug](https://github.com/nus-cs2113-AY1920S2/forum/issues/6), [issue other team faced](https://github.com/nus-cs2113-AY1920S2/forum/issues/104)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Reported 6 bugs during PED by following a methodological approach of Expected Behaviour of application-Current behaviour of application-Steps to reproduce-Detail description of the bug-Possible solution to the bug."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* **Contributions to the Developer Guide (Extracts)**: "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\u003e :blush: Below are few of the examples of my contributions to the developer\u0027s guide."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### 2.1. Architecture"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![Architecture Diagram](../images/architecture.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "The architecture diagram above shows an overview of the high-level design of WhenFree. Meeting Organizer"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "adopts an n-tier style architecture where higher layers make use of the services provided by the lower layers."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Here is a quick overview of each layer and the components residing in it."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* UI: The CLI user interface of the application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Commons: A collection of classes containing constants such as messages for ```common.exception```, modules that can\u0027t be formatted, etc."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Logic: The main control unit of the application which handles the business logic of the application."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Model: Holds the data of the application in memory which is easily accessible by any methods that requires it."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Storage: Writes data from Model layer to hard disk, as well as reading previously saved data from hard disk and storing it into Model layer."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### 2.3. Logic component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![Logic Component](../images/logiccomponent.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "The LogicManager is the brain and backbone of the logic component. It depends on 3 sub-components for it to work."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "First, ```command``` sub-component would be initialize to interpret the user commands. "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Afterwards, LogicManager instantiates```schedulelogic``` and ```modulelogic``` sub-components via ```CommandHandler``` to enable the generation of common time slots from NUSMODS links."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "LogicManager forms a whole-part relationship with the classes in the Model component, mainly ```ContactList``` and ```MeetingList``` where all the data generated from user commands would be stored. Besides, ```LogicManager``` also stores a ```mainUser:Contact``` containing the user\u0027s timetable"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "which is used to store scheduled meetings."
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 85
    }
  },
  {
    "path": "docs/team/synckun.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cH1\u003e melovecarbs - Project Portfolio \u003c/H1\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "synCKun"
        },
        "content": "  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "synCKun"
        },
        "content": "# Project: WhenFree"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "synCKun"
        },
        "content": "##  Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "synCKun"
        },
        "content": "  WhenFree is a command line based application capable of finding common time-slots among team members and schedule meetings accordingly. It also have additional features such as add/delete/edit meetings and can save the data onto hard-disk for future use."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "synCKun"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "synCKun"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Link : [RepoSense Dashboard](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dsynckun)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "synCKun"
        },
        "content": "### Enhancements implemented:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* **Major Enhancement:**  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Developed the foundation of WhenFree\u0027s architecture, ie the ```modulelogic``` component. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * This component is responsible for accessing NUSMODS api and parsing user\u0027s nusmods URL into the modules the user is taking. After which an algorithm using HashMap and HashSet is used to filter out the specific lesson details the user is taking. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * The filter lesson details are an integral part of WhenFree and is called as an API in other logic component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * This API call also takes into account the modules that doesn\u0027t follow the standard 13-week per semester convention (approximately 200 modules out of ~10,000 modules) and informs user to manually key in the timetable for those modules. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Responsible for creating the Junit test classes in ```Logic.modulelogic``` component, ensuring that the \u003e90% of the code from the component is covered and there are no defects since an error in this API might break the whole application which relies on nusmods URL to add contacts."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* **Major Enhancement:**  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Responsible for refactoring the architecture of the project source code to follow the UI-logic-model-storage component in V2.0 by creating additional manager class:```LogicManager.java``` to manage the component. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Originally, the classes are all jumbled up and does not follow a specific set of order. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * By refactoring it into UI-logic-model-storage hierarchy, every class created is organized into their respective components and classes wouldn\u0027t be exposed to components it is not using, reducing the effect of coupling."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* **Minor Enhancement:** "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Developed the Contact class in the model component, which is responsible for holding all the information of a particular contact. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * The class stores the individual\u0027s timetable, as well as several methods to convert user\u0027s input into slots to be inserted into the timetable."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* **Minor Enhancement:** "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Added capabilities for meetings to be deleted and reflected onto user\u0027s timetable."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* **Contributions to documentation:**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Documented the ```modulelogic``` subcomponent in the ```logic``` component, as well as LogicManager responsible for managing all the subcomponents in logic component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Documented the```common``` components which holds various classes with static variables used in other components."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* **Contributions to the DG:**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Documented design section: ```2.2.1 Architecture 2.2.3```"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Documented design section: ```Logic component 2.2.6 Common component```"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Documented implementation section: ```3.3.1 Add a new contact```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Docuemented implementation section: ```3.3.2 List all contacts```"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* **Contributions to team-based tasks :**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Jointly released V1.0, V2.0 and V2.1 together with team mates, taking into account the must have features for each version."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Set up team organization and set up issues that needs to be solved for every milestone."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Set up shadowJar and related dependencies in gradle for the team."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Documented settings section: ```1. Setting Up``` of Developer Guide."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Documented Appendix A of Developer\u0027s guide: ```Appendix A: Product Scope```"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Documented Appendix B of Developer\u0027s guide: ```Appendix B: User Stories```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Documented Appendix C of Developer\u0027s guide: ```Appendix C: Use Cases```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Documented Appendix D of Developer\u0027s guide: ```Appendix D: Non-functional requirement```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Documented Appendix E of Developer\u0027s guide: ```Appendix E: Glossary```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\t* Documented Appendix F of Developer\u0027s guide: ```Appendix F: Instructions for Manual Testing```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Looked through all the issue feedback from PED dry run and fixed major issue that could cause our application to crash. Issues related to user guide are assigned to teammates respectively depending on their roles for this project."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Refactor code in WhenFree.java (application\u0027s main class) to be more compact."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* **Review/mentoring contributions:**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Provided help to team mates facing issues with gradle and checkStyle and how to resolve the errors caused by github CI tool. Ensuring that we abide by the rule of: \"Do not merge any pull requests that doesn\u0027t pass the continuous integration tool\", preventing errors from snowballing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Provided the skeleton code of the application to kick-start the project and for everyone to have something to work on."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Provided help to teammates that were unsure of the syntax to use when writing UML sequence diagram from [this website](https://sequencediagram.org/) and sharing my source code under ```/docs/UML source code```."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* **Contributions beyond the project team:**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Provided solutions to problems/difficulties other teams were facing and discover bugs that causes wrong repl submission. For eg: [repl bug](https://github.com/nus-cs2113-AY1920S2/forum/issues/6), [issue other team faced](https://github.com/nus-cs2113-AY1920S2/forum/issues/104)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    * Reported 6 bugs during PED by following a methodological approach of Expected Behaviour of application-Current behaviour of application-Steps to reproduce-Detail description of the bug-Possible solution to the bug."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* **Contributions to the Developer Guide (Extracts)**: "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003e :blush: Below are few of the examples of my contributions to the developer\u0027s guide."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "synCKun"
        },
        "content": "### 2.1. Architecture"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![Architecture Diagram](../images/architecture.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "synCKun"
        },
        "content": "The architecture diagram above shows an overview of the high-level design of WhenFree. Meeting Organizer"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "synCKun"
        },
        "content": "adopts an n-tier style architecture where higher layers make use of the services provided by the lower layers."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Here is a quick overview of each layer and the components residing in it."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* UI: The CLI user interface of the application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* Commons: A collection of classes containing constants such as messages for ```common.exception```, modules that can\u0027t be formatted, etc."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* Logic: The main control unit of the application which handles the business logic of the application."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* Model: Holds the data of the application in memory which is easily accessible by any methods that requires it."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "synCKun"
        },
        "content": "* Storage: Writes data from Model layer to hard disk, as well as reading previously saved data from hard disk and storing it into Model layer."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "synCKun"
        },
        "content": "### 2.3. Logic component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![Logic Component](../images/logiccomponent.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "synCKun"
        },
        "content": "The LogicManager is the brain and backbone of the logic component. It depends on 3 sub-components for it to work."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "synCKun"
        },
        "content": "First, ```command``` sub-component would be initialize to interpret the user commands. "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Afterwards, LogicManager instantiates```schedulelogic``` and ```modulelogic``` sub-components via ```CommandHandler``` to enable the generation of common time slots from NUSMODS links."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "synCKun"
        },
        "content": "LogicManager forms a whole-part relationship with the classes in the Model component, mainly ```ContactList``` and ```MeetingList``` where all the data generated from user commands would be stored. Besides, ```LogicManager``` also stores a ```mainUser:Contact``` containing the user\u0027s timetable"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "synCKun"
        },
        "content": "which is used to store scheduled meetings."
      }
    ],
    "authorContributionMap": {
      "synCKun": 85
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 logic.command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "@rem Get logic.command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "@rem Slurp the logic.command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "@rem Setup the logic.command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "-": 99,
      "MeLoveCarbs": 4
    }
  },
  {
    "path": "src/main/java/WhenFree.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import logic.LogicManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.WfException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.MeetingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.ContactList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import ui.TextUI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Main application containing an instance of LogicManager and storage component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class WhenFree {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final int RECESS_WEEK \u003d 14;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final int FREE_WEEK \u003d 15;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private LogicManager myLogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private int currentWeekNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public WhenFree() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        MeetingList myMeetingList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ContactList myContactList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Contact mainUser \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        getWeekNumber();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            storage \u003d new Storage(\"data/meeting_list.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myContactList \u003d new ContactList(storage.loadMemberListFromDisk());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            myMeetingList \u003d new MeetingList(storage.loadMeetingListFromDisk());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.introMsg();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (myContactList.getSize() \u003e 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                for (int i \u003d 0; i \u003c myContactList.getSize(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    if (myContactList.getContactList().get(i).isMainUser()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        mainUser \u003d myContactList.getContactList().get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                ArrayList\u003cContact\u003e contactList \u003d myContactList.getContactList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                // Shift mainUser to index 0"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                for (int j \u003d 0; j \u003c contactList.size(); j++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    if (contactList.get(j).isMainUser()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        Contact toSwap \u003d contactList.get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        contactList.set(0, contactList.get(j));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        contactList.set(j, toSwap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.introMsg();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.showLoadingError();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            myMeetingList \u003d new MeetingList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myContactList \u003d new ContactList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myLogicManager \u003d new LogicManager(myMeetingList, myContactList, mainUser);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        new WhenFree().run();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    void botResponse(String[] userInputWords, String prevUserInputWord, String[] prevUserInputWords)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        throws WfException, DateTimeParseException, NumberFormatException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String userCommand \u003d userInputWords[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (userInputWords.length \u003d\u003d 2 \u0026\u0026 userInputWords[1].contains(\"nusmods.com\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myLogicManager.addContact(userInputWords);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (myLogicManager.checkMainUserDoesNotExists()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                throw new WfException(\"Please enter main user first\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            switch (userCommand) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            case \"more\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myLogicManager.viewMoreTimetable(prevUserInputWord, prevUserInputWords, currentWeekNumber);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            case \"edit\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myLogicManager.editSchedule(userInputWords, currentWeekNumber);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            case \"contacts\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myLogicManager.listContacts();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            case \"timetable\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myLogicManager.viewTimetable(userInputWords, currentWeekNumber);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            case \"schedule\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myLogicManager.scheduleMeeting(userInputWords, currentWeekNumber);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myLogicManager.deleteMeeting(userInputWords, currentWeekNumber);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            case \"meetings\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myLogicManager.listMeetings(userInputWords);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                throw new WfException(\"Please follow the options in the menu.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * Main entry-point for the application."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String prevUserInputWord \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String[] prevUserInputWords \u003d new String[0];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        TextUI.menuMsg(myLogicManager.getMyContactList().getSize());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (userInput.toLowerCase().equals(\"exit\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            userInput \u003d userInput.replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String[] userInputWords \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                botResponse(userInputWords, prevUserInputWord, prevUserInputWords);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                storage.updateMeetingListToDisk(myLogicManager.getMyMeetingList().getMeetingList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                storage.updateMemberListToDisk(myLogicManager.getMyContactList().getContactList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                prevUserInputWord \u003d userInputWords[0];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                prevUserInputWords \u003d userInputWords;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            } catch (WfException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.errorMsg(e);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.timeOutOfRangeMsg();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.invalidNumberMsg();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.indexOutOfBoundsMsg();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                TextUI.menuMsg(myLogicManager.getMyContactList().getSize());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        TextUI.exitMsg();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private void getWeekNumber() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] tempTime \u003d java.util.Calendar.getInstance().getTime().toString().split(\" \"); //Format: Thu Mar 26 08:22:02 IST 2015"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String month \u003d tempTime[1];"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int date \u003d Integer.parseInt(tempTime[2]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //week starts on Sunday"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Jan\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (date \u003e\u003d 12 \u0026\u0026 date \u003c\u003d 18) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 19 \u0026\u0026 date \u003c\u003d 25) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 2;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 26) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 3;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Feb\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (date \u003c\u003d 1) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 3;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 2 \u0026\u0026 date \u003c\u003d 8) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 4;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 9 \u0026\u0026 date \u003c\u003d 15) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 5;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 16 \u0026\u0026 date \u003c\u003d 20) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 6;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 21) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d RECESS_WEEK;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Mar\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (date \u003e\u003d 1 \u0026\u0026 date \u003c\u003d 7) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 7;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 8 \u0026\u0026 date \u003c\u003d 14) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 8;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 15 \u0026\u0026 date \u003c\u003d 21) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 9;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 22 \u0026\u0026 date \u003c\u003d 28) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 10;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 29) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 11;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Apr\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (date \u003c\u003d 4) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 11;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 5 \u0026\u0026 date \u003c\u003d 11) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 12;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 12 \u0026\u0026 date \u003c\u003d 18) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 13;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 19) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d FREE_WEEK;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            currentWeekNumber \u003d FREE_WEEK;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "matthewc97": 5,
      "lowxizhi": 33,
      "synCKun": 86,
      "-": 4,
      "MeLoveCarbs": 74
    }
  },
  {
    "path": "src/main/java/common/BlacklistedModules.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import logic.modulelogic.ModuleHandler;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Contains all modules in AY19/20 with ill-formated JSON data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class BlacklistedModules {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final String[] arr \u003d {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ACC3704\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"AR1101\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"AR2101\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMA5505\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMA5801\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMA5902\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5003A\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5004A\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5004B\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5007A\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5008B\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5011B\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5012\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5012A\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5022\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5028\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5033\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BME5043\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BME5049\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BME5056A\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BME5056B\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMF5344\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMK6111R\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMM5101\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMM5105\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMS5900\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMU5003\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMU5006\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMU5008\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMU5014\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMU5017\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMU5018\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BSN3713\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE4257B\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5104A\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5106A\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5106B\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5107B\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5108A\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5113A\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5113B\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5509A\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5509B\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5603A\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5603B\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5610B\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5611B\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5806A\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5883A\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CM1417X\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN1111E\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN2116E\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN2125E\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN3124E\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN4227E\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN4233E\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN4240E\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN4242E\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CS1010X\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"DEP5111\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"DL5103\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"DL5201\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5001\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5002\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5102\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5103\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5104\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5201\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5203\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5204\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5205\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5206\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5207\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5208\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EBA5001\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EBA5002\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EBA5003\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EBA5004\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EBA5005\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EBA5006\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EE3331E\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EE5020\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EE5022\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EE5024\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EE5026\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EE5027\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EG3301R\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ESE5202A\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ESE5202B\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ESE5402A\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ESE5901A\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ESE5901B\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"FIN6003\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"GMS1000\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"GMS6810\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"GMS6812\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"GMS6850\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"GMS6904\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"GMS6951\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IE2110E\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IE4259E\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5101\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5102\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5103\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5104\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5105\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5106\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5202\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5203\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5204\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ISY5001\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ISY5002\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ISY5003\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ISY5004\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ISY5005\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IT5001\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IT5003\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IT5004\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5006\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5106\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5107\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5108\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5205\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5206\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5207\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5208\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LCC5365\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LCC5366\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL4358Z\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL4359Z\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL4360Z\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL4361Z\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL5358Z\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL5359Z\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL5360Z\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL5361Z\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL6358Z\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL6359Z\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL6360Z\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL6361Z\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LSM3211\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MA1301X\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA1115\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA1153\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA2153\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA2154\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA2201\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA3153\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA3154\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA3163\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA3216\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA3228\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA4113\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA4153\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA4154\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR1114A\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR1117\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR2120\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR2122\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR2202C\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR3113\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR3114\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR3117\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR3118\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR3202C\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR3203C\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5203A\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5203B\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5204A\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5206A\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5902\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5905\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5906\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5908\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5911\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5912\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"PP5701\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"PP5702\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"PP5705\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"PP5722\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"PP5723\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"PP6702\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"RE5001\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SA4101\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SA4102\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SA4104\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SA4105\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SA4106\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SA4108\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG4205\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG4207\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG4210\","
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5013\","
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5015\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5016\","
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5017\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5018\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5101\","
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5102\","
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5103\","
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5208\","
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5214\","
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5225\","
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5233\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5234\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5235\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5238\","
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SP2201\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SPH5311\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SPH5410\","
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SPH5411\","
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SPH6003\","
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ST1232\","
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ST5241A\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SWE5001\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SWE5002\","
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SWE5003\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SWE5004\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SWE5005\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TBA3102\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TC1411\","
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TC1422\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN1111\","
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN1411\","
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN1422\","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN2116\","
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN2125\","
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN3124\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN4227\","
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN4233\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN4240\","
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN4242\","
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TE2101\","
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TEE2101\","
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TEE3331\","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TIE2110\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TIE4259\","
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TSC3222\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    };"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final HashSet\u003cString\u003e blacklistModule \u003d new HashSet\u003c\u003e(Arrays.asList(arr));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Run this to retrieve all the modules that doesn\u0027t follow the conventional format and"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * store it into /UnformattedModules file and"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * update the static final HashSet blacklistModule accordingly."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"UnformattedModules\", true);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        URL url \u003d new URL(\"https://api.nusmods.com/v2/2019-2020/moduleList.json\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        HttpURLConnection request \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        request.connect();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //Convert the input stream to a json element"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        JsonElement root \u003d JsonParser.parseReader(new InputStreamReader((InputStream) request.getContent()));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        JsonArray rootObj \u003d root.getAsJsonArray();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int i \u003d 0; i \u003c rootObj.size(); i++) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonObject module \u003d rootObj.get(i).getAsJsonObject();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String moduleCode \u003d module.get(\"moduleCode\").toString().replaceAll(\"^.|.$\", \"\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                ModuleHandler myModuleHandler \u003d new ModuleHandler(moduleCode);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myModuleHandler.generateModule();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                fw.write(moduleCode + \"\\n\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 292
    }
  },
  {
    "path": "src/main/java/common/LessonType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "synCKun"
        },
        "content": " * Maps the lessonType full name into its coded form to used by NUSMODS link."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Referenced from https://github.com/raynoldng/nusmods-planner/blob/master/nusmodsplanner/definitions.py"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class LessonType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final HashMap\u003cString, String\u003e lessonType \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        lessonType.put(\"Packaged Lecture\", \"PLEC\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        lessonType.put(\"Packaged Tutorial\", \"PTUT\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        lessonType.put(\"Design Lecture\", \"DLEC\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        lessonType.put(\"Laboratory\", \"LAB\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        lessonType.put(\"Lecture\", \"LEC\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        lessonType.put(\"Recitation\", \"REC\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        lessonType.put(\"Sectional Teaching\", \"SEC\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        lessonType.put(\"Seminar-style Module Class\", \"SEM\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        lessonType.put(\"Tutorial\", \"TUT\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        lessonType.put(\"Tutorial Type 2\", \"TUT2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 1,
      "MeLoveCarbs": 23
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Contains all the messages when exception is thrown."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String FORMAT_TIMETABLE \u003d \"To display timetable:\\n\\ttimetable \\n\\ttimetable \u003cMember Number 1\u003e\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            + \"\\n\\ttimetable \u003cMember Number 1\u003e \u003cMember Number 2\u003e\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_STARTENDTIME_OUT_OF_RANGE \u003d \"Start and end time must be in HH:MM format in the \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            + \"range 00:00-23:30.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_STARTENDTIME_WRONG_FORMAT \u003d \"Start and end time must be in 30 minutes interval.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_STARTENDDAY_OUT_OF_RANGE \u003d \"Start and end day must be within this week and next week.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final String MESSAGE_WEEK_RANGE_EMPTY \u003d \"Class does not have lessons.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_INVALID_MEETING \u003d \"Range entered is not within free slots. Check timetable.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_INVALID_EDIT \u003d \"You cannot edit your timetable over a scheduled meeting. Check meetings.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_INVALID_SLOT_RANGE \u003d \"Slot entered is not of valid range.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_INVALID_NUMBER \u003d \"You have entered an invalid number.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_INVALID_NUSMODLINK \u003d \"You have entered an invalid nusmods link.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_BROKEN_NUSMODLINK \u003d \"You have entered a broken nusmods link.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_MODULECODE_IN_BLACKLIST \u003d \" module information unable to be captured from API, \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            + \"please key it in manually using [edit] command.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_EMPTY_MODULE \u003d \"Module either can\u0027t be fetched from NUSMOD API or has been deprecated \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            + \"from NUS.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final String MESSAGE_RETURN_SUCCESS \u003d \"SUCCESS\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final String MESSAGE_INDEX_OUT_OF_BOUNDS \u003d \"Index you entered cannot be found.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final String MESSAGE_WRONG_COMMAND_SCHEDULE \u003d \"Follow format for schedule command:\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final String MESSAGE_WRONG_COMMAND_DELETE \u003d \"Follow format for delete command:\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final String MESSAGE_WRONG_COMMAND_MEETING \u003d \"Follow format for meeting command:\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final String MESSAGE_WRONG_DATE \u003d \"Cannot schedule meeting before today.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 17,
      "synCKun": 2,
      "MeLoveCarbs": 12
    }
  },
  {
    "path": "src/main/java/common/exception/InvalidUrlException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package common.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Exception is thrown when invalid nusmods link is provided."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class InvalidUrlException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public InvalidUrlException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 11
    }
  },
  {
    "path": "src/main/java/common/exception/UnformattedModuleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package common.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Exception is thrown whenever a particular module a student is taking"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * doesn\u0027t follow the conventional JSON format pulled from nusmods API."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class UnformattedModuleException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public UnformattedModuleException(String s) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 12
    }
  },
  {
    "path": "src/main/java/common/exception/WfException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package common.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Exception is thrown whenever user types in unauthorized commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class WfException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public WfException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 11
    }
  },
  {
    "path": "src/main/java/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_WRONG_COMMAND_DELETE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.InvalidUrlException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.WfException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import logic.command.CommandHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.ContactList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.MeetingList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import ui.TextUI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Contains the logic required for each command and is the only class exposed to the model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class LogicManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private MeetingList myMeetingList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ContactList myContactList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private Contact mainUser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public LogicManager(MeetingList myMeetingList, ContactList myContactList, Contact mainUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.mainUser \u003d mainUser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (myContactList \u003d\u003d null || myMeetingList \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.myMeetingList \u003d new MeetingList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.myContactList \u003d new ContactList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.myMeetingList \u003d myMeetingList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.myContactList \u003d myContactList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Adds a new contact and save it into model component."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param userInputWords User input containing name and nusmods URL (space separated)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void addContact(String[] userInputWords) throws WfException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Contact newMember;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            newMember \u003d CommandHandler.addContact(myContactList, userInputWords, null, null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (checkMainUserDoesNotExists()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                mainUser \u003d newMember;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                newMember.setMainUser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myContactList.add(newMember);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (InvalidUrlException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * View the timetable of selected team members."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param userInputWords User input containing the index of selected team members (space separated)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param currentWeekNumber Assigned to 0 to view only 1 week\u0027s worth of timetable."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void viewTimetable(String[] userInputWords, int currentWeekNumber) throws WfException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int weeksMoreToView \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        CommandHandler.displayTimetable(userInputWords, getMainUser(), getMyContactList(), currentWeekNumber, weeksMoreToView);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * View additional timetable from next week as well. This function must follow viewTimetable() command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param prevUserInputWord Previous command of user. Function executes only is previous command is \"timetable\"."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param userInputWords Selected team members, automatically acquire the selected team members from previous input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param currentWeekNumber Assigned to 1 to view 2 week\u0027s worth of timetable."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @throws WfException Thrown if previous command isn\u0027t \"timetable\"."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void viewMoreTimetable(String prevUserInputWord, String[] userInputWords, int currentWeekNumber) throws WfException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (prevUserInputWord.equals(\"\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new WfException(\"Nothing to see more of.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } else if (prevUserInputWord.contains(\"timetable\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            int weeksMoreToView \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            CommandHandler.displayTimetable(userInputWords, getMainUser(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                getMyContactList(), currentWeekNumber, weeksMoreToView);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } else if (prevUserInputWord.equals(\"more\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new WfException(\"No more :o\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new WfException(\"more does not work with this command.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Schedule a meeting and save it into model component."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param userInputWords Contains the start/end day, start/end time and meeting name of the meeting."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param currentWeekNumber Option to schedule this week\u0027s or next week\u0027s timetable."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void scheduleMeeting(String[] userInputWords, int currentWeekNumber) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        CommandHandler.scheduleMeeting(userInputWords, getMyMeetingList(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            getMainUser(), getMyContactList(), currentWeekNumber);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Delete meeting and update model component."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param userInputWords Index of the meeting to delete."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void deleteMeeting(String[] userInputWords, int currentWeekNumber) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (userInputWords.length !\u003d 2) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                throw new WfException(MESSAGE_WRONG_COMMAND_DELETE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            CommandHandler.deleteMeeting(userInputWords, getMyMeetingList(), getMainUser(), getMyContactList(), currentWeekNumber);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myContactList.remove(userInputWords[1]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (WfException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            TextUI.printFormatDeleteMember();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            TextUI.printFormatDeleteMeeting();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void listMeetings(String[] userInputWords) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        CommandHandler.listMeetings(userInputWords, getMyMeetingList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void editSchedule(String[] userInputWords, int currentWeekNumber) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        CommandHandler.editContact(userInputWords, getMainUser(), getMyContactList(), currentWeekNumber);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void listContacts() throws WfException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        CommandHandler.listContacts(getMyContactList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public Contact getMainUser() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.mainUser;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ContactList getMyContactList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.myContactList;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public MeetingList getMyMeetingList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.myMeetingList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public Boolean checkMainUserDoesNotExists() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return (myContactList.getSize() \u003d\u003d 0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 142
    }
  },
  {
    "path": "src/main/java/logic/command/CommandHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.InvalidUrlException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.MeetingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.WfException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import logic.modulelogic.LessonsGenerator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import logic.schedulelogic.ScheduleHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.ContactList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import ui.TextUI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_WRONG_COMMAND_MEETING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_WRONG_COMMAND_SCHEDULE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import static common.Messages.MESSAGE_WRONG_DATE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_SLOT_RANGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "public class CommandHandler {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static Contact addContact(ContactList myContactList, String[] userInputWords,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                                     Integer startDay, Integer endDay) throws WfException, InvalidUrlException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int checkerForRepeatedName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        checkerForRepeatedName \u003d myContactList.getContactList().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            .mapToInt(person -\u003e check(person, userInputWords[0])).sum();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (checkerForRepeatedName \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            TextUI.showRepeatedPerson(userInputWords[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new WfException(\"Repeated user\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (userInputWords[0].length() \u003e\u003d 260) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new WfException(\"Maximum characters for a given name is 260\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Contact member;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        member \u003d new Contact(userInputWords[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String name \u003d userInputWords[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String url \u003d userInputWords[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (name.matches(\"[0-9]+\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new WfException(\"Name must contain letters.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        LessonsGenerator myLessonGenerator;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        myLessonGenerator \u003d new LessonsGenerator(url);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myLessonGenerator.generate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString[]\u003e myLessonDetails \u003d myLessonGenerator.getLessonDetails();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String[] myLessonDetail : myLessonDetails) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String startTimeString \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String endTimeString \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String[] weeks \u003d new String[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int j \u003d 0; j \u003c myLessonDetail.length; j++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                switch (j) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                case 0:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    startTimeString \u003d myLessonDetail[j].substring(0, 2) + \":\" + myLessonDetail[j].substring(2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    endTimeString \u003d myLessonDetail[j].substring(0, 2) + \":\" + myLessonDetail[j].substring(2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    startDay \u003d getNumberFromDay(myLessonDetail[j]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    endDay \u003d startDay;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                case 3:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    weeks \u003d myLessonDetail[j].split(\":\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    //data only has four sections from api"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    throw new AssertionError(j);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            member.addBusyBlocks(name, startDay, startTimeString, endDay, endTimeString, weeks);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        TextUI.showAddedMember(member.getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return member;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void editContact(String[] userInputWords, Contact mainUser, ContactList contactList,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                                   int currentWeekNumber) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (userInputWords.length !\u003d 7) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                throw new WfException(MESSAGE_WRONG_COMMAND_SCHEDULE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int endOfMonthDate \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            endOfMonthDate \u003d getEndOfMonthDate(endOfMonthDate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Integer startDay;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Integer endDay;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Integer today;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int startDate \u003d Integer.parseInt(userInputWords[3]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int endDate \u003d Integer.parseInt(userInputWords[5]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int startOfWeekDate \u003d getStartOfWeekDate();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int todayDate \u003d Integer.parseInt(java.util.Calendar.getInstance().getTime().toString().split(\" \")[2]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            startDay \u003d getDay(endOfMonthDate, startOfWeekDate, startDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            endDay \u003d getDay(endOfMonthDate, startOfWeekDate, endDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            today \u003d getDay(endOfMonthDate, startOfWeekDate, todayDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (endDay \u003c startDay) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new WfException(MESSAGE_INVALID_SLOT_RANGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (endDay \u003c today || startDay \u003c today) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new WfException(MESSAGE_INVALID_SLOT_RANGE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int memberIndex \u003d Integer.parseInt(userInputWords[2]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Contact member \u003d contactList.getContactList().get(memberIndex);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String memberName \u003d member.getName();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(userInputWords[4]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(userInputWords[6]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String startTimeString \u003d userInputWords[4];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String endTimeString \u003d userInputWords[6];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String[] thisWeekNumber \u003d {Integer.toString(currentWeekNumber)};"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (memberIndex !\u003d 0 || mainUser.isValidEdit(startDay, startTime, endDay, endTime, currentWeekNumber)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (userInputWords[1].equals(\"busy\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    member.addBusyBlocks(memberName, startDay, startTimeString, endDay, endTimeString,thisWeekNumber);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                } else if (userInputWords[1].equals(\"free\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    member.addFreeBlocks(startDay, startTimeString, endDay, endTimeString,thisWeekNumber);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.showContactEdited(member.getName(),userInputWords[2]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new AssertionError(\"isValidEdit() should not return false\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (WfException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatEdit();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.timeOutOfRangeMsg();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatEdit();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.invalidNumberMsg();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatEdit();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static Integer getNumberFromDay(String day) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int dayInNumber;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Monday\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Tuesday\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 2;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Wednesday\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 3;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Thursday\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 4;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Friday\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 5;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Saturday\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 6;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Sunday\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d Integer.parseInt(null);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return dayInNumber;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static int check(Contact person, String name) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (person.getName().equals(name)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void listMeetings(String[] userInputWords, MeetingList meetingList) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            if (userInputWords.length !\u003d 1) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                throw new WfException(MESSAGE_WRONG_COMMAND_MEETING);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            meetingList.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (WfException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            TextUI.printFormatMeeting();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void deleteMeeting(String[] userInputWords, MeetingList meetingList, Contact mainUser,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                                     ContactList myContactList, int currentWeekNumber) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int index \u003d Integer.parseInt(userInputWords[1]) - 1;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Meeting meetingToDelete \u003d meetingList.getMeetingList().get(index);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String startTimeString \u003d meetingToDelete.getStartTime().format(formatter);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String endTimeString \u003d meetingToDelete.getEndTime().format(formatter);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            int startDay \u003d meetingToDelete.getStartDay();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            int endDay \u003d meetingToDelete.getEndDay();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String[] thisWeekNumber \u003d {Integer.toString(currentWeekNumber)};"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            mainUser.addFreeBlocks(startDay, startTimeString, endDay, endTimeString, thisWeekNumber);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            meetingList.delete(index);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myContactList.set(0, mainUser);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (IndexOutOfBoundsException | WfException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.displayInvalidDeleteTarget();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void scheduleMeeting(String[] userInputWords, MeetingList meetingList, Contact mainUser,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                       ContactList contactList, int currentWeekNumber) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            int dayDiff \u003d Integer.parseInt(java.util.Calendar.getInstance().getTime().toString().split(\" \")[2])"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    - Integer.parseInt(userInputWords[2]);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (dayDiff \u003e 0 \u0026\u0026 dayDiff \u003c 14) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                throw new WfException(MESSAGE_WRONG_DATE);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (userInputWords.length \u003c 6) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                throw new WfException(MESSAGE_WRONG_COMMAND_SCHEDULE);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            int endOfMonthDate \u003d 0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            endOfMonthDate \u003d getEndOfMonthDate(endOfMonthDate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            int startOfWeekDate \u003d getStartOfWeekDate();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (userInputWords[1].length() \u003e\u003d 260) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                throw new WfException(\"Maximum characters for meeting name is 260\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String meetingName \u003d userInputWords[1];"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            int startDate \u003d Integer.parseInt(userInputWords[2]);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            int endDate \u003d Integer.parseInt(userInputWords[4]);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int todayDate \u003d Integer.parseInt(java.util.Calendar.getInstance().getTime().toString().split(\" \")[2]);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Integer startDay;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Integer endDay;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Integer  today;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            startDay \u003d getDay(endOfMonthDate, startOfWeekDate, startDate);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            endDay \u003d getDay(endOfMonthDate, startOfWeekDate, endDate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            today \u003d getDay(endOfMonthDate, startOfWeekDate, todayDate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (endDay \u003c startDay) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new WfException(MESSAGE_INVALID_SLOT_RANGE);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (endDay \u003c today || startDay \u003c today) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new WfException(MESSAGE_INVALID_SLOT_RANGE);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(userInputWords[3]);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(userInputWords[5]);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (mainUser.isValidMeeting(startDay, startTime, endDay, endTime, currentWeekNumber)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                Meeting myMeeting \u003d new Meeting(meetingName, startDay, startTime, endDay, endTime, startDate, endDate);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                meetingList.add(myMeeting);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                String[] thisWeekNumber \u003d {Integer.toString(currentWeekNumber)};"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                mainUser.addBusyBlocks(\"meeting\", startDay, userInputWords[3], endDay, userInputWords[5], thisWeekNumber);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.meetingListSizeMsg(meetingList);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                System.out.println(\"Schedule is blocked at that timeslot\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (WfException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatSchedule();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.timeOutOfRangeMsg();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatSchedule();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.invalidNumberMsg();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatSchedule();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        // Replace main user\u0027s timetable with updated model.meeting blocks into TeamMember.TeamMemberList for model.storage purposes."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        contactList.set(0, mainUser);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private static Integer getDay(int endOfMonthDate, int startOfWeekDate, int startDate) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Integer day;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        if (startDate - startOfWeekDate \u003c 0) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            day \u003d endOfMonthDate - startOfWeekDate + startDate;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            day \u003d startDate - startOfWeekDate;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static int getEndOfMonthDate(int endOfMonthDate) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String day \u003d (cal.getTime().toString().split(\" \"))[0];"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String month \u003d (cal.getTime().toString().split(\" \"))[1];"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int distFromPreviousSunday \u003d 0;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 6 \u0026\u0026 !day.equals(\"Sun\"); distFromPreviousSunday++, i++) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (!(cal.getTime().toString().split(\" \"))[1].equals(month)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                endOfMonthDate \u003d Integer.parseInt(cal.getTime().toString().split(\" \")[2]);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d (cal.getTime().toString().split(\" \"))[0];"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Calendar cal2 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c (14 - distFromPreviousSunday); i++) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (!(cal2.getTime().toString().split(\" \"))[1].equals(month)) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            endOfMonthDate \u003d Integer.parseInt(cal2.getTime().toString().split(\" \")[2]);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal2.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return endOfMonthDate;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static int getDateOfPreviousSunday(String[] data) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int date;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        switch (data[0]) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sun\":"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date \u003d Integer.parseInt(data[2]);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Mon\":"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Tue\":"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -2);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Wed\":"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -3);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Thu\":"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -4);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Fri\":"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -5);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sat\":"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -6);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, 0);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] temp \u003d cal.getTime().toString().split(\" \");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        date \u003d Integer.parseInt(temp[2]);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static int getStartOfWeekDate() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] data \u003d java.util.Calendar.getInstance().getTime().toString().split(\" \");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String day \u003d data[0];"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int date \u003d Integer.parseInt(data[2]);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Mon\":"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date -\u003d 1;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Tue\":"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date -\u003d 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Wed\":"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date -\u003d 3;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Thu\":"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date -\u003d 4;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Fri\":"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date -\u003d 5;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sat\":"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date -\u003d 6;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sun\":"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date \u003d date;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date \u003d date;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayTimetable(String[] userInputWords, Contact mainUser,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                                        ContactList contactList, int weekNumber, int weeksMoreToView) throws WfException {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int memberIndex;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Contact member;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String todayDate \u003d java.util.Calendar.getInstance().getTime().toString().substring(0, 10).trim();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (userInputWords.length \u003e 1) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                ArrayList\u003cContact\u003e myScheduleList \u003d new ArrayList\u003cContact\u003e();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int i \u003d 1; i \u003c userInputWords.length; i++) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    memberIndex \u003d Integer.parseInt(userInputWords[i]);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    member \u003d contactList.getContactList().get(memberIndex);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    myScheduleList.add(member);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                ScheduleHandler myScheduleHandler \u003d new ScheduleHandler(myScheduleList);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                Boolean[][][] myCombinedSchedule;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                myCombinedSchedule \u003d myScheduleHandler.getCombinedSchedule();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println(\"Today is \" + todayDate + \", week \" + weekNumber + \".\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println(\"Timetable of the selected team member/s this week:\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.printTimetable(myCombinedSchedule, weeksMoreToView, weekNumber);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println(\"Today is \" + todayDate + \", week \" + weekNumber + \".\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println(\"Your timetable this week:\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                TextUI.printTimetable(mainUser.getSchedule(), weeksMoreToView, weekNumber);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.indexOutOfBoundsMsg();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatTimetable();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.invalidNumberMsg();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatTimetable();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void listContacts(ContactList contactList) throws WfException {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            TextUI.teamMemberListMsg(contactList.getContactList());"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new WfException(\"You have no stored contacts.\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 8,
      "lowxizhi": 156,
      "synCKun": 130,
      "MeLoveCarbs": 132
    }
  },
  {
    "path": "src/main/java/logic/modulelogic/LessonsGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.common.collect.ArrayListMultimap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.common.collect.Multimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.LessonType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.InvalidUrlException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.WfException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.UnformattedModuleException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * This class retrieves information from both TimetableParser and ModuleHandler classes to generate a data structure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * containing all the modules a user is taking and is to be used by the logic.schedulelogic component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * The data structure used is an ArrayList of String[] called myLessonDetails and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * it contains an ArrayList of lessons in the form: startTime, endTime, day, weeks(delimited by \u0027:\u0027)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class LessonsGenerator {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private TimetableParser myTimetableParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cString[]\u003e myLessonsDetails;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public LessonsGenerator(String nusmodsLink) throws InvalidUrlException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.myTimetableParser \u003d new TimetableParser(nusmodsLink);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.myLessonsDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    //static main method for easy in-class behaviour testing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void main(String[] args) throws InvalidUrlException, WfException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //observe behaviour by substituting field in BackendAPI.LessonsGenerator() with other NUSMODS link"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        LessonsGenerator mylesson \u003d new LessonsGenerator(\"https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:03,PTUT:03\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:09,LEC:1\u0026CS2113T\u003dLEC:C01\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        mylesson.generate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString[]\u003e myLessonDetails \u003d mylesson.getLessonDetails();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int i \u003d 0; i \u003c myLessonDetails.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int j \u003d 0; j \u003c myLessonDetails.get(i).length; j++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                System.out.print(myLessonDetails.get(i)[j] + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Generates user\u0027s blocked time-slots based on his/her Nusmods timetable."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public String generate() throws WfException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        message \u003d myTimetableParser.parse();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (!message.equals(MESSAGE_RETURN_SUCCESS)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new WfException(message);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //Key-value pair: Key \u003d module code, Value \u003d LessonType:Class number(delimited by :)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map\u003cString, ArrayList\u003cString\u003e\u003e userLessons \u003d myTimetableParser.getModulesMap();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e userModules \u003d myTimetableParser.getModulesArr();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        // Zero based indexing: Semester 1 \u003d 0, Semester 2 \u003d 1"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Integer semester \u003d Integer.parseInt(myTimetableParser.getSemester()) - 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String module : userModules) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ModuleHandler myModuleHandler \u003d new ModuleHandler(module);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            message \u003d myModuleHandler.generateModule();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (!message.equals(MESSAGE_RETURN_SUCCESS)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                return message;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            // The index of the following ArrayList matches - classNumber[0] and lessonType[0] is the same lesson,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            // and it\u0027s startTime, endTime \u003d startTime[0], endTime[0]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e classNumber \u003d myModuleHandler.getClassNumber().get(semester);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e lessonType \u003d myModuleHandler.getLessonType().get(semester);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e startTime \u003d myModuleHandler.getStartTime().get(semester);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e endTime \u003d myModuleHandler.getEndTime().get(semester);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e day \u003d myModuleHandler.getDay().get(semester);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cArrayList\u003cString\u003e\u003e weeks \u003d myModuleHandler.getWeeks().get(semester);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e delimitedWeeks \u003d delimitWeeks(weeks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            Multimap\u003cString, String[]\u003e allLessonMap \u003d ArrayListMultimap.create();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int i \u003d 0; i \u003c classNumber.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                String lessonTypeLongFormat \u003d lessonType.get(i);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                String lessonTypeShortFormat \u003d LessonType.lessonType.get(lessonTypeLongFormat);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                allLessonMap.put(lessonTypeShortFormat + \":\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        + classNumber.get(i), new String[]{startTime.get(i), endTime.get(i), day.get(i), delimitedWeeks.get(i)});"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e userModuleProfile \u003d userLessons.get(module);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            lessonsChecker(allLessonMap, userModuleProfile);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Checks if \"lessonType:classNo\" from userModuleProfile matches Multimap\u0027s key. If it does,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * add the matched value pair containing an array(size 4) of startTime, endTime, day and weeks into mylessonsDetails."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param allLessonMap      All lesson information where Key equals \"lessonType:classNo\"."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param userModuleProfile ArrayList of \"lessonType:classNo\" that user has taken for a particular module,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *                          used to do key matching."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private void lessonsChecker(Multimap\u003cString, String[]\u003e allLessonMap, ArrayList\u003cString\u003e userModuleProfile) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String s : userModuleProfile) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (allLessonMap.containsKey(s)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                Collection\u003cString[]\u003e values \u003d allLessonMap.get(s);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myLessonsDetails.addAll(values);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Refactor \"weeks\" data structure into 1 single ArrayList, originally a 2D ArrayList."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param weeks 2D ArrayList weeks: For eg, weeks.get(0) \u003d weeks at classNo 0 \u003d array of [1, 2, 3, 6, 13]."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @return Delimited weeks indexed by each lessons,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *         For eg, weeks.get(0) is now a String \u003d \"1:2:3:6:13\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cString\u003e delimitWeeks(ArrayList\u003cArrayList\u003cString\u003e\u003e weeks) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e delimitedWeeks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (ArrayList\u003cString\u003e elemArr : weeks) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String delimitedString \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int i \u003d 0; i \u003c elemArr.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                delimitedString \u003d delimitedString + elemArr.get(i) + \":\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            delimitedString +\u003d elemArr.get(elemArr.size() - 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            delimitedWeeks.add(delimitedString);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return delimitedWeeks;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cString[]\u003e getLessonDetails() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.myLessonsDetails;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 4,
      "MeLoveCarbs": 128
    }
  },
  {
    "path": "src/main/java/logic/modulelogic/ModuleApiParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Handles the HTTP requests from NUSMOD API server."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "synCKun"
        },
        "content": " * Data grabbed from NUSMODS API: https://api.nusmods.com/v2/2019-2020/modules/MODULECODE.json"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ModuleApiParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    String apiUrl;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ModuleApiParser(String moduleName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String templateUrl \u003d \"https://api.nusmods.com/v2/2019-2020/modules/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        apiUrl \u003d templateUrl + moduleName + \".json\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /** Parses weblink into JsonArray."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @return 1 NUS module in JSONArray format from API,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *         if unable to access API, returns an empty JsonArray."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public JsonArray parse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            URL url \u003d new URL(apiUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            HttpURLConnection request \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            request.connect();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            //Convert the input stream to a json element"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonElement root \u003d JsonParser.parseReader(new InputStreamReader((InputStream) request.getContent()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonObject rootObj \u003d root.getAsJsonObject();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            assert rootObj !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return (JsonArray) rootObj.get(\"semesterData\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return new JsonArray();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 1,
      "MeLoveCarbs": 44
    }
  },
  {
    "path": "src/main/java/logic/modulelogic/ModuleHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.UnformattedModuleException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.BlacklistedModules.blacklistModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_MODULECODE_IN_BLACKLIST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_EMPTY_MODULE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Contains private members storing the module information."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * The class members are an ArrayList of size 2(two sem) of ArrayList except member \"weeks\"."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Semester 1                       : Semester 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * ArrayList of available classes   : ArrayList of available classes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Index of the private members matches one another."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * For eg, classNumber.get(semester).get(0) belongs to lessonType.get(semester).get(0)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * held on day.get(semester).get(0) at startTime.get(semester).get(0) and endTime.get(semester).get(0)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * \"weeks\" is an ArrayList of size 2(two sem) of a 2d ArrayList:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * For eg, week[0].get(2) \u003d [1, 3, 4, 5], this means"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * semester 1, classNo:2 has lessons in week 1, 3, 4, 5."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ModuleHandler {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    JsonArray semesterData;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e classNumber; // can be repeated."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e endTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e lessonType; // tutorial, lecture etc"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e day; // one day per classNumber"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e weeks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private String moduleName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private Set\u003cString\u003e unformattedModules;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ModuleHandler(String moduleName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.classNumber \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.startTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.endTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.lessonType \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.weeks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.day \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int i \u003d 0; i \u003c 2; i++) { // number of semesters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.classNumber.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.startTime.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.endTime.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.lessonType.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.day.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.weeks.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.unformattedModules \u003d blacklistModule;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Format the JsonArray object returned from ModuleApiParser.parse into easy to use data structure."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public String generateModule() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ModuleApiParser myModuleApiParser \u003d new ModuleApiParser(moduleName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        semesterData \u003d myModuleApiParser.parse();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (semesterData.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            //TODO SET UP FAKE DATA HERE IF UNABLE TO ACCESS API"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return MESSAGE_EMPTY_MODULE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assert semesterData !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            checkModuleFormat();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (UnformattedModuleException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(this.moduleName + MESSAGE_MODULECODE_IN_BLACKLIST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return MESSAGE_MODULECODE_IN_BLACKLIST;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int i \u003d 0; i \u003c semesterData.size(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonObject semesterDataObj \u003d semesterData.get(i).getAsJsonObject();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            // get semester number from json"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            Integer semester \u003d Integer.parseInt(semesterDataObj.get(\"semester\").toString()) - 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (!(semester \u003d\u003d 0 || semester \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonArray timetable \u003d (JsonArray) semesterDataObj.get(\"timetable\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int k \u003d 0; k \u003c timetable.size(); k++) { // For each classes in a module."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                JsonObject lesson \u003d timetable.get(k).getAsJsonObject();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                moduleInfoAdder(semester, lesson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Generates a 2d ArrayList of String module information data structure as follows:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * classNumber, lessonType, startTime, endTime, day, weeks."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * To be used within the loop of generateModules()."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private void moduleInfoAdder(Integer semester, JsonObject lesson) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        // replaceAll() trims the quotes left behind by json parsing via regex"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.classNumber.get(semester).add(lesson.get(\"classNo\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.lessonType.get(semester).add(lesson.get(\"lessonType\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.startTime.get(semester).add(lesson.get(\"startTime\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.endTime.get(semester).add(lesson.get(\"endTime\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.day.get(semester).add(lesson.get(\"day\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        JsonArray weeksJsonArray \u003d (JsonArray) lesson.get(\"weeks\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e weeksData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int j \u003d 0; j \u003c weeksJsonArray.size(); j++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            weeksData.add(weeksJsonArray.get(j).toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.weeks.get(semester).add(weeksData);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /** Checks if module is within the blacklisted UnformattedModules file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @throws UnformattedModuleException Throws error if user\u0027s module is within the file UnformattedModules,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *                                    which contains all modules which can\u0027t be parsed due to ill-formatting by NUSMOD API side."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *                                    method to update the list of modules in UnformattedModules is in static main()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private void checkModuleFormat() throws UnformattedModuleException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (unformattedModules.contains(moduleName)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new UnformattedModuleException(\"OH NO! \" + moduleName + \"\u0027s format parsed from NUSMOD API is out-dated.\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    + \" Please remove it from your timetable and manually add the time-slots.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getClassNumber() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.classNumber;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getStartTime() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getEndTime() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getLessonType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.lessonType;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getDay() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.day;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e getWeeks() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.weeks;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 149
    }
  },
  {
    "path": "src/main/java/logic/modulelogic/TimetableParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_BROKEN_NUSMODLINK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_NUSMODLINK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.InvalidUrlException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * This class contains essential methods to filter out the modules and the timeslots the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * is taking from the NUSMOD link."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class TimetableParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    String nusmodsLink;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    String semester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Map\u003cString, ArrayList\u003cString\u003e\u003e modulesMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    ArrayList\u003cString\u003e modulesArr;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public TimetableParser(String nusmodsLink) throws InvalidUrlException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.nusmodsLink \u003d nusmodsLink;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (!this.nusmodsLink.matches(\"https://nusmods\\\\.com/timetable/sem-./share\\\\?.*\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new InvalidUrlException(MESSAGE_INVALID_NUSMODLINK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.modulesArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    //static main() method for easy in-class behaviour testing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void main(String[] args) throws InvalidUrlException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //observe behaviour by substituting field in BackendAPI.LessonsGenerator() with other NUSMODS link"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        TimetableParser myTimetableParser \u003d new TimetableParser(\"https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:03,PTUT:03\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:09,LEC:1\u0026CS2113T\u003dLEC:C01\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myTimetableParser.parse();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        System.out.println(myTimetableParser.getSemester());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        System.out.println(myTimetableParser.getModulesArr());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        System.out.println(myTimetableParser.getModulesMap());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public String parse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            assert nusmodsLink.contains(\"share?\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            int strippedIndex \u003d this.nusmodsLink.indexOf(\"share?\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String unparsedSemester \u003d this.nusmodsLink.substring(0, strippedIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String unparsedModules \u003d this.nusmodsLink.substring(strippedIndex + 6);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            assert nusmodsLink.contains(\"sem-1\") || nusmodsLink.contains(\"sem-2\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (unparsedSemester.contains(\"1\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                this.semester \u003d \"1\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                this.semester \u003d \"2\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.modulesMap \u003d parseModules(unparsedModules);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return MESSAGE_BROKEN_NUSMODLINK;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Filter the time-slots and module from weblink and returns a hashMap data structure,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * and stores modules user is taking(modulesArr) to be used by LessonGenerator class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @param unparsedModules Raw website link with module information."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @return Returns Key-value pair. Key \u003d \"moduleCode\"-Value \u003d ArrayList of \"LessonType:Class number\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private Map\u003cString, ArrayList\u003cString\u003e\u003e parseModules(String unparsedModules) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assert unparsedModules !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e unparsed \u003d new ArrayList\u003c\u003e(Arrays.asList(unparsedModules.split(\"\u0026\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map\u003cString, ArrayList\u003cString\u003e\u003e myModuleDetails \u003d new HashMap\u003cString, ArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String elem : unparsed) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            assert elem !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            int tempIndex \u003d elem.indexOf(\"\u003d\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String module \u003d elem.substring(0, tempIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String unparsedLessonTypeAndClass \u003d elem.substring(tempIndex + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e parsedLessonTypeAndClass \u003d new ArrayList\u003c\u003e(Arrays.asList(unparsedLessonTypeAndClass.split(\",\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myModuleDetails.put(module, parsedLessonTypeAndClass);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            modulesArr.add(module);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return myModuleDetails;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public Map\u003cString, ArrayList\u003cString\u003e\u003e getModulesMap() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.modulesMap;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public String getSemester() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.semester;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cString\u003e getModulesArr() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.modulesArr;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 4,
      "MeLoveCarbs": 94
    }
  },
  {
    "path": "src/main/java/logic/schedulelogic/ScheduleHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.schedulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " * This class contains information on generating a combined schedule with given contacts."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " * It includes a method for an external class to access the combined schedule."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ScheduleHandler {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final Boolean MYSCHEDULEBLOCKED \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final Boolean MYSCHEDULEFREE \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private static Boolean[][][] combinedSchedule \u003d new Boolean[13][7][48];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    /** Generates a combined schedule for given contacts."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * Used in the display timetable function."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param contactList   A list of contacts to generate the combined schedule for."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ScheduleHandler(ArrayList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        assert contactList.size() \u003c\u003d 1 : \"Only 1 member in contact list passed to ScheduleHandler\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    combinedSchedule[i][j][k] \u003d MYSCHEDULEFREE; // fill every index with 0 initially"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (Contact t : contactList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Boolean[][][] memberSchedule \u003d t.getSchedule();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            fillCombinedSchedule(memberSchedule);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    /** Add busy blocks of a contact\u0027s schedule into the combined schedule."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param s   The contact\u0027s schedule to be added into the combined schedule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private void fillCombinedSchedule(Boolean[][][] s) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (s[i][j][k] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        this.combinedSchedule[i][j][k] \u003d MYSCHEDULEBLOCKED;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public Boolean[][][] getCombinedSchedule() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return combinedSchedule;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 38,
      "synCKun": 8,
      "MeLoveCarbs": 14
    }
  },
  {
    "path": "src/main/java/model/contact/Contact.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.WfException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_WRONG_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDDAY_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_SLOT_RANGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_MEETING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_EDIT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import static common.Messages.MESSAGE_WEEK_RANGE_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " * This class contains information of a contact\u0027s schedule in blocks of 30mins interval."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " * It includes methods to access its private members."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " * It includes methods to modify contact\u0027s schedules and delete contact."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * It also includes a private class Slot used exclusively by Contact.java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final Boolean MYSCHEDULEBLOCKED \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final Boolean MYSCHEDULEFREE \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private String contactName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private Boolean[][][] mySchedule; //String[13][7][48]; 13 weeks, 7 days, separated into 30mins within 24 hours period."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private String[][][] myScheduleName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private boolean isMainUser \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public Contact(String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (name.contains(\"_main\") \u0026\u0026 !name.replaceFirst(\"_main\", \"\").contains(\"_main\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            isMainUser \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            name \u003d name.replace(\"_main\", \"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        this.contactName \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.mySchedule \u003d new Boolean[13][7][48];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.myScheduleName \u003d new String[13][7][48];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    mySchedule[i][j][k] \u003d MYSCHEDULEFREE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    myScheduleName[i][j][k] \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Converts LocalTime object into blocks of time to be inserted into data structure mySchedule[][]."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param myTime LocalTime to be converted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @return one-based indexing of the block from LocalTime."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @throws WfException Throws error if LocalTime isn\u0027t in multiples of 30minutes."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static Integer getBlocksFromTime(LocalTime myTime) throws WfException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int minuteBlocks \u003d -1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int hourBlocks \u003d -1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        switch (myTime.getMinute()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            minuteBlocks \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 30:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            minuteBlocks \u003d 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new WfException(MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        hourBlocks \u003d myTime.getHour() * 2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return minuteBlocks + hourBlocks;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void addBusyBlocks(String scheduleNameStatus, Integer startDay, String startTime, Integer endDay,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                              String endTime, String[] onWeeks) throws WfException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        editBlocks(MYSCHEDULEBLOCKED, scheduleNameStatus, startDay, startTime, endDay, endTime, onWeeks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void addFreeBlocks(Integer startDay, String startTime, Integer endDay, String endTime,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                              String[] onWeeks) throws WfException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        editBlocks(MYSCHEDULEFREE, \"null\", startDay, startTime, endDay, endTime, onWeeks);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Converts time into 30-min blocks for easy processing of slot by editBlocksLogic()."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * Throws error if slot is not valid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param blockedOrFree      Boolean variable that represents busy or free, to be inserted into mySchedule[][][]."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param scheduleNameStatus String variable that is the name to be inserted into myScheduleName[][][]."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     *                           Can be either contactName (edit busy function) or meetingName (schedule function)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param startDay           Start day of the slot in Integer."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param startTime          Start time of the slot in LocalTime format. For eg, 11:30, 14:30, 00:00"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param endDay             End day of the slot in Integer."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param endTime            End time of the slot in LocalTime format: For eg, 11:30, 14:30, 00:00"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param onWeeks            Weeks that are suppose to be edited."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @return Returns String of error message, else returns \"Success\" if schedule is successfully edited."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @throws WfException Throws error if slot is not valid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public String editBlocks(Boolean blockedOrFree, String scheduleNameStatus, Integer startDay,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                             String startTime, Integer endDay, String endTime, String[] onWeeks) throws WfException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        LocalTime localTimeStart;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        LocalTime localTimeEnd;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            localTimeStart \u003d LocalTime.parse(startTime);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            localTimeEnd \u003d LocalTime.parse(endTime);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(MESSAGE_STARTENDTIME_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return MESSAGE_STARTENDTIME_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Integer startBlock \u003d 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Integer endBlock \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            startBlock \u003d getBlocksFromTime(localTimeStart);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            endBlock \u003d getBlocksFromTime(localTimeEnd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (WfException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (!checkDay(startDay) || !checkDay(endDay)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return MESSAGE_STARTENDDAY_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (onWeeks.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            return MESSAGE_WEEK_RANGE_EMPTY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        editBlocksLogic(blockedOrFree, startBlock, endBlock, startDay, endDay, scheduleNameStatus, onWeeks);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * Defines the logic of modifying mySchedule[][][] and myScheduleName[][][] with given slot."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * Modifies mySchedule[][][] to be busy or free for a given time slot."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * Modifies myScheduleName[][][] to meetingName, contactName or null for a given time slot."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * Used in edit function and schedule meeting function"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param blockedOrFree      Boolean variable that represents busy or free, to be inserted into mySchedule[][][]."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param scheduleNameStatus String variable that is the name to be inserted into myScheduleName[][][]."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     *                           Can be either contactName (edit busy function) or meetingName (schedule function)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param startDay           Start day of the slot in Integer."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param startBlock         Start time of the slot represented by a 30-min block in Integer."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param endDay             End day of the slot in Integer."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param endBlock           End time of the slot represented by a 30-min block in Integer."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param onWeeks            Weeks that are suppose to be edited."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @throws WfException Throws error if slot is not valid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private void editBlocksLogic(Boolean blockedOrFree, Integer startBlock, Integer endBlock, Integer startDay, Integer endDay,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                                 String scheduleNameStatus, String[] onWeeks) throws WfException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] startOnWeeks \u003d onWeeks.clone();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] endOnWeeks \u003d onWeeks.clone();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Boolean myScheduleStatus \u003d blockedOrFree;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String myScheduleNameStatus \u003d scheduleNameStatus;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (startDay \u003e 6 \u0026\u0026 endDay \u003e 6) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            startDay -\u003d 7;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            endDay -\u003d 7;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            startOnWeeks[0] \u003d Integer.toString(Integer.parseInt(startOnWeeks[0]) + 1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            endOnWeeks[0] \u003d Integer.toString(Integer.parseInt(endOnWeeks[0]) + 1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else if (startDay \u003c 7 \u0026\u0026 endDay \u003e 6) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            endDay -\u003d 7;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            endOnWeeks[0] \u003d Integer.toString(Integer.parseInt(endOnWeeks[0]) + 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else if (startDay \u003e 6 \u0026\u0026 endDay \u003c 7) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new WfException(\"Start Day is later than End Day.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (!startDay.equals(endDay)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c startOnWeeks.length; j++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                int startDayCopy \u003d startDay; // prevent modifying param arguments"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int i \u003d startBlock; i \u003c 48; i++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    mySchedule[Integer.parseInt(startOnWeeks[j]) - 1][startDayCopy][i] \u003d myScheduleStatus;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    this.myScheduleName[Integer.parseInt(startOnWeeks[j]) - 1][startDayCopy][i] \u003d myScheduleNameStatus;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                startDayCopy++;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (startDayCopy \u003e 6) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    startDayCopy \u003d 0;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                while (startDayCopy !\u003d endDay) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    for (int i \u003d 0; i \u003c 48; i++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        mySchedule[Integer.parseInt(startOnWeeks[j]) - 1][startDayCopy][i] \u003d myScheduleStatus;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        this.myScheduleName[Integer.parseInt(startOnWeeks[j]) - 1][startDayCopy][i] \u003d myScheduleNameStatus;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    startDayCopy++;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    if (startDayCopy \u003e 6) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        startDayCopy \u003d 0;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                for (int i \u003d 0; i \u003c endBlock; i++) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    mySchedule[Integer.parseInt(endOnWeeks[j]) - 1][startDayCopy][i] \u003d myScheduleStatus;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    this.myScheduleName[Integer.parseInt(endOnWeeks[j]) - 1][startDayCopy][i] \u003d myScheduleNameStatus;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c startOnWeeks.length; j++) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                for (int i \u003d startBlock; i \u003c endBlock; i++) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    mySchedule[Integer.parseInt(endOnWeeks[j]) - 1][startDay][i] \u003d myScheduleStatus;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    this.myScheduleName[Integer.parseInt(endOnWeeks[j]) - 1][startDay][i] \u003d myScheduleNameStatus;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    boolean checkDay(Integer day) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return day \u003e\u003d 0 \u0026\u0026 day \u003c\u003d 13;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return this.contactName;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public Boolean[][][] getSchedule() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return this.mySchedule;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public String[][][] getMyScheduleName() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return this.myScheduleName;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void setMyScheduleName(String[][][] myScheduleName) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.myScheduleName \u003d myScheduleName;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * To be used for storage purposes."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Sets mySchedule[][] to true/false depending on myScheduleName from disk."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void setMyScheduleFromScheduleName() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    mySchedule[i][j][k] \u003d !myScheduleName[i][j][k].equals(\"null\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void setMainUser() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.isMainUser \u003d true;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public boolean isMainUser() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return isMainUser;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * Used in edit function to check if slot to be edited clashes with meetings in myScheduleName[][][]."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param startDay          Start day of the slot in Integer."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param startTime         Start time of the slot in LocalTime format. For eg, 11:30, 14:30, 00:00"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param endDay            End day of the slot in Integer."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param endTime           End time of the slot in LocalTime format: For eg, 11:30, 14:30, 00:00"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param currentWeekNumber Current week that is supposed to be edited."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @return Returns true if the slot does not clash with meetings."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @throws WfException Throws error if invalid edit."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public boolean isValidEdit(Integer startDay,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                               LocalTime startTime, Integer endDay, LocalTime endTime,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                               int currentWeekNumber) throws WfException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Slot slot \u003d new Slot(startDay, startTime, endDay, endTime, currentWeekNumber).invoke();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        startDay \u003d slot.getStartDay();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        endDay \u003d slot.getEndDay();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int startWeekNumber \u003d slot.getStartWeekNumber();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int endWeekNumber \u003d slot.getEndWeekNumber();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Integer startBlock \u003d slot.getStartBlock();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Integer endBlock \u003d slot.getEndBlock();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        isValidLogic(startDay, endDay, startWeekNumber, endWeekNumber, startBlock, endBlock, this.myScheduleName,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            \"meeting\", MESSAGE_INVALID_EDIT);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * Used in schedule function to check if slot to be edited is busy in mySchedule[][][]."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param startDay          Start day of the slot in Integer."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param startTime         Start time of the slot in LocalTime format. For eg, 11:30, 14:30, 00:00"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param endDay            End day of the slot in Integer."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param endTime           End time of the slot in LocalTime format: For eg, 11:30, 14:30, 00:00"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param currentWeekNumber Current week that is supposed to be edited."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @return Returns true if the slot does not clash with meetings."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @throws WfException Throws error if invalid edit."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public boolean isValidMeeting(Integer startDay,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                                  LocalTime startTime, Integer endDay, LocalTime endTime,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                                  int currentWeekNumber) throws WfException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Slot slot \u003d new Slot(startDay, startTime, endDay, endTime, currentWeekNumber).invoke();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        startDay \u003d slot.getStartDay();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        endDay \u003d slot.getEndDay();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int startWeekNumber \u003d slot.getStartWeekNumber();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int endWeekNumber \u003d slot.getEndWeekNumber();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Integer startBlock \u003d slot.getStartBlock();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Integer endBlock \u003d slot.getEndBlock();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        isValidLogic(startDay, endDay, startWeekNumber, endWeekNumber, startBlock, endBlock, this.mySchedule,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            MYSCHEDULEBLOCKED, MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * Defines the logic of checking if a slot is valid for a meeting or for editing."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param startDay            Start day of the slot in Integer."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param startBlock          Start time of the slot represented by a 30-min block in Integer."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param endDay              End day of the slot in Integer."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param endBlock            End time of the slot represented by a 30-min block in Integer."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param startWeekNumber     Start week that is supposed to be edited."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param endWeekNumber       End week that is supposed to be edited."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param mainUserSchedule    Main user\u0027s schedule used to check slot."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     *                            Either in String[][][] or Boolean[][][]."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param invalidBlock        Status in mainUserSchedule to be detected for invalid slot."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     *                            Either in String format or Boolean format."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @param invalidBlockMessage Message to be thrown if slot is invalid in String."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * @return Returns true if the slot does not clash with meetings."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @throws WfException Throws error if invalid edit."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private \u003cT\u003e void isValidLogic(Integer startDay, Integer endDay, int startWeekNumber, int endWeekNumber,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                                  Integer startBlock, Integer endBlock, T[][][] mainUserSchedule, T invalidBlock,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                                  String invalidBlockMessage) throws WfException {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        if (startDay.equals(endDay)) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (startBlock.equals(endBlock)) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[startWeekNumber - 1][startDay][startBlock].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    throw new WfException(invalidBlockMessage);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else if (startBlock \u003c endBlock) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int i \u003d startBlock; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[startWeekNumber - 1][startDay][i].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        throw new WfException(invalidBlockMessage);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else if (startBlock \u003e endBlock) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                throw new WfException(MESSAGE_INVALID_SLOT_RANGE);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        if (startDay \u003c endDay) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d startBlock; i \u003c\u003d 47; ++i) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[startWeekNumber - 1][startDay][i].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    throw new WfException(invalidBlockMessage);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d startDay + 1; i \u003c\u003d endDay - 1; ++i) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int j \u003d 0; j \u003c 48; ++j) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[startWeekNumber - 1][i][j].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        throw new WfException(invalidBlockMessage);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[endWeekNumber - 1][endDay][i].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    throw new WfException(invalidBlockMessage);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        if (endDay \u003c startDay) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d startBlock; i \u003c\u003d 47; ++i) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[startWeekNumber - 1][startDay][i].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    throw new WfException(invalidBlockMessage);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d startDay + 1; i \u003c\u003d 6; ++i) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int j \u003d 0; j \u003c\u003d 47; ++j) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[startWeekNumber - 1][i][j].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        throw new WfException(invalidBlockMessage);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d endDay - 1; ++i) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int j \u003d 0; j \u003c\u003d 47; ++j) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[endWeekNumber - 1][i][j].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        throw new WfException(invalidBlockMessage);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[endWeekNumber - 1][endDay][i].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    throw new WfException(invalidBlockMessage);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * This private class contains information about a time slot, generated with startDay, startTime, endDay, endTime."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * It contains the logic that converts startTime and endTime to 30-min startBlock and endBlock."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * It contains the logic that converts startDay, endDay and currentWeekNumber to startWeekNumber and endWeekNumber."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private static class Slot {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private Integer startDay;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private LocalTime startTime;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private Integer endDay;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private LocalTime endTime;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private int currentWeekNumber;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private int startWeekNumber;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private int endWeekNumber;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private Integer startBlock;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private Integer endBlock;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public Slot(Integer startDay, LocalTime startTime, Integer endDay, LocalTime endTime, int currentWeekNumber) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            this.startDay \u003d startDay;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            this.endDay \u003d endDay;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            this.currentWeekNumber \u003d currentWeekNumber;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public Integer getStartDay() {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return startDay;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public Integer getEndDay() {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return endDay;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public int getStartWeekNumber() {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return startWeekNumber;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public int getEndWeekNumber() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return endWeekNumber;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public Integer getStartBlock() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return startBlock;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public Integer getEndBlock() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return endBlock;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        public Slot invoke() throws WfException {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (!(startDay \u003e\u003d 0 \u0026\u0026 startDay \u003c\u003d 13) || !(endDay \u003e\u003d 0 \u0026\u0026 endDay \u003c\u003d 13)) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                throw new WfException(MESSAGE_STARTENDDAY_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            startWeekNumber \u003d currentWeekNumber;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            endWeekNumber \u003d currentWeekNumber;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (startDay \u003e 6) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                startDay -\u003d 7;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                startWeekNumber++;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (endDay \u003e 6) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                endDay -\u003d 7;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                endWeekNumber++;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if ((startTime.getMinute() !\u003d 0 \u0026\u0026 startTime.getMinute() !\u003d 30)"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                || (endTime.getMinute() !\u003d 0 \u0026\u0026 endTime.getMinute() !\u003d 30)) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                throw new WfException(MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            startBlock \u003d getBlocksFromTime(startTime);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            endBlock \u003d -1;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (endTime \u003d\u003d LocalTime.parse(\"00:00\")) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                endBlock \u003d 47;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (endDay \u003d\u003d 0) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    endDay \u003d 6;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    endDay \u003d endDay - 1;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                endBlock \u003d getBlocksFromTime(endTime) - 1;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 299,
      "synCKun": 75,
      "MeLoveCarbs": 109
    }
  },
  {
    "path": "src/main/java/model/contact/ContactList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import org.w3c.dom.Text;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import ui.TextUI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Stores team members in a team member list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Contains an ArrayList object as the team member list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Has constructor and getter methods for the team member list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * @see Contact"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ContactList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cContact\u003e contactList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ContactList(ArrayList\u003cContact\u003e tl) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.contactList \u003d tl;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void add(Contact t) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.contactList.add(t);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void remove(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (Contact contact : contactList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (contact.getName().equals(name) \u0026\u0026 !contact.isMainUser()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                TextUI.displayRemovedPerson(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                contactList.remove(contact);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (contact.getName().equals(name) \u0026\u0026 contact.isMainUser()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                TextUI.displayMainUserDeleteError(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        TextUI.displayNoMemberFound(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void set(int index, Contact member) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.contactList.set(index, member);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cContact\u003e getContactList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.contactList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.getContactList().size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 18,
      "MeLoveCarbs": 37
    }
  },
  {
    "path": "src/main/java/model/meeting/Meeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewc97"
        },
        "content": " * This class contains information of a meeting scheduled by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class Meeting {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private String meetingName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private Integer startDay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private Integer endDay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private int startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private int endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public Meeting(String meetingName, Integer startDay, LocalTime startTime,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                   Integer endDay, LocalTime endTime, int startDate, int endDate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.meetingName \u003d meetingName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.startDay \u003d startDay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.endDay \u003d endDay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public String getMeetingName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return meetingName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public Integer getStartDay() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return startDay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public Integer getEndDay() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return endDay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void editTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return meetingName + \", \" + startDay + \", \" + startTime + \", \" + endDay + \", \" + endTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public int getStartDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public int getEndDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 35,
      "synCKun": 15,
      "MeLoveCarbs": 14
    }
  },
  {
    "path": "src/main/java/model/meeting/MeetingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import ui.TextUI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewc97"
        },
        "content": " * Stores meetings in a meeting list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewc97"
        },
        "content": " * Contains an ArrayList object as the meeting list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewc97"
        },
        "content": " * Has constructor and getter methods for the meeting list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewc97"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewc97"
        },
        "content": " * @see Meeting"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class MeetingList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private ArrayList\u003cMeeting\u003e meetingList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public MeetingList(ArrayList\u003cMeeting\u003e dataOnDisk) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        meetingList \u003d dataOnDisk;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public MeetingList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        meetingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public void add(Meeting meeting) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        meetingList.add(meeting);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void delete(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        TextUI.displayRemovedMeeting(meetingList,index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        meetingList.remove(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (meetingList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.listAllScheduledMeetings(this.meetingList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.displayNoMeetings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public ArrayList\u003cMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return this.meetingList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public int getMeetingListSize() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return meetingList.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public Boolean isDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 18,
      "synCKun": 19,
      "MeLoveCarbs": 16
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.Meeting;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.nio.file.DirectoryStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "synCKun"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    File meetingFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Constructor specifying file path of model.meeting list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param meetingFilePath File path to load and store model.meeting list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public Storage(String meetingFilePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        meetingFile \u003d new File(meetingFilePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void updateMeetingListToDisk(ArrayList\u003cMeeting\u003e meetingList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Files.createDirectory(Paths.get(\"data\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException ignored) { //ignored as the error would mean the directory exists, thus no action needed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Files.createFile(Paths.get(\"data/meeting_list.txt\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException ignored) { //ignored as the error would mean the file exists, thus no action needed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"data/meeting_list.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            meetingList.forEach((n) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    fw.write(n.getMeetingName() + \" \" + n.getStartDay() + \" \" + n.getStartTime() + \" \" + n.getEndDay()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            + \" \" + n.getEndTime() + \" \" + n.getStartDate() + \" \" + n.getEndDate() + System.lineSeparator());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void updateMemberListToDisk(ArrayList\u003cContact\u003e myContactList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Files.createDirectory(Paths.get(\"data\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException ignored) { //ignored as the error would mean the directory exists, thus no action needed"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //create separate text file for every member containing their schedules"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (Contact member : myContactList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String memberPath \u003d \"data/\" + ((member.isMainUser()) ? member.getName() + \"_main\" : member.getName()) + \"_schedule.txt\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                Files.createFile(Paths.get(memberPath));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } catch (IOException ignored) { //ignored as the error would mean the file exists, thus no action needed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                FileWriter fw \u003d new FileWriter(memberPath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                String[][][] schedule \u003d member.getMyScheduleName();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                fw.write(schedule[i][j][k] + \" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //remove deleted members\u0027 .txt file from hard disk"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        File folder \u003d new File(\"data/\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (File f : folder.listFiles()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String fileName \u003d f.getName();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (f.getName().equals(\"meeting_list.txt\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (Contact contact : myContactList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (f.getName().contains(contact.getName())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (contact \u003d\u003d myContactList.get(myContactList.size() - 1)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    f.delete();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * Loads file from hard drive on start of program."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @return List from hard drive"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @throws FileNotFoundException If file is not found"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public ArrayList\u003cMeeting\u003e loadMeetingListFromDisk() throws FileNotFoundException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        ArrayList\u003cMeeting\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Scanner reader \u003d new Scanner(meetingFile);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        while (reader.hasNext()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String[] data \u003d reader.nextLine().split(\" \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Meeting entry \u003d new Meeting(data[0], Integer.parseInt(data[1]),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    LocalTime.parse(data[2]), Integer.parseInt(data[3]),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    LocalTime.parse(data[4]), Integer.parseInt(data[5]), Integer.parseInt(data[6]));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            list.add(entry);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cContact\u003e loadMemberListFromDisk() throws FileNotFoundException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cContact\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Path path \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        File file \u003d new File(\"data\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        boolean dirCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try (DirectoryStream\u003cPath\u003e stream \u003d Files.newDirectoryStream(path)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (Path entry : stream) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (entry.toString().contains(\"_schedule.txt\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    String memberName \u003d entry.toString().substring(5);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    memberName \u003d memberName.replaceAll(\"_schedule\\\\.txt\", \"\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    String[][][] myScheduleName \u003d new String[13][7][48];"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    Contact member \u003d new Contact(memberName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    Scanner reader \u003d new Scanner(entry);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    while (reader.hasNext()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                    myScheduleName[i][j][k] \u003d reader.next();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    member.setMyScheduleName(myScheduleName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    member.setMyScheduleFromScheduleName();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    list.add(member);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 7,
      "synCKun": 141,
      "MeLoveCarbs": 18
    }
  },
  {
    "path": "src/main/java/ui/TextUI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.WfException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.Meeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.MeetingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_INDEX_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_NUMBER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static java.lang.System.out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "public class TextUI {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void introMsg() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String logo \u003d \" __      __.__                  ___________                      \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \"/  \\\\    /  \\\\  |__   ____   ____ \\\\_   _____/______   ____   ____  \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \"\\\\   \\\\/\\\\/   /  |  \\\\_/ __ \\\\ /    \\\\ |    __) \\\\_  __ \\\\_/ __ \\\\_/ __ \\\\ \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \" \\\\        /|   Y  \\\\  ___/|   |  \\\\|     \\\\   |  | \\\\/\\\\  ___/\\\\  ___/ \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \"  \\\\__/\\\\  / |___|  /\\\\___  \u003e___|  /\\\\___  /   |__|    \\\\___  \u003e\\\\___  \u003e\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \"       \\\\/       \\\\/     \\\\/     \\\\/     \\\\/                \\\\/     \\\\/ \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(logo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void menuMsg(int memberList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"__________________________________________________________\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                + \"______________________________________________________________________\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[contacts] List all contacts.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(\"[timetable] Display combined timetable of selected contacts.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[schedule] Schedule a new meeting.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(\"[edit] Edit a contact\u0027s timetable.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[delete] Delete a scheduled meeting.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[meetings] List all scheduled meetings.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[exit] Exit application.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.print(System.lineSeparator());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (memberList \u003e 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            out.println(\"Insert your member\u0027s timetable by following: \u003cname of new member\u003e \u003cnusmods link\u003e\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            out.println(\"Insert your own timetable by following: \u003cname of new member\u003e \u003cnusmods link\u003e\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"__________________________________________________________\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"______________________________________________________________________\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void exitMsg() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"Thank you for using WhenFree, goodbye!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void errorMsg(WfException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"OOPS!! \" + e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void printTimetable(Boolean[][][] mySchedule, int weeksMoreToView, int weekNumber) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.print(\"Date:  \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] tempDate \u003d java.util.Calendar.getInstance().getTime().toString().split(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String dayString \u003d tempDate[0];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        switch (dayString) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sun\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Mon\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Tue\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Wed\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -4);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Thu\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -5);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Fri\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -6);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sat\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -7);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int date \u003d Integer.parseInt(tempDate[2]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int weekViewLimit;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (weeksMoreToView \u003d\u003d 1) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            weekViewLimit \u003d 14;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            weekViewLimit \u003d 7;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c weekViewLimit; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String[] dateArray \u003d cal.getTime().toString().split(\" \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            int datePrint \u003d Integer.parseInt(dateArray[2]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String lastChar \u003d dateArray[2].substring(dateArray[2].length() - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String datePostFix;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (lastChar.equals(\"1\") \u0026\u0026 !dateArray[2].substring(dateArray[2].length() - 2, dateArray[2].length() - 1).equals(\"1\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                datePostFix \u003d \"st\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (lastChar.equals(\"2\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    \u0026\u0026 !dateArray[2].substring(dateArray[2].length() - 2, dateArray[2].length() - 1).equals(\"1\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                datePostFix \u003d \"nd\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (lastChar.equals(\"3\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    \u0026\u0026 !dateArray[2].substring(dateArray[2].length() - 2, dateArray[2].length() - 1).equals(\"1\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                datePostFix \u003d \"rd\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                datePostFix \u003d \"th\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String output \u003d datePrint + datePostFix;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            System.out.print((output.length() \u003d\u003d 3) ? output + \"   \" : output + \"  \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (i \u003d\u003d 6 \u0026\u0026 weeksMoreToView \u003d\u003d 1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                out.print(\"  \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.print(\"       SUN   MON   TUE   WED   THU   FRI   SAT  \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (weeksMoreToView \u003d\u003d 1) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            out.print(\"   SUN   MON   TUE   WED   THU   FRI   SAT\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int earliestScheduledTime \u003d getEarliestTime(mySchedule, weeksMoreToView, weekNumber, 47) / 2;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int latestScheduledTime \u003d getLatestTime(mySchedule, weeksMoreToView, weekNumber, 0) / 2;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d earliestScheduledTime; i \u003c latestScheduledTime + 1; ++i) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            out.print(String.format(\"%04d\", (100 * i)) + \" +-----+-----+-----+-----+-----+-----+-----+\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (weeksMoreToView \u003d\u003d 1) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                out.print(\" +-----+-----+-----+-----+-----+-----+-----+\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            out.println();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.print(\"     |\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int z \u003d 0; z \u003c\u003d weeksMoreToView; z++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int j \u003d 0; j \u003c 7; ++j) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    out.print(\"  \" + (mySchedule[weekNumber + z - 1][j][2 * i] ? \"X\" : \" \") + \"  |\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (z \u003c weeksMoreToView) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    out.print(\" |\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            out.println();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            out.print(\"     +-----+-----+-----+-----+-----+-----+-----+\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (weeksMoreToView \u003d\u003d 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                out.print(\" +-----+-----+-----+-----+-----+-----+-----+\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.println();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.print(\"     |\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int z \u003d 0; z \u003c\u003d weeksMoreToView; z++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int j \u003d 0; j \u003c 7; ++j) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    out.print(\"  \" + (mySchedule[weekNumber + z - 1][j][2 * i + 1] ? \"X\" : \" \") + \"  |\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (z \u003c weeksMoreToView) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    out.print(\" |\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.println();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            counter \u003d i;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        counter++;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.print(String.format(\"%04d\", (100 * counter)) + \" +-----+-----+-----+-----+-----+-----+-----+\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (weeksMoreToView \u003d\u003d 1) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            out.print(\" +-----+-----+-----+-----+-----+-----+-----+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (weeksMoreToView \u003d\u003d 0) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            out.println(\"[NOTE] You can type \\\"more\\\" for next week\u0027s timetable as well!\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static int getLatestTime(Boolean[][][] mySchedule, int weeksMoreToView, int weekNumber, int latestScheduledTime) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int z \u003d 0; z \u003c\u003d weeksMoreToView; z++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; ++j) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int i \u003d 0; i \u003c 48; ++i) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    if (mySchedule[weekNumber + z - 1][j][i] \u0026\u0026 i \u003e latestScheduledTime) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        latestScheduledTime \u003d i;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return (latestScheduledTime % 2 \u003d\u003d 0) ? latestScheduledTime : latestScheduledTime - 1;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static int getEarliestTime(Boolean[][][] mySchedule, int weeksMoreToView, int weekNumber, int earliestScheduledTime) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int z \u003d 0; z \u003c\u003d weeksMoreToView; z++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; ++j) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int i \u003d 0; i \u003c 48; ++i) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    if (mySchedule[weekNumber + z - 1][j][i] \u0026\u0026 i \u003c earliestScheduledTime) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        earliestScheduledTime \u003d i;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    if (i \u003e earliestScheduledTime) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return earliestScheduledTime;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void scheduleMeetingMsg() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"You have selected new scheduled meeting\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void meetingDetailsMsg() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"Enter meeting details: \u003cMeeting.Meeting Name\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e.\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"Type \\\"exit\\\" to go back to menu.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void meetingListSizeMsg(MeetingList myMeetingList) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"You now have \" + myMeetingList.getMeetingListSize() + \" meeting(s) in the list.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void listMeetings() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"Here are all your meeting slots.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void timeOutOfRangeMsg() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(MESSAGE_STARTENDTIME_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void invalidNumberMsg() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(MESSAGE_INVALID_NUMBER);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void indexOutOfBoundsMsg() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(MESSAGE_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void listAllScheduledMeetings(ArrayList\u003cMeeting\u003e meetingList) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        System.out.println(\"The current scheduled meeting(s):\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c meetingList.size(); i++) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String startDay \u003d getDayFromNumber(meetingList.get(i).getStartDay());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String endDay \u003d getDayFromNumber(meetingList.get(i).getEndDay());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String meetingName \u003d meetingList.get(i).getMeetingName();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String startDate \u003d Integer.toString(meetingList.get(i).getStartDate());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String endDate \u003d Integer.toString(meetingList.get(i).getEndDate());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            System.out.println((i + 1) + \". \" + startDay + \"(\" + startDate + getPostFix(startDate) + \") \""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    + meetingList.get(i).getStartTime() + \" to \" + endDay + \"(\" + endDate + getPostFix(endDate) + \") \""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    + meetingList.get(i).getEndTime() + \" (\" + meetingName + \")\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static String getPostFix(String date) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String lastChar \u003d date.substring(date.length() - 1);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String datePostFix;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (lastChar.equals(\"1\") \u0026\u0026 !date.substring(date.length() - 2, date.length() - 1).equals(\"1\")) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            datePostFix \u003d \"st\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else if (lastChar.equals(\"2\")) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            datePostFix \u003d \"nd\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else if (lastChar.equals(\"3\")) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            datePostFix \u003d \"rd\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            datePostFix \u003d \"th\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return datePostFix;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static String getDayFromNumber(int dayNum) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String day;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (dayNum \u003e 6) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            dayNum %\u003d 7;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        switch (dayNum) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Sunday\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Monday\";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Tuesday\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Wednesday\";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Thursday\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Friday\";"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Saturday\";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Out of range\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayNoMeetings() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"There is no scheduled meetings so far.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayRemovedMeeting(ArrayList\u003cMeeting\u003e meetingList, int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String startDay \u003d getDayFromNumber(meetingList.get(index).getStartDay());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String endDay \u003d getDayFromNumber(meetingList.get(index).getEndDay());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"I have removed:\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String startDate \u003d Integer.toString(meetingList.get(index).getStartDate());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String endDate \u003d Integer.toString(meetingList.get(index).getEndDate());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println((index + 1) + \". \" + startDay + \"(\" + startDate + getPostFix(startDate) + \") \""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                + meetingList.get(index).getStartTime() + \" to \" + endDay + \"(\" + endDate + getPostFix(endDate) + \") \""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                + meetingList.get(index).getEndTime() + \" (\" + meetingList.get(index).getMeetingName() + \")\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayInvalidDeleteTarget() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"Meeting does not exist for indicated index.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void showLoadingError() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"There are no previous records, let\u0027s create a new one!\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void teamMemberListMsg(ArrayList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                + \"Here are your stored contacts:\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (Contact contact : contactList) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            out.print(\"\\t \" + i + \") \" + contact.getName());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                System.out.println(\" (main user)\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void showAddedMember(String memberName) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"Added \" + memberName);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void showRepeatedPerson(String userInputWord) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(userInputWord + \" already exists!\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void printFormatTimetable() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(\"\\nTo display timetable:\\ntimetable\\ntimetable \u003cMember Number 1\u003e\""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                + \"\\ntimetable \u003cMember Number 1\u003e \u003cMember Number 2\u003e\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void printFormatSchedule() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"\\nTo schedule a meeting:\\nschedule \u003cMeeting Name\u003e \u003cStart Date\u003e \u003cStart Time\u003e \u003cEnd Date\u003e \u003cEnd Time\u003e\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void printFormatEdit() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"\\nTo edit a contact:\\nedit busy \u003cContact Index\u003e \u003cStart Date\u003e \u003cStart Time\u003e \u003cEnd Date\u003e \u003cEnd Time\u003e\""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                + \"\\nedit free \u003cContact Index\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void printFormatDeleteMember() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"\\nTo delete contact:\\ndelete \u003cMember Name\u003e\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void printFormatMeeting() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"\\nTo list meetings:\\nmeetings\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayRemovedPerson(String name) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"I have removed \" + name + \" from your contact list.\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayMainUserDeleteError(String name) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"Main user \" + name + \" cannot be deleted.\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayNoMemberFound(String name) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(name + \" is not found in list of contacts.\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void printFormatDeleteMeeting() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"\\nTo delete meeting:\\ndelete \u003cMeeting Index\u003e\");"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void showContactEdited(String name, String busyOrFree) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(name + \"\u0027s timetable has been edited.\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "synCKun"
        },
        "content": "}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "matthewc97": 43,
      "lowxizhi": 45,
      "synCKun": 256,
      "MeLoveCarbs": 57
    }
  },
  {
    "path": "src/test/java/logic/modulelogic/LessonsGeneratorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.InvalidUrlException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.WfException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_MODULECODE_IN_BLACKLIST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class LessonsGeneratorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    LessonsGenerator myLessonsGenerator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void generate_blacklistedModule() throws InvalidUrlException, WfException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        // Will only throw exception if nusmods link is broken/invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myLessonsGenerator \u003d new LessonsGenerator(\"https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:03,PTUT:03\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:09,LEC:1\u0026CS2113T\u003dLEC:C01\u0026EG3301R\u003dLEC:1,LAB:G15\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String expected \u003d myLessonsGenerator.generate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(expected, MESSAGE_MODULECODE_IN_BLACKLIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void generate_correctLessonDetails() throws InvalidUrlException, WfException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        // Will only throw exception if nusmods link is broken/invalid"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myLessonsGenerator \u003d new LessonsGenerator(\"https://nusmods.com/timetable/sem-1/share?CG1111\u003dTUT:04,LAB:02\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myLessonsGenerator.generate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Set\u003cString\u003e actual \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        actual.add(\"14001600Friday1:2:3:4:5:6:7:8:9:10:11:12:13\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        actual.add(\"14001700Wednesday1:2:3:4:5:6:7:8:9:10:11:12:13\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        actual.add(\"14001700Monday1:2:3:4:5:6:7:8:9:10:11:12:13\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString[]\u003e expectedArray \u003d myLessonsGenerator.getLessonDetails();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String[] strings : expectedArray) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            expected.add(String.join(\"\", strings));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String string : expected) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            assertTrue(actual.contains(string));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 44
    }
  },
  {
    "path": "src/test/java/logic/modulelogic/ModuleApiParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ModuleApiParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    ModuleApiParser myModuleApiParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void myModuleApiParser_wrongModuleCode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myModuleApiParser \u003d new ModuleApiParser(\"ABCD\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        JsonArray nullJsonArray \u003d new JsonArray();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(myModuleApiParser.parse(), nullJsonArray);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void setMyModuleApiParser_correctModuleCode() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myModuleApiParser \u003d new ModuleApiParser((\"CG2023\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertTrue(myModuleApiParser.parse().toString().contains(\"[{\\\"semester\\\":2,\\\"timetable\\\":[{\\\"classNo\\\"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 26
    }
  },
  {
    "path": "src/test/java/logic/modulelogic/ModuleHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_EMPTY_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_MODULECODE_IN_BLACKLIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ModuleHandlerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    ModuleHandler myModuleHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void generateModule_UnformattedModuleCode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myModuleHandler \u003d new ModuleHandler(\"EG3301R\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String illformatMessage \u003d myModuleHandler.generateModule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(illformatMessage, MESSAGE_MODULECODE_IN_BLACKLIST);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void generateModule_FormattedAndCorrectModuleCode() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myModuleHandler \u003d new ModuleHandler(\"CG2023\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String expected \u003d myModuleHandler.generateModule();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(expected, MESSAGE_RETURN_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void generateModule_IncorrectModuleCode() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myModuleHandler \u003d new ModuleHandler(\"ABCD\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String expected \u003d myModuleHandler.generateModule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(expected, MESSAGE_EMPTY_MODULE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 36
    }
  },
  {
    "path": "src/test/java/logic/modulelogic/TimetableParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.InvalidUrlException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class TimetableParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    TimetableParser myTimetableParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void parse_wrongLink() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        InvalidUrlException e \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myTimetableParser \u003d new TimetableParser(\"https://facebook.com\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (InvalidUrlException ex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            e \u003d ex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertNotNull(e);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void parse_garbageLink() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        InvalidUrlException e \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myTimetableParser \u003d new TimetableParser(\"https://www.nusmods.com/timetable/abcddddd\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (InvalidUrlException ex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            e \u003d ex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertNotNull(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void parse_correctLink() throws InvalidUrlException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myTimetableParser \u003d new TimetableParser(\"https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:03,PTUT:03\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:09,LEC:1\u0026CS2113T\u003dLEC:C01\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String expected \u003d myTimetableParser.parse();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(expected, MESSAGE_RETURN_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 42
    }
  },
  {
    "path": "src/test/java/logic/schedulelogic/ScheduleHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.schedulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.WfException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "public class ScheduleHandlerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private ScheduleHandler myScheduleHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private final Boolean myScheduleBlocked \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private final Boolean myScheduleFree \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void testScheduleHandler() throws WfException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cContact\u003e myScheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        final Contact member1 \u003d new Contact(\"member1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        final Contact member2 \u003d new Contact(\"member2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] onWeek1 \u003d {\"1\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] onWeek \u003d {\"1\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        member1.addBusyBlocks(\"schedule1\", 0, \"13:00\", 0, \"19:00\", onWeek1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        member1.addBusyBlocks(\"schedule2\", 4, \"16:00\", 4, \"18:00\", onWeek);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myScheduleList.add(member1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myScheduleList.add(member2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //myScheduleHandler \u003d new ScheduleHandler(myScheduleList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //Boolean[][][] myMasterSchedule \u003d myScheduleHandler.getMasterSchedule();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //final ArrayList\u003cArrayList\u003cInteger\u003e\u003e myFreeBlocks \u003d myScheduleHandler.getFreeBlocks();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //fake values"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e freeBlocks \u003d new ArrayList\u003cArrayList\u003cInteger\u003e\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        ArrayList\u003cInteger\u003e a1 \u003d new ArrayList\u003cInteger\u003e(List.of(4,36,0,25,1,1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        ArrayList\u003cInteger\u003e a2 \u003d new ArrayList\u003cInteger\u003e(List.of(0,38,4,31,1,1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        freeBlocks.add(a1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        freeBlocks.add(a2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Boolean[][][] myMasterScheduleAnswer \u003d new Boolean[13][7][48];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    myMasterScheduleAnswer[i][j][k] \u003d myScheduleFree;// fill every 48 index of the 7 days with 0 initially"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int j \u003d 26; j \u003c\u003d 37; j++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            myMasterScheduleAnswer[1][0][j] \u003d myScheduleBlocked;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int j \u003d 32; j \u003c\u003d 35; j++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            myMasterScheduleAnswer[1][4][j] \u003d myScheduleBlocked;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e myFreeBlocksAnswer \u003d new ArrayList\u003cArrayList\u003cInteger\u003e\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        ArrayList\u003cInteger\u003e slot1 \u003d makeSlot(4,36,0,25, 1, 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        ArrayList\u003cInteger\u003e slot2 \u003d makeSlot(0,38,4,31, 1, 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myFreeBlocksAnswer.add(slot1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myFreeBlocksAnswer.add(slot2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        assertEquals(myFreeBlocksAnswer, freeBlocks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public ArrayList\u003cInteger\u003e makeSlot(int startDay, int startBlock, int endDay, int endBlock, int startWeek, int endWeek) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        ArrayList\u003cInteger\u003e freeSlot \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        freeSlot.add(startDay);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        freeSlot.add(startBlock);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        freeSlot.add(endDay);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        freeSlot.add(endBlock);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        freeSlot.add(startWeek);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        freeSlot.add(endWeek);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return freeSlot;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 40,
      "synCKun": 25,
      "MeLoveCarbs": 8
    }
  },
  {
    "path": "src/test/java/model/contact/ContactTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.exception.WfException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDDAY_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_WRONG_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ContactTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Contact myMember;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void editBlocks_outOfRangeTime() throws WfException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validStartDay \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validEndDay \u003d 3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] validWeek \u003d {\"1\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String validStartTime \u003d \"08:30\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String invalidOutOfRangeEndTime \u003d \"24:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String meetingName \u003d \"TEST_MEETING\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMember \u003d new Contact(\"MEMBER\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String invalidOutOfRangeEndTimeMessage \u003d myMember.editBlocks(true, meetingName,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                validStartDay, validStartTime, validEndDay, invalidOutOfRangeEndTime, validWeek);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(invalidOutOfRangeEndTimeMessage, MESSAGE_STARTENDTIME_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void editBlocks_outOfRangeDay() throws WfException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validStartDay \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int invalidOutOfRangeEndDay \u003d 20;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String validStartTime \u003d \"08:30\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String validEndTime \u003d \"12:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String meetingName \u003d \"TEST_MEETING\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] validWeek \u003d {\"1\"};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMember \u003d new Contact(\"MEMBER\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String invalidOutOfRangeEndDayMessage \u003d myMember.editBlocks(true, meetingName,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                validStartDay, validStartTime, invalidOutOfRangeEndDay, validEndTime, validWeek);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(invalidOutOfRangeEndDayMessage, MESSAGE_STARTENDDAY_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMember \u003d new Contact(\"MEMBER\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validEndDay \u003d 3;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int invalidOutOfRangeStartDay \u003d -1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String invalidOutOfRangeStartDayMessage \u003d myMember.editBlocks(true, meetingName,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                invalidOutOfRangeStartDay, validStartTime, validEndDay, validEndTime, validWeek);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(invalidOutOfRangeStartDayMessage, MESSAGE_STARTENDDAY_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void editBlocks_timeNotInBlocks() throws WfException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String meetingName \u003d \"TEST_MEETING\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validStartDay \u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validEndDay \u003d 3;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] validWeek \u003d {\"1\"};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String invalidFormatStartTime \u003d \"08:35\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String validEndTime \u003d \"12:00\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMember \u003d new Contact(\"MEMBER\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String invalidFormatStartTimeMessage \u003d myMember.editBlocks(true, meetingName,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                validStartDay, invalidFormatStartTime, validEndDay, validEndTime, validWeek);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(invalidFormatStartTimeMessage, MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void editBlocks_correctParams() throws WfException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMember \u003d new Contact(\"MEMBER\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] validWeek \u003d {\"1\"};"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String correctMessage \u003d myMember.editBlocks(true, \"TEST MEETING\", 1, \"11:30\", 2, \"14:30\", validWeek);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(correctMessage, MESSAGE_RETURN_SUCCESS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 12,
      "synCKun": 9,
      "MeLoveCarbs": 54
    }
  },
  {
    "path": "src/test/java/model/meeting/MeetingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Meeting m \u003d new Meeting(\"CS2113T Meeting.Meeting\", 1, LocalTime.parse(\"14:00\"), 1, LocalTime.parse(\"15:00\"), 1, 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(\"CS2113T Meeting.Meeting, 1, 14:00, 1, 15:00\", m.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public void testStartEndTime_validTime_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Meeting m \u003d new Meeting(\"CS2113T Meeting.Meeting\", 2, LocalTime.parse(\"10:00\"), 2, LocalTime.parse(\"12:30\"), 1, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        assertEquals(LocalTime.parse(\"10:00\"), m.getStartTime());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        assertEquals(LocalTime.parse(\"12:30\"), m.getEndTime());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 18,
      "synCKun": 2,
      "MeLoveCarbs": 3
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Tommy https://nusmods.com/timetable/sem-2/share?CFG1002\u003dLEC:06\u0026CG2023\u003dPLEC:02,LAB:03,PTUT:02\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2113T\u003dLEC:C01\u0026GES1020\u003dTUT:2,LEC:1\u0026SPH2101\u003dLEC:1,TUT:6"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Patricia https://nusmods.com/timetable/sem-2/share?CG2023\u003dPLEC:03,PTUT:03,LAB:06\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:01,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2113T\u003dLEC:C01\u0026LAT1201\u003dLEC:1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Agnus https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:03,PTUT:03\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:09,LEC:1\u0026CS2113T\u003dLEC:C01"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "timetable"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "more"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "timetable 0 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "more"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "timetable 0 1 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "more"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "contacts"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "meetings"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "delete Patricia"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "schedule test_meeting 15 19:00 15 22:00"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "schedule test_meeting2 16 19:00 16 23:30"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "meetings"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "edit free 0 10 11:30 10 15:00"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "timetable"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 19
    }
  }
]
