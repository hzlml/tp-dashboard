[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Project Template for the tP"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a small CLI Java project. It uses Gradle for build automation and GitHub Actions for CI."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. **IMPORTANT: Locate the `build.gradle` file** in the project directory, select it, and click `OK`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the set up is complete, you can locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end. Also note how Intellij is now using Gradle to run your code (you can make Intellij run the code without Gradle [this way](tutorials/assets/RunUsingIntellij.png))."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "## Build Automation using Gradle"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "This project is already configured to use Gradle. Read the following tutorial to learn how to use gradle to do tasks such as running tests, checking code against teh style rules, and generating the JAR file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "To run _I/O redirection_ tests (aka _Text ui tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "To run JUnit tests (after you have added JUnit tests), you can run the `test` Gradle task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "The project is already configured to use [GitHub actions](https://github.com/features/actions). When you push a commit to your fork or PR against an upstream repo, GitHub actions will run automatically to build and verify the product."
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "MeLoveCarbs": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.2.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    implementation(\"com.google.guava:guava:28.2-jre\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    mainClassName \u003d \"MeetingOrganizer\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    archiveBaseName \u003d \"MeetingOrganizer\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    archiveVersion \u003d \"2.0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "MeLoveCarbs": 7
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | CK | [Github](https://github.com/synCKun) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hong Wei Yang | [Github](https://github.com/MeLoveCarbs) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Xi Zhi | [Github](https://github.com/lowxizhi) | [Portfolio](docs/team/lowxizhi.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Matthew Chan | [Github](https://github.com/matthewc97) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 1,
      "lowxizhi": 1,
      "synCKun": 1,
      "-": 4,
      "MeLoveCarbs": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "# WhenFree - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "By: `AY1920S2-CS2113T-T12-1`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [1. Setting up](#1-setting-up)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * [1.1. Prerequites](#11-Prerequisites)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * [1.1. Setting up project](#12-Setting-up-project)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * [1.1. Verifying setup](#13-Verifying-setup)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [2. Design](#2-design)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.1. Architecture](#21-architecture)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.2. UI component](#22-ui-component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [2.3. Logic component](#23-logic-component)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [2.4. Model component](#24-model-component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\t* [2.5. Storage component](#25-storage-component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.6. Exception classes](#26-exception-classes)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.7. Common classes](#27-common-classes)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [3. Implementation](#3-implementation)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.1. Add new contact](#31-add-new-contact)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.2. List all contacts](#32-list-all-contacts)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.3. Display timetable of selected contacts](#33-display-timetable-of-selected-contacts)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.4. Schedule a new meeting](#34-schedule-a-new-meeting)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.5. Delete a scheduled meeting](#35-delete-a-scheduled-meeting)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\t* [3.6. List all scheduled meetings](#36-list-all-scheduled-meetings)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [4. Documentation](#4-documentation)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [5. Testing](#5-testing)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [6. Dev Ops](#6-dev-ops)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix A: Product Scope](#appendix-a-product-scope)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [A.1. Target user profile](#a1-target-user-profile)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [A.2. Value proposition](#a2-value-proposition)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix C: Use Cases](#appendix-c-use-cases)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix D: Non-Functional Requirements](#appendix-d-non-functional-requirements)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix E: Glossary](#appendix-e-glossary)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix F: Product Survey](#appendix-f-product-survey)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix G: Instructions for Manual Testing](#appendix-g-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [G.1. Launch and Shutdown](#g1-launch-and-shutdown)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [G.2. Saving data](#g2-saving-data)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 1. Setting up"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Prerequisites\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Ensure Java Development Kit(JDK) is 11 or above."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. IDE of your choice. :+1: We recommend IntelliJ IDE since this project is built upon the features of IntelliJ"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3. The setting up of this project would assume that Intellij IDE is your preferred choice of IDE."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Setting up the project\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Fork this repository and ```git clone``` it onto your computer."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. Open Intellij and import the ```build.gradle``` from project directory of the cloned repository."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "[NOTE] If this your first time opening Intellij, you will be greeted wi4. Open ```Gradle``` from the vertical right tabs and type ```gradle run``` to build the project.th a welcome screen. Click ```import project``` \u003e ```build.gradle``` to open up the project."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3. Set up the correct JDK version for Gradle:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Click the ```File``` tab \u003e ```Project Structure``` \u003e ```Platform Settings``` \u003e ```SDK```."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    * Select the path where your JDK(\u003e11) is installed. Click this link if you do not have at least JDK11."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Verifying Setup"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. Open ```Gradle``` from the vertical right tabs and type ```gradle run``` to build the project."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. Try out a few commands as shown on the CLI menu. Click here to know more about each commands."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 2.1. Architecture"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "[Architecture Diagram]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "The architecture diagram above shows an overview of the high-level design of MeetingOrganizer. Meeting Organizer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "adopts an n-tier style architecture where higher layers make use of the services provided by the lower layers."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Here is q quick overview of each layer and the components residing in it."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* UI: The CLI user interface of the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Commons: A collection of classes containing constants such as messages for ```exception```, modules that can\u0027t be formatted, etc."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Logic: The main control unit of the application which handles the business logic of the application."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Model: Holds the data of the application in memory which is easily accessible by any methods that requires it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Storage: Writes data from Model layer to hard disk, as well as reading data from hard disk and storing it into Model layer."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 2.2. UI component"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "[Structure of UI layer]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "The UI consists of...."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "### 2.3. Logic component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "[Structure of logic layer (all sub components)]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The logic component is the brain and backbone of our application. The logic component contains 3 sub-components. The"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "```schedulelogic``` and ```modulelogic``` sub-components work together to enable the generation of common time slots from NUSMODS links."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```commands``` sub-component interprets the user command and calls the ```schedulelogic``` and ```modulelogic``` components."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 2.3.1. logic.modulelogic component"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The modulelogic component retrives modules and module information from NUSMODS links."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The modulelogic component consists of 4 classes: ```TimetableParser```, ```ModuleApiParser```, ```ModuleHandler```, ```LessonsGenerator```."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. ```LessonsGenerator``` uses the ```TimetableParser``` class to acquire the modules a user is taking, including the timeslots of those modules."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. ```LessonsGenerator``` also uses ```Modulehandler``` to retrieve a set of information related to a specific module."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3. With both information, ```LessonsGenerator``` is able to dynamically generate the user\u0027s time-slots stored in ```ArrayList\u003cString[]\u003e``` via a series of Key-Value pair hashing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "4. ```Arraylist\u003cString[]\u003e ``` contains the start/end time, days and weeks of all modules the user is taking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "**Detailed implementation of logic.modulelogic component**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "[TODO: redraw the UML sequence diagram]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![logic.modulelogic Component](images/TimetableParser.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "The above figure shows```TimetableParser```, a private class called exclusively by ```LessonsGenerator```. It makes use of regex to sift through timetable link provided by user in the form of ```String``` object and stores"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "the semester and the user\u0027s module information according to the timetable link provided. It depends on the ```common.Messages``` class to provide the exception message when an incorrect link is being parsed.\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![logic.modulelogic Component](images/ModuleHandler.jpg)\u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " From the figure above, ```ModuleApiParser``` instantiates a HTTP GET request object to fetch a Json object from the open-sourced NUSMOD API server, and is called by ```ModuleHandler``` every time a particular module information is requested."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " Blacklisted modules are filtered out based on the data from ```common.BlacklistedModule```. [NOTE] Blacklisted modules are modules that doesn\u0027t follow the conventional"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " 13 weeks programme and as such, ```ModuleHandler``` is unable to handle the JSON and parse it correctly."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```ModuleHandler``` cleans the data provided by ```ModuleApiParser``` and stores an easy to use data structure to be used by ```LessonsGenerator```."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![logic.modulelogic Component](images/LessonsGenerator.jpg)\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " Finally, ```LessonsGenerator``` collates the returned data structure from both ```ModuleHandler```(looped for as many modules the user takes) and ```TimetableParser```, calling```.lessonsChecker()``` simultaneously to create a set of information containing the start-time, end-time, day, weeks of the modules that a user is taking."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " The information from ```LessonsGenerator``` would then be included in the schedule of a particular ```TeamMember```."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 2.3.2. logic.schedulelogic component"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```schedulelogic``` component finds common time slots from team members\u0027 schedules."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```schedulelogic``` consists of the class ```ScheduleHandler```. "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "1. ```ScheduleHandler``` retrieves the schedule of selected ```Contact```s in the ```ContactList```, to generate a combined schedule."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "2. ```ScheduleHandler``` checks if a time slot fits in the main user\u0027s schedule."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "**Detailed implementation of logic.schedulelogic component**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 2.3.4. logic.commands component"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```commands``` component interprets the user command and call the ```modulelogic``` and ```schedulelogic``` components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```commands``` consists of the class ```CommandHandler```."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 2.4. model component"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```model``` component holds data generated in the application in memory. The data can be accessed by methods that require"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "it when the application is running. The model component contains 2 sub-components: ```meeting```, ```contact```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 2.4.1. model.meeting component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```meeting``` component of our application consists of 2 classes: ```Meeting```, ```MeetingList```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 2.4.2. model.contact component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The ```contact``` component of our application consists of 2 classes: ```TeamMember```, ```TeamMemberList```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "1. ```TeamMember``` consists of information of a member\u0027s name and schedule."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "2. ```TeamMemberList``` is a ```Arraylist\u003cTeamMember\u003e ``` which new ```TeamMember``` can be added to."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 2.5. Storage component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 2.6. Exception classes"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 2.7. Common classes"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "This section describes some noteworthy details of how the main features of our application works in the backend."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "There are 6 main features: add new contact, list all contacts, display combined timetable of selected contacts, schedule a new meeting, delete a scheduled meeting, list all scheduled meetings."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.1 Add new contact"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.1.1 Design Considerations"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "**Aspect 1: Fetching of module information**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Alternative 1(current choice): Instantiate a ```ModuleHandler``` every time there\u0027s a request for a module information."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Pros: The classes are intuitively separated and data structures returned is understandable."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Cons: Program runs slower for every extra timetable or extra modules taken since its a new instantiation of a ```ModuleHandler```."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Alternative 2: Instantiate ```ModuleHandler``` once for every user. "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Pros: Takes up less memory and setup time for every timetable provided compared to alternative 1."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Cons: The data structure returned by ```ModuleHandler``` would be complicated and confusing for new developers."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "**Aspect 2: Storing blacklisted module information**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Alternative 1(current choice): Create a ```common.BlacklistedModule``` and hash every hard-coded blacklisted module as a constant ```HashSet```."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Pros: There is no need for user to download the blacklisted module, and only the JAR file is required to run this entire application."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Also, user do not need to have a one time set-up where they would wait several minutes for the application to dynamically pull the blacklisted modules from Nusmods API server."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Cons: If the blacklisted modules from Nusmods API gets updated to the conventional 13 weeks programme, developers would have to manually delete the information of those modules from"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "the blacklist, resulting in time wasted everytime there\u0027s an update to module information."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Alternative 2: Dynamically pull the data from Nusmods API server once when user starts the application to retrieve the blacklisted modules, and then periodically update the "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "blacklisted modules every semester."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Pros: The blacklisted modules would be up to date and there is no need for developers to manually edit the ```common.BlacklistedModule``` class."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Cons: The one-time set up of pulling the data is very time consuming(~2 minutes waiting time), resulting is bad user experience."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Alternative 3: Requires user to download the list of blacklisted modules in addition to the JAR file. "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Pros: User do not have to wait for the one-time set up and the file would be up to date as long as the application is not deprecated."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Cons: Developers would still have to run the method to dynamically pull the blacklisted modules, although it would be less prone to mistake caused by editing the hard-coded blacklist as mentioned in"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Alternative 1. Furthermore, users are required to download the blacklisted file published by the developers every semester in order for the list to be up-to-date."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.2 List all contacts"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.3 Display timetable of selected contacts"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.4 Schedule a new meeting"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.5 Delete a scheduled meeting"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### 3.6 List all scheduled meetings"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 4. Documentation"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 5. Testing"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 6. Dev Ops"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### A.1. Target user profile"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Our application, MeetingOrganizer, is for NUS students and teaching assistants looking to save time finding"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "free-slots for their project meetings, consultations etc. It allow users to add their team members and tutees respectively, and"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "finding a time-slot where everyone would be free."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Target user profile:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Our application if for users that are comfortable using CLI apps and prefer desktop applications rather than phone apps."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Our application targets users in NUS that wish to easily find free-slots amongst their peers studying in NUS as well."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Our application tracks the meetings the user have and shows them on a timetable generated dynamically in CLI."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### A.2. Value proposition"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix C: Use Cases"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix E: Glossary"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix F: Product Survey"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix G: Instructions for Manual Testing"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\u003e :information_source: These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing. "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### G.1. Launch and Shutdown"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### G.2. Saving data"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 50,
      "lowxizhi": 76,
      "-": 27,
      "MeLoveCarbs": 84
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Meeting Organizer is a friendly chatbot that helps you find common free time among you and your friends, using just the NUSMODS links to your school timetable."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 2,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003c/br\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "WhenFree is a chatbot that helps you find common free time among your and your friends, "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "using just the NUSMODS links to your school timetable. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "WhenFree is for NUS students who want to save time gathering their friends\u0027 schedules to set up a "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "meeting, whether for a long project discussion or a quick meal. With an easy-to-use command line interface, anyone can"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "set up and use this application easily by following along this User Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Get ready the NUSMODS links of you and your friends, and let\u0027s get started!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "1. Ensure that you have Java 11 or later versions of Java installed on your computer. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    - To check the version of Java on your computer, follow the instructions [here](https://www.wikihow.com/Check-Your-Java-Version-in-the-Windows-Command-Line). "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    - To download the latest version of Java on your computer, visit [here](https://www.oracle.com/java/technologies/javase-downloads.html)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "2. Download the .jar file of our latest release of WhenFree, V2.1 [here](https://github.com/AY1920S2-CS2113T-T12-1/tp/releases)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "3. Copy the downloaded .jar file to an empty folder."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "4. Open Command Prompt or Terminal and navigate to the folder using ```cd \u003cfolder path\u003e```."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "5. Run the .jar file using ```java -jar \u003c.jar file name\u003e```."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "You will see this welcome message if you have done the above steps correctly."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "TODO: change image"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "![](images/capture.png)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "The following part of the User Guide will explain the features of WhenFree in detail. You can follow along as we go through each of the features if you are starting out, or skip ahead to the [Command Summary](#command-summary) to see the commands of all features."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- [Add a new contact](#add-a-new-contact)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- [List all contacts](#list-all-contacts-contacts)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- [Display timetable of selected contacts](#display-timetable-of-selected-contacts-timetable)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "- [Schedule a new meeting](#schedule-a-new-meeting-schedule)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- [Edit a contact\u0027s timetable](#edit-a-contact\u0027s-timetable-edit)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- [Delete a meeting](#delete-a-meeting-delete--m)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- [Delete a contact](#delete-a-contact-delete--c)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- [List all meetings](#list-all-meetings-meetings)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- [Exit application](#exit-application-exit)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Add a new contact"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Adds you or your friend into the list of contacts. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "You will need to key in **name** and **NUSMODS link** of the "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "contact."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    \u003cname\u003e \u003cNUSMODS link\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Juan https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:01,PTUT:01\u0026CG2027\u003dTUT:01,LEC:01\u0026CG2028\u003dTUT:01,LAB:02,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:08,LEC:1\u0026CS2113T\u003dLEC:C01"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "TODO: change image so that the words are the same font size"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "![](images/capture.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- You must add in your (main user\u0027s) contact before you can use the application. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "If you try to enter a command before adding in your contact, WhenFree will remind"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "you to key in your contact first."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "TODO: change image"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "![](images/capture.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- You can add as many contacts as you want thereafter."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### List all contacts: `contacts`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Displays index and names of all added contacts stored in the program."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    contacts "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    contacts"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![](images/capture2.png)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Display timetable of selected contacts: `timetable`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "1) Displays your (main user\u0027s) timetable."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    Format: "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        timetable "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    Example of usage: "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        timetable"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    TODO: update image"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    ![](images/capture3.png)`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    A cross in a 30-minute square of the timetable represents \"busy\", while an empty square represents \"free\"."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "2) Displays the timetable of a selected contact. You will need to key in **Contact Index** of the selected contact."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    Format: "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        timetable \u003cContact Index\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    Example of usage: "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        timetable 1"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    TODO: update image"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    ![](images/capture4.png)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "3) Displays the combined timetable of multiple selected contacts. You will need to key in **Contact Index** of "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "each of the selected contacts."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "   "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "   Format: "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "   "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "       timetable \u003cContact A Index\u003e \u003cContact B index\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "   "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "   Example of usage: "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "   "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "       timetable 0 1 2"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    TODO: update image"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    ![](images/capture5.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- The `timetable` feature displays your timetable only for the current week. "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- **To see next week\u0027s timetable, use the command  `more` after the `timetable` command.** You can use the command `more` only once i.e. you can display up to 2 weeks of timetable."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- You can check `\u003cContact Index\u003e` of the contact(s) whose timetable you wish to display, by listing all contacts using "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "`contacts`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- Both `timetable` and `timetable 0 ` display your (main user\u0027s) timetable."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "   "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Schedule a new meeting: `schedule`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Schedules a new meeting at a specified time slot and adds it into the meeting list. You will need to key in "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "**Meeting Name**, and specify the meeting time slot with **Start Day**, **Start Time**, **End Day**, **End Time**."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    schedule \u003cMeeting Name\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    schedule meeting 3 17:00 3 19:00"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![](images/capture6.png)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- Scheduling a meeting will modify only your (main user\u0027s) timetable, to be busy at the specified time slot. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Timetables of other contacts will not be modified."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- You cannot schedule a meeting if your timetable is busy at the specified time slot. When Free will remind you to check"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "`timetable` if you try to schedule a meeting during a time slot which you are busy for."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    TODO change image"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    ![](images/capture6.png)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003c/br\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Edit a contact\u0027s timetable: `edit`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "1) Edit a contact\u0027s timetable to be **busy** for a specified time slot. You will need to key in **Contact Index**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "of the contact, and specify the time slot to be marked busy with **Start Day**, **Start Time**, **End Day**, **End Time**."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    Format: "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        edit busy \u003cContact Index\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    Example of usage:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        edit busy 0 2 22:00 2 23:00"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    TODO change image"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    ![](images/capture6.png)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "2) Edit a contact\u0027s timetable to be **free** for a specified time slot. You will need to key in the **Contact Index** of"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " the contact, and specify the time slot to be marked free with **Start Day**, **Start Time**, **End Day**, **End Time**."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    Format: "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        edit busy \u003cContact Index\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    Example of usage:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        edit free 0 2 22:00 2 23:00"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    TODO change image"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    ![](images/capture6.png)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- You can check `\u003cContact Index\u003e` of the contact whose timetable you wish to edit, by listing all contacts using "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "`contacts`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- You can check the timetable of the contact you wish to edit, by displaying his/her timetable using "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "`timetable \u003cContact Index\u003e`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- When editing your (main user\u0027s) timetable, be careful not to edit over a scheduled meeting\u0027s time slot. WhenFree "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "will remind you to check `meetings` if you try to edit over a scheduled meeting."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    TODO change image"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    ![](images/capture6.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003c/br\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Delete a meeting: `delete -m`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Deletes a scheduled meeting from the meeting list. You will need to key in **Meeting Index** of the meeting you wish "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "to delete."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    delete -m \u003cMeeting Index\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    delete -m 1"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "TODO change image"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![](images/capture7.png)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- You can check `\u003cMeeting Index\u003e` of the meeting you wish to delete, by first listing all meetings using `meetings`."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- Be careful to include the -m tag in `delete -m` when you wish to delete a meeting. "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- `delete -m` which is used to delete a meeting, should be differentiated from `delete -c` which is used to delete a contact."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Delete a contact: `delete -c`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Deletes a contact from the contact list. You will need to key in **Contact Index** of the contact you wish "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "to delete."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    delete -c \u003cContact Index\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    delete -c 1"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- You can check `\u003cContact Index\u003e` of the contact you wish to delete, by first listing all added contacts using `contacts`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- Be careful to include the -c tag in `delete -c` when you wish to delete a contact. "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "- `delete -c` which is used to delete a contact, should be differentiated from `delete -m` which is used to delete a meeting."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    TODO change image"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    ![](images/capture7.png)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003c/br\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### List all meetings: `meetings`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "List all scheduled meetings stored in program."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    meetings"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    meetings"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![](images/capture8.png)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003c/br\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### Exit the application: `exit`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Exits the application and ends the current session."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    exit"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    exit"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![](images/capture9.png)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "\u003c/br\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "-  **Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "   **A**: Copy the `data` file in the root directory and paste into the root directory in the other computer."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "| Feature     | Format      | Example usage |"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "| ----------- | ----------- | --------------|"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "| Adding a new contact     | `\u003cname\u003e \u003cNUSMODS link\u003e`      | `Juan https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:01,PTUT:01\u0026CG2027\u003dTUT:01,LEC:01\u0026CG2028\u003dTUT:01,LAB:02,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:08,LEC:1\u0026CS2113T\u003dLEC:C01` |"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "| List all contacts     | `contacts`      | `contacts` |"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "| Display timetable of selected contacts     | `timetable` \u003cbr\u003e\u003cbr\u003e `timetable \u003cMember Index\u003e` \u003cbr\u003e\u003cbr\u003e `timetable \u003cMember A Index\u003e \u003cMember B Index\u003e`      | `timetable` \u003cbr\u003e\u003cbr\u003e `timetable 1` \u003cbr\u003e\u003cbr\u003e `timetable 0 1 2`  |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "| Schedule a new meeting     | `schedule \u003cMeeting Name\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e`      | `schedule meeting 3 17:00 3 19:00` |"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "| Edit a contact\u0027s timetable     | `edit busy \u003cContact Index\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e` \u003cbr\u003e\u003cbr\u003e `edit free \u003cContact Index\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e`      | `edit busy 0 2 22:00 2 23:00` \u003cbr\u003e\u003cbr\u003e `edit busy 0 2 22:00 2 23:00` |"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "| Delete a meeting     | `delete -m \u003cMeeting Index\u003e`      | `delete -m 1` |"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "| Delete a contact     | `delete -c \u003cContact Index\u003e`      | `delete -c 1` |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "| List all scheduled meetings     | `meetings`      | `meetings` |"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "| Exit application     | `exit`      | `exit` |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "matthewc97": 20,
      "lowxizhi": 230,
      "synCKun": 10,
      "-": 30,
      "MeLoveCarbs": 13
    }
  },
  {
    "path": "docs/team/lowxizhi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "# Low Xi Zhi - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 6
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 logic.command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "@rem Get logic.command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "@rem Slurp the logic.command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "@rem Setup the logic.command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "-": 99,
      "MeLoveCarbs": 4
    }
  },
  {
    "path": "src/main/java/MeetingOrganizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import logic.command.CommandHandler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.MoException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.MeetingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.ContactList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import ui.TextUI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import static common.Messages.MESSAGE_WRONG_COMMAND_DELETE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class MeetingOrganizer {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private MeetingList myMeetingList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ContactList myContactList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private Contact mainUser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private int currentWeekNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final int RECESS_WEEK \u003d 14;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final int FREE_WEEK \u003d 15;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public MeetingOrganizer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //declare objects here"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        myMeetingList \u003d new MeetingList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        getWeekNumber();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            storage \u003d new Storage(\"data/meeting_list.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myContactList \u003d new ContactList(storage.loadMemberListFromDisk());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            myMeetingList \u003d new MeetingList(storage.loadMeetingListFromDisk());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.introMsg();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (myContactList.getSize() \u003e 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                for (int i \u003d 0; i \u003c myContactList.getSize(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    if (myContactList.getContactList().get(i).isMainUser()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        mainUser \u003d myContactList.getContactList().get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                ArrayList\u003cContact\u003e contactList \u003d myContactList.getContactList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                // Shift mainUser to index 0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                for (int j \u003d 0; j \u003c contactList.size(); j++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    if (contactList.get(j).isMainUser()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        Contact toSwap \u003d contactList.get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        contactList.set(0, contactList.get(j));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        contactList.set(j, toSwap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            assert getMainUser() !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            CommandHandler.listContacts(getMyContactList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.introMsg();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.showLoadingError();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            myMeetingList \u003d new MeetingList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myContactList \u003d new ContactList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (MoException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        new MeetingOrganizer().run();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    void botResponse(String[] userInputWords, String previousUserInput)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            throws MoException, DateTimeParseException, NumberFormatException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String userCommand \u003d userInputWords[0];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        // To adapt user input of format \u003cname\u003e \u003cNUSMODS link\u003e to fit into the following switch statements to allow"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        // for both link and manual input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        // TODO member\u0027s name can only be 1 word at the moment."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (userInputWords.length \u003d\u003d 2 \u0026\u0026 userInputWords[1].contains(\"http\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            //eg. xz https://nusmods.com/timetable/sem-2/share?CFG1002\u003dLEC:06\u0026CG2023\u003dPLEC:02,LAB:03,PTUT:02\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2113T\u003dLEC:C01\u0026GES1020\u003dTUT:2,LEC:1\u0026SPH2101\u003dLEC:1,TUT:6"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            Contact newMember;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            newMember \u003d CommandHandler.addContact(myContactList, userInputWords, null, null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (checkMainUserDoesNotExists()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                mainUser \u003d newMember;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                newMember.setMainUser();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myContactList.add(newMember);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (checkMainUserDoesNotExists()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new MoException(\"Please enter main user first.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            switch (userCommand) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            case \"more\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (previousUserInput.equals(\"\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    throw new MoException(\"Nothing to see more of.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                } else if (previousUserInput.contains(\"timetable\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    int weeksMoreToView \u003d 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    CommandHandler.displayTimetable(userInputWords, getMainUser(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            getMyContactList(), currentWeekNumber, weeksMoreToView);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                } else if (previousUserInput.equals(\"more\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    throw new MoException(\"No more :o\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    throw new MoException(\"more does not work with this command.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            case \"edit\": // edit busy \u003cMember Number\u003e \u003cstartDay\u003e \u003cstartTime\u003e \u003cendDay\u003e \u003cendTime\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                // OR edit free \u003cMember Number\u003e \u003cstartDay\u003e \u003cstartTime\u003e \u003cendDay\u003e \u003cendTime\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                // (eg. edit busy 0 2 22:00 2 23:00)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                CommandHandler.editContact(userInputWords, getMainUser(), getMyContactList(), currentWeekNumber);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            case \"contacts\":  //list all contacts. contacts"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                CommandHandler.listContacts(getMyContactList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            case \"timetable\": //timetable OR timetable \u003cMember Number\u003e OR timetable \u003cMember Number1\u003e \u003cMember Number2\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                //(eg. timetable 0 1 3)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                int weeksMoreToView \u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                CommandHandler.displayTimetable(userInputWords, getMainUser(), getMyContactList(), currentWeekNumber, weeksMoreToView);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            case \"schedule\": //schedule a meeting. schedule \u003cMeeting Name\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                //(eg. schedule meeting 3 17:00 3 19:00)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                CommandHandler.scheduleMeeting(userInputWords, getMyMeetingList(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        getMainUser(), getMyContactList(), currentWeekNumber);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            case \"delete\": //delete a model.meeting slot. delete \u003cMeeting Number\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    if (userInputWords.length !\u003d 2) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        throw new MoException(MESSAGE_WRONG_COMMAND_DELETE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    int numCheck \u003d Integer.parseInt(userInputWords[1]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    CommandHandler.deleteMeeting(userInputWords, getMyMeetingList(), getMainUser(), getMyContactList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    myContactList.remove(userInputWords[1]);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                } catch (MoException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    TextUI.printFormatDeleteMember();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    TextUI.printFormatDeleteMeeting();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            case \"meetings\": //list all scheduled model.meeting slots. meetings"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                CommandHandler.listMeetings(userInputWords, getMyMeetingList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new MoException(\"Unknown command, please try again.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     * Main entry-point for the application."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String previousUserInput \u003d \"\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        TextUI.menuMsg(myContactList.getSize());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (userInput.equals(\"exit\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String[] userInputWords \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                botResponse(userInputWords, previousUserInput);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                storage.updateMeetingListToDisk(myMeetingList.getMeetingList());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                storage.updateMemberListToDisk(myContactList.getContactList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                previousUserInput \u003d userInput;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } catch (MoException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.errorMsg(e);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.timeOutOfRangeMsg();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.invalidNumberMsg();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.indexOutOfBoundsMsg();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                TextUI.menuMsg(myContactList.getSize());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        TextUI.exitMsg();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private Boolean checkMainUserDoesNotExists() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return (myContactList.getSize() \u003d\u003d 0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private Contact getMainUser() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return mainUser;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ContactList getMyContactList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return myContactList;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private MeetingList getMyMeetingList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return myMeetingList;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private void getWeekNumber() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] tempTime \u003d java.util.Calendar.getInstance().getTime().toString().split(\" \"); //Thu Mar 26 08:22:02 IST 2015"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.day \u003d tempTime[0];"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String month \u003d tempTime[1];"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int date \u003d Integer.parseInt(tempTime[2]);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //week starts on Sunday"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Jan\":"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (date \u003e\u003d 12 \u0026\u0026 date \u003c\u003d 18) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 1;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 19 \u0026\u0026 date \u003c\u003d 25) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 2;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 26) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 3;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Feb\":"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (date \u003c\u003d 1) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 3;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 2 \u0026\u0026 date \u003c\u003d 8) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 4;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 9 \u0026\u0026 date \u003c\u003d 15) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 5;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 16 \u0026\u0026 date \u003c\u003d 20) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 6;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 21) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d RECESS_WEEK;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Mar\":"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (date \u003e\u003d 1 \u0026\u0026 date \u003c\u003d 7) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 7;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 8 \u0026\u0026 date \u003c\u003d 14) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 8;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 15 \u0026\u0026 date \u003c\u003d 21) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 9;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 22 \u0026\u0026 date \u003c\u003d 28) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 10;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 29) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 11;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Apr\":"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (date \u003c\u003d 4) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 11;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 5 \u0026\u0026 date \u003c\u003d 11) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 12;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 12 \u0026\u0026 date \u003c\u003d 18) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d 13;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (date \u003e\u003d 19) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                currentWeekNumber \u003d FREE_WEEK;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            currentWeekNumber \u003d FREE_WEEK;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "matthewc97": 7,
      "lowxizhi": 54,
      "synCKun": 133,
      "-": 4,
      "MeLoveCarbs": 64
    }
  },
  {
    "path": "src/main/java/common/BlacklistedModules.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import logic.modulelogic.ModuleHandler;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Contains all modules in AY19/20 with ill-formated JSON data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class BlacklistedModules {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final String[] arr \u003d {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ACC3704\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"AR1101\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"AR2101\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMA5505\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMA5801\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMA5902\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5003A\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5004A\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5004B\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5007A\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5008B\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5011B\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5012\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5012A\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5022\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5028\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMC5033\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BME5043\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BME5049\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BME5056A\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BME5056B\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMF5344\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMK6111R\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMM5101\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMM5105\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMS5900\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMU5003\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMU5006\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMU5008\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMU5014\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMU5017\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BMU5018\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"BSN3713\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE4257B\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5104A\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5106A\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5106B\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5107B\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5108A\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5113A\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5113B\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5509A\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5509B\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5603A\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5603B\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5610B\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5611B\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5806A\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CE5883A\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CM1417X\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN1111E\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN2116E\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN2125E\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN3124E\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN4227E\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN4233E\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN4240E\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CN4242E\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"CS1010X\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"DEP5111\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"DL5103\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"DL5201\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5001\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5002\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5102\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5103\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5104\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5201\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5203\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5204\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5205\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5206\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5207\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EB5208\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EBA5001\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EBA5002\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EBA5003\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EBA5004\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EBA5005\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EBA5006\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EE3331E\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EE5020\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EE5022\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EE5024\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EE5026\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EE5027\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"EG3301R\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ESE5202A\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ESE5202B\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ESE5402A\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ESE5901A\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ESE5901B\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"FIN6003\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"GMS1000\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"GMS6810\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"GMS6812\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"GMS6850\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"GMS6904\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"GMS6951\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IE2110E\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IE4259E\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5101\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5102\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5103\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5104\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5105\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5106\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5202\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5203\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IL5204\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ISY5001\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ISY5002\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ISY5003\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ISY5004\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ISY5005\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IT5001\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IT5003\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"IT5004\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5006\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5106\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5107\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5108\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5205\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5206\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5207\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"KE5208\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LCC5365\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LCC5366\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL4358Z\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL4359Z\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL4360Z\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL4361Z\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL5358Z\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL5359Z\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL5360Z\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL5361Z\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL6358Z\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL6359Z\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL6360Z\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LL6361Z\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"LSM3211\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MA1301X\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA1115\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA1153\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA2153\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA2154\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA2201\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA3153\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA3154\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA3163\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA3216\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA3228\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA4113\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA4153\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"MUA4154\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR1114A\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR1117\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR2120\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR2122\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR2202C\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR3113\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR3114\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR3117\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR3118\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR3202C\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"NUR3203C\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5203A\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5203B\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5204A\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5206A\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5902\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5905\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5906\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5908\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5911\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"OT5912\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"PP5701\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"PP5702\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"PP5705\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"PP5722\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"PP5723\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"PP6702\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"RE5001\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SA4101\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SA4102\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SA4104\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SA4105\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SA4106\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SA4108\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG4205\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG4207\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG4210\","
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5013\","
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5015\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5016\","
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5017\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5018\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5101\","
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5102\","
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5103\","
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5208\","
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5214\","
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5225\","
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5233\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5234\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5235\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SG5238\","
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SP2201\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SPH5311\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SPH5410\","
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SPH5411\","
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SPH6003\","
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ST1232\","
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"ST5241A\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SWE5001\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SWE5002\","
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SWE5003\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SWE5004\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"SWE5005\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TBA3102\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TC1411\","
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TC1422\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN1111\","
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN1411\","
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN1422\","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN2116\","
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN2125\","
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN3124\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN4227\","
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN4233\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN4240\","
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TCN4242\","
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TE2101\","
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TEE2101\","
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TEE3331\","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TIE2110\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TIE4259\","
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        \"TSC3222\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    };"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final Set\u003cString\u003e blacklistModule \u003d Set.of(arr);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Run this to retrieve all the modules that doesn\u0027t follow the conventional format and"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * store it into /UnformattedModules file."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"UnformattedModules\", true);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        URL url \u003d new URL(\"https://api.nusmods.com/v2/2019-2020/moduleList.json\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        HttpURLConnection request \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        request.connect();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //Convert the input stream to a json element"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        JsonElement root \u003d JsonParser.parseReader(new InputStreamReader((InputStream) request.getContent()));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        JsonArray rootObj \u003d root.getAsJsonArray();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int i \u003d 0; i \u003c rootObj.size(); i++) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonObject module \u003d rootObj.get(i).getAsJsonObject();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String moduleCode \u003d module.get(\"moduleCode\").toString().replaceAll(\"^.|.$\", \"\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                ModuleHandler myModuleHandler \u003d new ModuleHandler(moduleCode);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myModuleHandler.generateModule();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                fw.write(moduleCode + \"\\n\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 291
    }
  },
  {
    "path": "src/main/java/common/LessonType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "synCKun"
        },
        "content": " * Maps the lessonType full name into its coded form to used by NUSMODS link."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Referenced from https://github.com/raynoldng/nusmods-planner/blob/master/nusmodsplanner/definitions.py"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class LessonType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final Map\u003cString, String\u003e lessonType \u003d Map.ofEntries("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Packaged Lecture\", \"PLEC\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Packaged Tutorial\", \"PTUT\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Design Lecture\", \"DLEC\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Laboratory\", \"LAB\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Lecture\", \"LEC\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Recitation\", \"REC\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Sectional Teaching\", \"SEC\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Seminar-style Module Class\", \"SEM\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Tutorial\", \"TUT\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Tutorial Type 2\", \"TUT2\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 1,
      "MeLoveCarbs": 21
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String FORMAT_TIMETABLE \u003d \"To display timetable:\\n\\ttimetable \\n\\ttimetable \u003cMember Number 1\u003e\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            + \"\\n\\ttimetable \u003cMember Number 1\u003e \u003cMember Number 2\u003e\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final String MESSAGE_STARTENDTIME_OUT_OF_RANGE \u003d \"Start and end time must be between of 00:00-23:30!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final String MESSAGE_STARTENDTIME_WRONG_FORMAT \u003d \"Start and end time must be in 30 minutes interval!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_STARTENDDAY_OUT_OF_RANGE \u003d \"Start and end day must be between 0 and 6.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final String MESSAGE_WEEK_RANGE_EMPTY \u003d \"Class does not have lessons.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_INVALID_MEETING \u003d \"Range entered is not within free slots. Check timetable.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_INVALID_EDIT \u003d \"You cannot edit your timetable over a scheduled meeting. Check meetings.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final String MESSAGE_INVALID_MEETING_RANGE \u003d \"Range entered is not valid.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_INVALID_NUMBER \u003d \"You have entered an invalid number.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final String MESSAGE_INVALID_NUSMODLINK \u003d \"You have entered an invalid nusmods link!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final String MESSAGE_MODULECODE_IN_BLACKLIST \u003d \" Module\u0027s information from NUSMOD API is ill-formatted.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final String MESSAGE_EMPTY_MODULE \u003d \"Module either can\u0027t be fetched from NUSMOD API or has been deprecated from NUS\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final String MESSAGE_RETURN_SUCCESS \u003d \"SUCCESS\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static final String MESSAGE_INDEX_OUT_OF_BOUNDS \u003d \"You have entered an index out of bounds.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final String MESSAGE_WRONG_COMMAND_SCHEDULE \u003d \"Wrong format for schedule logic.command!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final String MESSAGE_WRONG_COMMAND_DELETE \u003d \"Wrong format for delete logic.command!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final String MESSAGE_WRONG_COMMAND_MEETING \u003d \"Wrong format for model.meeting logic.command!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 8,
      "synCKun": 5,
      "MeLoveCarbs": 14
    }
  },
  {
    "path": "src/main/java/exception/InvalidUrlException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class InvalidUrlException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public InvalidUrlException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 11
    }
  },
  {
    "path": "src/main/java/exception/MoException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class MoException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public MoException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 11
    }
  },
  {
    "path": "src/main/java/exception/UnformattedModuleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class UnformattedModuleException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public UnformattedModuleException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 11
    }
  },
  {
    "path": "src/main/java/logic/command/CommandHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.InvalidUrlException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.MeetingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import exception.MoException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.Meeting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import logic.modulelogic.LessonsGenerator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import logic.schedulelogic.ScheduleHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.ContactList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import ui.TextUI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_WRONG_COMMAND_DELETE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_WRONG_COMMAND_MEETING;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_WRONG_COMMAND_SCHEDULE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "public class CommandHandler {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static Contact addContact(ContactList myContactList, String[] userInputWords,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                                     Integer startDay, Integer endDay) throws MoException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Contact member;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int checkerForRepeatedName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        checkerForRepeatedName \u003d myContactList.getContactList().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                .mapToInt(person -\u003e check(person, userInputWords[0])).sum();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (checkerForRepeatedName \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            TextUI.showRepeatedPerson(userInputWords[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new MoException(\"Repeated user\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        member \u003d new Contact(userInputWords[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String name \u003d userInputWords[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String url \u003d userInputWords[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        LessonsGenerator myLessonGenerator;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            myLessonGenerator \u003d new LessonsGenerator(url);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myLessonGenerator.generate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString[]\u003e myLessonDetails \u003d myLessonGenerator.getLessonDetails();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int k \u003d 0; k \u003c myLessonDetails.size(); k++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                String startTimeString \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                String endTimeString \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                String[] weeks \u003d new String[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                for (int j \u003d 0; j \u003c myLessonDetails.get(k).length; j++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    switch (j) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    case 0:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        startTimeString \u003d myLessonDetails.get(k)[j].substring(0, 2) + \":\" + myLessonDetails.get(k)[j].substring(2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    case 1:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        endTimeString \u003d myLessonDetails.get(k)[j].substring(0, 2) + \":\" + myLessonDetails.get(k)[j].substring(2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    case 2:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        startDay \u003d getNumberFromDay(myLessonDetails.get(k)[j]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        endDay \u003d startDay;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    case 3:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        weeks \u003d myLessonDetails.get(k)[j].split(\":\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        //future improvement: since myLessonDetails.get(k)[3] contains data on the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        // week number that this class occurs on, add capability of schedule to reflect"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        // schedule of the current week."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        //0900 1200 Friday 5:7:9:11"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        //1600 1800 Thursday 1:2:3:4:5:6:7:8:9:10:11:12:13"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        //1600 1800 Tuesday 1:2:3:4:5:6:7:8:9:10:11:12:13"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        //0900 1200 Tuesday 1:2:3:4:5:6"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        //data only has four sections from api"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        throw new AssertionError(j);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                member.addBusyBlocks(name, startDay, startTimeString, endDay, endTimeString, weeks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            TextUI.showAddedMember(member.getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (InvalidUrlException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return member;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void editContact(String[] userInputWords, Contact mainUser, ContactList contactList,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                                   int currentWeekNumber) throws MoException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (userInputWords.length !\u003d 7) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new MoException(MESSAGE_WRONG_COMMAND_SCHEDULE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int endOfMonthDate \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            endOfMonthDate \u003d getEndOfMonthDate(endOfMonthDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Integer startDay;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Integer endDay;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int startDate \u003d Integer.parseInt(userInputWords[3]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int endDate \u003d Integer.parseInt(userInputWords[5]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int startOfWeekDate \u003d getStartOfWeekDate();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            startDay \u003d getDay(endOfMonthDate, startOfWeekDate, startDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            endDay \u003d getDay(endOfMonthDate, startOfWeekDate, endDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String meetingName \u003d userInputWords[2];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int memberNumber \u003d Integer.parseInt(userInputWords[2]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Contact member \u003d contactList.getContactList().get(memberNumber);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String memberName \u003d member.getName();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(userInputWords[4]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(userInputWords[6]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String startTimeString \u003d userInputWords[4];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String endTimeString \u003d userInputWords[6];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String[] thisWeekNumber \u003d {Integer.toString(currentWeekNumber)};"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (memberNumber !\u003d 0 || ScheduleHandler.isValidEdit(mainUser, startDay, startTime, endDay, endTime, currentWeekNumber)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (userInputWords[1].equals(\"busy\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    member.addBusyBlocks(memberName, startDay, startTimeString, endDay, endTimeString,thisWeekNumber);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                } else if (userInputWords[1].equals(\"free\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    member.addFreeBlocks(memberName, startDay, startTimeString, endDay, endTimeString,thisWeekNumber);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.showContactEdited(member.getName(),userInputWords[2]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new AssertionError(\"isValidEdit() should not return false\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (MoException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatEdit();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.timeOutOfRangeMsg();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatEdit();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.invalidNumberMsg();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatEdit();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static Integer getNumberFromDay(String day) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int dayInNumber;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Monday\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Tuesday\":"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 2;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Wednesday\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 3;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Thursday\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 4;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Friday\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 5;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Saturday\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 6;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"Sunday\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d 0;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            dayInNumber \u003d Integer.parseInt(null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return dayInNumber;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static int check(Contact person, String name) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (person.getName().equals(name)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void listMeetings(String[] userInputWords, MeetingList meetingList) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            if (userInputWords.length !\u003d 1) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                throw new MoException(MESSAGE_WRONG_COMMAND_MEETING);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            meetingList.show();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        } catch (MoException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            TextUI.printFormatMeeting();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void deleteMeeting(String[] userInputWords, MeetingList meetingList, Contact mainUser, ContactList"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            contactList) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            int index \u003d Integer.parseInt(userInputWords[1]) - 1;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Meeting meetingToDelete \u003d meetingList.getMeetingList().get(index);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String meetingNameToDelete \u003d meetingToDelete.getMeetingName();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            mainUser.deleteBlocksWithName(meetingNameToDelete);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            meetingList.delete(index);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            contactList.set(0, mainUser);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.displayInvalidDeleteTarget();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void scheduleMeeting(String[] userInputWords, MeetingList meetingList, Contact mainUser,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                       ContactList contactList, int currentWeekNumber) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (userInputWords.length \u003c 6) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new MoException(MESSAGE_WRONG_COMMAND_SCHEDULE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            int endOfMonthDate \u003d 0;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            endOfMonthDate \u003d getEndOfMonthDate(endOfMonthDate);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Integer startDay;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Integer endDay;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            int startOfWeekDate \u003d getStartOfWeekDate();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String meetingName \u003d userInputWords[1];"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            int startDate \u003d Integer.parseInt(userInputWords[2]);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            int endDate \u003d Integer.parseInt(userInputWords[4]);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            startDay \u003d getDay(endOfMonthDate, startOfWeekDate, startDate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            endDay \u003d getDay(endOfMonthDate, startOfWeekDate, endDate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(userInputWords[3]);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(userInputWords[5]);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (ScheduleHandler.isValidMeeting(mainUser, startDay, startTime, endDay, endTime, currentWeekNumber)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                Meeting myMeeting \u003d new Meeting(meetingName, startDay, startTime, endDay, endTime, startDate, endDate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                meetingList.add(myMeeting);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                String[] thisWeekNumber \u003d {Integer.toString(currentWeekNumber)};"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                mainUser.addBusyBlocks(\"meeting\", startDay, userInputWords[3], endDay, userInputWords[5], thisWeekNumber);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.meetingListSizeMsg(meetingList);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                System.out.println(\"Schedule is blocked at that timeslot\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (MoException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatSchedule();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.timeOutOfRangeMsg();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatSchedule();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.invalidNumberMsg();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatSchedule();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        // Replace main user\u0027s timetable with updated model.meeting blocks into TeamMember.TeamMemberList for model.storage purposes."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        contactList.set(0, mainUser);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private static Integer getDay(int endOfMonthDate, int startOfWeekDate, int startDate) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Integer day;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        if (startDate - startOfWeekDate \u003c 0) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            day \u003d endOfMonthDate - startOfWeekDate + startDate;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            day \u003d startDate - startOfWeekDate;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static int getEndOfMonthDate(int endOfMonthDate) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String day \u003d (cal.getTime().toString().split(\" \"))[0];"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String month \u003d (cal.getTime().toString().split(\" \"))[1];"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int distFromPreviousSunday \u003d 0;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 6 \u0026\u0026 !day.equals(\"Sun\"); distFromPreviousSunday++, i++) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (!(cal.getTime().toString().split(\" \"))[1].equals(month)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                endOfMonthDate \u003d Integer.parseInt(cal.getTime().toString().split(\" \")[2]);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d (cal.getTime().toString().split(\" \"))[0];"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Calendar cal2 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c (14 - distFromPreviousSunday); i++) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (!(cal2.getTime().toString().split(\" \"))[1].equals(month)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            endOfMonthDate \u003d Integer.parseInt(cal2.getTime().toString().split(\" \")[2]);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal2.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return endOfMonthDate;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static int getDateOfPreviousSunday(String[] data) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int date;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        switch (data[0]) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sun\":"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date \u003d Integer.parseInt(data[2]);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Mon\":"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Tue\":"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -2);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Wed\":"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -3);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Thu\":"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -4);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Fri\":"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -5);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sat\":"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -6);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, 0);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] temp \u003d cal.getTime().toString().split(\" \");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        date \u003d Integer.parseInt(temp[2]);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static int getStartOfWeekDate() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] data \u003d java.util.Calendar.getInstance().getTime().toString().split(\" \");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String day \u003d data[0];"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int date \u003d Integer.parseInt(data[2]);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Mon\":"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date -\u003d 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Tue\":"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date -\u003d 2;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Wed\":"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date -\u003d 3;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Thu\":"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date -\u003d 4;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Fri\":"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date -\u003d 5;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sat\":"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date -\u003d 6;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sun\":"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date \u003d date;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            date \u003d date;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayTimetable(String[] userInputWords, Contact mainUser,"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                        ContactList contactList, int weekNumber, int weeksMoreToView) throws MoException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int memberNumber;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Contact member;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String todayDate \u003d java.util.Calendar.getInstance().getTime().toString().substring(0, 10).trim();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (userInputWords.length \u003e 1) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                ArrayList\u003cContact\u003e myScheduleList \u003d new ArrayList\u003cContact\u003e();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int i \u003d 1; i \u003c userInputWords.length; i++) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    memberNumber \u003d Integer.parseInt(userInputWords[i]);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    member \u003d contactList.getContactList().get(memberNumber);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    myScheduleList.add(member);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                ScheduleHandler myScheduleHandler \u003d new ScheduleHandler(myScheduleList);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                Boolean[][][] myMasterSchedule;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                myMasterSchedule \u003d myScheduleHandler.getMasterSchedule();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println(\"Today is \" + todayDate + \", week \" + weekNumber + \".\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println(\"Timetable of the selected team member/s this week:\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                TextUI.printTimetable(myMasterSchedule, weeksMoreToView, weekNumber);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println(\"Today is \" + todayDate + \", week \" + weekNumber + \".\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println(\"Your timetable this week:\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                TextUI.printTimetable(mainUser.getSchedule(), weeksMoreToView, weekNumber);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.indexOutOfBoundsMsg();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatTimetable();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.invalidNumberMsg();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            TextUI.printFormatTimetable();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void listContacts(ContactList contactList) throws MoException {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            TextUI.teamMemberListMsg(contactList.getContactList());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            throw new MoException(\"You have no stored contacts.\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 10,
      "lowxizhi": 139,
      "synCKun": 134,
      "MeLoveCarbs": 109
    }
  },
  {
    "path": "src/main/java/logic/modulelogic/LessonsGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.common.collect.ArrayListMultimap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.common.collect.Multimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.LessonType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.InvalidUrlException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.UnformattedModuleException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * This class retrieves information from both TimetableParser and ModuleHandler classes to generate a data structure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * containing all the modules a user is taking and is to be used by the logic.schedulelogic component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * The data structure used is an ArrayList of String[] called myLessonDetails and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * it contains an ArrayList of lessons in the form: startTime, endTime, day, weeks(delimited by \u0027:\u0027)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class LessonsGenerator {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private TimetableParser myTimetableParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cString[]\u003e myLessonsDetails;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public LessonsGenerator(String nusmodsLink) throws InvalidUrlException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.myTimetableParser \u003d new TimetableParser(nusmodsLink);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.myLessonsDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    //static main method for easy in-class behaviour testing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void main(String[] args) throws InvalidUrlException, IOException, UnformattedModuleException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //observe behaviour by substituting field in BackendAPI.LessonsGenerator() with other NUSMODS link"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        LessonsGenerator mylesson \u003d new LessonsGenerator(\"https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:03,PTUT:03\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:09,LEC:1\u0026CS2113T\u003dLEC:C01\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        mylesson.generate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString[]\u003e myLessonDetails \u003d mylesson.getLessonDetails();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int i \u003d 0; i \u003c myLessonDetails.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int j \u003d 0; j \u003c myLessonDetails.get(i).length; j++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                System.out.print(myLessonDetails.get(i)[j] + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Generates user\u0027s blocked time-slots based on his/her Nusmods timetable."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public String generate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        message \u003d myTimetableParser.parse();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (!message.equals(MESSAGE_RETURN_SUCCESS)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //Key-value pair: Key \u003d module code, Value \u003d LessonType:Class number(delimited by :)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map\u003cString, ArrayList\u003cString\u003e\u003e userLessons \u003d myTimetableParser.getModulesMap();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e userModules \u003d myTimetableParser.getModulesArr();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        // Zero based indexing: Semester 1 \u003d 0, Semester 2 \u003d 1"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Integer semester \u003d Integer.parseInt(myTimetableParser.getSemester()) - 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String module : userModules) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ModuleHandler myModuleHandler \u003d new ModuleHandler(module);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            message \u003d myModuleHandler.generateModule();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (!message.equals(MESSAGE_RETURN_SUCCESS)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                return message;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            // The index of the following ArrayList matches - classNumber[0] and lessonType[0] is the same lesson,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            // and it\u0027s startTime, endTime \u003d startTime[0], endTime[0]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e classNumber \u003d myModuleHandler.getClassNumber().get(semester);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e lessonType \u003d myModuleHandler.getLessonType().get(semester);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e startTime \u003d myModuleHandler.getStartTime().get(semester);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e endTime \u003d myModuleHandler.getEndTime().get(semester);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e day \u003d myModuleHandler.getDay().get(semester);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cArrayList\u003cString\u003e\u003e weeks \u003d myModuleHandler.getWeeks().get(semester);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e delimitedWeeks \u003d delimitWeeks(weeks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            Multimap\u003cString, String[]\u003e allLessonMap \u003d ArrayListMultimap.create();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int i \u003d 0; i \u003c classNumber.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                String lessonTypeLongFormat \u003d lessonType.get(i);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                String lessonTypeShortFormat \u003d LessonType.lessonType.get(lessonTypeLongFormat);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                allLessonMap.put(lessonTypeShortFormat + \":\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        + classNumber.get(i), new String[]{startTime.get(i), endTime.get(i), day.get(i), delimitedWeeks.get(i)});"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e userModuleProfile \u003d userLessons.get(module);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            lessonsChecker(allLessonMap, userModuleProfile);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Checks if \"lessonType:classNo\" from userModuleProfile matches Multimap\u0027s key. If it does,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * add the matched value pair containing an array(size 4) of startTime, endTime, day and weeks into mylessonsDetails."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param allLessonMap      All lesson information where Key equals \"lessonType:classNo\"."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param userModuleProfile ArrayList of \"lessonType:classNo\" that user has taken for a particular module,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *                          used to do key matching."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private void lessonsChecker(Multimap\u003cString, String[]\u003e allLessonMap, ArrayList\u003cString\u003e userModuleProfile) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String s : userModuleProfile) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (allLessonMap.containsKey(s)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                Collection\u003cString[]\u003e values \u003d allLessonMap.get(s);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myLessonsDetails.addAll(values);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Refactor \"weeks\" data structure into 1 single ArrayList, originally a 2D ArrayList."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param weeks 2D ArrayList weeks: For eg, weeks.get(0) \u003d weeks at classNo 0 \u003d array of [1, 2, 3, 6, 13]."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @return Delimited weeks indexed by each lessons,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *         For eg, weeks.get(0) is now a String \u003d \"1:2:3:6:13\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cString\u003e delimitWeeks(ArrayList\u003cArrayList\u003cString\u003e\u003e weeks) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e delimitedWeeks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (ArrayList\u003cString\u003e elemArr : weeks) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String delimitedString \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int i \u003d 0; i \u003c elemArr.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                delimitedString \u003d delimitedString + elemArr.get(i) + \":\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            delimitedString +\u003d elemArr.get(elemArr.size() - 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            delimitedWeeks.add(delimitedString);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return delimitedWeeks;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cString[]\u003e getLessonDetails() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.myLessonsDetails;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 5,
      "MeLoveCarbs": 127
    }
  },
  {
    "path": "src/main/java/logic/modulelogic/ModuleApiParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Handles the HTTP requests from NUSMOD API server."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "synCKun"
        },
        "content": " * Data grabbed from NUSMODS API: https://api.nusmods.com/v2/2019-2020/modules/MODULECODE.json"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ModuleApiParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    String apiUrl;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private final String templateUrl \u003d \"https://api.nusmods.com/v2/2019-2020/modules/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ModuleApiParser(String moduleName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        apiUrl \u003d templateUrl + moduleName + \".json\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /** Parses weblink into JsonArray."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @return 1 NUS module in JSONArray format from API,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *         if unable to access API, returns an empty JsonArray."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public JsonArray parse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            URL url \u003d new URL(apiUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            HttpURLConnection request \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            request.connect();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            //Convert the input stream to a json element"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonElement root \u003d JsonParser.parseReader(new InputStreamReader((InputStream) request.getContent()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonObject rootObj \u003d root.getAsJsonObject();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            assert rootObj !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return (JsonArray) rootObj.get(\"semesterData\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return new JsonArray();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 1,
      "MeLoveCarbs": 44
    }
  },
  {
    "path": "src/main/java/logic/modulelogic/ModuleHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.UnformattedModuleException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.BlacklistedModules.blacklistModule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_MODULECODE_IN_BLACKLIST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_EMPTY_MODULE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Contains private members storing the module information."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * The class members are an ArrayList of size 2(two sem) of ArrayList except member \"weeks\"."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Semester 1                       : Semester 2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * ArrayList of available classes   : ArrayList of available classes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Index of the private members matches one another."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * For eg, classNumber.get(semester).get(0) belongs to lessonType.get(semester).get(0)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * held on day.get(semester).get(0) at startTime.get(semester).get(0) and endTime.get(semester).get(0)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * \"weeks\" is an ArrayList of size 2(two sem) of a 2d ArrayList:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * For eg, week[0].get(2) \u003d [1, 3, 4, 5], this means"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * semester 1, classNo:2 has lessons in week 1, 3, 4, 5."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ModuleHandler {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    JsonArray semesterData;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e classNumber; // can be repeated."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e startTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e endTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e lessonType; //tutorial, lecture etc"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e day; // one day per classNumber"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e weeks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private String moduleName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private Set\u003cString\u003e unformattedModules;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ModuleHandler(String moduleName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.classNumber \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.startTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.endTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.lessonType \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.weeks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.day \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int i \u003d 0; i \u003c 2; i++) { // number of semesters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.classNumber.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.startTime.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.endTime.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.lessonType.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.day.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.weeks.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.unformattedModules \u003d blacklistModule;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Format the JsonArray object returned from ModuleApiParser.parse into easy to use data structure."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public String generateModule() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ModuleApiParser myModuleApiParser \u003d new ModuleApiParser(moduleName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        semesterData \u003d myModuleApiParser.parse();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (semesterData.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            //TODO SET UP FAKE DATA HERE IF UNABLE TO ACCESS API"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return MESSAGE_EMPTY_MODULE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assert semesterData !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            checkModuleFormat();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (UnformattedModuleException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(this.moduleName + MESSAGE_MODULECODE_IN_BLACKLIST);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return MESSAGE_MODULECODE_IN_BLACKLIST;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int i \u003d 0; i \u003c semesterData.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonObject semesterDataObj \u003d semesterData.get(i).getAsJsonObject();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            // get semester number from json"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            Integer semester \u003d Integer.parseInt(semesterDataObj.get(\"semester\").toString()) - 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (!(semester \u003d\u003d 0 || semester \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonArray timetable \u003d (JsonArray) semesterDataObj.get(\"timetable\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int k \u003d 0; k \u003c timetable.size(); k++) { // For each classes in a module."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                JsonObject lesson \u003d timetable.get(k).getAsJsonObject();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                moduleInfoAdder(semester, lesson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Generates a 2d ArrayList of String module information data structure as follows:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * classNumber, lessonType, startTime, endTime, day, weeks."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * To be used within the loop of generateModules()."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private void moduleInfoAdder(Integer semester, JsonObject lesson) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        // replaceAll() trims the quotes left behind by json parsing via regex"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.classNumber.get(semester).add(lesson.get(\"classNo\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.lessonType.get(semester).add(lesson.get(\"lessonType\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.startTime.get(semester).add(lesson.get(\"startTime\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.endTime.get(semester).add(lesson.get(\"endTime\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.day.get(semester).add(lesson.get(\"day\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        JsonArray weeksJsonArray \u003d (JsonArray) lesson.get(\"weeks\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e weeksData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int j \u003d 0; j \u003c weeksJsonArray.size(); j++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            weeksData.add(weeksJsonArray.get(j).toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.weeks.get(semester).add(weeksData);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /** Checks if module is within the blacklisted UnformattedModules file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @throws UnformattedModuleException Throws error if user\u0027s module is within the file UnformattedModules,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *                                    which contains all modules which can\u0027t be parsed due to ill-formatting by NUSMOD API side."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *                                    method to update the list of modules in UnformattedModules is in static main()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private void checkModuleFormat() throws UnformattedModuleException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (unformattedModules.contains(moduleName)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new UnformattedModuleException(\"OH NO! \" + moduleName + \"\u0027s format parsed from NUSMOD API is out-dated.\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    + \" Please remove it from your timetable and manually add the time-slots.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getClassNumber() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.classNumber;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getStartTime() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getEndTime() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getLessonType() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.lessonType;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getDay() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.day;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e getWeeks() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.weeks;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 155
    }
  },
  {
    "path": "src/main/java/logic/modulelogic/TimetableParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.InvalidUrlException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_NUSMODLINK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * This class contains essential methods to filter out the modules and the timeslots the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * is taking from the NUSMOD link."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class TimetableParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    String nusmodsLink;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    String semester;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Map\u003cString, ArrayList\u003cString\u003e\u003e modulesMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    ArrayList\u003cString\u003e modulesArr;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public TimetableParser(String nusmodsLink) throws InvalidUrlException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.nusmodsLink \u003d nusmodsLink;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (!this.nusmodsLink.matches(\"https://nusmods\\\\.com/timetable/sem-./share\\\\?.*\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new InvalidUrlException(MESSAGE_INVALID_NUSMODLINK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.modulesArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    //static main() method for easy in-class behaviour testing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void main(String[] args) throws InvalidUrlException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //observe behaviour by substituting field in BackendAPI.LessonsGenerator() with other NUSMODS link"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        TimetableParser myTimetableParser \u003d new TimetableParser(\"https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:03,PTUT:03\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:09,LEC:1\u0026CS2113T\u003dLEC:C01\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myTimetableParser.parse();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        System.out.println(myTimetableParser.getSemester());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        System.out.println(myTimetableParser.getModulesArr());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        System.out.println(myTimetableParser.getModulesMap());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public String parse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assert nusmodsLink.contains(\"share?\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int strippedIndex \u003d this.nusmodsLink.indexOf(\"share?\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String unparsedSemester \u003d this.nusmodsLink.substring(0, strippedIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String unparsedModules \u003d this.nusmodsLink.substring(strippedIndex + 6);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assert nusmodsLink.contains(\"sem-1\") || nusmodsLink.contains(\"sem-2\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (unparsedSemester.contains(\"1\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.semester \u003d \"1\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.semester \u003d \"2\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.modulesMap \u003d parseModules(unparsedModules);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Filter the time-slots and module from weblink and returns a hashMap data structure,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * and stores modules user is taking(modulesArr) to be used by LessonGenerator class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @param unparsedModules Raw website link with module information."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @return Returns Key-value pair. Key \u003d \"moduleCode\"-Value \u003d ArrayList of \"LessonType:Class number\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private Map\u003cString, ArrayList\u003cString\u003e\u003e parseModules(String unparsedModules) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assert unparsedModules !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e unparsed \u003d new ArrayList\u003c\u003e(Arrays.asList(unparsedModules.split(\"\u0026\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map\u003cString, ArrayList\u003cString\u003e\u003e myModuleDetails \u003d new HashMap\u003cString, ArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String elem : unparsed) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            assert elem !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            int tempIndex \u003d elem.indexOf(\"\u003d\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String module \u003d elem.substring(0, tempIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String unparsedLessonTypeAndClass \u003d elem.substring(tempIndex + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e parsedLessonTypeAndClass \u003d new ArrayList\u003c\u003e(Arrays.asList(unparsedLessonTypeAndClass.split(\",\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myModuleDetails.put(module, parsedLessonTypeAndClass);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            modulesArr.add(module);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return myModuleDetails;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public Map\u003cString, ArrayList\u003cString\u003e\u003e getModulesMap() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.modulesMap;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public String getSemester() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.semester;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cString\u003e getModulesArr() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.modulesArr;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 4,
      "MeLoveCarbs": 90
    }
  },
  {
    "path": "src/main/java/logic/schedulelogic/ScheduleHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.schedulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import exception.MoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_WRONG_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDDAY_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_MEETING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_EDIT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_MEETING_RANGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ScheduleHandler {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final Boolean MYSCHEDULEBLOCKED \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final Boolean MYSCHEDULEFREE \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static Boolean[][][] masterSchedule \u003d new Boolean[13][7][48];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ScheduleHandler(ArrayList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        assert contactList.size() \u003c\u003d 1 : \"Only 1 member in contact list passed to ScheduleHandler\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    masterSchedule[i][j][k] \u003d MYSCHEDULEFREE; // fill every index with 0 initially"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (Contact t : contactList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Boolean[][][] memberSchedule \u003d t.getSchedule();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            fillMasterSchedule(memberSchedule);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private void fillMasterSchedule(Boolean[][][] s) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (s[i][j][k] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        this.masterSchedule[i][j][k] \u003d MYSCHEDULEBLOCKED;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static String getDayFromNumber(int dayNum) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String day;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        switch (dayNum) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Sunday\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Monday\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Tuesday\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Wednesday\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Thursday\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Friday\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Saturday\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            throw new AssertionError(dayNum);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public Boolean[][][] getMasterSchedule() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return masterSchedule;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static boolean isValidEdit(Contact mainUser, Integer startDay,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                                      LocalTime startTime, Integer endDay, LocalTime endTime,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                                      int currentWeekNumber) throws MoException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Slot slot \u003d new Slot(startDay, startTime, endDay, endTime, currentWeekNumber).invoke();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        startDay \u003d slot.getStartDay();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        endDay \u003d slot.getEndDay();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int startWeekNumber \u003d slot.getStartWeekNumber();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int endWeekNumber \u003d slot.getEndWeekNumber();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Integer startBlock \u003d slot.getStartBlock();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Integer endBlock \u003d slot.getEndBlock();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String[][][] mainUserSchedule \u003d mainUser.getMyScheduleName();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        isValidLogic(startDay, endDay, startWeekNumber, endWeekNumber, startBlock, endBlock, mainUserSchedule,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                \"meeting\", MESSAGE_INVALID_EDIT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static boolean isValidMeeting(Contact mainUser, Integer startDay,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                                         LocalTime startTime, Integer endDay, LocalTime endTime,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                                         int currentWeekNumber) throws MoException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Slot slot \u003d new Slot(startDay, startTime, endDay, endTime, currentWeekNumber).invoke();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        startDay \u003d slot.getStartDay();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        endDay \u003d slot.getEndDay();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int startWeekNumber \u003d slot.getStartWeekNumber();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int endWeekNumber \u003d slot.getEndWeekNumber();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Integer startBlock \u003d slot.getStartBlock();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Integer endBlock \u003d slot.getEndBlock();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Boolean[][][] mainUserSchedule \u003d mainUser.getSchedule();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        isValidLogic(startDay, endDay, startWeekNumber, endWeekNumber, startBlock, endBlock, mainUserSchedule,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                MYSCHEDULEBLOCKED, MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private static \u003cT\u003e void isValidLogic(Integer startDay, Integer endDay, int startWeekNumber, int endWeekNumber,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                                         Integer startBlock, Integer endBlock, T[][][] mainUserSchedule, T invalidBlock,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                                         String invalidBlockMessage) throws MoException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        if (startDay.equals(endDay)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (startBlock.equals(endBlock)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[startWeekNumber - 1][startDay][startBlock].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    throw new MoException(invalidBlockMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else if (startBlock \u003c endBlock) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int i \u003d startBlock; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[startWeekNumber - 1][startDay][i].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        throw new MoException(invalidBlockMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else if (startBlock \u003e endBlock) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new MoException(invalidBlockMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        if (startDay \u003c endDay) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d startBlock; i \u003c\u003d 47; ++i) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[startWeekNumber - 1][startDay][i].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    throw new MoException(invalidBlockMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d startDay + 1; i \u003c\u003d endDay - 1; ++i) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int j \u003d 0; j \u003c 48; ++j) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[startWeekNumber - 1][i][j].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        throw new MoException(invalidBlockMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[endWeekNumber - 1][endDay][i].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    throw new MoException(invalidBlockMessage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        if (endDay \u003c startDay) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d startBlock; i \u003c\u003d 47; ++i) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[startWeekNumber - 1][startDay][i].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    throw new MoException(invalidBlockMessage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d startDay + 1; i \u003c\u003d 6; ++i) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int j \u003d 0; j \u003c\u003d 47; ++j) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[startWeekNumber - 1][i][j].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        throw new MoException(invalidBlockMessage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d endDay - 1; ++i) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int j \u003d 0; j \u003c\u003d 47; ++j) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[endWeekNumber - 1][i][j].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        throw new MoException(invalidBlockMessage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[endWeekNumber - 1][endDay][i].equals(invalidBlock)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    throw new MoException(invalidBlockMessage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static Integer getBlocksFromStartTime(LocalTime startTime) throws MoException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int minuteBlocks \u003d -1;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int hourBlocks \u003d -1;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        switch (startTime.getMinute()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            minuteBlocks \u003d 0;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        case 30:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            minuteBlocks \u003d 1;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            throw new MoException(MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        hourBlocks \u003d startTime.getHour() * 2;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return minuteBlocks + hourBlocks;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static Integer getBlocksFromEndTime(LocalTime endTime) throws MoException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int minuteBlocks \u003d -1;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int hourBlocks \u003d -1;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        switch (endTime.getMinute()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            minuteBlocks \u003d 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        case 30:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            minuteBlocks \u003d 1;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            throw new MoException(MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        hourBlocks \u003d endTime.getHour() * 2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return minuteBlocks + hourBlocks - 1;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private static class Slot {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private Integer startDay;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private LocalTime startTime;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private Integer endDay;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private LocalTime endTime;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private int currentWeekNumber;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private int startWeekNumber;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private int endWeekNumber;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private Integer startBlock;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        private Integer endBlock;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public Slot(Integer startDay, LocalTime startTime, Integer endDay, LocalTime endTime, int currentWeekNumber) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            this.startDay \u003d startDay;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            this.endDay \u003d endDay;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            this.currentWeekNumber \u003d currentWeekNumber;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public Integer getStartDay() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return startDay;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public Integer getEndDay() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return endDay;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public int getStartWeekNumber() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return startWeekNumber;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public int getEndWeekNumber() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return endWeekNumber;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public Integer getStartBlock() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return startBlock;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public Integer getEndBlock() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return endBlock;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        public Slot invoke() throws MoException {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (!(startDay \u003e\u003d 0 \u0026\u0026 startDay \u003c\u003d 13) || !(endDay \u003e\u003d 0 \u0026\u0026 endDay \u003c\u003d 13)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new MoException(MESSAGE_STARTENDDAY_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            startWeekNumber \u003d currentWeekNumber;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            endWeekNumber \u003d currentWeekNumber;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (startDay \u003e 6) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                startDay -\u003d 7;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                startWeekNumber++;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (endDay \u003e 6) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                endDay -\u003d 7;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                endWeekNumber++;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if ((startTime.getMinute() !\u003d 0 \u0026\u0026 startTime.getMinute() !\u003d 30)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    || (endTime.getMinute() !\u003d 0 \u0026\u0026 endTime.getMinute() !\u003d 30)) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                throw new MoException(MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            startBlock \u003d getBlocksFromStartTime(startTime);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            endBlock \u003d -1;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (endTime \u003d\u003d LocalTime.parse(\"00:00\")) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                endBlock \u003d 47;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (endDay \u003d\u003d 0) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    endDay \u003d 6;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    endDay \u003d endDay - 1;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                endBlock \u003d getBlocksFromEndTime(endTime);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 256,
      "synCKun": 10,
      "MeLoveCarbs": 44
    }
  },
  {
    "path": "src/main/java/model/contact/Contact.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.MoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDDAY_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import static common.Messages.MESSAGE_WEEK_RANGE_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_WRONG_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * This class contains information of a member\u0027s schedule in blocks of 30mins interval,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * as well as get methods to access it private members. It also include methods to convert from"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * user input date to blocks from 0-47, inserted into mySchedule."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final Boolean MYSCHEDULEBLOCKED \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final Boolean MYSCHEDULEFREE \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private String memberName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private Boolean[][][] mySchedule; //String[13][7][48]; 13 weeks, 7 days, separated into 30mins within 24 hours period."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private String[][][] myScheduleName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private boolean isMainUser \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public Contact(String name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (name.contains(\"_main\") \u0026\u0026 !name.replaceFirst(\"_main\",\"\").contains(\"_main\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            isMainUser \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            name \u003d name.replace(\"_main\", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        this.memberName \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.mySchedule \u003d new Boolean[13][7][48];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.myScheduleName \u003d new String[13][7][48];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    mySchedule[i][j][k] \u003d MYSCHEDULEFREE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    myScheduleName[i][j][k] \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void addBusyBlocks(String meetingName, Integer startDay, String startTime, Integer endDay, String endTime,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                              String[] onWeeks) throws MoException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        editBlocks(MYSCHEDULEBLOCKED, meetingName, startDay, startTime, endDay, endTime, onWeeks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void addFreeBlocks(String meetingName, Integer startDay, String startTime, Integer endDay, String endTime,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                              String[] onWeeks) throws MoException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        editBlocks(MYSCHEDULEFREE, meetingName, startDay, startTime, endDay, endTime, onWeeks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    /** Adds scheduled model.meeting in LocalTime into schedule[][][] data structure."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param meetingName name of the scheduled model.meeting to be added."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param startDay    start day of the model.meeting in integer."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param startTime   start time of the model.meeting in LocalTime format. For eg, 11:30, 14:30, 00:00"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param endDay      end day of the model.meeting in integer."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param endTime     end time of the model.meeting in LocalTime format: For eg, 11:30, 14:30, 00:00"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @param onWeeks     weeks that are suppose to be made busy."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @return returns String of error message, else returns \"Success\" if schedule is successfully edited."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public String editBlocks(Boolean blockedorfree, String meetingName, Integer startDay,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                             String startTime, Integer endDay, String endTime, String[] onWeeks) throws MoException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        LocalTime localTimeStart;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        LocalTime localTimeEnd;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            localTimeStart \u003d LocalTime.parse(startTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            localTimeEnd \u003d LocalTime.parse(endTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(MESSAGE_STARTENDTIME_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return MESSAGE_STARTENDTIME_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Integer startBlock \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Integer endBlock \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            startBlock \u003d getBlocksFromTime(localTimeStart);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            endBlock \u003d getBlocksFromTime(localTimeEnd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (MoException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (!checkDay(startDay) || !checkDay(endDay)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return MESSAGE_STARTENDDAY_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (onWeeks.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            return MESSAGE_WEEK_RANGE_EMPTY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        editBlocksLogic(blockedorfree, startBlock, endBlock, startDay, endDay, meetingName, onWeeks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Defines the logic of converting from blocks of time and day of model.meeting to data structure."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Used in addBusyBlocks()."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private void editBlocksLogic(Boolean blockedorfree, Integer startBlock, Integer endBlock, Integer startDay, Integer endDay,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                    String meetingName, String[] onWeeks) throws MoException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] startOnWeeks \u003d onWeeks.clone();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] endOnWeeks \u003d onWeeks.clone();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Boolean myScheduleStatus \u003d blockedorfree;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String myScheduleNameStatus \u003d \"null\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        if (blockedorfree \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            myScheduleNameStatus \u003d meetingName;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (startDay \u003e 6 \u0026\u0026 endDay \u003e 6) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            startDay -\u003d 7;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            endDay -\u003d 7;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            startOnWeeks[0] \u003d Integer.toString(Integer.parseInt(startOnWeeks[0]) + 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            endOnWeeks[0] \u003d Integer.toString(Integer.parseInt(endOnWeeks[0]) + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else if (startDay \u003c 7 \u0026\u0026 endDay \u003e 6) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            endDay -\u003d 7;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            endOnWeeks[0] \u003d Integer.toString(Integer.parseInt(endOnWeeks[0]) + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else if (startDay \u003e 6 \u0026\u0026 endDay \u003c 7) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            throw new MoException(\"Meeting ends before it starts?\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (!startDay.equals(endDay)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c startOnWeeks.length; j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                int startDayCopy \u003d startDay; // prevent modifying param arguments"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int i \u003d startBlock; i \u003c 48; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    mySchedule[Integer.parseInt(startOnWeeks[j]) - 1][startDayCopy][i] \u003d myScheduleStatus;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    this.myScheduleName[Integer.parseInt(startOnWeeks[j]) - 1][startDayCopy][i] \u003d myScheduleNameStatus;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                startDayCopy++;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (startDayCopy \u003e 6) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    startDayCopy \u003d 0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                while (startDayCopy !\u003d endDay) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    for (int i \u003d 0; i \u003c 48; i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        mySchedule[Integer.parseInt(startOnWeeks[j]) - 1][startDayCopy][i] \u003d myScheduleStatus;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        this.myScheduleName[Integer.parseInt(startOnWeeks[j]) - 1][startDayCopy][i] \u003d myScheduleNameStatus;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    startDayCopy++;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    if (startDayCopy \u003e 6) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        startDayCopy \u003d 0;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                for (int i \u003d 0; i \u003c endBlock; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    mySchedule[Integer.parseInt(endOnWeeks[j]) - 1][startDayCopy][i] \u003d myScheduleStatus;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    this.myScheduleName[Integer.parseInt(endOnWeeks[j]) - 1][startDayCopy][i] \u003d myScheduleNameStatus;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c startOnWeeks.length; j++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                for (int i \u003d startBlock; i \u003c endBlock; i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    mySchedule[Integer.parseInt(endOnWeeks[j]) - 1][startDay][i] \u003d myScheduleStatus;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    this.myScheduleName[Integer.parseInt(endOnWeeks[j]) - 1][startDay][i] \u003d myScheduleNameStatus;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    boolean checkDay(Integer day) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return day \u003e\u003d 0 \u0026\u0026 day \u003c\u003d 13;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /** Delete a scheduled model.meeting by changing mySchedule[][] via myScheduleName[][]."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param meetingName name of model.meeting previously added to be deleted."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void deleteBlocksWithName(String meetingName) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    if (myScheduleName[i][j][k] !\u003d null \u0026\u0026 myScheduleName[i][j][k].equals(meetingName)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        mySchedule[i][j][k] \u003d MYSCHEDULEFREE;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        myScheduleName[i][j][k] \u003d null;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Converts LocalTime object into blocks of time to be inserted into data structure mySchedule[][]."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param myTime LocalTime to be converted."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @return one-based indexing of the block from LocalTime."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @throws MoException Throws error if LocalTime isn\u0027t in multiples of 30minutes."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private Integer getBlocksFromTime(LocalTime myTime) throws MoException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int minuteBlocks \u003d -1;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int hourBlocks \u003d -1;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        switch (myTime.getMinute()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            minuteBlocks \u003d 0;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        case 30:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            minuteBlocks \u003d 1;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new MoException(MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        hourBlocks \u003d myTime.getHour() * 2;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return minuteBlocks + hourBlocks;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return this.memberName;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public Boolean[][][] getSchedule() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return this.mySchedule;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public String[][][] getMyScheduleName() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return this.myScheduleName;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void setMyScheduleName(String[][][] myScheduleName) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.myScheduleName \u003d myScheduleName;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * To be used for model.storage purposes."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Sets mySchedule[][] to true/false depending on myScheduleName from disk."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void setMyScheduleFromScheduleName() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    if (myScheduleName[i][j][k].equals(\"null\")) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        mySchedule[i][j][k] \u003d false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        mySchedule[i][j][k] \u003d true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void setMainUser() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.isMainUser \u003d true;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public boolean isMainUser() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return isMainUser;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 78,
      "synCKun": 96,
      "MeLoveCarbs": 81
    }
  },
  {
    "path": "src/main/java/model/contact/ContactList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import org.w3c.dom.Text;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import ui.TextUI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Stores team members in a team member list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Contains an ArrayList object as the team member list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Has constructor and getter methods for the team member list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * @see Contact"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ContactList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cContact\u003e contactList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ContactList(ArrayList\u003cContact\u003e tl) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.contactList \u003d tl;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void add(Contact t) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.contactList.add(t);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void remove(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (Contact contact : contactList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (contact.getName().equals(name) \u0026\u0026 !contact.isMainUser()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                TextUI.displayRemovedPerson(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                contactList.remove(contact);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (contact.getName().equals(name) \u0026\u0026 contact.isMainUser()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                TextUI.displayMainUserDeleteError(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        TextUI.displayNoMemberFound(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void set(int index, Contact member) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.contactList.set(index, member);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cContact\u003e getContactList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.contactList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.getContactList().size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 18,
      "MeLoveCarbs": 37
    }
  },
  {
    "path": "src/main/java/model/meeting/Meeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class Meeting {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private String meetingName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private Integer startDay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private Integer endDay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private int startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private int endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public Meeting(String meetingName, Integer startDay, LocalTime startTime,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                   Integer endDay, LocalTime endTime, int startDate, int endDate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.meetingName \u003d meetingName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.startDay \u003d startDay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.endDay \u003d endDay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public String getMeetingName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return meetingName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public Integer getStartDay() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return startDay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public Integer getEndDay() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return endDay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void editTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return meetingName + \", \" + startDay + \", \" + startTime + \", \" + endDay + \", \" + endTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public int getStartDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public int getEndDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 34,
      "synCKun": 15,
      "MeLoveCarbs": 15
    }
  },
  {
    "path": "src/main/java/model/meeting/MeetingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import ui.TextUI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class MeetingList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private ArrayList\u003cMeeting\u003e meetingList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public MeetingList(ArrayList\u003cMeeting\u003e dataOnDisk) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        meetingList \u003d dataOnDisk;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public MeetingList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        meetingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public void add(Meeting meeting) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        meetingList.add(meeting);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void delete(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        TextUI.displayRemovedMeeting(meetingList,index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        meetingList.remove(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (meetingList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.listAllScheduledMeetings(this.meetingList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.displayNoMeetings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public ArrayList\u003cMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return this.meetingList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public int getMeetingListSize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return meetingList.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public Boolean isDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 12,
      "synCKun": 19,
      "MeLoveCarbs": 17
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.Meeting;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.nio.file.DirectoryStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "synCKun"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    File meetingFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    File memberFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Constructor specifying file path of model.meeting list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param meetingFilePath File path to load and store model.meeting list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public Storage(String meetingFilePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        meetingFile \u003d new File(meetingFilePath); //meetingFilePath \u003d \"data/meeting_list.txt\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void updateMeetingListToDisk(ArrayList\u003cMeeting\u003e meetingList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Files.createDirectory(Paths.get(\"data\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException ignored) { //ignored as the error would mean the directory exists, thus no action needed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Files.createFile(Paths.get(\"data/meeting_list.txt\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException ignored) { //ignored as the error would mean the file exists, thus no action needed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"data/meeting_list.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            meetingList.forEach((n) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    fw.write(n.getMeetingName() + \" \" + n.getStartDay() + \" \" + n.getStartTime() + \" \" + n.getEndDay()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            + \" \" + n.getEndTime() + \" \" + n.getStartDate() + \" \" + n.getEndDate() + System.lineSeparator());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void updateMemberListToDisk(ArrayList\u003cContact\u003e myContactList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Files.createDirectory(Paths.get(\"data\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException ignored) { //ignored as the error would mean the directory exists, thus no action needed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //create separate text file for every member containing their schedules"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (Contact member : myContactList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String memberPath \u003d \"data/\" + ((member.isMainUser()) ? member.getName() + \"_main\" : member.getName()) + \"_schedule.txt\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                Files.createFile(Paths.get(memberPath));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } catch (IOException ignored) { //ignored as the error would mean the file exists, thus no action needed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                FileWriter fw \u003d new FileWriter(memberPath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                String[][][] schedule \u003d member.getMyScheduleName();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                fw.write(schedule[i][j][k] + \" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                e.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //remove deleted members\u0027 .txt file from hard disk"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        File folder \u003d new File(\"data/\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (File f : folder.listFiles()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String fileName \u003d f.getName();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (f.getName().equals(\"meeting_list.txt\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (Contact contact : myContactList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (f.getName().contains(contact.getName())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (contact \u003d\u003d myContactList.get(myContactList.size() - 1)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    f.delete();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * Loads file from hard drive on start of program."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @return List from hard drive"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @throws FileNotFoundException If file is not found"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public ArrayList\u003cMeeting\u003e loadMeetingListFromDisk() throws FileNotFoundException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        ArrayList\u003cMeeting\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Scanner reader \u003d new Scanner(meetingFile);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        while (reader.hasNext()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String[] data \u003d reader.nextLine().split(\" \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Meeting entry \u003d new Meeting(data[0], Integer.parseInt(data[1]),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    LocalTime.parse(data[2]), Integer.parseInt(data[3]),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    LocalTime.parse(data[4]), Integer.parseInt(data[5]), Integer.parseInt(data[6]));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            list.add(entry);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cContact\u003e loadMemberListFromDisk() throws FileNotFoundException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cContact\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Path path \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try (DirectoryStream\u003cPath\u003e stream \u003d Files.newDirectoryStream(path)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (Path entry : stream) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (entry.toString().contains(\"_schedule.txt\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    String memberName \u003d entry.toString().substring(5);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    memberName \u003d memberName.replaceAll(\"_schedule\\\\.txt\", \"\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    String[][][] myScheduleName \u003d new String[13][7][48];"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    Contact member \u003d new Contact(memberName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    Scanner reader \u003d new Scanner(entry);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    while (reader.hasNext()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                    myScheduleName[i][j][k] \u003d reader.next();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    member.setMyScheduleName(myScheduleName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    member.setMyScheduleFromScheduleName();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    list.add(member);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 7,
      "synCKun": 143,
      "MeLoveCarbs": 16
    }
  },
  {
    "path": "src/main/java/ui/TextUI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.MoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.Meeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.meeting.MeetingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_INDEX_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_NUMBER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static java.lang.System.out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "public class TextUI {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void introMsg() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String logo \u003d \"  ___        _____                 __  .__                 ________                            \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \".__                       ___     \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \" / _ \\\\_/\\\\   /     \\\\   ____   _____/  |_|__| ____    ____   \\\\_____  \\\\_______  _________    ___\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"_ |__|_______ ___________  / _ \\\\_/\\\\ \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \" \\\\/ \\\\___/  /  \\\\ /  \\\\_/ __ \\\\_/ __ \\\\   __\\\\  |/    \\\\  / ___\\\\   /   |   \\\\\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"_  __ \\\\/ ___\\\\__  \\\\  /    \\\\|  \\\\___   // __ \\\\_  __ \\\\ \\\\/ \\\\___/ \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"          /    Y    \\\\  ___/\\\\  ___/|  | |  |   |  \\\\/ /_/  \u003e /    |    \\\\  \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"| \\\\/ /_/  \u003e __ \\\\|   |  \\\\  |/    /\\\\  ___/|  | \\\\/          \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"          \\\\____|__  /\\\\___  \u003e\\\\___  \u003e__| |__|___|  /\\\\___  /  \\\\_______  /__ \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"|  \\\\___  (____  /___|  /__/_____ \\\\\\\\___  \u003e__|             \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"                  \\\\/     \\\\/     \\\\/             \\\\//_____/           \\\\/     \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"/_____/     \\\\/     \\\\/         \\\\/    \\\\/                 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(logo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void menuMsg(int memberList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"__________________________________________________________\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                + \"______________________________________________________________________\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[contacts] List all contacts.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(\"[timetable] Display combined timetable of selected contacts.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[schedule] Schedule a new meeting.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(\"[edit] Edit a contact\u0027s timetable.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[delete] Delete a scheduled meeting.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[meetings] List all scheduled meetings.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[exit] Exit application.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.print(System.lineSeparator());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (memberList \u003e 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            out.println(\"Insert your member\u0027s timetable by following: \u003cname of new member\u003e \u003cnusmods link\u003e\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            out.println(\"Insert your own timetable by following: \u003cname of new member\u003e \u003cnusmods link\u003e\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"__________________________________________________________\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"______________________________________________________________________\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void exitMsg() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"Thank you for using MeetingOrganizer, goodbye!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void errorMsg(MoException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"OOPS!! \" + e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void printTimetable(Boolean[][][] mySchedule, int weeksMoreToView, int weekNumber) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.print(\"Date:  \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] tempDate \u003d java.util.Calendar.getInstance().getTime().toString().split(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String dayString \u003d tempDate[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int day \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        switch (dayString) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sun\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Mon\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Tue\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Wed\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -4);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Thu\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -5);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Fri\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -6);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sat\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -7);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int date \u003d Integer.parseInt(tempDate[2]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int weekViewLimit;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (weeksMoreToView \u003d\u003d 1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            weekViewLimit \u003d 14;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            weekViewLimit \u003d 7;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c weekViewLimit; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            cal.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String[] dateArray \u003d cal.getTime().toString().split(\" \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            int datePrint \u003d Integer.parseInt(dateArray[2]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String lastChar \u003d dateArray[2].substring(dateArray[2].length() - 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String datePostFix;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (lastChar.equals(\"1\") \u0026\u0026 !dateArray[2].substring(dateArray[2].length() - 2, dateArray[2].length() - 1).equals(\"1\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                datePostFix \u003d \"st\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (lastChar.equals(\"2\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                datePostFix \u003d \"nd\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else if (lastChar.equals(\"3\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                datePostFix \u003d \"rd\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                datePostFix \u003d \"th\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String output \u003d datePrint + datePostFix;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            System.out.print((output.length() \u003d\u003d 3) ? output + \"   \" : output + \"  \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (i \u003d\u003d 6 \u0026\u0026 weeksMoreToView \u003d\u003d 1) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                out.print(\"  \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.print(\"       SUN   MON   TUE   WED   THU   FRI   SAT  \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (weeksMoreToView \u003d\u003d 1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            out.print(\"   SUN   MON   TUE   WED   THU   FRI   SAT\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int earliestScheduledTime \u003d getEarliestTime(mySchedule, weeksMoreToView, weekNumber, 47) / 2;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int latestScheduledTime \u003d getLatestTime(mySchedule, weeksMoreToView, weekNumber, 0) / 2;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d earliestScheduledTime; i \u003c latestScheduledTime + 1; ++i) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            out.print(String.format(\"%04d\", (100 * i)) + \" +-----+-----+-----+-----+-----+-----+-----+\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (weeksMoreToView \u003d\u003d 1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                out.print(\" +-----+-----+-----+-----+-----+-----+-----+\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            out.println();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.print(\"     |\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int z \u003d 0; z \u003c\u003d weeksMoreToView; z++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int j \u003d 0; j \u003c 7; ++j) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    out.print(\"  \" + (mySchedule[weekNumber + z - 1][j][2 * i] ? \"X\" : \" \") + \"  |\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (z \u003c weeksMoreToView) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    out.print(\" |\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            out.println();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            out.print(\"     +-----+-----+-----+-----+-----+-----+-----+\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (weeksMoreToView \u003d\u003d 1) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                out.print(\" +-----+-----+-----+-----+-----+-----+-----+\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.println();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.print(\"     |\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int z \u003d 0; z \u003c\u003d weeksMoreToView; z++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int j \u003d 0; j \u003c 7; ++j) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    out.print(\"  \" + (mySchedule[weekNumber + z - 1][j][2 * i + 1] ? \"X\" : \" \") + \"  |\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (z \u003c weeksMoreToView) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    out.print(\" |\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.println();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            counter \u003d i;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        counter++;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.print(String.format(\"%04d\", (100 * counter)) + \" +-----+-----+-----+-----+-----+-----+-----+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (weeksMoreToView \u003d\u003d 1) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            out.print(\" +-----+-----+-----+-----+-----+-----+-----+\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static int getLatestTime(Boolean[][][] mySchedule, int weeksMoreToView, int weekNumber, int latestScheduledTime) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int z \u003d 0; z \u003c\u003d weeksMoreToView; z++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; ++j) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int i \u003d 0; i \u003c 48; ++i) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    if (mySchedule[weekNumber + z - 1][j][i] \u0026\u0026 i \u003e latestScheduledTime) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        latestScheduledTime \u003d i;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return (latestScheduledTime % 2 \u003d\u003d 0) ? latestScheduledTime : latestScheduledTime - 1;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static int getEarliestTime(Boolean[][][] mySchedule, int weeksMoreToView, int weekNumber, int earliestScheduledTime) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int z \u003d 0; z \u003c\u003d weeksMoreToView; z++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; ++j) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int i \u003d 0; i \u003c 48; ++i) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    if (mySchedule[weekNumber + z - 1][j][i] \u0026\u0026 i \u003c earliestScheduledTime) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        earliestScheduledTime \u003d i;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    if (i \u003e earliestScheduledTime) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return earliestScheduledTime;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void scheduleMeetingMsg() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"You have selected new scheduled meeting\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void meetingDetailsMsg() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"Enter meeting details: \u003cMeeting.Meeting Name\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e.\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"Type \\\"exit\\\" to go back to menu.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void meetingListSizeMsg(MeetingList myMeetingList) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"You now have \" + myMeetingList.getMeetingListSize() + \"meeting/s in the list.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void listMeetings() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"Here are all your meeting slots.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void timeOutOfRangeMsg() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(MESSAGE_STARTENDTIME_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void invalidNumberMsg() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(MESSAGE_INVALID_NUMBER);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void indexOutOfBoundsMsg() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(MESSAGE_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void listAllScheduledMeetings(ArrayList\u003cMeeting\u003e meetingList) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        System.out.println(\"The current scheduled meeting(s):\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c meetingList.size(); i++) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String startDay \u003d getDayFromNumber(meetingList.get(i).getStartDay());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String endDay \u003d getDayFromNumber(meetingList.get(i).getEndDay());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String meetingName \u003d meetingList.get(i).getMeetingName();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String startDate \u003d Integer.toString(meetingList.get(i).getStartDate());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String endDate \u003d Integer.toString(meetingList.get(i).getEndDate());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            System.out.println((i + 1) + \". \" + startDay + \"(\" + startDate + getPostFix(startDate) + \") \""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    + meetingList.get(i).getStartTime() + \" to \" + endDay + \"(\" + endDate + getPostFix(endDate) + \") \""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    + meetingList.get(i).getEndTime() + \" (\" + meetingName + \")\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private static String getPostFix(String date) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String lastChar \u003d date.substring(date.length() - 1);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String datePostFix;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (lastChar.equals(\"1\") \u0026\u0026 !date.substring(date.length() - 2, date.length() - 1).equals(\"1\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            datePostFix \u003d \"st\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else if (lastChar.equals(\"2\")) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            datePostFix \u003d \"nd\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else if (lastChar.equals(\"3\")) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            datePostFix \u003d \"rd\";"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            datePostFix \u003d \"th\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return datePostFix;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static String getDayFromNumber(int dayNum) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String day;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (dayNum \u003e 6) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            dayNum %\u003d 7;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        switch (dayNum) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Sunday\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Monday\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Tuesday\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Wednesday\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Thursday\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Friday\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Saturday\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Out of range\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayNoMeetings() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"There is no scheduled meetings so far.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayRemovedMeeting(ArrayList\u003cMeeting\u003e meetingList, int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String startDay \u003d getDayFromNumber(meetingList.get(index).getStartDay());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String endDay \u003d getDayFromNumber(meetingList.get(index).getEndDay());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"I have removed:\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println((index + 1) + \". \" + startDay + \" \" + meetingList.get(index).getStartTime()"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \" to \" + endDay + \" \" + meetingList.get(index).getEndTime() + \" \" + meetingList.get(index).getMeetingName());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayInvalidDeleteTarget() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"Meeting does not exist for indicated index.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void showLoadingError() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"There are no previous records, let\u0027s create a new one!\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void teamMemberListMsg(ArrayList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                + \"Here are your stored contacts:\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (Contact contact : contactList) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            out.print(\"\\t \" + i + \") \" + contact.getName());"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                System.out.println(\" (main user)\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void showAddedMember(String memberName) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"Added \" + memberName);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void showRepeatedPerson(String userInputWord) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(userInputWord + \" already exists!\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void printFormatTimetable() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(\"\\nTo display timetable:\\ntimetable\\ntimetable \u003cMember Number 1\u003e\""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                + \"\\ntimetable \u003cMember Number 1\u003e \u003cMember Number 2\u003e\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void printFormatSchedule() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"\\nTo schedule a meeting:\\nschedule \u003cMeeting Name\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void printFormatEdit() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(\"\\nTo edit a contact:\\nedit busy \u003cContact Index\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e\""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                + \"\\nedit free \u003cContact Index\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void printFormatDeleteMember() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"\\nTo delete contact:\\ndelete \u003cMember Name\u003e\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void printFormatMeeting() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"\\nTo list meetings:\\nmeeting\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayRemovedPerson(String name) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"I have removed \" + name + \" from your contact list.\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayMainUserDeleteError(String name) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"Main user \" + name + \" cannot be deleted.\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayNoMemberFound(String name) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(name + \" is not found in list of contacts.\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void printFormatDeleteMeeting() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"\\nTo delete meeting:\\ndelete \u003cMeeting Index\u003e\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void showContactEdited(String name, String busyOrFree) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(name + \"\u0027s timetable has been edited.\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "synCKun"
        },
        "content": "}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "matthewc97": 44,
      "lowxizhi": 47,
      "synCKun": 248,
      "MeLoveCarbs": 57
    }
  },
  {
    "path": "src/test/java/logic/modulelogic/LessonsGeneratorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.InvalidUrlException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_MODULECODE_IN_BLACKLIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class LessonsGeneratorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    LessonsGenerator myLessonsGenerator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void generate_blacklistedModule() throws InvalidUrlException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myLessonsGenerator \u003d new LessonsGenerator(\"https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:03,PTUT:03\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:09,LEC:1\u0026CS2113T\u003dLEC:C01\u0026EG3301R\u003dLEC:1,LAB:G15\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String expected \u003d myLessonsGenerator.generate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(expected, MESSAGE_MODULECODE_IN_BLACKLIST);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void generate_correctLessonDetails() throws InvalidUrlException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myLessonsGenerator \u003d new LessonsGenerator(\"https://nusmods.com/timetable/sem-1/share?CG1111\u003dTUT:04,LAB:02\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myLessonsGenerator.generate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Set\u003cString\u003e actual \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        actual.add(\"14001600Friday1:2:3:4:5:6:7:8:9:10:11:12:13\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        actual.add(\"14001700Wednesday1:2:3:4:5:6:7:8:9:10:11:12:13\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        actual.add(\"14001700Monday1:2:3:4:5:6:7:8:9:10:11:12:13\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString[]\u003e expectedArray \u003d myLessonsGenerator.getLessonDetails();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String[] strings : expectedArray) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            expected.add(String.join(\"\", strings));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String string : expected) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            assertTrue(actual.contains(string));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 41
    }
  },
  {
    "path": "src/test/java/logic/modulelogic/ModuleApiParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ModuleApiParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    ModuleApiParser myModuleApiParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void myModuleApiParser_wrongModuleCode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myModuleApiParser \u003d new ModuleApiParser(\"ABCD\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        JsonArray nullJsonArray \u003d new JsonArray();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(myModuleApiParser.parse(), nullJsonArray);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void setMyModuleApiParser_correctModuleCode() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myModuleApiParser \u003d new ModuleApiParser((\"CG2023\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertTrue(myModuleApiParser.parse().toString().contains(\"[{\\\"semester\\\":2,\\\"timetable\\\":[{\\\"classNo\\\"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 26
    }
  },
  {
    "path": "src/test/java/logic/modulelogic/ModuleHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_EMPTY_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_MODULECODE_IN_BLACKLIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ModuleHandlerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    ModuleHandler myModuleHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void generateModule_UnformattedModuleCode() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myModuleHandler \u003d new ModuleHandler(\"EG3301R\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String illformatMessage \u003d myModuleHandler.generateModule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(illformatMessage, MESSAGE_MODULECODE_IN_BLACKLIST);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void generateModule_FormattedAndCorrectModuleCode() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myModuleHandler \u003d new ModuleHandler(\"CG2023\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String expected \u003d myModuleHandler.generateModule();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(expected, MESSAGE_RETURN_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void generateModule_IncorrectModuleCode() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myModuleHandler \u003d new ModuleHandler(\"ABCD\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String expected \u003d myModuleHandler.generateModule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(expected, MESSAGE_EMPTY_MODULE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 36
    }
  },
  {
    "path": "src/test/java/logic/modulelogic/TimetableParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.InvalidUrlException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class TimetableParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    TimetableParser myTimetableParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void parse_wrongLink() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        InvalidUrlException e \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myTimetableParser \u003d new TimetableParser(\"https://facebook.com\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (InvalidUrlException ex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            e \u003d ex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertNotNull(e);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void parse_garbageLink() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        InvalidUrlException e \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myTimetableParser \u003d new TimetableParser(\"https://www.nusmods.com/timetable/abcddddd\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (InvalidUrlException ex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            e \u003d ex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertNotNull(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void parse_correctLink() throws InvalidUrlException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myTimetableParser \u003d new TimetableParser(\"https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:03,PTUT:03\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:09,LEC:1\u0026CS2113T\u003dLEC:C01\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String expected \u003d myTimetableParser.parse();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(expected, MESSAGE_RETURN_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 42
    }
  },
  {
    "path": "src/test/java/logic/schedulelogic/ScheduleHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package logic.schedulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import exception.MoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "public class ScheduleHandlerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private ScheduleHandler myScheduleHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private final Boolean myScheduleBlocked \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private final Boolean myScheduleFree \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void testGetDayFromNumber() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        assertEquals(\"Sunday\", ScheduleHandler.getDayFromNumber(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void testScheduleHandler() throws MoException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cContact\u003e myScheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        final Contact member1 \u003d new Contact(\"member1\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        final Contact member2 \u003d new Contact(\"member2\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] onWeek1 \u003d {\"1\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] onWeek \u003d {\"1\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        member1.addBusyBlocks(\"schedule1\", 0, \"13:00\", 0, \"19:00\", onWeek1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        member1.addBusyBlocks(\"schedule2\", 4, \"16:00\", 4, \"18:00\", onWeek);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myScheduleList.add(member1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myScheduleList.add(member2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //myScheduleHandler \u003d new ScheduleHandler(myScheduleList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //Boolean[][][] myMasterSchedule \u003d myScheduleHandler.getMasterSchedule();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //final ArrayList\u003cArrayList\u003cInteger\u003e\u003e myFreeBlocks \u003d myScheduleHandler.getFreeBlocks();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //fake values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e freeBlocks \u003d new ArrayList\u003cArrayList\u003cInteger\u003e\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        ArrayList\u003cInteger\u003e a1 \u003d new ArrayList\u003cInteger\u003e(List.of(4,36,0,25,1,1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        ArrayList\u003cInteger\u003e a2 \u003d new ArrayList\u003cInteger\u003e(List.of(0,38,4,31,1,1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        freeBlocks.add(a1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        freeBlocks.add(a2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Boolean[][][] myMasterScheduleAnswer \u003d new Boolean[13][7][48];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int k \u003d 0; k \u003c 48; k++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    myMasterScheduleAnswer[i][j][k] \u003d myScheduleFree;// fill every 48 index of the 7 days with 0 initially"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int j \u003d 26; j \u003c\u003d 37; j++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            myMasterScheduleAnswer[1][0][j] \u003d myScheduleBlocked;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int j \u003d 32; j \u003c\u003d 35; j++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            myMasterScheduleAnswer[1][4][j] \u003d myScheduleBlocked;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e myFreeBlocksAnswer \u003d new ArrayList\u003cArrayList\u003cInteger\u003e\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        ArrayList\u003cInteger\u003e slot1 \u003d makeSlot(4,36,0,25, 1, 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        ArrayList\u003cInteger\u003e slot2 \u003d makeSlot(0,38,4,31, 1, 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myFreeBlocksAnswer.add(slot1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myFreeBlocksAnswer.add(slot2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        assertEquals(myFreeBlocksAnswer, freeBlocks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public ArrayList\u003cInteger\u003e makeSlot(int startDay, int startBlock, int endDay, int endBlock, int startWeek, int endWeek) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        ArrayList\u003cInteger\u003e freeSlot \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        freeSlot.add(startDay);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        freeSlot.add(startBlock);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        freeSlot.add(endDay);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        freeSlot.add(endBlock);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        freeSlot.add(startWeek);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        freeSlot.add(endWeek);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return freeSlot;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 47,
      "synCKun": 27,
      "MeLoveCarbs": 6
    }
  },
  {
    "path": "src/test/java/model/contact/ContactTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import exception.MoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDDAY_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_WRONG_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ContactTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Contact myMember;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void editBlocks_outOfRangeTime() throws MoException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validStartDay \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validEndDay \u003d 3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] validWeek \u003d {\"1\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String validStartTime \u003d \"08:30\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String invalidOutOfRangeEndTime \u003d \"24:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String meetingName \u003d \"TEST_MEETING\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMember \u003d new Contact(\"MEMBER\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String invalidOutOfRangeEndTimeMessage \u003d myMember.editBlocks(true, meetingName,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                validStartDay, validStartTime, validEndDay, invalidOutOfRangeEndTime, validWeek);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(invalidOutOfRangeEndTimeMessage, MESSAGE_STARTENDTIME_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void editBlocks_outOfRangeDay() throws MoException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validStartDay \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int invalidOutOfRangeEndDay \u003d 20;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String validStartTime \u003d \"08:30\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String validEndTime \u003d \"12:00\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String meetingName \u003d \"TEST_MEETING\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] validWeek \u003d {\"1\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMember \u003d new Contact(\"MEMBER\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String invalidOutOfRangeEndDayMessage \u003d myMember.editBlocks(true, meetingName,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                validStartDay, validStartTime, invalidOutOfRangeEndDay, validEndTime, validWeek);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(invalidOutOfRangeEndDayMessage, MESSAGE_STARTENDDAY_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMember \u003d new Contact(\"MEMBER\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validEndDay \u003d 3;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int invalidOutOfRangeStartDay \u003d -1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String invalidOutOfRangeStartDayMessage \u003d myMember.editBlocks(true, meetingName,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                invalidOutOfRangeStartDay, validStartTime, validEndDay, validEndTime, validWeek);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(invalidOutOfRangeStartDayMessage, MESSAGE_STARTENDDAY_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void editBlocks_timeNotInBlocks() throws MoException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String meetingName \u003d \"TEST_MEETING\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validStartDay \u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validEndDay \u003d 3;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] validWeek \u003d {\"1\"};"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String invalidFormatStartTime \u003d \"08:35\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String validEndTime \u003d \"12:00\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMember \u003d new Contact(\"MEMBER\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String invalidFormatStartTimeMessage \u003d myMember.editBlocks(true, meetingName,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                validStartDay, invalidFormatStartTime, validEndDay, validEndTime, validWeek);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(invalidFormatStartTimeMessage, MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void editBlocks_correctParams() throws MoException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMember \u003d new Contact(\"MEMBER\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String[] validWeek \u003d {\"1\"};"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String correctMessage \u003d myMember.editBlocks(true, \"TEST MEETING\", 1, \"11:30\", 2, \"14:30\", validWeek);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(correctMessage, MESSAGE_RETURN_SUCCESS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 16,
      "synCKun": 10,
      "MeLoveCarbs": 50
    }
  },
  {
    "path": "src/test/java/model/meeting/MeetingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Meeting m \u003d new Meeting(\"CS2113T Meeting.Meeting\", 1, LocalTime.parse(\"14:00\"), 1, LocalTime.parse(\"15:00\"), 1, 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(\"CS2113T Meeting.Meeting, 1, 14:00, 1, 15:00\", m.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public void testStartEndTime_validTime_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Meeting m \u003d new Meeting(\"CS2113T Meeting.Meeting\", 2, LocalTime.parse(\"10:00\"), 2, LocalTime.parse(\"12:30\"), 1, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        assertEquals(LocalTime.parse(\"10:00\"), m.getStartTime());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        assertEquals(LocalTime.parse(\"12:30\"), m.getEndTime());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 18,
      "synCKun": 2,
      "MeLoveCarbs": 3
    }
  }
]
