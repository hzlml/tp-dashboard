[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Project Template for the tP"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a small CLI Java project. It uses Gradle for build automation and GitHub Actions for CI."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. **IMPORTANT: Locate the `build.gradle` file** in the project directory, select it, and click `OK`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the set up is complete, you can locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end. Also note how Intellij is now using Gradle to run your code (you can make Intellij run the code without Gradle [this way](tutorials/assets/RunUsingIntellij.png))."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "## Build Automation using Gradle"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "This project is already configured to use Gradle. Read the following tutorial to learn how to use gradle to do tasks such as running tests, checking code against teh style rules, and generating the JAR file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "To run _I/O redirection_ tests (aka _Text ui tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "To run JUnit tests (after you have added JUnit tests), you can run the `test` Gradle task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "The project is already configured to use [GitHub actions](https://github.com/features/actions). When you push a commit to your fork or PR against an upstream repo, GitHub actions will run automatically to build and verify the product."
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "MeLoveCarbs": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    implementation(\"com.google.guava:guava:28.2-jre\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    mainClassName \u003d \"MeetingOrganizer\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    archiveBaseName \u003d \"MeetingOrganizer\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    archiveVersion \u003d \"1.0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "MeLoveCarbs": 6
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "synCKun"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | CK | [Github](https://github.com/synCKun) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hong Wei Yang | [Github](https://github.com/MeLoveCarbs) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Xi Zhi | [Github](https://github.com/lowxizhi) | [Portfolio](docs/team/lowxizhi.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Matthew Chan | [Github](https://github.com/matthewc97) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 1,
      "lowxizhi": 1,
      "synCKun": 1,
      "-": 4,
      "MeLoveCarbs": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "# MeetingOrganizer - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "By: `AY1920S2-CS2113T-T12-1`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [1. Setting up](#1-setting-up)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [2. Design](#2-design)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.1. Architecture](#21-architecture)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.2. UI component](#22-ui-component)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.3. Module parsing logic component](#23-module-parsing-logic-component)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.4. Member component](#24-member-component)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.5. Meeting component](#25-meeting-component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.6. Exception classes](#26-exception-classes)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [2.7. Common classes](#27-common-classes)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [3. Implementation](#3-implementation)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [3.1. Detailed implementation of modulelogic component](#31-detailed-implementation-of-modulelogic-component)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [3.2. Design Considerations](#32-design-considerations)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [4. Documentation](#4-documentation)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [5. Testing](#5-testing)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [6. Dev Ops](#6-dev-ops)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix A: Product Scope](#appendix-a-product-scope)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [A.1. Target user profile](#a1-target-user-profile)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [A.2. Value proposition](#a2-value-proposition)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix C: Use Cases](#appendix-c-use-cases)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix D: Non-Functional Requirements](#appendix-d-non-functional-requirements)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix E: Glossary](#appendix-e-glossary)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix F: Product Survey](#appendix-f-product-survey)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "* [Appendix G: Instructions for Manual Testing](#appendix-g-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [G.1. Launch and Shutdown](#g1-launch-and-shutdown)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\t* [G.2. Saving data](#g2-saving-data)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 1. Setting up"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 2.1. Architecture"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 2.2. UI component"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 2.3. Module parsing logic component"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "**Structure of the module logic component.**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "The module parsing logic of our application consists of 4 classes: ```TimetableParser ModuleApiParser ModuleHandler LessonsGenerator```."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "A detailed implementation would be explained in the implementation section."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " API: ```modulelogic.LessonsGenerator```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "1. ```LessonsGenerator``` uses the ```TimetableParser``` class to acquire the modules a user is taking, including the timeslots of those modules."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "2. ```LessonsGenerator``` also uses ```Modulehandler``` to retrieve a set of information related to a specific module."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "3. With both information, ```LessonsGenerator``` is able to dynamically generate the user\u0027s time-slots stored in ```ArrayList\u003cString[]\u003e``` via a series of Key-Value pair hashing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "4. ```Arraylist\u003cString[]\u003e ``` contains the start/end time, days and weeks of all modules the user is taking."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 2.4. Member component"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 2.5. Meeting component"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "The Meeting component of our application consists of 2 classes: ```Meeting MeetingList```"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 2.6. Exception classes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 2.7. Common classes"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "This section describes some noteworthy details of how our application works in the backend."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 3.1. Detailed implementation of modulelogic component"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![modulelogic Component](images/TimetableParser.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "The above figure shows```TimetableParser```, a private class called exclusively by ```LessonsGenerator```. It makes use of regex to sift through timetable link provided by user in the form of ```String``` object and stores"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "the semester and the user\u0027s module information according to the timetable link provided. It depends on the ```common.Messages``` class to provide the exception message when an incorrect link is being parsed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![modulelogic Component](images/ModuleHandler.jpg)\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " From the figure above, ```ModuleApiParser``` instantiates a HTTP GET request object to fetch a Json object from the open-sourced NUSMOD API server, and is called by ```ModuleHandler``` every time a particular module information is requested."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "```ModuleHandler``` cleans the data provided by ```ModuleApiParser``` and stores an easy to use data structure to be used by ```LessonsGenerator```."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "![modulelogic Component](images/LessonsGenerator.jpg)\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " Finally, ```LessonsGenerator``` collates the returned data structure from both ```ModuleHandler```(looped for as many modules the user takes) and ```TimetableParser```, calling```.lessonsChecker()``` simultaneously to create a set of information containing the start-time, end-time, day, weeks of the modules that a user is taking."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " The information from ```LessonsGenerator``` would then be included in the schedule of a particular ```TeamMember```."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### 3.2. Design Considerations"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "#### 3.2.1. Aspect: Fetching of module information"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Alternative 1(current choice): Instantiate a ```ModuleHandler``` every time there\u0027s a request for a module information."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Pros: The classes are intuitively separated and data structures returned is understandable."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Cons: Program runs slower for every extra timetable or extra modules taken since its a new instantiation of a ```ModuleHandler```."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "* Alternative 2: Instantiate ```ModuleHandler``` once for every user. "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Pros: Takes up less memory and setup time for every timetable provided compared to alternative 1."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "Cons: The data structure returned by ```ModuleHandler``` would be complicated and confusing for new developers."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 4. Documentation"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 5. Testing"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## 6. Dev Ops"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### A.1. Target user profile"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the target user profile}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### A.2. Value proposition"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix C: Use Cases"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix E: Glossary"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix F: Product Survey"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "## Appendix G: Instructions for Manual Testing"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\u003e :information_source: These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### G.1. Launch and Shutdown"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### G.2. Saving data"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 67,
      "-": 26,
      "MeLoveCarbs": 37
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "Meeting Organizer is a friendly chatbot that helps you find common free time among you and your friends, using just the NUSMODS links to your school timetable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{Give steps to get started quickly}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "synCKun"
        },
        "content": "2. Down the latest version of `Duke` from [here](http://link.to/duke)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "- [Adding a new contact](#adding-a-new-contact)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "- [Display contacts](#display-contacts-contacts)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "- [Edit contact\u0027s timetable](#edit-contacts-timetable-edit)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "- [Schedule a new meeting](#schedule-a-new-meeting-schedule)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "- [Delete a scheduled meeting](#delete-a-scheduled-meeting-delete)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "- [Display meetings](#display-meetings-meetings)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "- [Exit the application](#exit-the-application-exit)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "### Adding a new contact"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Adds a new person and their class schedule into our list of contacts."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Format: `\u003cname\u003e \u003cNUSMODS link\u003e`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Juan https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:01,PTUT:01\u0026CG2027\u003dTUT:01,LEC:01\u0026CG2028\u003dTUT:01,LAB:02,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:08,LEC:1\u0026CS2113T\u003dLEC:C01\u0026EG3301R\u003dLAB:G8,LEC:1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": "{insert ui}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "### Display contacts: `contacts`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Displays names of all contacts that is stored in program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example of usage: `contacts`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "synCKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "synCKun"
        },
        "content": "{insert ui}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "synCKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### Edit contact\u0027s timetable `edit`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Edits the timetable of a contact from the list of contacts."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Format: `edit \u003cMember Number\u003e \u003cbusy/free\u003e \u003cstartDay\u003e \u003cstartTime\u003e \u003cendDay\u003e \u003cendTime\u003e`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "edit 0 busy 2 22:00 2 23:00"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "{insert ui}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### Schedule a new meeting `schedule`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Schedules a new meeting and adds it into the meeting list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Format: `schedule \u003cMeeting Name\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "schedule meeting 3 17:00 3 19:00"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "{insert ui}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### Delete a scheduled meeting `delete`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Deletes a meeting from the meeting list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Format: `delete \u003cMeeting Index\u003e`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "{insert ui}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "synCKun"
        },
        "content": "### Display meetings: `meetings`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Displays all scheduled meetings stored in program."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Example of usage: `meetings`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "synCKun"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "synCKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "synCKun"
        },
        "content": "{insert ui}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "synCKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "### Exit the application: `exit`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Exits the application and ends the current session."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Example of usage: `exit`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "Thank you for using MeetingOrganizer, goodbye!"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "synCKun"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;**A**: Copy the `data` file in the root directory and paste into the root directory in the other computer."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "{Give a \u0027cheat sheet\u0027 of commands here}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Add to-do `todo n/TODO_NAME d/DEADLINE`"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 65,
      "lowxizhi": 1,
      "synCKun": 41,
      "-": 31
    }
  },
  {
    "path": "docs/team/lowxizhi.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "# Low Xi Zhi - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 6
    }
  },
  {
    "path": "src/main/java/MeetingOrganizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import modulelogic.LessonsGenerator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.InvalidUrlException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.MoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.UnformattedModuleException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import inputparser.CliParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import meeting.MeetingList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import teammember.ScheduleHandler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import teammember.TeamMember;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import teammember.TeamMemberList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import ui.TextUI;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class MeetingOrganizer {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private MeetingList myMeetingList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private TeamMemberList myTeamMemberList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private TeamMember mainUser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public MeetingOrganizer() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //declare objects here"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        myMeetingList \u003d new MeetingList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            storage \u003d new Storage(\"data/meeting_list.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            myMeetingList \u003d new MeetingList(storage.loadMeetingListFromDisk());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            myTeamMemberList \u003d new TeamMemberList(storage.loadMemberListFromDisk());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.introMsg();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (myTeamMemberList.getSize() \u003e 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                myTeamMemberList.getTeamMemberList().forEach(member -\u003e mainUser \u003d member.isMainUser() ? member : null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.teamMemberListMsg(myTeamMemberList.getTeamMemberList(),mainUser.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.introMsg();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.showLoadingError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            myMeetingList \u003d new MeetingList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            myTeamMemberList \u003d new TeamMemberList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        new MeetingOrganizer().run();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    void botResponse(String[] userInputWords, Scanner in) throws MoException, DateTimeParseException, NumberFormatException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Integer startDay \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Integer endDay \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        TeamMember member;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int memberNumber;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String userCommand \u003d userInputWords[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //To adapt user input of format \u003cname\u003e \u003cNUSMODS link\u003e to fit into the following switch statements to allow"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        // for both link and manual input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        // TODO member\u0027s name can only be 1 word at the moment."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (userInputWords.length \u003d\u003d 2 \u0026\u0026 userInputWords[1].contains(\"https\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            userCommand \u003d \"add using link\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        switch (userCommand) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"add using link\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            int checkerForRepeatedName \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            checkerForRepeatedName \u003d myTeamMemberList.getTeamMemberList().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    .mapToInt(person -\u003e check(person, userInputWords[0])).sum();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (checkerForRepeatedName \u003d\u003d 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                TextUI.showRepeatedPerson(userInputWords[0]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            member \u003d new TeamMember(userInputWords[0]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String name \u003d userInputWords[0];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            LessonsGenerator myLessonGenerator;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                myLessonGenerator \u003d new LessonsGenerator(userInputWords[1]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                myLessonGenerator.generate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                ArrayList\u003cString[]\u003e myLessonDetails \u003d myLessonGenerator.getLessonDetails();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int k \u003d 0; k \u003c myLessonDetails.size(); k++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    String startTimeString \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    String endTimeString \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    for (int j \u003d 0; j \u003c myLessonDetails.get(k).length; j++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        switch (j) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        case 0:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            startTimeString \u003d myLessonDetails.get(k)[j].substring(0, 2) + \":\" + myLessonDetails.get(k)[j].substring(2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        case 1:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            endTimeString \u003d myLessonDetails.get(k)[j].substring(0, 2) + \":\" + myLessonDetails.get(k)[j].substring(2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        case 2:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            startDay \u003d getNumberFromDay(myLessonDetails.get(k)[j]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            endDay \u003d startDay;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        case 3:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            //future improvement: since myLessonDetails.get(k)[3] contains data on the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            // week number that this class occurs on, add capability of schedule to reflect"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            // schedule of the current week."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            //data only has four sections from api"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    member.addBusyBlocks(name, startDay, startTimeString, endDay, endTimeString);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                if (myTeamMemberList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    mainUser \u003d member;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    member.setMainUser();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                myTeamMemberList.add(member);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                TextUI.showAddedMember(member.getName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            } catch (InvalidUrlException | UnformattedModuleException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        case \"edit\": // edit \u003cMember Number\u003e \u003cbusy/free\u003e \u003cstartDay\u003e \u003cstartTime\u003e \u003cendDay\u003e \u003cendTime\u003e (eg. edit 0 busy 2 22:00 2 23:00)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            memberNumber \u003d Integer.parseInt(userInputWords[1]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            member \u003d myTeamMemberList.getTeamMemberList().get(memberNumber);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String memberName \u003d member.getName();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            startDay \u003d Integer.parseInt(userInputWords[3]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String startTimeString \u003d userInputWords[4];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            endDay \u003d Integer.parseInt(userInputWords[5]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String endTimeString \u003d userInputWords[6];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (userInputWords[2].equals(\"busy\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                member.addBusyBlocks(memberName, startDay, startTimeString, endDay, endTimeString);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else if (userInputWords[2].equals(\"free\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                member.addFreeBlocks(memberName, startDay, startTimeString, endDay, endTimeString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        case \"contacts\":  // contacts"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.teamMemberListMsg(myTeamMemberList.getTeamMemberList(), mainUser.getName());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        case \"display\": // display OR display \u003cMember Number 1\u003e \u003cMember Number 2\u003e (eg. display 1 3)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (userInputWords.length \u003e 1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                ArrayList\u003cTeamMember\u003e myScheduleList \u003d new ArrayList\u003cTeamMember\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int i \u003d 1; i \u003c userInputWords.length; i++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    memberNumber \u003d Integer.parseInt(userInputWords[i]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    member \u003d myTeamMemberList.getTeamMemberList().get(memberNumber);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    myScheduleList.add(member);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                //Automatically add main user\u0027s timetable into scheduler."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUser !\u003d null \u0026\u0026 !myScheduleList.contains(mainUser)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    myScheduleList.add(mainUser);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                ScheduleHandler myScheduleHandler \u003d new ScheduleHandler(myScheduleList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                Boolean[][] myMasterSchedule;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                myMasterSchedule \u003d myScheduleHandler.getMasterSchedule();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                System.out.println(\"Combined timetable of you and your selected team member/s:\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.printTimetable(myMasterSchedule);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                System.out.println(\"Your timetable:\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                TextUI.printTimetable(mainUser.getSchedule());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"schedule\": //schedule \u003cMeeting Name\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e (eg. schedule meeting 3 17:00 3 19:00)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String meetingName \u003d userInputWords[1];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            startDay \u003d Integer.parseInt(userInputWords[2]);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(userInputWords[3]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            endDay \u003d Integer.parseInt(userInputWords[4]);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(userInputWords[5]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (ScheduleHandler.isValidMeeting(mainUser, startDay, startTime, endDay, endTime)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    Meeting myMeeting \u003d new Meeting(meetingName, startDay, startTime, endDay, endTime);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    myMeetingList.add(myMeeting);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    mainUser.addBusyBlocks(meetingName, startDay, userInputWords[3], endDay, userInputWords[5]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    TextUI.meetingListSizeMsg(myMeetingList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    System.out.println(\"Schedule is blocked at that timeslot\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            } catch (MoException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                System.out.println(e.getMessage() + \", try again.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            // Replace main user\u0027s timetable with updated meeting blocks into TeamMember.TeamMemberList for storage purposes."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myTeamMemberList.set(0, mainUser);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            int index \u003d Integer.parseInt(userInputWords[1]) - 1;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                Meeting meetingToDelete \u003d myMeetingList.getMeetingList().get(index);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                String meetingNameToDelete \u003d meetingToDelete.getMeetingName();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                mainUser.deleteBusyBlocks(meetingNameToDelete);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                myMeetingList.delete(index);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myTeamMemberList.set(0, mainUser);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                TextUI.displayInvalidDeleteTarget();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"meetings\": //list all current meeting slots"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            TextUI.listMeetings();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            myMeetingList.show();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new MoException(\"Unknown command, please try again.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private int check(TeamMember person, String name) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (person.getName().equals(name)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private Integer getNumberFromDay(String day) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int dayInNumber;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Monday\":"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            dayInNumber \u003d 1;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Tuesday\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            dayInNumber \u003d 2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Wednesday\":"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            dayInNumber \u003d 3;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Thursday\":"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            dayInNumber \u003d 4;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Friday\":"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            dayInNumber \u003d 5;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Saturday\":"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            dayInNumber \u003d 6;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case \"Sunday\":"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            dayInNumber \u003d 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            dayInNumber \u003d Integer.parseInt(null);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return dayInNumber;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Main entry-point for the application."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        TextUI.menuMsg(myTeamMemberList.getSize());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (userInput.equals(\"exit\")) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String[] userInputWords \u003d CliParser.splitWords(userInput);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                botResponse(userInputWords, in);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                storage.updateMeetingListToDisk(myMeetingList.getMeetingList());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            } catch (MoException e) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                TextUI.errorMsg(e);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                TextUI.timeOutOfRangeMsg();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                TextUI.invalidNumberMsg();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                TextUI.menuMsg(myTeamMemberList.getSize());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        storage.updateMemberListToDisk(myTeamMemberList.getTeamMemberList());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        TextUI.exitMsg();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "matthewc97": 15,
      "lowxizhi": 55,
      "synCKun": 124,
      "-": 6,
      "MeLoveCarbs": 75
    }
  },
  {
    "path": "src/main/java/common/LessonType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "synCKun"
        },
        "content": " * Maps the lessonType full name into its coded form to used by NUSMODS link."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Referenced from https://github.com/raynoldng/nusmods-planner/blob/master/nusmodsplanner/definitions.py"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class LessonType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static final Map\u003cString, String\u003e lessonType \u003d Map.ofEntries("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Packaged Lecture\", \"PLEC\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Packaged Tutorial\", \"PTUT\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Design Lecture\", \"DLEC\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Laboratory\", \"LAB\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Lecture\", \"LEC\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Recitation\", \"REC\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Sectional Teaching\", \"SEC\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Seminar-style Module Class\", \"SEM\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Tutorial\", \"TUT\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map.entry(\"Tutorial Type 2\", \"TUT2\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 1,
      "MeLoveCarbs": 21
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final String MESSAGE_STARTENDTIME_OUT_OF_RANGE \u003d \"Start and end time must be between of 00:00-23:30!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final String MESSAGE_STARTENDTIME_WRONG_FORMAT \u003d \"Start and end time must be in 30 minutes interval!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final String MESSAGE_STARTENDDAY_OUT_OF_RANGE \u003d \"Start and end day must be between 0 and 6!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final String MESSAGE_INVALID_MEETING \u003d \"Range entered is not within free slots!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final String MESSAGE_INVALID_NUMBER \u003d \"You have entered an invalid number!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static final String MESSAGE_INVALID_NUDMOSLINK \u003d \"You have entered an invalid nusmods link!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 6,
      "MeLoveCarbs": 7
    }
  },
  {
    "path": "src/main/java/exception/InvalidUrlException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class InvalidUrlException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public InvalidUrlException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 11
    }
  },
  {
    "path": "src/main/java/exception/MoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class MoException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public MoException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 11
    }
  },
  {
    "path": "src/main/java/exception/UnformattedModuleException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class UnformattedModuleException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public UnformattedModuleException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MeLoveCarbs": 11
    }
  },
  {
    "path": "src/main/java/inputparser/CliParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package inputparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class CliParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static String[] splitWords(String words) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return words.split(\" \");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 4,
      "MeLoveCarbs": 9
    }
  },
  {
    "path": "src/main/java/meeting/Meeting.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class Meeting {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private String meetingName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private Integer startDay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private Integer endDay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public Meeting(String meetingName, Integer startDay, LocalTime startTime, Integer endDay, LocalTime endTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.meetingName \u003d meetingName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.startDay \u003d startDay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.endDay \u003d endDay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public String getMeetingName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return meetingName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public Integer getStartDay() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return startDay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public Integer getEndDay() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return endDay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void editTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return meetingName + \", \" + startDay + \", \" + startTime + \", \" + endDay + \", \" + endTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 35,
      "MeLoveCarbs": 15
    }
  },
  {
    "path": "src/main/java/meeting/MeetingList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import ui.TextUI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class MeetingList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private ArrayList\u003cMeeting\u003e meetingList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public MeetingList(ArrayList\u003cMeeting\u003e dataOnDisk) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        meetingList \u003d dataOnDisk;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public MeetingList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        meetingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public void add(Meeting meeting) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        meetingList.add(meeting);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void delete(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        TextUI.displayRemovedMeeting(meetingList,index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        meetingList.remove(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (meetingList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.listAllScheduledMeetings(this.meetingList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            TextUI.displayNoMeetings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public ArrayList\u003cMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return this.meetingList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public int getMeetingListSize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return meetingList.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public Boolean isDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 12,
      "synCKun": 19,
      "MeLoveCarbs": 17
    }
  },
  {
    "path": "src/main/java/modulelogic/LessonsGenerator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.InvalidUrlException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.UnformattedModuleException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.common.collect.ArrayListMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.common.collect.Multimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import common.LessonType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * myLessonDetails contains an ArrayList of lessons in the form: startTime, endTime, day, weeks(delimited by \u0027:\u0027)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class LessonsGenerator {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private TimetableParser myTimetableParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cString[]\u003e myLessonsDetails;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public LessonsGenerator(String nusmodsLink) throws InvalidUrlException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.myTimetableParser \u003d new TimetableParser(nusmodsLink);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.myLessonsDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    //main method for easy in-class behaviour testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void main(String[] args) throws InvalidUrlException, IOException, UnformattedModuleException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //observe behaviour by substituting field in BackendAPI.LessonsGenerator() with other NUSMODS link"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        LessonsGenerator mylesson \u003d new LessonsGenerator(\"https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:03,PTUT:03\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:09,LEC:1\u0026CS2113T\u003dLEC:C01\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        mylesson.generate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString[]\u003e myLessonDetails \u003d mylesson.getLessonDetails();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int i \u003d 0; i \u003c myLessonDetails.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int j \u003d 0; j \u003c myLessonDetails.get(i).length; j++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                System.out.print(myLessonDetails.get(i)[j] + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void generate() throws FileNotFoundException, UnformattedModuleException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myTimetableParser.parse();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //Key-value pair: Key \u003d module code, Value \u003d LessonType:Class number(delimited by :)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map\u003cString, ArrayList\u003cString\u003e\u003e userLessons \u003d myTimetableParser.getModulesMap();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e userModules \u003d myTimetableParser.getModulesArr();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        // Zero based indexing: Semester 1 \u003d 0, Semester 2 \u003d 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Integer semester \u003d Integer.parseInt(myTimetableParser.getSemester()) - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String module : userModules) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ModuleHandler myModuleHandler \u003d new ModuleHandler(module);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myModuleHandler.generateModule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            // the index of the following ArrayList matches - classNumber[0] and lessonType[0] is the same lesson,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            // and it\u0027s startTime, endTime \u003d startTime[0], endTime[0]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e classNumber \u003d myModuleHandler.getClassNumber().get(semester);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e lessonType \u003d myModuleHandler.getLessonType().get(semester);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e startTime \u003d myModuleHandler.getStartTime().get(semester);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e endTime \u003d myModuleHandler.getEndTime().get(semester);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e day \u003d myModuleHandler.getDay().get(semester);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cArrayList\u003cString\u003e\u003e weeks \u003d myModuleHandler.getWeeks().get(semester);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e delimitedWeeks \u003d delimitWeeks(weeks);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            // Putting lesson information of a module into Key-Value(Array of fixed size 4) pair:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            // (\"lessonType:ClassNo\") - (startTime endTime day weeks)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            Multimap\u003cString, String[]\u003e allLessonMap \u003d ArrayListMultimap.create();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int i \u003d 0; i \u003c classNumber.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                String lessonTypeLongFormat \u003d lessonType.get(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                String lessonTypeShortFormat \u003d LessonType.lessonType.get(lessonTypeLongFormat);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                allLessonMap.put(lessonTypeShortFormat + \":\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    + classNumber.get(i), new String[] {startTime.get(i), endTime.get(i), day.get(i), delimitedWeeks.get(i)});"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e userModuleProfile \u003d userLessons.get(module);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            lessonsChecker(allLessonMap, userModuleProfile);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Checks if lessonType:classNo from userModuleProfile matches Multimap\u0027s info and if it does,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * adds a matched value pair containing an array(size 4) of startTime, endTime, day and weeks into mylessonsDetails."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @param allLessonMap All lesson information with key\u003dlessonType:classNo."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @param userModuleProfile ArrayList of lessonType:classNo that user has taken for a particular module."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private void lessonsChecker(Multimap\u003cString, String[]\u003e allLessonMap, ArrayList\u003cString\u003e userModuleProfile) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //System.out.println(\"USER \" + userModuleProfile);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //System.out.println(\"ALL: \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String s : userModuleProfile) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (allLessonMap.containsKey(s)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                Collection\u003cString[]\u003e values \u003d allLessonMap.get(s);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                for (String[] elem : values) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    myLessonsDetails.add(elem);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Refactor weeks into 1 single ArrayList from a 2d ArrayList delimited with \u0027:\u0027."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @param weeks 2D ArrayList weeks: For eg, weeks.get(0) \u003d weeks at classNo 0 \u003d [1, 2, 3, 6, 13]."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @return Weeks Delimited weeks indexed by each lessons."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cString\u003e delimitWeeks(ArrayList\u003cArrayList\u003cString\u003e\u003e weeks) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e delimitedWeeks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (ArrayList\u003cString\u003e elemArr : weeks) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String delimitedString \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int i \u003d 0; i \u003c elemArr.size() - 1; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                delimitedString \u003d delimitedString + elemArr.get(i) + \":\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            delimitedString +\u003d elemArr.get(elemArr.size() - 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            delimitedWeeks.add(delimitedString);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return delimitedWeeks;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cString[]\u003e getLessonDetails() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.myLessonsDetails;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 7,
      "MeLoveCarbs": 113
    }
  },
  {
    "path": "src/main/java/modulelogic/ModuleApiParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Returns one school module in JSONArray format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": " * Data grabbed from NUSMODS API: https://api.nusmods.com/v2/2019-2020/modules/MODULECODE.json"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ModuleApiParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    String apiUrl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private final String templateUrl \u003d \"https://api.nusmods.com/v2/2019-2020/modules/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ModuleApiParser(String moduleName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        apiUrl \u003d templateUrl + moduleName + \".json\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public JsonArray parse() throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        URL url \u003d new URL(apiUrl);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        HttpURLConnection request \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        request.connect();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //Convert the input stream to a json element"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        JsonElement root \u003d JsonParser.parseReader(new InputStreamReader((InputStream) request.getContent()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        JsonObject rootObj \u003d root.getAsJsonObject();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assert  rootObj !\u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return (JsonArray) rootObj.get(\"semesterData\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 1,
      "MeLoveCarbs": 34
    }
  },
  {
    "path": "src/main/java/modulelogic/ModuleHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.UnformattedModuleException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "synCKun"
        },
        "content": " * Each module information is an ArrayList(size: 2. Because 2 semester) of ArrayList except member \"weeks\"."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Semester 1                       : Semester 2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * ArrayList of available classes   : ArrayList of available classes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Indexes of the ArrayList matches. For eg, classNumber.get(semester).get(0) belongs to lessonType.get(semester).get(0)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * held on day.get(semester).get(0) at startTime.get(semester).get(0) and endTime.get(semester).get(0)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * \"weeks\" is an ArrayList(size: 2. Because 2 semester) of a 2d ArrayList:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Eg: week[0].get(2) \u003d [1, 3, 4, 5] corresponds to:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * Semester 1, class 2 has lessons in week 1, 3, 4, 5."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ModuleHandler {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    JsonArray semesterData;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e classNumber; // can be repeated."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e startTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e endTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e lessonType; //tutorial, lecture etc"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e day; // one day per classNumber"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e weeks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private String moduleName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private Set\u003cString\u003e unformattedModules;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ModuleHandler(String moduleName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.classNumber \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.startTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.endTime \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.lessonType \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.weeks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.day \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int i \u003d 0; i \u003c 2; i++) { // number of semesters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.classNumber.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.startTime.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.endTime.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.lessonType.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.day.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.weeks.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.unformattedModules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Scanner reader \u003d new Scanner(new File(\"UnformattedModules\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        while (reader.hasNext()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String data \u003d reader.nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            unformattedModules.add(data);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        // RUN THIS TO FILTER UNFORMATTED MODULES INTO /UnformmattedModules file"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"UnformattedModules\", true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        URL url \u003d new URL(\"https://api.nusmods.com/v2/2019-2020/moduleList.json\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        HttpURLConnection request \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        request.connect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //Convert the input stream to a json element"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        JsonElement root \u003d JsonParser.parseReader(new InputStreamReader((InputStream) request.getContent()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        JsonArray rootObj \u003d root.getAsJsonArray();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int i \u003d 0; i \u003c rootObj.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonObject module \u003d rootObj.get(i).getAsJsonObject();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String moduleCode \u003d module.get(\"moduleCode\").toString().replaceAll(\"^.|.$\", \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                ModuleHandler myModuleHandler \u003d new ModuleHandler(moduleCode);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                myModuleHandler.generateModule();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                fw.write(moduleCode + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    // TODO split code into smaller methods."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Generate an ArrayList of module information- classNumber, lessonType, startTime, endTime, day, weeks."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void generateModule() throws UnformattedModuleException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ModuleApiParser myModuleApiParser \u003d new ModuleApiParser(moduleName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            semesterData \u003d myModuleApiParser.parse();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(\"Unable to access api, using auxiliary module data\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //TODO SET UP FAKE DATA HERE IF UNABLE TO ACCESS API"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assert semesterData !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        checkModuleFormat();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (int i \u003d 0; i \u003c semesterData.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonObject semesterDataObj \u003d semesterData.get(i).getAsJsonObject();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            // get semester number from json"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            Integer semester \u003d Integer.parseInt(semesterDataObj.get(\"semester\").toString()) - 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (!(semester \u003d\u003d 0 || semester \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            JsonArray timetable \u003d (JsonArray) semesterDataObj.get(\"timetable\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int k \u003d 0; k \u003c timetable.size(); k++) { // For each classes"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                JsonObject lesson \u003d timetable.get(k).getAsJsonObject();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                // replaceAll() trims the quotes left behind by json parsing via regex"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                this.classNumber.get(semester).add(lesson.get(\"classNo\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                this.lessonType.get(semester).add(lesson.get(\"lessonType\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                this.startTime.get(semester).add(lesson.get(\"startTime\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                this.endTime.get(semester).add(lesson.get(\"endTime\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                this.day.get(semester).add(lesson.get(\"day\").toString().replaceAll(\"^.|.$\", \"\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                assert classNumber !\u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                assert lessonType !\u003d null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                assert startTime !\u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                assert endTime !\u003d null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                assert day !\u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                JsonArray weeksJsonArray \u003d (JsonArray) lesson.get(\"weeks\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                ArrayList\u003cString\u003e weeksData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                for (int j \u003d 0; j \u003c weeksJsonArray.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    weeksData.add(weeksJsonArray.get(j).toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                this.weeks.get(semester).add(weeksData);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                assert weeks !\u003d null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private void checkModuleFormat() throws UnformattedModuleException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (unformattedModules.contains(moduleName)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new UnformattedModuleException(\"OH NO! \" + moduleName + \"\u0027s format parsed from NUSMOD API is out-dated.\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \" Please remove it from your timetable and manually add the time-slots.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getClassNumber() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.classNumber;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getStartTime() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getEndTime() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getLessonType() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.lessonType;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getDay() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.day;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e getWeeks() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.weeks;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 1,
      "MeLoveCarbs": 170
    }
  },
  {
    "path": "src/main/java/modulelogic/TimetableParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package modulelogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_NUDMOSLINK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.InvalidUrlException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class TimetableParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    String nusmodsLink;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    String semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    Map\u003cString, ArrayList\u003cString\u003e\u003e modulesMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    ArrayList\u003cString\u003e modulesArr;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public TimetableParser(String nusmodsLink) throws InvalidUrlException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.nusmodsLink \u003d nusmodsLink;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (!this.nusmodsLink.matches(\"https://nusmods\\\\.com/timetable/sem-./share\\\\?.*\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new InvalidUrlException(MESSAGE_INVALID_NUDMOSLINK);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.modulesArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    //main method for easy in-class behaviour testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void main(String[] args) throws InvalidUrlException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        //observe behaviour by substituting field in BackendAPI.LessonsGenerator() with other NUSMODS link"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        TimetableParser myTimetableParser \u003d new TimetableParser(\"https://nusmods.com/timetable/sem-2/share?CG2023\u003dLAB:03,PLEC:03,PTUT:03\u0026CG2027\u003dLEC:01,TUT:01\u0026CG2028\u003dLAB:02,TUT:01,LEC:01\u0026CS2101\u003d\u0026CS2107\u003dTUT:09,LEC:1\u0026CS2113T\u003dLEC:C01\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myTimetableParser.parse();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        System.out.println(myTimetableParser.getSemester());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        System.out.println(myTimetableParser.getModulesArr());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        System.out.println(myTimetableParser.getModulesMap());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void parse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assert nusmodsLink.contains(\"share?\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int strippedIndex \u003d this.nusmodsLink.indexOf(\"share?\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String unparsedSemester \u003d this.nusmodsLink.substring(0, strippedIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String unparsedModules \u003d this.nusmodsLink.substring(strippedIndex + 6);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assert nusmodsLink.contains(\"sem-1\") || nusmodsLink.contains(\"sem-2\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (unparsedSemester.contains(\"1\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.semester \u003d \"1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            this.semester \u003d \"2\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.modulesMap \u003d parseModules(unparsedModules);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * Parses website link into module information using hashMap as data structure."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * Also stores module information collected to be used by LessonGenerator class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @param unparsedModules Raw website link with module information."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     * @return  Returns Key-value pair. Key \u003d \"moduleCode\"-Value \u003d ArrayList of \"LessonType:Class number\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private Map\u003cString, ArrayList\u003cString\u003e\u003e parseModules(String unparsedModules) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assert  unparsedModules !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cString\u003e unparsed \u003d new ArrayList\u003c\u003e(Arrays.asList(unparsedModules.split(\"\u0026\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Map\u003cString, ArrayList\u003cString\u003e\u003e myModuleDetails \u003d new HashMap\u003cString, ArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        for (String elem : unparsed) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            assert elem !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            int tempIndex \u003d elem.indexOf(\"\u003d\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String module \u003d elem.substring(0, tempIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String unparsedLessonTypeAndClass \u003d elem.substring(tempIndex + 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            ArrayList\u003cString\u003e parsedLessonTypeAndClass \u003d new ArrayList\u003c\u003e(Arrays.asList(unparsedLessonTypeAndClass.split(\",\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            myModuleDetails.put(module, parsedLessonTypeAndClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            modulesArr.add(module);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return myModuleDetails;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public Map\u003cString, ArrayList\u003cString\u003e\u003e getModulesMap() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.modulesMap;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public String getSemester() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.semester;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public ArrayList\u003cString\u003e getModulesArr() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.modulesArr;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 6,
      "MeLoveCarbs": 82
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import meeting.Meeting;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import teammember.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.nio.file.DirectoryStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "synCKun"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    File meetingFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    File memberFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * Constructor specifying file path of meeting list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @param meetingFilePath File path to load and store meeting list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public Storage(String meetingFilePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        meetingFile \u003d new File(meetingFilePath); //meetingFilePath \u003d \"data/meeting_list.txt\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void updateMeetingListToDisk(ArrayList\u003cMeeting\u003e meetingList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Files.createDirectory(Paths.get(\"data\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException ignored) { //ignored as the error would mean the directory exists, thus no action needed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Files.createFile(Paths.get(\"data/meeting_list.txt\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException ignored) { //ignored as the error would mean the file exists, thus no action needed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"data/meeting_list.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            meetingList.forEach((n) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    fw.write(n.getMeetingName() + \" \" + n.getStartDay() + \" \" + n.getStartTime() + \" \" + n.getEndDay()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        + \" \" + n.getEndTime() + System.lineSeparator());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void updateMemberListToDisk(ArrayList\u003cTeamMember\u003e myTeamMemberList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Files.createDirectory(Paths.get(\"data\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException ignored) { //ignored as the error would mean the directory exists, thus no action needed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        //create separate text file for every member containing their schedules"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (TeamMember member : myTeamMemberList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String memberPath \u003d \"data/\" + ((member.isMainUser()) ? member.getName() + \"_main\" : member.getName()) + \"_schedule.txt\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                Files.createFile(Paths.get(memberPath));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } catch (IOException ignored) { //ignored as the error would mean the file exists, thus no action needed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                FileWriter fw \u003d new FileWriter(memberPath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                String[][] schedule \u003d member.getMyScheduleName();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    for (int j \u003d 0; j \u003c 48; j++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            fw.write(schedule[i][j] + \" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * Loads file from hard drive on start of program."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @return List from hard drive"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     * @throws FileNotFoundException If file is not found"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "synCKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public ArrayList\u003cMeeting\u003e loadMeetingListFromDisk() throws FileNotFoundException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        ArrayList\u003cMeeting\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Scanner reader \u003d new Scanner(meetingFile);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        while (reader.hasNext()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String[] data \u003d reader.nextLine().split(\" \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            Meeting entry \u003d new Meeting(data[0], Integer.parseInt(data[1]),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                LocalTime.parse(data[2]), Integer.parseInt(data[3]), LocalTime.parse(data[4]));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            list.add(entry);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public ArrayList\u003cTeamMember\u003e loadMemberListFromDisk() throws FileNotFoundException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        ArrayList\u003cTeamMember\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        Path path \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        try (DirectoryStream\u003cPath\u003e stream \u003d Files.newDirectoryStream(path)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (Path entry : stream) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (entry.toString().contains(\"_schedule.txt\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    String memberName \u003d entry.toString().substring(5);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    memberName \u003d memberName.replaceAll(\"_schedule\\\\.txt\", \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    TeamMember member \u003d new TeamMember(memberName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    String[][] myScheduleName \u003d new String[7][48];"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    int i \u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    int j \u003d 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    Scanner reader \u003d new Scanner(entry);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    while (reader.hasNext()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        if (j \u003e\u003d 48) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            i++;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                            j \u003d 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        myScheduleName[i][j] \u003d reader.next();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                        j++;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    member.setMyScheduleName(myScheduleName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    member.setMyScheduleFromScheduleName();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    list.add(member);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "synCKun": 134,
      "MeLoveCarbs": 9
    }
  },
  {
    "path": "src/main/java/teammember/ScheduleHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package teammember;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_MEETING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDDAY_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_WRONG_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.MoException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import meeting.Meeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "public class ScheduleHandler {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final Boolean MYSCHEDULEBLOCKED \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final Boolean MYSCHEDULEFREE \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private static Boolean[][] masterSchedule \u003d new Boolean[7][48];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    // ArrayList of free slots in Integer type {startDay, startBlock, endDay, endBlock}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private static ArrayList\u003cArrayList\u003cInteger\u003e\u003e freeBlocks \u003d new ArrayList\u003cArrayList\u003cInteger\u003e\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public ScheduleHandler(ArrayList\u003cTeamMember\u003e teamMemberList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            Arrays.fill(masterSchedule[i], MYSCHEDULEFREE); // fill every 48 index of the 7 days with 0 initially"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (TeamMember t : teamMemberList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Boolean[][] memberSchedule \u003d t.getSchedule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            fillMasterSchedule(memberSchedule);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        updateFreeBlocks();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static ArrayList\u003cInteger\u003e makeSlot(int startDay, int startBlock, int endDay, int endBlock) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        ArrayList\u003cInteger\u003e freeSlot \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        freeSlot.add(startDay);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        freeSlot.add(startBlock);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        freeSlot.add(endDay);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        freeSlot.add(endBlock);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return freeSlot;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static String getDayFromNumber(int dayNum) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String day;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        switch (dayNum) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Sunday\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Monday\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Tuesday\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Wednesday\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Thursday\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Friday\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"Saturday\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            day \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static LocalTime getTimeFromBlock(int blockNum, String startOrEnd) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int minuteTime \u003d 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int hourTime \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        switch (startOrEnd) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"START\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            hourTime \u003d blockNum / 2;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (blockNum % 2 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                minuteTime \u003d 30;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        case \"END\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (blockNum \u003d\u003d 47) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                hourTime \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                hourTime \u003d (blockNum + 1) / 2;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            if (blockNum % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                minuteTime \u003d 30;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            minuteTime \u003d 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            hourTime \u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        LocalTime myTime \u003d LocalTime.of(hourTime, minuteTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return myTime;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public Boolean[][] getMasterSchedule() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return masterSchedule;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private void fillMasterSchedule(Boolean[][] s) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int j \u003d 0; j \u003c 48; j++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (s[i][j]) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    masterSchedule[i][j] \u003d MYSCHEDULEBLOCKED;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private void updateFreeBlocks() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int j \u003d 0; j \u003c 48; j++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                if (masterSchedule[i][j] \u003d\u003d MYSCHEDULEFREE) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    boolean change \u003d false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    boolean end \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    final int startDay \u003d i;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    final int startBlock \u003d j;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    while (masterSchedule[i][j] \u003d\u003d MYSCHEDULEFREE) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        if (change) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                            change \u003d false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        if (i \u003d\u003d 6 \u0026\u0026 j \u003d\u003d 47) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                            end \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        if (j \u003d\u003d 47) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                            change \u003d true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                            j \u003d 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                            i++;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        j++;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    int endDay \u003d i;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    int endBlock \u003d j - 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (change) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        endBlock \u003d 47;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (end) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        endBlock \u003d 47;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        endDay \u003d 0;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    ArrayList\u003cInteger\u003e freeSlot \u003d makeSlot(startDay, startBlock, endDay, endBlock);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    this.freeBlocks.add(freeSlot);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        correctFirstAndLastSlotContinuation();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private void correctFirstAndLastSlotContinuation() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        int size \u003d this.freeBlocks.size();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        if (size \u003e 1) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Boolean isSunday \u003d this.freeBlocks.get(0).get(0).equals(this.freeBlocks.get(size - 1).get(2));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Boolean isMidnight \u003d this.freeBlocks.get(0).get(1).equals(0) \u0026\u0026 this.freeBlocks.get(size - 1).get(3).equals(47);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Boolean isSundayMidnightOverlap \u003d isSunday \u0026\u0026 isMidnight;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            if (isSundayMidnightOverlap) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                Integer newStartDay \u003d this.freeBlocks.get(size - 1).get(0);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                Integer newStartBlock \u003d this.freeBlocks.get(size - 1).get(1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                Integer newEndDay \u003d this.freeBlocks.get(0).get(2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                Integer newEndBlock \u003d this.freeBlocks.get(0).get(3);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                ArrayList\u003cInteger\u003e newFreeSlot \u003d makeSlot(newStartDay, newStartBlock, newEndDay, newEndBlock);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                this.freeBlocks.set(0, newFreeSlot);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                this.freeBlocks.remove(size - 1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void printFreeTimings() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        System.out.println(\"Here are your free slots:\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int i \u003d 0; i \u003c this.freeBlocks.size(); i++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String startDay \u003d getDayFromNumber(this.freeBlocks.get(i).get(0).intValue());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            LocalTime startTime \u003d getTimeFromBlock(this.freeBlocks.get(i).get(1).intValue(), \"START\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            String endDay \u003d getDayFromNumber(this.freeBlocks.get(i).get(2).intValue());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            LocalTime endTime \u003d getTimeFromBlock(this.freeBlocks.get(i).get(3).intValue(), \"END\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            System.out.println(startDay + \" \" + startTime + \" to \" + endDay + \" \" + endTime);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public ArrayList\u003cArrayList\u003cInteger\u003e\u003e getFreeBlocks() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return this.freeBlocks;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static Integer getBlocksFromStartTime(LocalTime startTime) throws MoException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        int minuteBlocks \u003d -1;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        int hourBlocks \u003d -1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        switch (startTime.getMinute()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            minuteBlocks \u003d 0;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        case 30:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            minuteBlocks \u003d 1;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            throw new MoException(MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        hourBlocks \u003d startTime.getHour() * 2;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return minuteBlocks + hourBlocks;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static Integer getBlocksFromEndTime(LocalTime endTime) throws MoException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        int minuteBlocks \u003d -1;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        int hourBlocks \u003d -1;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        switch (endTime.getMinute()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            minuteBlocks \u003d 0;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        case 30:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            minuteBlocks \u003d 1;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            throw new MoException(MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        hourBlocks \u003d endTime.getHour() * 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return minuteBlocks + hourBlocks - 1;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static boolean isValidMeeting(TeamMember mainUser, Integer startDay,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                                         LocalTime startTime, Integer endDay, LocalTime endTime) throws MoException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        if (!(startDay \u003e\u003d 0 \u0026\u0026 startDay \u003c\u003d 6) || !(endDay \u003e\u003d 0 \u0026\u0026 endDay \u003c\u003d 6)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            throw new MoException(MESSAGE_STARTENDDAY_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        if ((startTime.getMinute() !\u003d 0 \u0026\u0026 startTime.getMinute() !\u003d 30) || (endTime.getMinute() !\u003d 0 \u0026\u0026 endTime.getMinute() !\u003d 30)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            throw new MoException(MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        Integer startBlock \u003d getBlocksFromStartTime(startTime);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        Integer endBlock \u003d -1;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        if (endTime \u003d\u003d LocalTime.parse(\"00:00\")) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            endBlock \u003d 47;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            if (endDay \u003d\u003d 0) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                endDay \u003d 6;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                endDay \u003d endDay - 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            endBlock \u003d getBlocksFromEndTime(endTime);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Boolean[][] mainUserSchedule \u003d mainUser.getSchedule();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        if (startDay.equals(endDay)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            if (startBlock.equals(endBlock)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[startDay][startBlock] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            } else if (startBlock \u003c endBlock) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int i \u003d startBlock; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[startDay][i] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                        throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            } else if (startBlock \u003e endBlock) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int i \u003d startBlock; i \u003c\u003d 47; ++i) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[startDay][i] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                        throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int i \u003d startDay + 1; i \u003c\u003d 6; ++i) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    for (int j \u003d 0; j \u003c\u003d 47; ++j) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        if (mainUserSchedule[i][j] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                            throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int i \u003d 0; i \u003c\u003d endDay - 1; ++i) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    for (int j \u003d 0; j \u003c\u003d 47; ++j) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                        if (mainUserSchedule[i][j] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                            throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int i \u003d 0; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[endDay][i] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                        throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        if (startDay \u003c endDay) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d startBlock; i \u003c\u003d 47; ++i) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[startDay][i] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d startDay + 1; i \u003c\u003d endDay - 1; ++i) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int j \u003d 0; j \u003c 48; ++j) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[i][j] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                        throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[endDay][i] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        if (startDay \u003e endDay) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d startBlock; i \u003c\u003d 47; ++i) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[startDay][i] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d startDay + 1; i \u003c\u003d 6; ++i) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int j \u003d 0; j \u003c\u003d 47; ++j) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[i][j] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                        throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d endDay - 1; ++i) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int j \u003d 0; j \u003c\u003d 47; ++j) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    if (mainUserSchedule[i][j] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                        throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                if (mainUserSchedule[endDay][i] \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    throw new MoException(MESSAGE_INVALID_MEETING);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void updateMasterSchedule(Meeting myMeeting, String addOrDelete) throws MoException {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Boolean toAddorDelete \u003d null;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (addOrDelete \u003d\u003d \"add\") {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            toAddorDelete \u003d MYSCHEDULEBLOCKED;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            toAddorDelete \u003d MYSCHEDULEFREE;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        LocalTime endTime \u003d myMeeting.getEndTime();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Integer endDay \u003d myMeeting.getEndDay();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        LocalTime startTime \u003d myMeeting.getStartTime();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Integer startDay \u003d myMeeting.getStartDay();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        Integer startBlock \u003d getBlocksFromStartTime(startTime);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        Integer endBlock \u003d -1;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        if (endTime \u003d\u003d LocalTime.parse(\"00:00\")) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            endBlock \u003d 47;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            if (endDay \u003d\u003d 0) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                endDay \u003d 6;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                endDay \u003d endDay - 1;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            endBlock \u003d getBlocksFromEndTime(endTime);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        if (startDay.equals(endDay)) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            if (startBlock.equals(endBlock)) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                masterSchedule[startDay][startBlock] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            } else if (startBlock \u003c endBlock) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int i \u003d startBlock; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    masterSchedule[startDay][i] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            } else if (startBlock \u003e endBlock) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int i \u003d startBlock; i \u003c\u003d 47; ++i) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    masterSchedule[startDay][i] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int i \u003d startDay + 1; i \u003c\u003d 6; ++i) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    for (int j \u003d 0; j \u003c\u003d 47; ++j) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        masterSchedule[i][j] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int i \u003d 0; i \u003c\u003d endDay - 1; ++i) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    for (int j \u003d 0; j \u003c\u003d 47; ++j) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                        masterSchedule[i][j] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int i \u003d 0; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    masterSchedule[endDay][i] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        if (startDay \u003c endDay) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d startBlock; i \u003c\u003d 47; ++i) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                masterSchedule[startDay][i] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d startDay + 1; i \u003c\u003d endDay - 1; ++i) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int j \u003d 0; j \u003c 48; ++j) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    masterSchedule[i][j] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                masterSchedule[endDay][i] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        if (startDay \u003e endDay) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d startBlock; i \u003c\u003d 47; ++i) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                masterSchedule[startDay][i] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d startDay + 1; i \u003c\u003d 6; ++i) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int j \u003d 0; j \u003c\u003d 47; ++j) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    masterSchedule[i][j] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d endDay - 1; ++i) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                for (int j \u003d 0; j \u003c\u003d 47; ++j) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    masterSchedule[i][j] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d endBlock; ++i) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                masterSchedule[endDay][i] \u003d toAddorDelete;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 212,
      "lowxizhi": 118,
      "MeLoveCarbs": 115
    }
  },
  {
    "path": "src/main/java/teammember/TeamMember.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package teammember;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.MoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDDAY_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_WRONG_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "public class TeamMember {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final Boolean MYSCHEDULEBLOCKED \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private static final Boolean MYSCHEDULEFREE \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private String memberName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private Boolean[][] mySchedule; //String[7][48]; 7 days, separated into 30mins within 24 hours period."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private String[][] myScheduleName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    private boolean isMainUser \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public TeamMember(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        if (name.contains(\"_main\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            isMainUser \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            name \u003d name.replace(\"_main\",\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        this.memberName \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        this.mySchedule \u003d new Boolean[7][48];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        this.myScheduleName \u003d new String[7][48];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            Arrays.fill(mySchedule[i], MYSCHEDULEFREE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            Arrays.fill(myScheduleName[i], null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void addBusyBlocks(String meetingName, Integer startDay, String startTime, Integer endDay, String endTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        editBlocks(MYSCHEDULEBLOCKED, meetingName, startDay, startTime, endDay, endTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void addFreeBlocks(String meetingName, Integer startDay, String startTime, Integer endDay, String endTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        editBlocks(MYSCHEDULEFREE, meetingName, startDay, startTime, endDay, endTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public String editBlocks(Boolean blockedorfree, String meetingName, Integer startDay,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                             String startTime, Integer endDay, String endTime) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        LocalTime localTimeStart;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        LocalTime localTimeEnd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            localTimeStart \u003d LocalTime.parse(startTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            localTimeEnd \u003d LocalTime.parse(endTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(MESSAGE_STARTENDTIME_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return MESSAGE_STARTENDTIME_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Integer startBlock \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Integer endBlock \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            startBlock \u003d getBlocksFromTime(localTimeStart);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            endBlock \u003d getBlocksFromTime(localTimeEnd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } catch (MoException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (!checkLegitDay(startDay) || !checkLegitDay(endDay)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            return MESSAGE_STARTENDDAY_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Boolean myScheduleStatus \u003d blockedorfree;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String myScheduleNameStatus \u003d \"null\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        if (blockedorfree \u003d\u003d MYSCHEDULEBLOCKED) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            myScheduleNameStatus \u003d meetingName;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (!startDay.equals(endDay)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            int startDayCopy \u003d startDay; // prevent modifying param arguments"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int i \u003d startBlock; i \u003c 48; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                mySchedule[startDayCopy][i] \u003d myScheduleStatus;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                myScheduleName[startDayCopy][i] \u003d myScheduleNameStatus;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            startDayCopy++;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            while (startDayCopy !\u003d endDay) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                for (int i \u003d 0; i \u003c 48; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    mySchedule[startDayCopy][i] \u003d myScheduleStatus;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                    myScheduleName[startDayCopy][i] \u003d myScheduleNameStatus;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                startDayCopy++;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int i \u003d 0; i \u003c endBlock; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                mySchedule[startDayCopy][i] \u003d myScheduleStatus;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                myScheduleName[startDayCopy][i] \u003d myScheduleNameStatus;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            for (int i \u003d startBlock; i \u003c endBlock; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                mySchedule[startDay][i] \u003d myScheduleStatus;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                myScheduleName[startDay][i] \u003d myScheduleNameStatus;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return \"SUCCESS\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    boolean checkLegitDay(Integer day) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return day \u003e\u003d 0 \u0026\u0026 day \u003c\u003d 6;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void deleteBusyBlocks(String meetingName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            for (int j \u003d 0; j \u003c 48; j++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                if (myScheduleName[i][j] !\u003d null \u0026\u0026 myScheduleName[i][j].equals(meetingName)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    mySchedule[i][j] \u003d MYSCHEDULEFREE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    myScheduleName[i][j] \u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public Integer getBlocksFromTime(LocalTime myTime) throws MoException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int minuteBlocks \u003d -1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int hourBlocks \u003d -1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        switch (myTime.getMinute()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            minuteBlocks \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        case 30:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            minuteBlocks \u003d 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            throw new MoException(MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        hourBlocks \u003d myTime.getHour() * 2;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return minuteBlocks + hourBlocks;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return this.memberName;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public Boolean[][] getSchedule() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return this.mySchedule;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public String[][] getMyScheduleName() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return this.myScheduleName;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void setMyScheduleName(String[][] myScheduleName) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.myScheduleName \u003d myScheduleName;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void setMyScheduleFromScheduleName() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            for (int j \u003d 0; j \u003c 48; j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                if (myScheduleName[i][j].equals(\"null\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    mySchedule[i][j] \u003d false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                    mySchedule[i][j] \u003d true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public void setMainUser() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        this.isMainUser \u003d true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public boolean isMainUser() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return isMainUser;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 88,
      "synCKun": 30,
      "MeLoveCarbs": 57
    }
  },
  {
    "path": "src/main/java/teammember/TeamMemberList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package teammember;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " * Stores team members in a team member list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " * Contains an ArrayList object as the team member list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " * Has constructor and getter methods for the team member list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " * @see TeamMember"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "public class TeamMemberList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    private ArrayList\u003cTeamMember\u003e teamMemberList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public TeamMemberList(ArrayList\u003cTeamMember\u003e tl) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        this.teamMemberList \u003d tl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void add(TeamMember t) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        this.teamMemberList.add(t);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public void set(int index, TeamMember member) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        this.teamMemberList.set(index, member);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public ArrayList\u003cTeamMember\u003e getTeamMemberList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        return this.teamMemberList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        return this.getTeamMemberList().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 27,
      "MeLoveCarbs": 10
    }
  },
  {
    "path": "src/main/java/ui/TextUI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_NUMBER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import static java.lang.System.out;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import exception.MoException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import meeting.Meeting;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import meeting.MeetingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import teammember.TeamMember;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "synCKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " * TESTING SUMMARY DOC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "public class TextUI {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void introMsg() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String logo \u003d \"  ___        _____                 __  .__                 ________                            \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \".__                       ___     \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \" / _ \\\\_/\\\\   /     \\\\   ____   _____/  |_|__| ____    ____   \\\\_____  \\\\_______  _________    ___\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \"_ |__|_______ ___________  / _ \\\\_/\\\\ \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \" \\\\/ \\\\___/  /  \\\\ /  \\\\_/ __ \\\\_/ __ \\\\   __\\\\  |/    \\\\  / ___\\\\   /   |   \\\\\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \"_  __ \\\\/ ___\\\\__  \\\\  /    \\\\|  \\\\___   // __ \\\\_  __ \\\\ \\\\/ \\\\___/ \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \"          /    Y    \\\\  ___/\\\\  ___/|  | |  |   |  \\\\/ /_/  \u003e /    |    \\\\  \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \"| \\\\/ /_/  \u003e __ \\\\|   |  \\\\  |/    /\\\\  ___/|  | \\\\/          \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \"          \\\\____|__  /\\\\___  \u003e\\\\___  \u003e__| |__|___|  /\\\\___  /  \\\\_______  /__ \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \"|  \\\\___  (____  /___|  /__/_____ \\\\\\\\___  \u003e__|             \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \"                  \\\\/     \\\\/     \\\\/             \\\\//_____/           \\\\/     \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            + \"/_____/     \\\\/     \\\\/         \\\\/    \\\\/                 \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(logo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void menuMsg(int memberList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"__________________________________________________________\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                + \"______________________________________________________________________\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[contacts] List all contacts.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(\"[display] Display combined timetable of you and your selected contacts.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        out.println(\"[edit] Edit contacts\u0027 timetable.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[schedule] Schedule a new meeting.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[delete] Delete a scheduled meeting.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[meetings] List all scheduled meetings.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"[exit] Exit application.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.print(System.lineSeparator());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        if (memberList \u003e 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            out.println(\"Insert your member\u0027s timetable by following: \u003cname of new member\u003e \u003cnusmods link\u003e\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            out.println(\"Insert your own timetable by following: \u003cname of new member\u003e \u003cnusmods link\u003e\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"__________________________________________________________\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"______________________________________________________________________\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void exitMsg() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"Thank you for using MeetingOrganizer, goodbye!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public static void errorMsg(MoException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"OOPS!! \" + e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void printTimetable(Boolean[][] mySchedule) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"      SUN MON TUE WED THU FRI SAT\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        for (int i \u003d 0; i \u003c 24; ++i) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.println(String.format(\"%04d\", (0000 + 100 * i)) + \" +---+---+---+---+---+---+---+\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.print(\"     |\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; ++j) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                out.print(\" \" + (mySchedule[j][2 * i] ? \"X\" : \" \") + \" |\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.println();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.println(\"     +---+---+---+---+---+---+---+\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.print(\"     |\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; ++j) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "                out.print(\" \" + (mySchedule[j][2 * i + 1] ? \"X\" : \" \") + \" |\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "            out.println();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"0000\" + \" +---+---+---+---+---+---+---+\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void scheduleMeetingMsg() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"You have selected new scheduled meeting\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void meetingDetailsMsg() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"Enter meeting details: \u003cMeeting.Meeting Name\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e.\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                + \"Type \\\"exit\\\" to go back to menu.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void meetingListSizeMsg(MeetingList myMeetingList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"You now have \" + myMeetingList.getMeetingListSize() + \" meeting/s in the list.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void deleteMeetingMsg() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"Which meeting slot do you want to delete?\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void editMeetingMsg() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"Which meeting slot do you want to edit?\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void listMeetings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(\"Here are all your meeting slots.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    public static void enterScheduleMsg(String memberName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        out.println(\"Enter schedule of member \" + memberName + \": \u003cSchedule Name\u003e \u003cStart Day\u003e \u003cStart Time\u003e \u003cEnd Day\u003e \u003cEnd Time\u003e\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void timeOutOfRangeMsg() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(MESSAGE_STARTENDTIME_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public static void invalidNumberMsg() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        out.println(MESSAGE_INVALID_NUMBER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void listAllScheduledMeetings(ArrayList\u003cMeeting\u003e meetingList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"The current scheduled meeting(s):\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (int i \u003d 0; i \u003c meetingList.size(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String startDay \u003d getDayFromNumber(meetingList.get(i).getStartDay());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            String endDay \u003d getDayFromNumber(meetingList.get(i).getEndDay());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "            String meetingName \u003d meetingList.get(i).getMeetingName();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            System.out.println((i + 1) + \". \" + startDay + \" \" + meetingList.get(i).getStartTime()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "                    + \" to \" + endDay + \" \" + meetingList.get(i).getEndTime() + \"(\" + meetingName + \")\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static String getDayFromNumber(int dayNum) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String day;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        switch (dayNum) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Sunday\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Monday\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Tuesday\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Wednesday\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Thursday\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Friday\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"Saturday\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            day \u003d \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayNoMeetings() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"There is no scheduled meetings so far.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayRemovedMeeting(ArrayList\u003cMeeting\u003e meetingList, int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String startDay \u003d getDayFromNumber(meetingList.get(index).getStartDay());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        String endDay \u003d getDayFromNumber(meetingList.get(index).getEndDay());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"I have removed:\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println((index + 1) + \". \" + startDay + \" \" + meetingList.get(index).getStartTime()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                + \" to \" + endDay + \" \" + meetingList.get(index).getEndTime());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void displayInvalidDeleteTarget() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"Item does not exist.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void showLoadingError() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"There are no previous records of meetings, let\u0027s create a new one!\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void teamMemberListMsg(ArrayList\u003cTeamMember\u003e teamMemberList, String mainUser) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                + \"Here are your stored contacts:\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        System.out.println(\"\\t Main user: \" + mainUser);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        for (TeamMember teamMember : teamMemberList) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "synCKun"
        },
        "content": "            if (!teamMember.getName().equals(mainUser)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "synCKun"
        },
        "content": "                out.println(\"\\t \" + i + \") \" + teamMember.getName());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        System.out.println(\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void showAddedMember(String memberName) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(\"Added \" + memberName);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    public static void showRepeatedPerson(String userInputWord) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "synCKun"
        },
        "content": "        out.println(userInputWord + \" already exists!\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "synCKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "synCKun"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "synCKun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "matthewc97": 65,
      "lowxizhi": 18,
      "synCKun": 78,
      "MeLoveCarbs": 45
    }
  },
  {
    "path": "src/test/java/meeting/MeetingTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import meeting.Meeting;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Meeting m \u003d new Meeting(\"CS2113T Meeting.Meeting\", 1, LocalTime.parse(\"14:00\"), 1, LocalTime.parse(\"15:00\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(\"CS2113T Meeting.Meeting, 1, 14:00, 1, 15:00\", m.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    public void testStartEndTime_validTime_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        Meeting m \u003d new Meeting(\"CS2113T Meeting.Meeting\", 2, LocalTime.parse(\"10:00\"), 2, LocalTime.parse(\"12:30\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        assertEquals(LocalTime.parse(\"10:00\"), m.getStartTime());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "        assertEquals(LocalTime.parse(\"12:30\"), m.getEndTime());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewc97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewc97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewc97": 18,
      "MeLoveCarbs": 6
    }
  },
  {
    "path": "src/test/java/teammember/ScheduleHandlerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package teammember;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import teammember.TeamMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "public class ScheduleHandlerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private ScheduleHandler myScheduleHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private final Boolean myScheduleBlocked \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    private final Boolean myScheduleFree \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void testGetDayFromNumber() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        assertEquals(\"Sunday\", ScheduleHandler.getDayFromNumber(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void testGetTimeFromBlock_EndTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        assertEquals(LocalTime.of(23,30), ScheduleHandler.getTimeFromBlock(46,\"END\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void testGetTimeFromBlock_EndTime_Midnight() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        assertEquals(LocalTime.of(0,0), ScheduleHandler.getTimeFromBlock(47,\"END\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void testGetTimeFromBlock_StartTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        assertEquals(LocalTime.of(23,0), ScheduleHandler.getTimeFromBlock(46,\"START\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void testScheduleHandler() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        ArrayList\u003cTeamMember\u003e myScheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        final TeamMember member1 \u003d new TeamMember(\"member1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        final TeamMember member2 \u003d new TeamMember(\"member2\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        member1.addBusyBlocks(\"schedule1\", 0, \"13:00\", 0, \"19:00\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        member1.addBusyBlocks(\"schedule2\", 4, \"16:00\", 4, \"18:00\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myScheduleList.add(member1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myScheduleList.add(member2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myScheduleHandler \u003d new ScheduleHandler(myScheduleList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Boolean[][] myMasterSchedule \u003d myScheduleHandler.getMasterSchedule();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        final ArrayList\u003cArrayList\u003cInteger\u003e\u003e myFreeBlocks \u003d myScheduleHandler.getFreeBlocks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        Boolean[][] myMasterScheduleAnswer \u003d new Boolean[7][48];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            Arrays.fill(myMasterScheduleAnswer[i], myScheduleFree); // fill every 48 index of the 7 days with 0 initially"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int j \u003d 26; j \u003c\u003d 37; j++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            myMasterScheduleAnswer[0][j] \u003d myScheduleBlocked;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        for (int j \u003d 32; j \u003c\u003d 35; j++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "            myMasterScheduleAnswer[4][j] \u003d myScheduleBlocked;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e myFreeBlocksAnswer \u003d new ArrayList\u003cArrayList\u003cInteger\u003e\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        ArrayList\u003cInteger\u003e slot1 \u003d ScheduleHandler.makeSlot(4,36,0,25);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        ArrayList\u003cInteger\u003e slot2 \u003d ScheduleHandler.makeSlot(0,38,4,31);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myFreeBlocksAnswer.add(slot1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        myFreeBlocksAnswer.add(slot2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        assertEquals(myFreeBlocksAnswer, myFreeBlocks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 66,
      "MeLoveCarbs": 3
    }
  },
  {
    "path": "src/test/java/teammember/TeamMemberTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "package teammember;// CHECKSTYLE:OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDDAY_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_OUT_OF_RANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static common.Messages.MESSAGE_STARTENDTIME_WRONG_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import teammember.TeamMember;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "public class TeamMemberTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    ArrayList\u003cTeamMember\u003e myMembers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void editBlocks_outOfRangeTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validStartDay \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validEndDay \u003d 3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String validStartTime \u003d \"08:30\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String invalidOutOfRangeEndTime \u003d \"24:00\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String meetingName \u003d \"TEST_MEETING\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMembers.add(new TeamMember(\"TEST_MEMBER1\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String invalidOutOfRangeEndTime_Message \u003d myMembers.get(0).editBlocks(true, meetingName, validStartDay, validStartTime, validEndDay, invalidOutOfRangeEndTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(invalidOutOfRangeEndTime_Message, MESSAGE_STARTENDTIME_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMembers.clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void editBlocks_outOfRangeDay() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int invalidOutOfRangeStartDay \u003d -1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validStartDay \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int invalidOutOfRangeEndDay \u003d 9;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validEndDay \u003d 3;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String validStartTime \u003d \"08:30\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String validEndTime \u003d \"12:00\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String meetingName \u003d \"TEST_MEETING\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMembers.add(new TeamMember(\"TEST_MEMBER1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String invalidOutOfRangeEndDay_Message \u003d myMembers.get(0).editBlocks(true, meetingName, validStartDay, validStartTime, invalidOutOfRangeEndDay, validEndTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(invalidOutOfRangeEndDay_Message, MESSAGE_STARTENDDAY_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMembers.add(new TeamMember(\"TEST_MEMBER2\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String invalidOutOfRangeStartDay_Message \u003d myMembers.get(1).editBlocks(true, meetingName, invalidOutOfRangeStartDay, validStartTime, validEndDay, validEndTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(invalidOutOfRangeStartDay_Message, MESSAGE_STARTENDDAY_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMembers.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "    public void editBlocks_timeNotInBlocks() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String meetingName \u003d \"TEST_MEETING\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validStartDay \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        int validEndDay \u003d 3;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String invalidFormatStartTime \u003d \"08:35\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        String validEndTime \u003d \"12:00\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMembers.add(new TeamMember(\"TEST_MEMBER1\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "        String invalidFormatStartTime_Message \u003d myMembers.get(0).editBlocks(true, meetingName, validStartDay, invalidFormatStartTime, validEndDay, validEndTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        assertEquals(invalidFormatStartTime_Message, MESSAGE_STARTENDTIME_WRONG_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "        myMembers.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MeLoveCarbs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowxizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowxizhi": 17,
      "MeLoveCarbs": 55
    }
  }
]
