[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "group \u0027seedu.kitchenhelper\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    mainClassName \u003d \"seedu.kitchenhelper.KitchenHelper\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    archiveBaseName \u003d \"kitchenhelper\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 4,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![Image of Jin fa](https://avatars2.githubusercontent.com/u/42379721?s\u003d150\u0026u\u003dcd564d16025b5fe46c870a0a5cfe4e65f5a39066\u0026v\u003d4) | Yap Jin Fa | [Github](https://github.com/jinfayap) | [Portfolio](team/jinfayap.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "![](https://avatars1.githubusercontent.com/u/55829267?s\u003d400\u0026u\u003d98a4405f11bcc54ce960e26943cb04de761979f7\u0026v\u003d4) | Wee Jin Xing | [Github](https://github.com/JensonWee) | [Portfolio](team/jensonwee.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Isabella | [Github](https://github.com/cheongisabella) | [Portfolio](team/cheongisabella.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cimg src\u003d\"https://avatars0.githubusercontent.com/u/32284166?s\u003d400\u0026u\u003d529d14048aabce2143aab15c68b9f13a47c41a3e\u0026v\u003d4\" width\u003d\"100\" height\u003d\"100\" /\u003e | Lim Yan Ting| [Github](https://github.com/yantingsanity) | [Portfolio](team/yantingsanity.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hui Zhen | [Github](https://github.com/alwayshuizhen) | [Portfolio](team/alwayshuizhen.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zi Hui | [Github](https://github.com/zi-hui) | [Portfolio](team/zi-hui.md)"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 1,
      "jinfayap": 4,
      "-": 4,
      "JensonWee": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "By: `CS2113T-M16-2` Since: `2020`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "![Supported Java versions](https://img.shields.io/badge/Java-11-blue.svg) ![Supported OS](https://img.shields.io/badge/Supported%20OS-Windows|MacOS|Linux-yellow.svg) "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "![Java CI](https://github.com/AY1920S2-CS2113T-M16-2/tp/workflows/Java%20CI/badge.svg)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- [Developer Guide](#developer-guide)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  * [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [1.1. Background](#11--background)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [1.2. Purpose](#12-purpose)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [1.3. Scope](#13-scope)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  * [2. Setting up](#2-setting-up)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [2.1. Prerequisites](#21-prerequisites)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [2.2. Setting up the project in your computer](#22-setting-up-the-project-in-your-computer)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  * [3. Design](#3-design)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.1. Architecture](#31-architecture)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.2. Ui Component](#32-ui-component)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.3. Logic Component](#33-logic-component)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.4. Model Component](#34-model-component)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.5. Storage Component](#35-storage-component)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.6. Common Classes](#36-common-classes)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  * [4. Implementation](#4-implementation)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [4.1.Ingredient-related Features](#41ingredient-related-features)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "      - [4.1.1. Addition of ingredient](#411-addition-of-ingredient)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.1.2. List all/ specific ingredient(s)](#412-list-all-specific-ingredients)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "      - [4.1.3. Delete specific ingredients(s)](#413-delete-specific-ingredientss)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.1.4. Search for ingredients based on keyword(s)](#414-search-for-ingredients-based-on-keywords)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      - [4.1.5. Notification for ingredients warning](#415-notification-for-ingredients-warning)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [4.2. Recipe-related Features](#42-recipe-related-features)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "      - [4.2.1. Addition of recipe](#421-addition-of-recipe)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.2.2. List all/ specific recipe(s)](#422-list-all-specific-recipes)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "      - [4.2.3. Cooking of recipe](#423-cooking-of-recipe)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "      - [4.2.4. Delete a specific recipe](#424-delete-a-specific-recipe)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "      - [4.2.5. Search for recipe based on keyword(s)](#425-search-for-recipe-based-on-keywords)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [4.3. Chore-related Features](#43-chore-related-features)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "      - [4.3.1. Addition of chore](#431-addition-of-chore)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.3.2. List all/ specific chore(s)](#432-list-all-specific-chores)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.3.3. Delete all/ specific chore(s)](#433-delete-all-specific-chores)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.3.4. Search for chore based on keyword(s)](#434-search-for-chore-based-on-keywords)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [4.4. Storage](#44-storage)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "      - [4.4.1. Select files to load from and save to](#441-select-files-to-load-from-and-save-to)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "      - [4.4.2. Save current state](#442-save-current-state)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [4.5. Display Expenditure](#45-display-expenditure)  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [4.6. Logging](#46-logging)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  * [Appendices](#appendices)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [Appendix A: Product Scope](#appendix-a-product-scope)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [Appendix C: Value proposition - Use cases](#appendix-c-value-proposition---use-cases)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [Appendix D: Non-Functional Requirements](#appendix-d-non-functional-requirements)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [Appendix E: Glossary](#appendix-e-glossary)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [Appendix F: Instructions for Manual Testing](#appendix-f-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.1. Launch and Shutdown](#f1-launch-and-shutdown)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.2. Add an ingredient](#f2-add-an-ingredient)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.3. List ingredient](#f3-list-ingredient)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.4. Delete an ingredient](#f4-delete-an-ingredient)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.5. Search for ingredient](#f5-search-for-ingredient)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.6. Add a recipe](#f6-add-a-recipe)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.7. List recipe](#f7-list-recipe)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.8. Cook a recipe](#f8-cook-a-recipe)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.9. Delete a recipe](#f9-delete-a-recipe)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.10. Search for recipe](#f10-search-for-recipe)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.11. Add a chore](#f11-add-a-chore)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.12. List chore](#f12-list-a-chore)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.13. Delete a chore](#f13-delete-a-chore)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.14. Search for chore](#f14-search-for-chore)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.15. Saving data](#f15-saving-data)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [F.16. Display expenditure](#f16-display-expenditure)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 1.1.  Background"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Kitchen Helper, born from the need to keep track of kitchen inventory, is an application that is designed to manage kitchen inventory and chores. Users will be able to reduce food wastage and save money through the convenience of viewing the contents of the inventory."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 1.2. Purpose"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The document contains the specified architecture and software design specifications for the application, Kitchen Helper. "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 1.3. Scope"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "This describes the software architecture and software design requirements for Kitchen Helper. This guide is mainly for developers, designers and software engineers that are or going to work on Kitchen Helper. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "## 2. Setting up"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "### 2.1. Prerequisites"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. JDK `11`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. IntelliJ IDE."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "### 2.2. Setting up the project in your computer"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. Fork this repository, and clone the fork repository to your computer."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. Set up the correct JDK version for Gradle  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   2. If `JDK 11` is listed in the drop down, select it. Otherwise, click `New…` and select the directory where you installed `JDK 11`."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   3. Click `OK`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. Click `Import Project`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "5. Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "6. Click `Open as Project`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "7. Click `OK` to accept the default settings if prompted. "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "This section provides a high level overview of our application, Kitchen Helper."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 3.1. Architecture"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "![Architecture](images/KitchenHelperMain.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The image above explains the design of the application, Kitchen Helper. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The main driver of the application is `Main: Kitchen Helper`. It is responsible for mainly two phases:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "- At application launch"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    - This class will initialise the components in the correct sequence and is in charge of connecting them with each other."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "- At shut down"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    - This class will invoke cleanup method for the components when necessary."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "In addition to that, the architecture of Kitchen Helper is broken down into seven classes, mainly the following: "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "- `Ui`: This class mainly handles the UI of the application."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "- `Parser`: This class mainly handles the parsing and handling of user commands."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "- `Command`: This class handles the type of command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "- `Ingredient`: This class manages the data of data type ingredient in memory."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "- `Chore`: This class manages the data of data type chore in memory."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "- `Recipe`: This class manages the data of data type recipe in memory."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "- `Storage`: This class reads data from and writes data back into a text file for future uses."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 3.2. Ui Component"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![Ui Component](images/UI_Component.png)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "API: `Ui.java`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "The `Ui` component is a singleton class where all interaction will be made through this component"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "The `Ui` component,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "* Executes user commands using the command component"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "* Listens for changes and outputs messages from the Command component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 3.3. Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![Logic Component](images/logic_update.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. `Kitchen Helper` uses `Parser` class to parse the user command."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. This results in a command object return back which is executed by `Kitchen Helper`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. The command execution can affect the object (e.g. adding an ingredient)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to `Ui` to display the message."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 3.4. Model Component"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![Model Component](images/model.png)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The Model component contains `Ingredient`, `Recipe` and `Chore` classes, which store the user\u0027s input in Kitchen Helper."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Ingredient: Stores the ingredient data."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Recipe: Stores the recipe data."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Chore: Stores the chore data."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 3.5. Storage Component"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![Storage Class Diagram](images/Storage.png)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "A Storage object is created by the KitchenHelper class to handle the loading and saving of ingredients, recipes and chores data."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The Storage() method acts as a constructor with filepaths to local save files for ingredients, recipes, chores and expenditure data."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The getIngredientData(), getRecipeData(), getChoreData() and loadExpenditureData() methods are used to read saved data from local files into the current session of KitchenHelper. loadingIngredients() and loadingRecipeItems() methods are called in getIngredientData() and getRecipeData() respectively to sort out which Ingredient object class each object belongs to."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The saveIngredientData(), saveRecipeData(), saveChoreData() and saveExpenditureData() methods write the current state of KitchenHelper into the local save files by calling them in various command classes such as AddChoreCommand and DeleteIngredientCommand."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 3.6. Common Classes "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Classes used by multiple components are in the `seedu.kitchenhelper.object` package."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "This section describes some details on how the features are being implemented. All recipe/ ingredient/ chore-related features can be broken down into 4 distinct functionality, addition, listing, deletion and searching."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 4.1.Ingredient-related Features"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.1.1. Addition of ingredient"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The addition of the ingredient feature allows the user to keep track of the ingredients in the ingredient’s list.   "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "For example, `addingredient /n beef /c meat /q 2 /p 20 /e 18/02/2020` will add the ingredient `beef` "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "which have the following attributes:  category `meat`, quantity `2`, price `$20` and expiry `18/02/2020`  "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![addIngredientCommand](images/addIngredient_update.png) "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The following steps explained “Sequence diagram for an example `addingredient` command”:  "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. The user enters `addingredient /n beef /c meat /q 2 /p 20 /e 18/02/2020`.  "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()`.  "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. `Parser#parseUserCommand()` will call its own method `Parser#prepareAddIngredient()`.  "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. `Parser#prepareAddIngredient()` will first validate the attributes and create an object `AddIngredientCommand` with the attributes if successful.  "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "5. `KitchenHelper` calls it own method `executeCommand()` to execute the method in `AddIngredientCommand#execute()`.  "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "6. On `AddIngredientCommand#execute()`, ingredient is added and return of the message.  "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.1.2. List all/ specific ingredient(s)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "The list feature allows showing details of Ingredients added by the user.  All ingredients added will be shown in a sorted order, by expiry, and shown by categories. The function will require a valid string , which belongs to `all/dairy/drink/fruit/meat/miscellaneous/staple/vegetable`, "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "to be added as a parameter. Failure to do so will trigger an exception where the user will be notified of an invalid command and the syntax of the listing of the ingredients will be displayed. "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "When the user attempts to list the details of a particular category of ingredients, the `listIngredientCommand`, ‘Parser’ and `Ingredient` class will be accessed and the following sequence of actions are called to list details of  a particular category Ingredient list: \u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "The following image below shows the sequence of steps for step 1 and 2:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "![ListIngredient Sequence Diagram](images/listIngredientSequenceDiagramPart1.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "1. User executes `listingredient all` "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    2. A `Ui` object will be created and calls `Ui#getUserCommand()`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    3. Input will be parsed in `Command#parseUserCommand()` and identified with the keyword `listingredient`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    ![List Ingredient Step 1](images/listIngredient1.png)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2. Parsing of user input and creation of command object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    2.This will automatically trigger the parsing of the user’s input string into a suitable format for the listing of a particular category of  `ingredient` object in `Command#prepareListIngredient()`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    3. A `ListIngredientCommand` object will be created."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    ![List Ingredient Step 2](images/ListIngredientCommand.png)   "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    The following image below shows the sequence for the next steps:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    ![ListIngredient Sequence Diagram](images/listIngredientSequenceDiagramPart2.png)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    2. The newly created object will call `#ListIngredientCommand#execute` which starts the process of listing a particular category’s ingredient details, thus calling `ListIngredientCommand#listIngredients()`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    3. The existing ingredientList arraylist and the category of the chosen ingredient category  will be passed through to the `ListIngredientCommand#listIngredients()`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    4. The function will find if the category name is valid, thus, creates `CommandResult` result storing the details of the ingredient belonging to the particular category."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    ![List Ingredient Step 3](images/ListIngredientCommand2.png)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "4. The details will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "The following shows the full sequence diagram for this command:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "![List Ingredient Sequence Diagram](images/listIngredientSequenceDiagram.png)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Aspect: Finding the category name and print out ingredient belonging to the category"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Alternative 1: Looping through the whole ingredientList arraylist to find out all possible category name, then, do sorting and return result"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|**Pros** | The program will be able to detect all category name inside the ingredientList arraylist. |"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|**Cons** | This method will be slow when facing a huge amount of data in the arraylist as the program may have to go through every single item in the arraylist. |"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Alternative 2 (current choice): Creating a fixed array which includes the order and all possible category names."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|**Pros** | Users would be able to get the details of the particular recipe accurately and fast. |"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|**Cons** | Program will not be able to handle any ingredient which isn’t belonging to the category names in the fixed array.  |"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "#### 4.1.3. Delete specific ingredients(s)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The deletion feature for ingredients allows the user to delete ingredients either by the name or index of the ingredients. In addition to that, it allows users to reduce the quantity of a specific ingredient. "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "When the user attempts to reduce the quantity of ingredient at index 1 of the ingredients inventory by 4,  the `Kitchen Helper`, `Parser` and `DeleteIngredientCommand` class will be called upon. The following sequence of steps will then occur: "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The following image below shows the sequence of steps for step 1 and 2:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "![DeleteIngredient Sequence Diagram](images/deleteIngredientSequenceDiagramPart1.png)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "1. The user keyed in `deleteingredient /i 1 /q 4`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. A `UI` object will be created and it will call `UI#getUserCommand()` method to take in the input that the user has keyed in."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. A `String` object will be returned and saved into the `userCommandInput` variable in `Kitchen Helper`."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. The variable `userCommandInput` is being parsed into the `Parser` class as an argument for this method `Parser#parseUserCommand`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    ![DeleteIngredient State 1](images/deleteIngredientState1.png) "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "2. The command inserted by the user is being parsed into the `Parser` and a new `Command` object is being created. "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. The variable `userCommandInput` will be identified as `deleteingredient` in the `Parser#parseUserCommand()`.The `Parser#prepareDeleteIngredient()` is being called to prepare the `userCommandInput` string to create a `DeleteIngredientCommand` object."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. The `DeleteIngredientCommand` object is created with the ingredientIndex and quantity set to 4. "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    ![DeleteIngredient State 2](images/deleteIngredientState2.png)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "3. After creating `DeleteIngredientCommand` object, this Command will now be executed. "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    The following image below shows the sequence for the next steps:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    ![DeleteIngredient Sequence Diagram](images/deleteIngredientSequenceDiagramPart2.png)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. The `DeleteIngredientCommand#execute()` will be called which in turned called `DeleteIngredientCommand#deleteIngredientByIndex()`. "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. Since the `quantity` of this ingredient is not null, the `DeleteIngredientCommand#deleteQuantity()` will be called to reduce the quantity of this ingredient.  "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. When `DeleteIngredientCommand#deleteQuantity()` has returned, the program will get the quantity of the current ingredient after deduction. If the quantity is zero or null, the `DeleteIngredientCommand#deleteIngredient()` will be called to remove `ingredient` from the `ingredientsList` which contains all the ingredients. "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. Then, `Storage#saveIngredientData()` will be called to save the current `ingredientsList` into an output file."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. Lastly, a String called `feedbackToUser`will be returned to the user to inform the user of the outcome of the command. "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    The following image shows the state diagram for the command execution:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    ![DeleteIngredient State 3](images/deleteIngredientState3.png)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "4.  The details will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The following shows the full sequence diagram for this command:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "![Delete Ingredient Sequence Diagram](images/deleteIngredientSequenceDiagram.png)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Aspect 1: How to differentiate `deleteingredientByQuantity` and `deleteIngredient` \u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Alternative 1 (Current Choice): The `quantity` of ingredient in `DeleteIngredientCommand` constructor is set to the `quantity` that was inputted by the user. In the case where the user would like to delete an ingredient, the `quantity` variable will be set to `null`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Pros**|Only a `quantity` variable needs to be set. This increases more convenience and no overload of constructors.|"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Cons**|It is dependent on the variable to check if the ingredient is to be deleted. | "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Alternative 2: Create 1 more constructor just for deduction of quantity for ingredients. \u003cbr\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Pros**|This gives us more flexibility on what object can be created with different variables.|"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Cons**|There may be an overload of constructors.|"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    In the end, for `aspect 1`. we have chosen `alternative 1` because there will not be an overload of constructors."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Aspect 2: Calling of function for deletion of `ingredient` when `ingredient` has the quantity of zero."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Alternative 1 (Current Choice) : Two non-nested `if-else` blocks to cater for `deleteQuantity` and `deleteIngredient`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Pros**|SLAP is not violated. |"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Cons**|Longer lengths of codes. | "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Alternative 2: One nested `if-else` block to cater for `deleteQuantity`and `deleteIngredient`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Pros**|Concise block of `if-else`.|"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Cons**|The `if-else` block will be nested with another `if-else` block. This will violate the SLAP in code quality and the program will have to check for multiple conditions instead of one.|"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    In the end, for `aspect 2`, we have chosen `alternative 1` because there will be more concise blocks of `if-else` which helps to contribute to the non-violation of SLAP for the method."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Aspect 3: Deletion by index instead of name for ingredients "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Alternative 1 (Current Choice): Deletion by index only"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Pros**|Only a very specific ingredient can be deleted. Only need to get the ingredient from the list of ingredients by index. It is a more specific way to get the ingredient to delete. |"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Cons**|Users will not be able to delete the ingredient by name.| "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Alternative 2: Deletion by both index and name "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Pros**|Users will be able to delete by ingredients\u0027 name and index. |"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Cons**|There may be confusion when it comes to the deletion by name for the users as the algorithm that was supposed to be implemented for deletion by name will delete the first instance of ingredient that is found. In the case, whereby the list of ingredients have two `apples` but different expiry date and the user just want to delete the second `apple` that has a later expiry date. It will not be able to do so through deletion of name as the first instance of `apple` is the one that has an earlier expiry date. | "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    In the end, for `aspect 3`, we have chosen `alternative 1` which is to delete by index for ingredients only so that the users can have a more convenient time in deleting the specific ingredient that they want to delete. However, deletion by name for ingredients may be implemented and enhanced in the future implementations once we have finalised our idea for its implementation. "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.1.4. Search for ingredients based on keyword(s)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The search for ingredients feature allows the user to find ingredients using a keyword in the ingredient’s list.  "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "For example, `searchingredient beef` will find all the ingredients that contain `beef`.  "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![SearchIngredientCommand](images/searchIngredient_update.png) "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The following steps explained sequence diagram for `searchingredient` command:  "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. The user enters `searchingredient beef`.  "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()`.  "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. `SearchIngredientCommand` object is created with the keyword passed in.  "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. `KitchenHelper` calls it own method `executeCommand()` to execute the method in `SearchIngredientCommand#execute()`.  "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "5. On `SearchIngredientCommand#execute()`, display the list of ingredients that matches the keyword. "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Aspects: How `searchingredient` executes:  "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- Alternative 1 (current choice): Find if the keyword is part of the substring of the ingredient, "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "`[Meat] Beef Qty:3 $20.00 Exp:18/03/2020.`  "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Pros** | 1. Easily to find by any attributes such as category, ingredient’s name,  quantity, price and expiry date.|  "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Cons** | 1. Searching `beef [meat]` will fail to show any matching result.|"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- Alternative 2: Take in all the predicates given by the user and find using the predicates as a keyword"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Pros** | 1. More accurate searching of the ingredient is available for the user.|  "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Cons** | 1. Requires users to enter more precise predicate keywords which could be more inconvenient.|"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "#### 4.1.5. Notification for ingredients warning"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "The notification for ingredients warning runs everytime the program starts. Checks the ingredient list for ingredient that is expiring in 3 days, expired or low quantity (\u003c 5)."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "For example, `beef` ingredient\u0027s expired date is 02/02/2020 and have quantity of 3. The program will list down the ingredient in the categories when the application start."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "![NotificationIngredientCommand](images/notificationIngredient.png) "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "The following steps explained sequence diagram for `showNotification` method:  "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "1. The user starts `KitchenHelper`.  "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2. `KitchenHelper` calls `showNotification()`.  "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "3. `KitchenHelper#IngredientNotification` object is created when the method `IngredientNotification#getNotifications(ingredientList)` is called.  "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "4. Result from `IngredientNotification#checkForExpiringIngr(ingredientList)`,`IngredientNotification#checkForLowQuantityIngr`, `IngredientNotification#checkForExpiredIngr` will be combined."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    1. `IngredientNotification#checkForExpiringIngr(ingredientList)` checks for ingredients that is going to expire in 3 days."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    1. `IngredientNotification#checkForLowQuantityIngr` checks for ingredients that has quantity of 5 or lower."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    1. `IngredientNotification#checkForExpiredIngr` checks for ingredients that is expired."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "5. `IngredientNotification#getNotifications(ingredientList)` returns result to `KitchenHelper#ingredientNotification` and displays."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Aspects: How `showNotification` executes:  "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "- Alternative 1 (current choice): Create a function to compile results from the three different methods, "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|**Pros** | 1. Decreases the need to indicate three lines of code to call out the three different methods.|  "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|**Cons** | 1. Developer have to go into `IngredientNotification#getNotifications(ingredientList)` to find out what function |"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "- Alternative 2: Create three different methods in `KitchenHelper.java`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|**Pros** | 1. Clear indication what the method is doing|  "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|**Cons** | 1. Not very \u0027OOP\u0027 like|"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 4.2. Recipe-related Features"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.2.1. Addition of recipe"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Users can add a new recipe to the application where there must be at least one or more `ingredient`s. The failure to do so will trigger an exception where the user will be notified of an invalid command and the syntax of the addition of recipe will be displayed. "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "\u003e It is important that the name of the new recipe has not appeared in the list of recipes in the application."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Implementation "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "When the user attempts to create a new recipe, the `AddRecipeCommand`, `Parser` and `Recipe` class will be accessed and the following sequence of actions are called to create a `recipe` object:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "1. User executes `addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable` "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. A `Ui` object will be created and calls `Ui#getUserCommand()`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. Input will be parsed in `Parser#parseUserCommand()` and identified with the keyword `addrecipe`."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    ![Add Recipe Step 1](images/AddRecipe1.png)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "2. Parsing of user input and creation of command object"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. This will automatically trigger the parsing of the user’s input string into a suitable format for the addition of `recipe` object in `Parser#prepareAddRecipe()`."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. A `AddRecipeCommand` object will be created and calls `AddRecipeCommand#setAttributesOfCmd()` to set the contents of the command into reader friendly formats."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    ![Add Recipe Step 2](images/AddRecipe2.png)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. The newly created object will call `AddRecipeCommand#execute()` which starts the process of adding a recipe, thus calling `Recipe#AddRecipe()`."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. A `Recipe` object will be created with its name that was parsed in step 2."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. An additional step is included where a check for an existing recipe with the same name is conducted with `AddRecipeCommand#checkIfRecipeExist()`. A `KitchenHelperException` exception will be triggered when there is an existing recipe."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    ![Add Recipe Step 3](images/AddRecipe3.png)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "4. `Ingredient`s parsed in step 2 will be added to the newly created recipe according to their category through the calling of `Recipe#addIngredientsToRecipe()`."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "\t"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "\t![Add Recipe Step 4](images/AddRecipe4.png)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "All description and warnings to the user utilises the `UI` class, which controls the printing of the text on the console. "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "The following sequence diagram shows how the `addrecipe` command works"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "![AddRecipeCommand](images/addRecipeSequenceDiagram.png) "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Aspect: Parsing of the user’s input command"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Alternative 1 (current choice): The key parameters that are required are divided by the delimiter of ‘/’ followed by a specific letter. `(i.e. /i)`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Pros** | User would be able to have strings that may contain spaces (i.e. /n Chicken Salad /i Breast meat:2:meat) |"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Cons** | The order of delimiters needs to be standardized, users will not be able to re-order the delimiters. |"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Alternative 2: Multiple prompts for user’s input of a recipe name and ingredient(s)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Pros** | Users would not have to make sure that their command is syntactically right |"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Cons** | The constant prompting could subject the application to a negative experience in the difficulty to use the commands. |"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Alternative 3: User’s command are divided by space"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Pros** | The parsing can be easily done by calling Java built-in function `.split()` |"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Cons** | Values for each variable cannot contain spaces which makes the application restrictive. |"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.2.2. List all/ specific recipe(s) "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "The list feature allows showing details of a particular recipe created by the user.  All ingredients added into the recipe will be shown in a sorted order and shown by categories. The function will require valid string of a integer or `all` to be added as a parameter. Failure to do so will trigger an exception where the user will be notified of an invalid command and the syntax of the listing of the recipe will be displayed. "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "When the user attempts to list the details of a particular recipe, the `listRecipeCommand`, ‘Parser’ and `Recipe` class will be accessed and the following sequence of actions are called to list details of  a particular `recipe` object:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "The following image below shows the sequence of steps for step 1 and 2:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "![ListRecipe Sequence Diagram](images/listRecipeSequenceDiagramPart1.png)"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "1. User executes `listrecipe 1`  "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    2. A `Ui` object will be created and calls `Ui#getUserCommand()`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    3. Input will be parsed in `Command#parseUserCommand()` and identified with the keyword `listrecipe`."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    ![List Recipe Step 1](images/listRecipe1.png)"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2. Parsing of user input and creation of command object"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    2.This will automatically trigger the parsing of the user’s input string into a suitable format for the listing of `recipe` object in `Command#prepareListRecipe()`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    3. A `ListRecipeCommand` object will be created."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    ![List Recipe Step 2](images/ListRecipeCommand.png)   "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    The following image below shows the sequence for the next steps:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    ![Recipe Sequence Diagram](images/listRecipeSequenceDiagramPart2.png)"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    2. The newly created object will call `ListRecipeCommand#execute` which starts the process of listing a particular recipe’s details, thus, calling `ListRecipeCommand#listRecipe()`."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    3. The existing recipeList arraylist and the item number of the chosen recipe will be passed through to the `ListRecipeCommand#listRecipe()`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    4. The function will find if the item number is valid and contains details of the recipe, thus, creates a CommandResult storing the details of the particular recipe."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    ![List Recipe Step 3](images/ListRecipeCommand2.png)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "4. The details will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "The following shows the full sequence diagram for this command:"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "![List Recipe Sequence Diagram](images/listRecipeSequenceDiagram.png)    "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Aspect: Finding the recipe requested by the user."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Alternative 1: Looping through the whole recipeList arraylist to find the recipe requested by the user."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|**Pros** | The program will be able to locate the recipe accurately. |"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|**Cons** | This method will be slow when facing a huge amount of data in the arraylist as the program may have to go through every single item in the arraylist. |"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Alternative 2 (current choice): Using arrayList.get(item) to get the recipe requested by the user."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|**Pros** | Users would be able to get the details of the particular recipe accurately and fast. |"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|**Cons** | Without proper checks done before running the command, it will result in error if the number indicated by the user exceeds the arraylist / does not exist in the arraylist.  |"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "#### 4.2.3. Cooking of recipe"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The feature allows the user to cook a recipe if there are sufficient ingredients. The user will also indicate how many pax this recipe would be cooked for."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "##### Implementation "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "When the user attempts to cook `Chicken Salad` recipe from `Kitchen Helper`, the `Kitchen Helper`, `Parser` and `cookRecipeCommand` class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "1. The user keyed in `cookrecipe /n Chicken Salad /p 1`."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. A `UI` object will be created and it will call `UI#getUserCommand()` method to take in the input that the user has keyed in. "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. A `String` object will be returned and saved into the `userCommandInput` variable in `Kitchen Helper`. "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. The variable `userCommandInput` is being parsed into the `Parser` class as an argument for this method `Parser#parseUserCommand()`."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    ![Cook Recipe State 1](images/cookRecipeState1.png)"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "2. The command inserted by the user is being parsed into the `Parser` and a new `Command` object is being created. "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. The variable `userCommandInput` will be identified as `cookrecipe` in the `Parser#parseUserCommand()`.The `Parser#prepareCookRecipe()` is being called to prepare the `userCommandInput` string to create a `CookRecipeCommand` object."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    ![Cook Recipe State 2](images/cookRecipeState2.png)"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "3. The command is now being executed."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. The `CookRecipeCommand#execute()` will be called."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. The `CookRecipeCommand#cookRecipe()` is called and it checks whether the recipe inputted by the user exists by calling the `CookRecipeCommand#checkIfRecipeExists()` method."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. If recipe exists, the `CookRecipeCommand#checkIfRecipeExists()` method will return the index of the recipe, else it will return a number that is bigger than the size of `recipelist`. In this case, the recipe `Chicken Salad` exists, so it will return the index of the recipe "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. Next, it is to check if there are sufficient non-expiring ingredients to be deducted from the ingredients\u0027 inventory to cater for the number of pax for the specific recipe by calling `CookRecipeCommand#checkForSufficientIngredients()` and `CookRecipeCommand#checkNotExpiredIngredientQty()` which their results are saved into `sufficientIngr` and `suffButLessExpiredIngr` boolean values respectively. "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ![Cook Recipe Sequence Diagram Part 2](images/cookRecipeCommandSequenceDiagramPart2.png)"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. With respect to the point 4 above, the following cases may happen and has been summarised at the image above:"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "       1. Case 1: If both `sufficientIngr` and `suffButLessExpiredIngr` return true"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            1. `CookRecipeCommand#deductIngredients()` will be called to deduct the ingredients in the ingredients\u0027 inventory."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            1. Then, `Storage#saveIngredientData()` will be called to save the current `ingredientsList` into an output file."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "       2. Case 2:  If `sufficientIngr` returns true but `suffButLessExpiredIngr` returns false or both `sufficientIngr` and `suffButLessExpiredIngr` return false and the size of `expiredIngrNames` is not zero"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            1. `CookRecipeCommand#craftExpiredList()` will be called to craft the list of expired ingredients which will be returned to tell the users the ingredients that are expired. "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    The following image shows the state diagram for the command execution:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ![Cook Recipe State 3](images/cookRecipeState3.png)"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        "
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "4. The details will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The following shows the full sequence diagram for this command:"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "![Cook Recipe Sequence Diagram](images/cookRecipeCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "##### Design considerations"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Aspect: Preparing the deduction of ingredients when cooking a recipe"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Alternative  1 (current choice): Checks for existence of recipe, existence of ingredients for the specified recipe and sufficiency of ingredients"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|   |   |"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Pros**| Minimizes erroneous deduction of insufficient and nonexistent ingredients |"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Cons**|Additional computation and overhead |"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Alternative 2: Deductions are to be made to existing and available ingredients and users are notified when there are insufficient ingredients"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|   |   |"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Pros**| Lesser overhead as there is lesser checks to be done"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Cons**| Hidden bugs and exceptions have to be well-covered to ensure that the deduction would be of the right value"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Aspect: Searching for the corresponding ingredients of a recipe/ Searching through list of recipes to check for existence of recipe"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Alternative 1 (current choice): Linear search, iterate through the arraylist of ingredients/ recipes and checking"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|   |   |"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Pros**| Lesser use of complex data structure will save memory |"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Cons**| Not optimal as search will be O(n), larger amount of data may take a longer time |"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Alternative 2: building an index on the first letter of the recipe name"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|   |   |"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Pros**| More efficient search as pool of search space would be significantly smaller"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Cons**| Needs to be constantly maintained which incurs overhead."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "#### 4.2.4. Delete a specific recipe"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The deletion feature for specific recipes allows the user to delete recipes either by the name or index of the recipe. "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "When the user attempts to delete the `Chicken Rice` recipe from Kitchen Helper, the `Kitchen Helper`, `Parser` and `DeleteRecipeCommand` class will be called upon. The following sequence of steps will then occur: "
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "1. The user keyed in `deleterecipe /n Chicken Rice`."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. A `UI` object will be created and it will call `UI#getUserCommand()` method to take in the input that the user has keyed in. "
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. A `String` object will be returned and saved into the `userCommandInput` variable in `Kitchen Helper`. "
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. The variable `userCommandInput` is being parsed into the `Parser` class as an argument for this method `Parser#parseUserCommand()`."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    ![Delete Recipe State 1](images/deleteRecipeState1.png)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "2. The command inserted by the user is being parsed into the `Parser` and a new `Command` object is being created. "
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. The variable `userCommandInput` will be identified as `deleterecipe` in the `Parser#parseUserCommand()`.The `Parser#prepareDeleteRecipe()` is being called to prepare the `userCommandInput` string to create a `DeleteRecipeCommand` object."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    ![Delete Recipe State 1](images/deleteRecipeState2.png)"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "3. The command is now being executed."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. The `DeleteRecipeCommand#execute()` will be called."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. As this is a deletion by recipe name, the `recipeIndex` variable is set as null. As the variable is null, `DeleteRecipeCommand#deleteRecipeByName()` will be called."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. Next, the `DeleteRecipeCommand#getRecipeIndex()` to get the index based on the recipe name that the user has inputted. With the given index, `DeleteRecipeCommand#deleteRecipe()` will be called to delete the recipe. "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    1. Lastly, a String called `feedbackToUser` will be returned to the user to inform the user of the outcome of the command. "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    The following image shows the state diagram for the command execution:"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    ![Delete Recipe State 1](images/deleteRecipeState3.png)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "4. The details will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The following shows the full sequence diagram for this command:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "![Delete Recipe Sequence Diagram](images/deleteRecipeSequenceDiagram.png)"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Design Considerations"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Aspect 1: How is the `DeleteRecipeCommand` initialise. \u003cbr\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Alternative 1 (Current Choice): Usage of 2 constructors \u003cbr\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        "
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Pros** | This gives us more flexibility on what object can be created with different variables since there are two methods of recipe deletion. |  "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Cons** | There is an overload of constructors.|"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        "
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Alternative 2: Usage of 1 constructor \u003cbr\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Pros** |The Parser can call for one main default constructor. |"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Cons** | The single constructor will need to deal with 2 different methods of deletion, causing the constructor to have more than one purpose.|"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    In the end, for `aspect 1`, we have chosen `alternative 1` as there are two different types of deletion, it would be simpler and increase cohesion as it is more easier to express these constructors\u0027 functionality at a higher level."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Aspect 2: Deletion by both index and name for recipes"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Alternative 1: Deletion by index only"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Pros**|A very specific recipe can be deleted.|"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Cons**|Users will not be able to delete the recipe by name.| "
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Alternative 2 (Current Choice): Deletion by both index and name "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |     |     |"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |-----|-----|"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Pros**|Users will be able to delete by recipe\u0027s name and index. As the recipe names are specific, it will be easier to get the recipe from list of recipe by getting the index from the recipe name given or the index given by the user.|"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        |**Cons**|There may be more overhead as there is a need to find the index of the recipe if the user has given the recipe name for deletion. | "
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    In the end, for `aspect 2`, we have chosen `alternative 2` which is to delete by index and name for recipes as the recipe names are unique when they are added, hence the users will be able to delete that specific recipe."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "#### 4.2.5. Search for recipe based on keyword(s)"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The search for recipe feature allows the user to find recipes using a keyword in the recipe’s list.  "
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "For example, `searchrecipe Chicken` will find all recipes that contain `Chicken`.  "
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![SearchRecipeCommand](images/searchrecipe_update.png)"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The following steps explained sequence diagram for `searchrecipe` command:  "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. The user enters `searchrecipe Chicken`.  "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()`.  "
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. `SearchRecipeCommand` object is created with the keyword passed in.  "
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. `KitchenHelper` calls it own method `executeCommand()` to execute the method in `SearchRecipeCommand#execute()`.  "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "5. On `SearchRecipeCommand#execute()`, display the list of recipe\u0027s name that matches the keyword."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Aspects: How `searchrecipe` executes:  "
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- Alternative 1 (current choice): Find if the keyword is part of the substring of the recipe’s name "
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "and returns the recipe’s name and the index of recipe in the recipe’s list.  "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Pros** | 1. Easy to find similar recipe by their name.|  "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Cons** | 1. Only shows the different recipe that contains the keyword.|"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- Alternative 2: Find the keyword within the recipe’s ingredient.  "
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Pros** | 1. More accurate searching of the recipe that uses the ingredients.|  "
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Cons** | 1. Could be more memory intensive to find if the list is huge.|"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 4.3. Chore-related Features"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.3.1. Addition of chore"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "The feature for addition of `chore`s allows the user to add `chore`s to a list to keep track of their completion. For example, `addchore buy groceries /by Monday 12pm` adds the `chore` `buy groceries` with deadline `Monday 12pm` to the `chore` list, and marks it as undone. "
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![AddChoreCommand](images/AddChoreCommand.png)"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Explanation of the sequence diagram above:"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "1. The user inputs `addchore buy groceries /by Monday 12pm`.  "
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "2. The `Kitchen Helper` class calls `Parser#parseUserCommand()` which will split the user input into 2 substrings, the command and its attributes.  "
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "3. The `AddChoreCommand` has been determined by a switch case, and the `Parser#prepareAddChore` method is called. "
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "4. If the method successfully extracts the task description and deadline, a new `AddChoreCommand` object is created. Otherwise, a new `InvalidCommand` object is created.  "
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "5. After which, the `AddChoreCommand` object will be returned to the `Kitchen Helper` class."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "6. The `Kitchen Helper` class will call the `execute()` method in the `AddChoreCommand` class, which calls its own `addChore()` method."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "7. This method will create a new `chore` and add it to the `chore` list."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "8. The execute() method returns a String to inform the user of the successful outcome. "
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "- We came up with two ways that a user can set the deadline, either as a String or as a Date object. "
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "|**Pros** | Increases flexibility if the user is unable to specify a date or time to complete the chore by.|  "
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "|**Cons** | Unable to alert the users of approaching deadlines that are set as Strings.|"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.3.2. List all/ specific chore(s)"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "The feature to list `chore`s allows the user to view the `chore`s currently in the list and their completion statuses. For example, `listchore`."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "1. The user inputs `listchore`."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "2. The `Kitchen Helper` class calls `Parser#parseUserCommand()` which will split the user input into 2 substrings, the command and its attributes, which would be empty in this case. "
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "3.   The `ListChoreCommand` has been determined by a switch case, and the `Parser#prepareListChore` method is called."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "4.   If the substring of attributes is empty, a new `ListChoreCommand` object is created. Otherwise, an exception is thrown."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "5.   After which, the `ListChoreCommand` object will be returned to the `Kitchen Helper` class. "
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "6.   The `Kitchen Helper` class will call the `execute()` method in the `ListChoreCommand` class, which calls its own `listChore()` method. "
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "7.   This method will display each `chore` item in the list line by line or indicate an empty list if the list is empty."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "8.   The `execute()` method returns a String containing the formatted list of `chore`s to display. "
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " "
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.3.3. Delete all/ specific chore(s)"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "The feature for deletion of `chore`s allows the user to remove the `chore` specified by the index in the list. For example, `deletechore 1` deletes the first `chore` in the `chore` list. "
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "1. The user inputs `deletechore 1`."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "2.   The `Kitchen Helper` class calls `Parser#parseUserCommand()` which will split the user input into 2 substrings, the command and its attributes. "
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "3.   The `DeleteChoreCommand` has been determined by a switch case, and the `Parser#prepareDeleteChore` method is called."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "4.   If the method successfully obtains an integer, a new `DeleteChoreCommand` object is created. Otherwise, a new `InvalidCommand` object is created."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "5.   After which, the `DeleteChoreCommand` object will be returned to the `Kitchen Helper` class. "
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "6.   The `Kitchen Helper` class will call the `execute()` method in the `DeleteChoreCommand` class, which calls its own `deleteChore()` method. "
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "7.   If the integer obtained is an index in the list, this method will remove the `chore` in that position from the `chore` list. Otherwise, an exception is thrown."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "8.   The execute() method returns a String to inform the user if the outcome is successful."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.3.4. Search for chore based on keyword(s)"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The search for chore feature allows the user to find chores using a keyword in the chore’s list.  "
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "For example, `searchchore groceries` will find all chores that contain `groceries`.  "
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![SearchChoreCommand](images/searchchore_update.png)"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The following steps explained sequence diagram for `searchchore` command:  "
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. The user enters `searchchore groceries`.  "
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()`.  "
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. `SearchChoreCommand` object is created with the keyword passed in.  "
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. `KitchenHelper` calls it own method `executeCommand()` to execute the method in `SearchChoreCommand#execute()`.  "
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "5. On `SearchChoreCommand#execute()`, display the list of chore that matches the keyword."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- Alternative 1 (current choice): Find if the keyword is part of the substring of the chore, "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "`[x] buy groceries (by: Tuesday 12pm)`.   "
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " "
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Pros** | 1. Easily to find by any attributes such as description and date.|  "
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Cons** | 1. Searching `buy groceries [x]` will fail to show any matching result.|"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- Alternative 2: Take in all the predicates given by the user and find using the predicates as a keyword  "
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Pros** | 1. More accurate searching of the chore is available for the user..|  "
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Cons** | 1. Requires users to enter more precise predicate keywords which could be more inconvenient.|"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 4.4. Storage"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "#### 4.4.1. Select files to load from and save to"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The select files to load from and save to feature allows the user to choose an option to either load their data from the normal or restore mode. The normal mode will load Kitchen Helper from the main storage files which store the data from the last used session of the user, providing the most recent representation of their inventory. "
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "On the other hand, the restore mode will load Kitchen Helper from the backup storage files which store the version of data manually saved from the user’s last usage of the save command. The restore mode gives users access to the backup storage files, however, users will have to use the save command to update the backup storage files."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Any subsequent changes made to the program data will be saved into the main storage files regardless of initial load options. To save a backup of the current session, the user will have to use the save current state function with the save command (see section 4.4.2)[4.4.2. Save current state](#442-save-current-state)."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    "
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "1. For instance, if the User selects to load files from auto-save mode, User executes `1`"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "\t1. A `Ui` object will be created and calls `Ui#getUserChoice()` and returns String `UserChoice`. "
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "\t1. The `Ui` object then calls `Ui#validUserChoice()` with `UserChoice` as the parameter. If `UserChoice` is invalid, `Ui#validUserChoice()` will call `Ui#askForReInput()`."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "\t"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "2. Creation of storage object"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    "
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    Ingredient data:"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    1. A `Storage` object will be created and calls `Storage#getIngredientData()` to load and parse the contents of ingredient save file into a newly created `ingredientList ArrayList\u003cIngredient\u003e`."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    1. ` Storage#getIngredientData()` will call `Storage#loadingIngredient()` to create `Ingredient` objects based on the category type of ingredients in the `ingredientList`."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    Recipe data:"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    1. A `Storage` object will be created and calls `Storage#getRecipeData()` to load and parse the contents of recipe save file into a newly created `recipeList ArrayList\u003cRecipe\u003e`."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    1. `Storage#getRecipeData()` will create a `Recipe` object and `recipeItems ArrayList\u003cIngredient\u003e`. It then calls `Storage#loadingRecipeItems()` to create `Ingredient` objects based on the category type of ingredients in each recipe into the `recipeItems`. Every ` recipeItems` of each recipe will then be added into `recipeList`."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    Chore data:"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    1. A `Storage` object will be created and calls `Storage#getChoreData()` to load and parse the contents of chore save file into a newly created `choreList ArrayList\u003cChore\u003e`."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    Expenditure data:"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    1. `Storage#loadExpenditureData()` is called to load and parse the contents of expenditure save file and creates an instance of `Expenditure`."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "All description and warnings to the user utilises the UI class, which controls the printing of the text on the console."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The sequence diagram below summarizes how loading data works:"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "![Load Data Sequence Diagram](images/Loading.png)"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Aspects: How saving of files executes:  "
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "- Alternative 1 (current choice): Overwriting files with entire current ArrayLists every time changes are made."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Pros** | Easier to implement when it comes to delete commands as there is no need to loop through the whole ArrayList to find and compare the object to delete and update files.|  "
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Cons** | Takes more time to load and save.|"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "- Alternative 2: Appending the new changes to the files every time changes are made."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Pros** | Faster as there is no need to go through the whole ArrayList whenever we save since changes are appended individually.|  "
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Cons** | Difficult and slower to implement for commands that require deletion of objects.|"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "#### 4.4.2. Save current state"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The save current state feature allows the user to store the current state of the program data into the backup storage files. The contents of the backup storage files will be updated and replaced with the current state when save command is implemented by the user."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The following steps explain how `save` command works:"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "1. The user enters `save`"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()` which splits the user’s input into 2 parts "
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "and enters a switch case for execution.  "
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "3. `parseUserCommand` in the Parser object will call a method `SaveStateCommand`.  "
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "4. On execute(), `Storage.copyFile()` will be called four times to copy contents of ingredients, recipes, chores and expenditure save files into their respective backup storage files."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Aspects: How saving of current state data executes:"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "- Alternative 1 (current choice): Using Files.copy to copy content of auto-save files to manual-save files."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Pros** | Easy to implement as less code is needed with Java 7 Files helper class.|  "
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Cons** | Relatively slow copy performance when file size increases.|"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "- Alternative 2: Using FileChannels to copy content of auto-save files to manual-save files."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Pros** | The FileChannels technique is usually faster than its alternatives such as basic streams.|  "
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Cons** | It may fail for very large files and more lines of codes are needed for implementation.|"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "### 4.5. Display Expenditure"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "### 4.6. Logging"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Logging in the application refers to storing exceptions, warnings and messages that occur during the execution of Kitchen Helper. It was included to help developers to identify bugs and to simplify their debugging process. "
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "The `java.util.logging` package in Java is used for logging. The logging mechanism can be managed from the `KitchenHelper` class through the `kitchenLogs` logger object."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "All control of the logger for the application can be viewed/ altered in the `setUpLogger()` method. The current settings for the logger are as follow:"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- All logs of `Level.SEVERE` level will be shown on the console when an input/ program flow has caused a possible disruption to the execution of the program. (See the levels of logging below)"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- All information above ‘Level.FINE’ level is logged into a log file, `KitchenLogs.log`."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- Logging is made to be displayed in the `SimpleFormatter` style where the date, class and error description are logged."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Logging Levels:"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- `Level.SEVERE`: a serious failure, which prevents normal execution of the program, for end users and system administrators."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- `Level.WARNING`: a potential problem, for end users and system administrators."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- `Level.INFO`: reasonably significant informational message for end users and system administrators."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- `Level.CONFIG`: hardware configuration, such as CPU type."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- `Level.FINE`, `Level.FINER`, `Level.FINEST`: three levels used for providing tracing information for the software developers."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Additional logging can be done by adding the calling of the global logger and invoking the function `log()`. This will ensure that all loggings will be made to the same file across the various classes. "
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "An example is shown below:"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "kitchenLogs.log(Level.WARNING, description_of_warning_here, e.toString());"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "```"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "## Appendices "
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Appendix A: Product Scope"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Target user profile__:"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Prefers desktop application over other types.  "
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Can type fast.  "
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Prefers typing over mouse input.  "
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Comfortable with using command line interface.  "
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Facilitate user to track kitchen related information easily.  "
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Enables user to remove consumed items easily.  "
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Reminds user of soon perishable food items.  "
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Reminds user to stock up enough food.  "
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Value proposition__: Manage food inventory quickly compared to a typical mouse or graphic user interface driven application which saves time and makes it more convenient.  "
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Appendix B: User Stories"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|housewife|add my groceries to the inventory|track my ingredients.|"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|user|track the list of ingredients|stock up before I cook a meal.|"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|user|delete an ingredient|so that i can remove the wrongly keyed item.|"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|user|decrease the quantity of an item in the inventory|see it reflects the current amount after consuming.|"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|user|create new recipes|keep a list of recipes in the application.|"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|user|view the list of recipe|view the ingredients that are needed for the recipe.|"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|user|delete the recipe|remove unwanted recipe.|"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|housewife|add chore to the list|remind myself of the tasks that needs to be completed.|"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|housewife|be able to see the chore list|check what is not completed.|"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|housewife|remove the task|delete  a task that was keyed wrongly..|"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|user|save all my ingredients|keep track of them when the application reloads.|"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|user|save all my recipes|choose which recipe that i would like to cook when the application reloads.|"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|user|save all my chores|view the chores that need to be done.|"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|frequent user|view all my past data|get the latest update on my inventory when the application reloads|"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v1.0|new user|view more information about the commands|learn to use the various commands.|"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v2.0|user|search for a specific ingredient|view the details regarding the ingredient.|"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v2.0|user|search the relevant recipe using a keyword|view the different recipe that are similar.|"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v2.0|user|search for a chore using a keyword|view the status of the chore.|"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v2.0|user|create unique recipe names|differentiate between my recipes.|"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v2.0|user|choose a recipe that contains sufficient ingredients|keep track of my ingredients and cook this meal.|"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v2.0|user|deduct the ingredients that i have from the recipe that i want to cook|save time from deleting manually.|"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v2.0|housewife|mark the task as done|track the uncompleted task.|"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v2.0|user|retrieve all of my past history that i have entered in the application|view them again.|"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|v2.0|user|reset all my ingredients, chores, recipes|restart the application.|"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|v2.0|user|deduct ingredients that expire first|do not waste my ingredients.|"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|v2.0|user|be informed if I have sufficient ingredients to cook a specific recipe|find other recipes to cook.|"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|v2.0|user|get the expenditure on the ingredients that I used to cook in the recipe|keep track of my expenditure.|"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "|v2.0|user|get the expenditure on the ingredients that I used to cook|keep track of my expenditure.|"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Appendix C: Value proposition - Use cases"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "(For all use cases below, the __System__ is `Kitchen Helper` and the __Actor__ is the `user`, unless otherwise stated)"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case: UC01 - Add an ingredient"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. User purchases an ingredient."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. User wants to add to System for tracking purposes."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. System adds the ingredient."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2a. System detects invalid format in the entered data."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  2a1. System throws invalid input format and shows a valid format example."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2b. System detects zero quantity in the entered data."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  2b1. Systems alerts you to enter a quantity more than zero."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2c. System detects a expired expiry date in the entered data."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "  2c1. System alerts you that Expired ingredient detected in input. Please enter a non-expired expiry"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "       date."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case: UC02 - Search for ingredient"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. User wants to find ingredients."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. User enters a keyword in the System."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. System displays the ingredient related to the keyword."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Extentions: "
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3a. No matching ingredients related to the keyword."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  3a1. Systems show no matching ingredient message"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case: UC03 - Search for recipe"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. User wants to find similar recipes."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. User enters a keyword in the System."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. System displays the recipe\u0027s name related to the keyword."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Extentions: "
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3a. No matching recipe related to the keyword."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  3a1. Systems show no matching recipe message"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case: UC04 - Search for chore"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. User wants to find chores."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. User enters a keyword in the System."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. System displays the chore related to the keyword."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Extentions: "
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3a. No matching chore related to the keyword."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  3a1. Systems show no matching chore message"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "```"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Use case: UC05 - Delete an ingredient"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "MSS: "
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "1. User wants to delete a particular ingredient. "
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2. User can either enter a keyword to search in Kitchen Helper or list all ingredients to find the "
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   ingredient to delete."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "3. User makes use of the index received in step 2 to delete the ingredient."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "4. Kitchen Helper will display a successful message if deletion was successful. "
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Use case ends. "
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Extentions:"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "4a. No matching ingredient related to the index. "
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "  4a1. Kitchen Helper will show an error message stating that there is no such ingredient."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Use case ends. "
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "```"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "```"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Use case: UC06 - Delete a recipe"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "MSS: "
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "1. User wants to delete a particular recipe. "
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2. User can either enter a keyword to search in Kitchen Helper or list all recipes"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   to find the recipe to delete."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "3. User makes use of the index or name received in step 2 to delete the recipe."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "4. Kitchen Helper will display a successful message if deletion was successful. "
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Use case ends. "
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Extentions:"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "4a. No matching ingredient related to the index or name. "
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "  4a1. Kitchen Helper will show an error message stating that there is no such recipe."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Use case ends. "
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "```"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "```"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Use case: UC07 - Cook a recipe"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "1. User wants to cook a recipe for a number of pax."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "2. User can search for the recipe that it wants to cook."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "3. User use the name obtained in step 2 to cook the recipe. "
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "4. Kitchen Helper will display a successful message if it was able to cook the recipe. "
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Use case ends. "
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Extentions:"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "4a. There are insufficient/missing ingredients in the ingredients\u0027 inventory."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    4a1. Kitchen Helper will show an error message stating that there were insufficient/missing"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "         ingredients to cook the recipe. "
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "4b. There are insufficient ingredients due to some expired ingredients in the ingredients\u0027 invenory. "
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    4b1. Kitchen Helper will show an error message and a list of expired ingredients."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "```"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "```"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Use case: UC08 - List Ingredients"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "1. User wants to see the whole ingredient list."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2. User use the category \u0027all\u0027 to display whole ingredient list."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "3. System displays all ingredients regardless of category."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2a. System detects invalid format in the entered data."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "  2a1. System throws invalid input format and shows a valid format example."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "```"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "```"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Use case: UC09 - List Ingredients from Meat category"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "1. User wants to see the whole ingredient list."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2. User use the category \u0027meat\u0027 to display whole ingredient list."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "3. System displays ingredients under the category, `meat`."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2a. System detects invalid format in the entered data."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "  2a1. System throws invalid input format and shows a valid format example."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2b. System detects invalid category in the entered data."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "  2b1. System throws invalid category name and shows the valid category names."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "```"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "```"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Use case: UC10 - List Recipe name"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "1. User wants to see the whole list of Recipe name."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2. User use the category \u0027all\u0027 to display whole recipe name list."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "3. System displays all recipe name."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2a. System detects invalid format in the entered data."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "  2a1. System throws invalid input format and shows a valid format example."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "```"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "```"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Use case: UC11 - List of Ingredients in Recipe"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "1. User wants to see the ingredient list inside a Recipe."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2. User use the recipe number \u00271\u0027 to display the ingredient list needed to cook the recipe."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "3. System displays all ingredients under the recipe."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2a. System detects invalid format in the entered data."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "  2a1. System throws invalid input format and shows a valid format example."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "```"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "2. An user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. Should not require user to install program file."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. Should work for single user."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "5. Should be able to run without internet connection."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Appendix E: Glossary"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Category - The group of the ingredient belongs to"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Price - Unit cost of a single quantity"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Expiry - The expiry date of the ingredient"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "* *Mainstream OS* - Windows, Linux, Unix, OS-X  "
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "### Appendix F: Instructions for Manual Testing"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.1. Launch and Shutdown"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   1. Download the jar file, renamed it to `kitchenhelper` and copy into an empty folder."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   2. Open up command prompt or terminal."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   3. Change directory to where the jar file is located."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   4. Run the command `java -jar kitchenhelper.jar`   "
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   Expected: Shows a message to load data from normal mode or restore mode."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   "
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.2. Add an ingredient"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. Add an ingredient into Kitchen Helper."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   1. Prerequisites: List all the ingredient using the `listingredient all` command. "
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   2. Test case: `addingredient /n beef /c meat /q 3 /p 20 /e 03/03/2022`  "
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   Expected: Entry can be seen using `listingredient all` command."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   3. Test case: `addingredient /n chicken /c meat /q 3 /p 3 /e 03/03/2020`  "
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   Expected: Expired ingredient detected in input. \u003cbr\u003e Please enter a non-expired expiry date."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   4. Test case: `addingredient /n milo /c drink /q 0 /p 1 /e 03/03/2022`  "
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   Expected: Please enter a quantity more than 0."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   "
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.3. List ingredient "
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "1. List Ingredient"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   1. Prerequisites: Add ingredient using the `addingredient /n beef /c meat /q 3 /p 20.20 /e 03/03/2022` command. "
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   2. Test case: `listingredient all`    "
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   Expected: Entry can be seen using `listingredient all` command and all other categories."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   3. Test case: `listingredient meat`  "
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   Expected: Entry can be seen using `listingredient all` command and only `meat` category is shown."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   4. Test case: `listingredient 1`  "
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   Expected: Invalid Command, please check your format!"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   5. Test case: `listingredient airplane`  "
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   Expected: Invalid Command, please check your format!"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   "
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.4. Delete an ingredient "
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "1. Delete an ingredient from Kitchen Helper."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   1. Prerequisites: List all the recipes using the `listingredient all` command."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   2. Test case (if ingredient index exists): `deleteingredient /i 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   Expected: The ingredient will be deleted. It can be noticed by using the `listingredient all` command. "
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   3. Test case (if ingredient index does not exists): `deleteingredient /i -1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   Expected: No ingredients are deleted. It can be noticed by using the `listingredient all` command. "
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   4. Test case (if there is sufficient quantity to be reduced from the ingredient): `deleteingredient /i 1 /q 2`\u003cbr\u003e"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   Expected: The quantity of the ingredient will change as seen by using `listingredient all` command."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   5. Test case (if there are insufficient quantity to be reduced from the ingredient): `deleteingredient /i 1 /q 10`\u003cbr\u003e"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   Expected: The quantity of the ingredient will not changed as seen by using `listingredient all` command. "
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   6. Test case (if the quantity of the ingredient is reduced to zero after deduction): `deleteingredient /i 1 /q 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   Expected: The ingredient will be deleted as its final quantity is zero. This can be noticed by using `listingredient all` command."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.5. Search for ingredient"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. Search for ingredients in Kitchen Helper."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   1. Prerequisites: The ingredient list should not be empty. You should at least add the following ingredient by using `addingredient /n beef /c meat /q 3 /p 20 /e 03/03/2022` before the search.  "
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   2. Test case: `searchingredient beef`  "
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   Expected: Ingredient entries that have the keyword matching `beef` names are listed."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   3. Test case: `searchingredient meat`  "
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   Expected: Ingredient entries that have the keyword matching `meat` category are listed."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   4. Test case: `searchingredient 03/03/2022`  "
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   Expected: Ingredient entries that have the keyword matching `03/03/2022` date are listed."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   5. Test case: `searchingredient $20`  "
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   Expected: Ingredient entries that have the keyword matching `$20` price are listed."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   "
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.6. Add a recipe"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "1. Add a recipe into Kitchen Helper"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. Prerequisites: List all the ingredient using the `listrecipe all` command."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    1. Test case: `addrecipe /n warm milk /i HL Milk:1:Dairy`  "
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    Expected: Entry can be found using `listrecipe all` command. "
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.7. List recipe"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "1. List Recipe"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   1. Prerequisites: Add ingredient using the `addrecipe /n warm milk /i HL Milk:1:Dairy` command. "
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   2. Test case: `listrecipe all`    "
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   Expected: Entry can be seen using `listrecipe all` command, shows all recipe\u0027s name added."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   3. Test case: `listrecipe 1`  "
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   Expected: Entry can be seen using `listrecipe 1` command and shows all ingredients registered in the recipe."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   4. Test case: `listrecipe 2`  "
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   Expected: The Recipe List is currently empty."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   5. Test case: `listrecipe notsure`  "
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   Expected: Invalid Command, please check your format!"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.8. Cook a recipe"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "1. Cooks the specified recipe and ingredients in the recipe will be automatically deducted."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. Prerequisites: List all the ingredient using the `listingredient all` command."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    1. Test case (sufficient ingredient): `cookrecipe /n warm milk /p 2`  "
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    Expected: A reduction of the ingredients\u0027 quantity multiplied by `2` can be noticed when listing the ingredients with `listingredient all`"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    1. Test case (Sufficient even with expired ingredients):  `cookrecipe /n warm milk /p 2`  "
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    Expected: The automatic deduction will not be carried out and expired item will be notified to user."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    1. Test case: (Insufficient even with expired ingredients): `cookrecipe /n warm milk /p 2`  "
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    Expected: The automatic deduction will not be carried out."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.9. Delete a recipe "
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "1. Delete a recipe from Kitchen Helper."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   1. Prerequisites: List all the recipes using the `listrecipe all` command. "
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   2. Test case (if recipe index or name exists): `deleterecipe /i 1` OR `deleterecipe /i warm milk`\u003cbr\u003e"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   Expected: The recipe will be deleted. It can be noticed by using the `listrecipe all` command. "
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   3. Test case (if recipe index or name does not exists): `deleterecipe /i -1` OR `deleterecipe /n Beef Stew`\u003cbr\u003e"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   Expected: No recipes are deleted. It can be noticed by using the `listrecipe all` command. "
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.10. Search for recipe"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. Search for similar recipe in Kitchen Helper."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   1. Prerequisites: The recipe list should not be empty. You should at least add the following recipe by using `addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable` before the search.   "
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   2. Test case: `searchrecipe chicken`  "
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   Expected: Recipe\u0027s name entries that have the keyword matching `chicken\u0027 are listed. "
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.11. Add a chore"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.12. List a chore"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.13. Delete a chore"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   "
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.14. Search for chore"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. Search for chores in Kitchen Helper. "
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   1. Prerequisites: The chore list should not be empty. You should at least add the following chore by using `addchore buy groceries /by Tuesday 12pm` before the search.  "
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   2. Test case: `searchchore groceries`  "
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   Expected: Chore entries that have the keyword matching `groceries` description are listed."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   3. Test case: `searchchore Tuesday`  "
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   Expected: Chore entries that have the keyword matching `Tuesday` as a string are listed.  "
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   "
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.15. Saving data"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "1. Load ingredient data into Kitchen Helper."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   1. Prerequisites: The ingredient list save file should not be empty. "
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   1. Expected: Previously stored ingredient data can be seen using `listingredient all` command."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "1. Load recipe data into Kitchen Helper."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   1. Prerequisites: The recipe list save file should not be empty. "
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   1. Expected: Previously stored recipe data can be seen using `listrecipe all` command."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " "
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "1. Load chore data into Kitchen Helper."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   1. Prerequisites: The chore list save file should not be empty. "
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   1. Expected: Previously stored chore data can be seen using `listchore all` command."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " "
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "1. Load expenditure data into Kitchen Helper."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   1. Prerequisites: The expenditure save file should not be empty. "
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   1. Expected: Previously stored expenditure data of the week can be seen using `displayexpenditure` command."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " "
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "If any of the save files are empty, the user can choose to populate the files with their own user commands or alternatively, use any of the test cases below:"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "1. `addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable`"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. `addingredient /n Chicken Breast /c meat /q 3 /p 20 /e 18/12/2020`"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. `addingredient /n kailan /c Vegetable /q 30 /p 30.45 /e 12/12/2020`"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. `addingredient /n HL Milk /c Dairy /q 3 /p 12.2 /e 14/12/2020`"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "5. `addchore buy groceries /by Tuesday 12pm`"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Note that expenditure changes when `addingredient`, `deleteingredient`, or `cookrecipe` commands are used."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### F.16. Display expenditure"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 110,
      "yantingsanity": 301,
      "jinfayap": 440,
      "cheongisabella": 51,
      "-": 30,
      "alwayshuizhen": 184,
      "JensonWee": 225
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "# Kitchen Helper"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Our project, Kitchen Helper is a household application which tracks household inventory, creates recipes which would indicate how much ingredients will be used, and assigns tasks to household members. The application will be easy to use, with intuitive ways of editing, finding and tracking tasks that have been added. It is optimised for those who prefer working with Command Line Interface (CLI). Kitchen Helper provides convenience in our often busy lives, so give this application a chance to help you!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "This user guide aims to help you learn your way around our application, making the learning process smooth and effortless. So what are you waiting for? Let’s go!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 4,
      "-": 5,
      "JensonWee": 1
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "# Kitchen Helper - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "By: `Team CS2113T-M16-2` Since: `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- [User Guide](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  * [1. Introduction](#1-introduction)  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  * [2. Quick Start](#2-quick-start)  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  * [3. Features](#3-features)  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [3.1. General Commands](#31-general-commands)  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "       - [3.1.1. Viewing help: `help`](#311-viewing-help-help)  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "       - [3.1.2. Exiting the Program: `exit`](#312-exiting-the-program-exit)  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "       - [3.1.3. Resetting the application: `reset`](#313-resetting-the-application-reset)  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "       "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.2 Storage](#32-storage)  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "       - [3.2.1. Select Load Files](#321-select-load-files-zi-hui)  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "       - [3.2.2. Save Current State: `save`](#322-save-current-state-save-zi-hui)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "             "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.3. Ingredient](#33-ingredient)  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "       - [3.3.1. Adding an ingredient: `addingredient`](#331-adding-an-ingredient-addingredient-jin-fa)  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "       - [3.3.2. List ingredient: `listingredient`](#332-list-ingredient-listingredient-jin-xing)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "       - [3.3.3. Delete an ingredient: `deleteingredient`](#333-delete-an-ingredient-deleteingredient-isabella-and-yan-ting)  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "       - [3.3.4. Search for ingredient: `searchingredient`](#334-search-for-ingredient-searchingredient-jin-fa)  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.4. Recipe](#34-recipe)  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "      - [3.4.1. Adding a recipe: `addrecipe`](#341-adding-a-recipe-addrecipe-hui-zhen)  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      - [3.4.2. List recipe: `listrecipe`](#342-list-recipes-listrecipe-jin-xing)  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "      - [3.4.3. Delete a recipe: `deleterecipe`](#343-delete-a-recipe-deleterecipe-yan-ting)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.4.4. Search for recipe: `searchrecipe`](#344-search-for-recipe-searchrecipe-jin-fa)  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "      - [3.4.5. Cooking a recipe: `cookrecipe`](#345-cooking-a-recipe-cookrecipe-hui-zhen-and-yan-ting)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.5. Chore](#35-chore)  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.5.1. Adding a chore: `addchore`](#351-adding-a-chore-addchore-isabella)  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.5.2. List chore: `listchore`](#352-list-chore-listchore-isabella)  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.5.3. Delete a chore: `deletechore`](#353-delete-a-chore-deletechore-isabella)  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.5.4. Search for chore: `searchchore`](#354-search-for-chore-searchchore-jin-fa) "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "      - [3.5.5. Mark chore as done: `done`](#355-mark-chore-as-done-done-isabella)  "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    + [3.6 Expenditure](#36-expenditure)  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "      - [3.6.1. Display User Expenditure](#361-display-user-expenditure-displayexpenditure-isabella)  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "       "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  * [4. Command Summary](#4-command-summary)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Our Project, Kitchen Helper is a kitchen application that is designed to facilitate users to track their kitchen inventory effectively. Kitchen Helper enables users to create recipes with different ingredients and allows auto deduction when you cook using the recipe. Kitchen Helper provides prompts when your ingredient are expiring or its quantity is running low. It also prompts for chores that should be completed by a deadline. Additionally, KitchenHelper helps users track expenditure.      "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Kitchen Helper is optimised for those who prefer working with Command Line Interface (CLI). It increases the level of convenience in our busy lives, so give this application a chance to help you!"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "This user guide aims to help you learn your way around our application, making the learning process smooth and effortless. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "So what are you waiting for? Let’s go!"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. Ensure that you have Java `11` or above installed on your computer."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. Download the latest version of `KitchenHelper` from [here](https://github.com/AY1920S2-CS2113T-M16-2/tp/releases)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. Save the file as `kitchenhelper.jar` and copy the file to the folder you want to use as the home folder for KitchenHelper."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. Type the command `java -jar kitchenhelper.jar` in the command prompt to start the application."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "5. Type the command in the command box and press `Enter` to execute it.  "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   e.g. typing `help` and pressing `Enter` will display help information."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "6. Some example commands you can try:  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   * `help` : lists all commands "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   * `addingredient /n Beef cubes /c meat /q 3 /p 20 /e 18/03/2020` : adds an ingredient to the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   * `listingredient meat` : list the ingredients that has the category `meat`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   * `exit` : exits the application."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "7. Refer to [Section 3, \"Features\"](#3-features) for details of each command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Command Format: "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- Words that are enclosed by angle brackets are the parameters to be supplied by the user. E.g. `deleterecipe /n \u003cRECIPE_NAME\u003e` "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "From this example, `RECIPE_NAME` will be inputted by the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "- Items in square brackets with the word [] are optional. E.g. `deleteingredient /n \u003cINGREDIENT_NAME\u003e [/q QUANTITY]` can be used as `deleteingredient /n apple or deleteingredient /n name /q 2`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "### 3.1. General Commands"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.1.1. Viewing help: `help`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Shows a list of available commands and their usages.  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Format:__ `help`  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.1.2. Exiting the Program: `exit`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Exits the program.  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Format:__ `exit`  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 3.1.3. Resetting the application: `reset`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "You can reset the application which will wipe out all existing data  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "__Format:__ `reset`  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### 3.2. Storage"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "#### 3.2.1. Select Load Files (Zi Hui)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "At the start of Kitchen Helper, the user will be prompted with the option to either load the program data normally or from the most recent backup storage files."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The normal mode will load Kitchen Helper from the main storage files which store the data from the last used session of the user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Alternatively, if the user selects the restore mode, it will load Kitchen Helper from the backup storage files which store the version of data manually saved from the user’s last usage of the save command [Section 3.2.2, \"Save Current State\"](#322-save-current-state-save-zi-hui). The restore mode gives users access to the backup storage files, however, users will have to use the save command to update the backup storage files."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "It is important to note that any subsequent changes made to the program data during the current session will be automatically saved into the main storage files regardless of initial load options. "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "**Command**: \u003cbr\u003e `1` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Data loaded from the most recent main storage files.  | Please enter \u00271\u0027 to load data from normal mode or \u00272\u0027 to load data from restore mode: \u003cbr\u003e 1 \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e Okay data have been loaded from the main storage files. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "**Command**: \u003cbr\u003e `2` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Data loaded from the most recent backup storage files.  | Please enter \u00271\u0027 to load data from normal mode or \u00272\u0027 to load data from restore mode: \u003cbr\u003e 2 \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e Okay data have been loaded from the backup storage files. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "#### 3.2.2. Save Current State: `save` (Zi Hui)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "At any point of the session, if the user wishes to store a backup copy of the current state of their program data, it is recommended that the user uses the save command. The save command will store all program data of the current state into the backup storage files."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "__Format:__ `save`  "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "**Command**: \u003cbr\u003e `save` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Data saved into backup storage files.  | \u003cbr\u003e You have saved the current state in the following files: outputIngredientCopy.txt, outputRecipeCopy.txt, outputChoreCopy.txt  \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### 3.3. Ingredient"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.3.1. Adding an ingredient: `addingredient` (Jin Fa)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "You can add an ingredient to the Kitchen Helper for tracking, containing various details."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "__Format:__ `addingredient /n \u003cINGREDIENT_NAME\u003e /c \u003cCATEGORY\u003e /q \u003cQUANTITY\u003e /p \u003cPRICE\u003e /e \u003cEXPIRY\u003e`  "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "* `INGREDIENT_NAME` is the name of your ingredient."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `INGREDIENT NAME` can only consists of **alphabet letters** only."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `CATEGORY` is the category of your ingredient.  "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The different types of `CATEGORY` are listed below: "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Meat`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Vegetable`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Staple`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Fruit`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Dairy`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Drink`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Miscellaneous`  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Any `CATEGORY` that **does not falls in the list** would be put under `Miscellaneous`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `QUANTITY` is the number of servings of the ingredient."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `QUANTITY` in the format of **whole number**."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `PRICE` is the **unit cost** of a single quantity for ingredient."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `PRICE` can be given up to **2 decimal places**."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `EXPIRY` is the expiry date of the ingredient."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `EXPIRY` in the format of **dd/MM/yyyy** e.g. 01/12/2020."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + **Note**: System will automatically flag ingredient as expired if expiry date is same as the current date. "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Notable Behavior__:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ If you add an ingredient with the same name (case-insensitive), same price and same expiry data, Kitchen Helper will increase the quantity from the existing data."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ The expiry date used in `addingredient` given in the `User Guide` may be outdated.   "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Please ensure that you input a valid date of the ingredient that is not expired. Otherwise, you may encounter problem adding ingredient to `Kitchen Helper`.  "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Situation | Example |  Outcome"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "----------|--------|------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Ingredient with same name, price and expiry does not exist in the Kitchen Helper. | **Command**: \u003cbr\u003e `addingredient /n Beef cubes /c meat /q 3 /p 20 /e 18/03/2022` \u003cbr\u003e\u003cbr\u003e **Description:** \u003cbr\u003e Creates a new ingredient called `Beef cubes`, which have the following attributes: Category `meat`, Quantity `3`, Price `20` , Expiry date `18/03/2022`. | KitchenHelper has added: Ingredient:Beef cubes Category:meat Quantity:3 Price:$20.00 Expiry:18/03/2022 \u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Ingredient with same name, price and expiry exists in the Kitchen Helper. | **Command**: \u003cbr\u003e `addingredient /n Beef cubes /c meat /q 4 /p 20 /e 18/03/2022` \u003cbr\u003e\u003cbr\u003e **Description:** \u003cbr\u003e Creates a new ingredient called `Beef cubes`, which have the following attributes: Category `meat`, Quantity `4`, Price `20` , Expiry date `18/03/2022`. | Kitchen Helper has updated the quantity of Beef cubes to 7 from 3 \u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Ingredient entered with an expired expiry date. | **Command**: \u003cbr\u003e `addingredient /n Milo /c Drink /q 30 /p 10 /e 20/03/2020` \u003cbr\u003e\u003cbr\u003e **Description:** \u003cbr\u003e Creates a new ingredient called `Milo`, which have the following attributes: Category `Drink`, Quantity `30`, Price `10` , Expiry date `20/03/2020`. | Expired ingredient detected in input. \u003cbr\u003e Please enter a non-expired expiry date.\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "#### 3.3.2. List ingredient: `listingredient` (Jin Xing)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Displays all the items currently in the ingredient list in Kitchen Helper."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "__Format__: `listingredient \u003cCATEGORY / ALL\u003e`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "**Command**: \u003cbr\u003e `listingredient all` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Displays all ingredients from `all` categories. | listingredient all \u003cbr\u003e Here is the list of Ingredients in Inventory \u003cbr\u003e Format : Ingredient Name / Quantity / Price / Expiry \u003cbr\u003eAll:\u003cbr\u003edairy:\u003cbr\u003edrink:\u003cbr\u003efruit:\u003cbr\u003emeat:\u003cbr\u003e Beef / 30 / 20.2 / 20/02/2020 \u003cbr\u003emiscellaneous:\u003cbr\u003estaple:\u003cbr\u003evegetable:\u003cbr\u003ekailan / 30 / 30.45 / 12/03/2020 \u003cbr\u003e\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "**Command**: \u003cbr\u003e `listingredient meat` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Displays all ingredients from `meat` categories. | listingredient all \u003cbr\u003e Here is the list of Ingredients in Inventory \u003cbr\u003e Format : Ingredient Name / Quantity / Price / Expiry \u003cbr\u003e Beef / 30 / 20.2 / 20/02/2020 \u003cbr\u003e\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "#### 3.3.3. Delete an ingredient: `deleteingredient` (Isabella and Yan Ting)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "You can delete a specific ingredient and reduce the quantity of an ingredient from the ingredient\u0027s inventory in Kitchen Helper by using the ingredient\u0027s index. "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "\u003cbr\u003e You will be prompted whether to delete ingredient cost from total expenditure, in the event you are deleting this ingredient because you added it wrongly and would not like to count its cost into total expenditure. "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "\u003cbr\u003e If you refuse this prompt, you will then be prompted whether to add ingredient cost to amount used in cooking, in the event you are manually deleting ingredients you have cooked or consumed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "__Format__: `deleteingredient /i \u003cINGREDIENT_INDEX\u003e [/q \u003cQUANTITY\u003e]`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "* `INGREDIENT_INDEX`: This refers to the index of the ingredient which is an identification number tagged to the ingredient.  \u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "* `QUANTITY` : This refers to the quantity of ingredient to be deducted. This is an optional argument.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "\u003e You may get the index for the ingredient that you would like to delete by getting the full list of ingredients that you have previously entered into Kitchen Helper or search for an ingredient. You may refer to the [listingredient](#332-list-ingredient-listingredient-jin-xing) and [searchingredient](#334-search-for-ingredient-searchingredient-jin-fa) command sections to understand how to use the command. \u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003e One thing to note: If the final quantity of your ingredient will be zero after deduction, the ingredient will be deleted from the ingredient list subsequently. "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "\u003e The user expenditure might change depending on your response to the prompts. You can view the changes with `displayexpenditure` command. Please refer to [3.6.1. Display User Expenditure](#361-display-user-expenditure-displayexpenditure-isabella)."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "**Command**: \u003cbr\u003e `deleteingredient /i 1` \u003cbr\u003e\u003cbr\u003e **Description**: Deletes the item specified by `index 1` in the ingredient list. | The amount of money spent on this ingredient has already been recorded. \u003cbr\u003e Would you like to remove the amount spent on this item from the total expenditure? \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e `yes` \u003cbr\u003e Ok! $3.00 is deducted from total expenditure. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e apple has been deleted.\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "**Command**: \u003cbr\u003e `deleteingredient /i 2 /q 20` \u003cbr\u003e\u003cbr\u003e **Description**: Reduces the ingredient specified by `index 2` in the ingredient list. | The amount of money spent on this ingredient has already been recorded. \u003cbr\u003e Would you like to remove the amount spent on this item from the total expenditure? \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e `no` \u003cbr\u003e Ok! There are no changes to expenditure. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e Would you like to add the amount spent on this item to the amount used for cooking or consumption? \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e `yes` \u003cbr\u003e Ok! $50.00 is added to amount used in cooking or consumption. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e The quantity of HL Milk has been changed!\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "**Command**: \u003cbr\u003e `deleteingredient /i 2 /q 1` \u003cbr\u003e\u003cbr\u003e **Description**: Assuming that the current ingredient of `index 2` has a `quantity` of `1`, reduces the ingredient specified by `index 2` in the ingredient list. | The amount of money spent on this ingredient has already been recorded. \u003cbr\u003e Would you like to remove the amount spent on this item from the total expenditure? \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e `no` \u003cbr\u003e Ok! There are no changes to expenditure. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e Would you like to add the amount spent on this item to the amount used for cooking or consumption? \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e `no` \u003cbr\u003e Ok! There are no changes to expenditure. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e The quantity of Beef has been changed!\u003cbr\u003eThis ingredient has a quantity of 0 after deduction, so it has been deleted. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.3.4. Search for ingredient: `searchingredient` (Jin Fa)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "You can search for ingredients based on a given keyword.  "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The output also returns `Location: Index \u003cNumber\u003e`, which you can make use of the `Number` to delete an ingredient or change the quantity of an ingredient.  "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": " You may refer to [Section 3.3.3. Delete an ingredient](#333-delete-an-ingredient-deleteingredient-isabella-and-yan-ting) command section to understand how to use the command.  "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Format:__ `searchingredient \u003cKEYWORD\u003e`  "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `KEYWORD` is the word to search for ingredient in Kitchen Helper."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command**: \u003cbr\u003e `searchingredient beef` \u003cbr\u003e **Description:** \u003cbr\u003e Search by ingredient\u0027s category. | Here are your matching ingredients in your list \u003cbr\u003e 1.[Meat] Beef cubes Qty:7 $20.00 Exp:18/03/2022 \\[Location: Index 1\\] \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command**: \u003cbr\u003e `searchingredient meat` \u003cbr\u003e **Description:** \u003cbr\u003e Search by ingredient\u0027s category. | Here are your matching ingredients in your list \u003cbr\u003e 1.[Meat] Beef cubes Qty:7 $20.00 Exp:18/03/2022 \\[Location: Index 1\\] \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command** :\u003cbr\u003e `searchingredient 18/03/2022` \u003cbr\u003e **Description:** \u003cbr\u003e Search by ingredient\u0027s category. | Here are your matching ingredients in your list \u003cbr\u003e 1.[Meat] Beef cubes Qty:7 $20.00 Exp:18/03/2022 \\[Location: Index 1\\] \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### 3.4. Recipe"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 3.4.1. Adding a recipe: `addrecipe` (Hui Zhen)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Adds a new unique recipe into the List in Kitchen Helper. A recipe is a list of ingredients that are used to cook a dish."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "__Format:__ `addrecipe /n \u003cRECIPE_NAME\u003e /i \u003cINGREDIENT_NAME\u003e:\u003cQUANTITY\u003e:\u003cCATEGORY\u003e[,..]`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "* `RECIPE_NAME` is the name of your recipe."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "* `INGREDIENT_NAME` is the name of your ingredient."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "* `QUANTITY` number of servings of the ingredient."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "* `CATEGORY` is the CATEGORY of your ingredient.  "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "The different types of `CATEGORY` are listed below: "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  + `Meat`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  + `Vegetable`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  + `Staple`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  + `Fruit`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  + `Dairy`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  + `Drink`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  + `Miscellaneous`  "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Any `CATEGORY` that does not falls in the list could be put under `Miscellaneous`.  "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "\u003e All `RECIPE_NAME` has to be unique. You can check the list of existing recipes by using [`listrecipe all`](#342-list-recipes-listrecipe-jin-xing)  "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "\u003e Please note that `RECIPE_NAME` and `INGREDIENT_NAME` can contain spaces. These will not be removed after addition. (i.e. \"Chicken____Stew\" where `_` is space will remain )  "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "| Example |  Outcome |"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|---------|----------|"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Command**: \u003cbr\u003e `addrecipe /n Rice Ball /i Rice:3:staple` \u003cbr\u003e\u003cbr\u003e**Description**: \u003cbr\u003e Creates a new recipe called `Rice Ball` which contains one ingredient, `3` portions of `Rice`. | Rice Ball Recipe has been created with 1 ingredients inside.\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d.|"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Command** : \u003cbr\u003e `addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Creates a new recipe called `Chicken Salad` which contains two ingredient, `2` portions of `Chicken breast` and `4` portions of `Lettuce`. | Chicken Salad Recipe has been created with 2 ingredients inside.\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d|"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Command**: \u003cbr\u003e `addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e A duplicate recipe has been found | There is an existing recipe with the same name!\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d|"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "#### 3.4.2. List recipes: `listrecipe` (Jin Xing)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Displays all recipe and its name or the items currently in a particular recipe in Kitchen Helper."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "__Format__: `listrecipe \u003cITEM_NUMBER / ALL\u003e`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "**Command**: \u003cbr\u003e `listrecipe all` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Displays all recipe number and name from RecipeList. | listrecipe all \u003cbr\u003eHere is the list of Recipe:\u003cbr\u003e\u003cbr\u003eFormat:Recipe Number / Recipe Name\u003cbr\u003e1/Chicken Salad\u003cbr\u003e2/Chicken Stew\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "**Command**: \u003cbr\u003e `listrecipe 1` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Displays all ingredients used in recipe `1`. | listingredient 1\u003cbr\u003eHere is the list of Ingredients in Recipe:\u003cbr\u003e\u003cbr\u003eFormat:Ingredient Name/Ingredient Category/Quantity/Price/Expiry\u003cbr\u003eRecipe Name:Chicken Salad\u003cbr\u003emilo/drink/10/0.0/null\u003cbr\u003e\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "#### 3.4.3. Delete a recipe: `deleterecipe` (Yan Ting)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "You can delete a recipe by using the recipe name or index from the list in Kitchen Helper. The name or index of the recipe can be found by displaying the list of recipes. "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "__Format__: `deleterecipe /n \u003cRECIPE_NAME\u003e` OR `deleterecipe /i \u003cRECIPE_INDEX\u003e`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "* `RECIPE_NAME` : This refers to the name of the recipe. \u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "* `RECIPE_INDEX`: This refers to the index of the recipe which is an identification number tagged to the recipe.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "\u003e You may get the index or name for the recipe that you would like to delete by getting the full list of recipes that you have previously entered into Kitchen Helper. You may refer to the [listrecipe all](#342-list-recipes-listrecipe-jin-xing) command section to understand how to use the command. "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "**Command**: \u003cbr\u003e `deleterecipe /n pasta` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Deletes the recipe with the name of `pasta` from the recipe list.| pasta has been deleted.\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "**Command**: \u003cbr\u003e `deleterecipe /i 2` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Deletes recipe by index. In this case, delete recipe with the `index 2` from the recipe list. | Beef Salad has been deleted.\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.4.4. Search for recipe: `searchrecipe` (Jin Fa)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "You can search for recipes based on a given keyword.  "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The output also returns `Location: Index \u003cNumber\u003e`, which you can make use of the `Number` to view information in the recipe or delete a recipe through an index.  "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " You may refer to [Section 3.4.2. List recipes](#342-list-recipes-listrecipe-jin-xing) and [Section 3.4.3. Delete a recipe](#343-delete-a-recipe-deleterecipe-yan-ting) command section to understand how to use the command.  "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Format:__ `searchrecipe \u003cKEYWORD\u003e`  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `KEYWORD` is the word to search for recipe\u0027s name in Kitchen Helper."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command**: \u003cbr\u003e `searchrecipe Chicken Salad` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Search by recipe\u0027s name. | Here are your matching recipes in your list \u003cbr\u003e 1.Chicken Salad \\[Location: Index 1\\] \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "#### 3.4.5. Cooking a recipe: `cookrecipe` (Hui Zhen and Yan Ting)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Cooks a recipe specified by the user by the recipe’s name."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "__Format:__ `cookrecipe /n \u003cRECIPE_NAME\u003e /p \u003cNUMBER_OF_PAX\u003e`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "* `RECIPE_NAME` is the name of your recipe."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "* `NUMBER_OF_PAX` is the pax count for the specified recipe."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "\u003e Please note that expired ingredients cannot be cooked and will be prompted to clear them."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "\u003e Please note that the ingredients used in the recipe will be matched strictly by their `INGREDIENT_NAME` and `CATEGORY` when cooking a recipe. You may refer to the [addrecipe](#341-adding-a-recipe-addrecipe-hui-zhen)  command section"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003e Please note that if the recipe has been successfully cooked, the quantity of the ingredients associated to the recipe will be deducted. If the final quantity of some of the ingredients is zero after deduction, the respective ingredients will be removed from the ingredient list."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "The `ingredient`s used in the specified recipe will be automatically deducted when there is sufficient non-expired `ingredient`s."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Situation | Example |  Outcome"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "----------|--------|------------------"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Sufficient ingredients for all ingredients required in the specified recipe. | **Command**: \u003cbr\u003e `cookrecipe /n chicken salad /p 2` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Cooks the recipe `Chicken Salad` for 2 people| Kitchen Helper is trying to cook!\u003cbr\u003eCooks the ‘chicken salad’ recipe with a pax 2.\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Insufficient ingredients for all ingredients required in the specified recipe regardless if the `ingredients` have expired or not. | **Command**: \u003cbr\u003e `cookrecipe /n Chicken Salad /p 3`\u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Cooks the recipe `Chicken Salad` for 3 people| Kitchen Helper is trying to cook!\u003cbr\u003eThere are insufficient/missing ingredients!\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Insufficient non-expired ingredients available. | **Command**: \u003cbr\u003e`cookrecipe /n warm milk /p 2`  \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003eCooks the recipe `warm milk` for 2 people | Kitchen Helper is trying to cook!\u003cbr\u003eThere are insufficient/missing ingredients!\u003cbr\u003ePlease check for these expired ingredients: hl milk\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### 3.5. Chore"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "#### 3.5.1. Adding a chore: `addchore` (Isabella)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Adds a chore to the chore list in Kitchen Helper."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "__Format:__ `addchore \u003cTASK_DESCRIPTION\u003e /by \u003cDEADLINE\u003e`  OR `addchore \u003cTASK_DESCRIPTION\u003e /by \u003cdd/MM/yyyy HH:mm\u003e`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "* `TASK_DESCRIPTION` : This refers to the description of the chore to complete. \u003cbr\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "* `DEADLINE`: This refers to the deadline specified by the user in String. \u003cbr\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "* `dd/MM/yyyy HH:mm`: This refers to the deadline as a date object that has to be specified in this exact format."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "\u003e Please note that the deadline has to be specified exactly like the given format for it to be considered a Date object, otherwise it would be considered as a String. The deadline specified as a String has no content or format restrictions. \u003cbr\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "\u003e Please note that the expiry date used in `addchore` given in the `User Guide` may be outdated."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "**Command**: \u003cbr\u003e `addchore buy groceries /by Monday 12pm` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Creates a new chore called `buy groceries` which contains the deadline `Monday 12pm.` | You have added this chore: \u003cbr\u003e [x] buy groceries (by: Monday 12pm) \u003cbr\u003e Now you have 1 chore in the list. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "**Command**: \u003cbr\u003e `addchore buy groceries /by 20/04/2020 12:00` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Creates a new chore called `buy groceries` which contains the deadline `20/04/2020 12:00.` | You have added this chore: \u003cbr\u003e [x] buy groceries (by: 20/04/2020 12:00) \u003cbr\u003e Now you have 2 chores in the list. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d                                                                                                                                                                                          "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                                                                                                                                                                                            "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "#### 3.5.2. List chore: `listchore` (Isabella)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Displays all the items currently in the chore list in Kitchen Helper."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "__Format:__ `listchore`  "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "**Command**: \u003cbr\u003e `listchore` | Here are the chores in your list: \u003cbr\u003e 1. [x] buy groceries (by: Monday 12pm) \u003cbr\u003e 2. [x] buy groceries (by: 20/04/2020 12:00) \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "#### 3.5.3. Delete a chore: `deletechore` (Isabella)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Deletes the chore specified by the index in the chore list in Kitchen Helper. The index of the chore can be found by displaying the list of chores."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "__Format:__ `deletechore \u003cINDEX_TO_DELETE\u003e`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "* `INDEX_TO_DELETE`: This refers to the index of the chore in the chorelist to delete.  "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "**Command**: \u003cbr\u003e `deletechore 1` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Deletes the item specified by `index 1` in the chore list. | You have deleted this chore: \u003cbr\u003e [x] buy groceries (by: Monday 12pm) \u003cbr\u003e Now you have 1 chore in the list. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.5.4. Search for chore: `searchchore` (Jin Fa)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "You can search for chores based on a given keyword.  "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The output also returns `Location: Index \u003cNumber\u003e`, which you can make use of the `Number` to delete a chore or mark a chore as completed.   "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " You may refer to [Section 3.5.3. Delete a chore](#353-delete-a-chore-deletechore-isabella) and [Section 3.5.5 Mark chore as done](#355-mark-chore-as-done-done-isabella) command section to understand how to use the command.  "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Format:__ `searchchore \u003cKEYWORD\u003e`  "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `KEYWORD` is the word to search for chores in Kitchen Helper."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command:** \u003cbr\u003e `searchchore groceries` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Search by chore\u0027s description. | Here are your matching chores in your list \u003cbr\u003e 1.\\[x\\] buy groceries (by: Monday 12pm) \\[Location: Index 1\\] \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command:** \u003cbr\u003e `searchchore Monday` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Search by chore\u0027s description. | Here are your matching chores in your list \u003cbr\u003e 1.\\[x\\] buy groceries (by: Monday 12pm) \\[Location: Index 1\\] \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "#### 3.5.5. Mark chore as done: `done` (Isabella)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Marks the chore specified by the index in the chore list in Kitchen Helper as done. The index of the chore can be found by displaying the list of chores."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "__Format:__ `done \u003cINDEX_TO_CHECK\u003e`  "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "* `INDEX_TO_CHECK`: This refers to the index of the chore in the chorelist to mark as done."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "**Command**: \u003cbr\u003e `done 1` \u003cbr\u003e\u003cbr\u003e **Description**: \u003cbr\u003e Marks the item specified by `index 1` in the chore list as done. | You have completed this chore: \u003cbr\u003e [/] buy groceries (by: 20/04/2020 12:00) \u003cbr\u003e \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### 3.6. Expenditure"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "#### 3.6.1. Display User Expenditure: `displayexpenditure` (Isabella)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Displays the total expenditure and amount used in cooking for the week to help the user gauge future expenditure on ingredients."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* Total expenditure increases whenever the user executes `addingredient` command to simulate purchase of groceries. You may refer to [3.3.1. Adding an ingredient](#331-adding-an-ingredient-addingredient-jin-fa)."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "* Amount used in cooking is the cost of all the ingredients the user manages to use for cooking and represents the amount of expenditure the user benefited from."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cbr\u003eAmount used in cooking increases when user executes `cookrecipe` command or when user responds with `yes` to the corresponding prompt when executing `deleteingredient`. You may refer to [3.4.5. Cooking a recipe](#345-cooking-a-recipe-cookrecipe-hui-zhen-and-yan-ting) and [Section 3.3.3. Delete an ingredient](#333-delete-an-ingredient-deleteingredient-isabella-and-yan-ting). "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "__Format:__ `displayexpenditure`  "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "**Command**: \u003cbr\u003e `displayexpenditure` \u003cbr\u003e| This is the total amount you spent on buying Ingredients so far this week: $140.00  \u003cbr\u003e This is the amount you actually spent for Ingredients used in your cooking this week: $60.00 \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Here is a short summary of the command used in KitchenHelper application.  "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Refer back to [Section 3, \"Features\"](#3-features) for more information on the usage of commands.  "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__General Commands__  "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Feature | Command  "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "------- | -------  "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "help | `help`  "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "exit | `exit`  "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "reset | `reset`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Ingredient Commands__  "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Feature | Command  "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "------- | -------  "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient | `addingredient /n \u003cINGREDIENT_NAME\u003e /c \u003cCATEGORY\u003e /q \u003cQUANTITY\u003e /p \u003cPRICE\u003e /e \u003cEXPIRY\u003e`\u003cbr\u003e e.g. `addingredient /n Beef cubes /c meat /q 3 /p 20 /e 18/03/2022`  "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "listingredient | `listingredient \u003cCATEGORY / ALL\u003e` \u003cbr\u003e e.g. `listingredient all` OR `listingredient meat`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient | `deleteingredient /i \u003cingredient_index\u003e [/q \u003cQUANTITY\u003e]` \u003cbr\u003e e.g. `deleteingredient /i 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "searchingredient | `searchingredient \u003cKEYWORD\u003e` \u003cbr\u003e e.g. `searchingredient beef`  "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Recipe Commands__  "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Feature | Command  "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "------- | -------  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "addrecipe | `addrecipe /n \u003cRECIPE_NAME\u003e /i \u003cINGREDIENT_NAME\u003e:\u003cQUANTITY\u003e:\u003cCATEGORY\u003e[,..]` \u003cbr\u003e e.g. `addrecipe /n Rice Ball /i Rice:3:staple`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "listrecipe | `listrecipe \u003cITEM_NUMBER / ALL\u003e` \u003cbr\u003e e.g. `listrecipe all` OR `listrecipe 1`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "deleterecipe | `deleterecipe /n \u003cRECIPE_NAME\u003e` OR `deleterecipe /i \u003cRECIPE_INDEX\u003e` \u003cbr\u003e e.g. `deleterecipe /n pasta` OR `deleterecipe /i 2`\u003cbr\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "searchrecipe | `searchrecipe \u003cKEYWORD\u003e` \u003cbr\u003e e.g. `searchrecipe Chicken Salad`  "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "cookrecipe | `cookrecipe /n \u003cRECIPE_NAME\u003e /p \u003cNUMBER_OF_PAX\u003e` \u003cbr\u003e e.g. `cookrecipe /n chicken salad /p 2`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Chore Commands__  "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Feature | Command  "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "------- | -------  "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "addchore | `addchore \u003cTASK_DESCRIPTION\u003e /by \u003cDEADLINE\u003e` \u003cbr\u003e e.g. `addchore buy groceries /by Monday 12pm`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "listchore | `listchore` \u003cbr\u003e e.g. `listchore`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "deletechore | `deletechore \u003cINDEX_TO_DELETE\u003e`  \u003cbr\u003e e.g. `deletechore 1`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "searchchore | `searchchore \u003cKEYWORD\u003e` \u003cbr\u003e e.g. `searchchore groceries`  "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "done | `done \u003cINDEX_TO_CHECK\u003e` \u003cbr\u003e e.g. `done 1`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "__Storage Commands__"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Feature | Command  "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "------- | -------  "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "save current state | `save`  "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "__Expenditure Commands__"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Feature | Command  "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "------- | -------  "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "displayexpenditure | `displayexpenditure` "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "[\u0026#8593; Return to Top](#kitchen-helper---user-guide)"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 44,
      "yantingsanity": 56,
      "jinfayap": 184,
      "cheongisabella": 74,
      "-": 20,
      "alwayshuizhen": 80,
      "JensonWee": 14
    }
  },
  {
    "path": "docs/team/alwayshuizhen.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "# Chang Hui Zhen Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Overview "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Contributions"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### Code Contributions "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### Enhancements implemented"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### Documentation"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### Review/mentoring contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Contributions to the Developer Guide "
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 12
    }
  },
  {
    "path": "docs/team/jensonwee.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "#### Overview "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Kitchen Helper is a desktop application mainly targeted for home user who often have trouble tracking their ingredients in their kitchen. This application allows the user to keep track of their ingredient efficiently, regardless of buying new ingredients at a supermarket or cooking a meal at home. Moreover, the user interaction is mainly through command line interface(CLI), that brings convenience to user who prefers fast typing."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "#### Contribution Summary   "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "+ **Role**: Developer"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "+ **Responsibility**: Code Quality"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": " "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "+ **Major enhancement**:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   + **List Ingredient**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      + Functionality: Allows user to view Ingredients added by the user, in an orderly and sorted manner."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      + Justification: This feature improves the product significantly because by having a better view of the situation, users can view their ingredients with ease."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      + Highlights: User will have a better view of the situation of their stockpile and allows better control over their ingredients. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   + **List Recipe**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      + Functionality: With this enhancement, it allows user to list down all recipe names the user created and view the ingredients needed for the recipe. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      + Justification: This feature allows user to have a better view of the recipes added and allows access to the recipe\u0027s ingredient information. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      + Highlights: User can easily find out what ingredient is needed for the recipe added by them.  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   + **Notification Warning for Ingredients**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      + Functionality: With this enhancement, it allows user to know immediately whether their ingredient is expiring in 3 days, expired or low quantity (\u003c 5). "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      + Justification: This feature allows user know which ingredients is at a bad state or which ingredients needs to be restocked. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      + Highlights: User can easily find out which ingredients is expiring, expired or low quantity. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "      "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "+ **Code contribution**: [Functional and Test code](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003djensonwee\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "+ **Other contributions**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   + Code Quality:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     + Recommends and advises how features could be coded and ensures code quality."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "   + Community:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     + Review Pull Request from teammates(with non-trival review comments.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     + Played a part in giving suggestions and providing views, such as Pros and Cons, from different angle for various ideas in the initial planning stage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     + Reported bugs for other teams in the class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     + Perform manual testing, reported bugs, gave suggestions to teammates and corrects misdirections of teammates."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "       "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "#### Contributions to the User Guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "```"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Given below are sections I contributed to the User Guide.   "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "+ [List Ingredient](https://ay1920s2-cs2113t-m16-2.github.io/tp/UserGuide#332-list-ingredient-listingredient) "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "+ [List Recipe](https://ay1920s2-cs2113t-m16-2.github.io/tp/UserGuide#342-list-recipes-listrecipe)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "#### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Given below are sections I contributed to the Developer Guide. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "+ [List all/ specific ingredient(s)](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#412-list-all-specific-ingredients)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "+ [List all/ specific recipe(s)](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#422-list-all-specific-recipes)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "+ [Notification for ingredients warning](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#415-notification-for-ingredients-warning)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "+ [Part of Use cases in Appendix C](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#appendix-c-value-proposition---use-cases)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "+ Instructions for Manual Testing in Appendix F (Example: [1](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#f3-list-ingredient)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ", [2](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#f7-list-recipe))"
      }
    ],
    "authorContributionMap": {
      "JensonWee": 65
    }
  },
  {
    "path": "docs/team/jinfayap.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### Overview "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Kitchen Helper is a desktop application mainly targeted for home user who often have trouble tracking their ingredients in their kitchen. This application allows the user to keep track of their ingredient efficiently, regardless of buying new ingredients at a supermarket or cooking a meal at home. Moreover, the user interaction is mainly through command line interface(CLI), that brings convenience to user who prefers fast typing."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### Contribution Summary   "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ **Role**: Developer"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ **Responsibility**: Deliverables and deadlines"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ **Major enhancement**:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   + **Add Ingredient**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + Functionality: With this enhancement, it allows user to add in ingredients that user already have or newly bought. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + Justification: This feature improves the product significantly because a user first have to take down the ingredients they have, and using the application makes it convenience to look through the list of ingredients in the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + Highlights: This enhancement prevents expired food to be added to the application, therefore increasing food safety for user consumption. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   + **Search Ingredient**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + Functionality: With this enhancement, it allows user to search for ingredients that user already have or newly bought. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + Justification: This feature allows user to search for something very quickly, instead of looking through a whole list of ingredients. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + Highlights: User can easily find common or similar ingredients that is available through a simple search.  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   + **Search Recipe**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + Functionality: With this enhancement, it allows user to search for similar name recipe that user added. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + Justification: This feature allows user to search for similar recipe name so that they can view and compare the ingredients used. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + Highlights: User can easily find similar recipes\u0027 name through a simple search. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   + **Search Chore**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + Functionality: With this enhancement, it allows user to search for chore that user added. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + Justification: This feature allows user to search for chore that requires their attention."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + Highlights: User can easily find unfinished chores through a simple search. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ **Minor enhancement**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   + **View Help**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      + This feature allows user to view all the available commands in Kitchen Helper and also the description of the commands. This feature can be easily be used by typing `help` in the command line."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ **Code contribution**: [Functional and Test code](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003djinfayap\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ **Other contributions**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   + Project management:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     + Ensure that the team members are always aware of weekly deadlines and deliverables."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   + Documentation:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     + Created use cases and updated them into the Developer Guide. (Pull Request: [#145](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/145))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     + Did the layout for User Guide (Pull Request: [#91](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/91), [#104](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/104))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   + Community:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     + Review Pull Request from teammates(with non-trival review comments.) (Pull Request: [#131](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/131).)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     + Reported bugs for other teams in the class (example: [1](https://github.com/jinfayap/ped/issues/7), [2](https://github.com/jinfayap/ped/issues/8), [3](https://github.com/jinfayap/ped/issues/5))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     + Perform manual testing, reported bugs and gave suggestions to teammates."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "       "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Given below are sections I contributed to the User Guide.   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ [Adding an ingredient](https://ay1920s2-cs2113t-m16-2.github.io/tp/UserGuide#331-adding-an-ingredient-addingredient-jin-fa) "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ [Search for ingredient](https://ay1920s2-cs2113t-m16-2.github.io/tp/UserGuide#334-search-for-ingredient-searchingredient-jin-fa)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ [Search for recipe](https://ay1920s2-cs2113t-m16-2.github.io/tp/UserGuide#344-search-for-recipe-searchrecipe-jin-fa)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ [Search for chore](https://ay1920s2-cs2113t-m16-2.github.io/tp/UserGuide#354-search-for-chore-searchchore-jin-fa)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Given below are sections I contributed to the Developer Guide. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "They showcase my ability to write technical documentation and the technical depth of my contributions"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "to the project."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ [Addition of ingredient](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#411-addition-of-ingredient)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ [Search for ingredients based on keyword(s)](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#414-search-for-ingredients-based-on-keywords)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ [Search for recipe based on keyword(s)](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#425-search-for-recipe-based-on-keywords)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ [Search for chore based on keyword(s)](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#434-search-for-chore-based-on-keywords)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ [Part of Use cases in Appendix C](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#appendix-c-value-proposition---use-cases)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "+ Instructions for Manual Testing in Appendix F (Example: [1](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#f2-add-an-ingredient)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ", [2](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#f5-search-for-ingredient)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ", [3](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#f10-search-for-recipe)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ", [4](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide#f14-search-for-chore))"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 84
    }
  },
  {
    "path": "docs/team/yantingsanity.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "# Lim Yan Ting Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "### Overview - Kitchen Helper"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Kitchen Helper is a command line interface (CLI) application that is mainly targeted for household users who have difficulty in remembering what they have in their kitchen. This application aids them in the tracking of ingredients that are currently in their kitchen more efficiently."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "### Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Responsibility: Issue Tracker"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "#### Enhancements implemented"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Deletion of ingredients and recipes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + What it does: It allows the user to delete any ingredient or recipe with regards to the list of ingredients or recipes in Kitchen Helper respectively. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Justification: This feature improves the product slightly because a user may make a mistake and input the wrong parameters for an ingredient or a recipe. With this feature, the user will be able to delete this wrongly keyed ingredient or recipe. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Highlights: This enhancement was done by deleting the ingredient based on their index so that the users can delete a specific ingredient that they want. However, for deletion of recipe, there is an additional enhancement of deletion by name as the recipe names are unique so the users can delete a specific recipe by deleting through the names."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Deduction of quantity of ingredients "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + What it does: It allows the user to reduce the quantity of an ingredient."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Justification: This feature improves the product slightly because a user may just want to utilize a few quantities of the ingredient without cooking the recipe. Example, if a user wants to just eat an apple, the user can use this feature to deduct the quantity of apple by 1."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Highlights: This enhancement deletes the ingredient automatically if the final quantity after the deduction is zero for the ingredient. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Added the \u003cb\u003ededuction of ingredients from list of ingredients\u003c/b\u003e after a user has cooked a recipe"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + What it does: It automatically deducts the ingredients found in the recipe that the user has specified to cook if there are enough and non-expiring ingredients in the list of ingredients. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Justification: This feature improves the product slightly because a user does not have to manually deduct the quantity of ingredients which increases convenience for the users in managing their ingredients’ inventory. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Highlights: Similar to \u003cb\u003eDeduction of quantity of ingredients\u003c/b\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "#### Code Contributions "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The link below showed my code contributions to Kitchen Helper:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "[Functional and Testing Code](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dyantingsanity\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dyantingsanity\u0026tabRepo\u003dAY1920S2-CS2113T-M16-2%2Ftp%5Bmaster%5D)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "#### Other Contributions "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Project Management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Managed the Issue Tracker and Milestones by creating issues to track the members\u0027 progress for Kitchen Helper"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Documentation:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Added the architecture diagram and use cases of above implementation in Developer Guide"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Added the documentation for DeleteIngredientCommand, DeleteRecipeCommand and CookRecipeCommand for both User Guide and Developer Guide "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Added the introduction and scope in Developer Guide"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Community"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + PR reviewed (with non-trivial review comments):  [#109](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/109), [#152](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/152), [#240](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/240), [#242](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/242)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Reported bugs and suggestions for other teams in class (examples: [#1](https://github.com/yantingsanity/ped/issues/2), [#2](https://github.com/yantingsanity/ped/issues/6), [#3](https://github.com/yantingsanity/ped/issues/4))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    + Did some testing and found bugs in teammates\u0027 codes "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "#### Documentation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003e Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ [Delete Ingredient](https://ay1920s2-cs2113t-m16-2.github.io/tp/UserGuide.html#333-delete-an-ingredient-deleteingredient-isabella-and-yan-ting)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ [Delete Recipe](https://ay1920s2-cs2113t-m16-2.github.io/tp/UserGuide.html#343-delete-a-recipe-deleterecipe-yan-ting)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ [Cook Recipe](https://ay1920s2-cs2113t-m16-2.github.io/tp/UserGuide.html#345-cooking-a-recipe-cookrecipe-hui-zhen-and-yan-ting) "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "### Contributions to the Developer Guide "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003e Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ [Architecture](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide.html#31-architecture)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ [Delete Ingredient](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide.html#413-delete-specific-ingredientss)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ [Delete Recipe](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide.html#424-delete-a-specific-recipe)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ [Cook Recipe](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide.html#423-cooking-of-recipe)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "+ Instructions for Manual Testing: [#Delete Ingredient](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide.html#f4-delete-an-ingredient), [#Delete Recipe](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide.html#f9-delete-a-recipe)"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 57
    }
  },
  {
    "path": "docs/team/zi-hui.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "#### Overview "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Kitchen Helper is a Command Line Application with the main purpose of keeping track of kitchen inventory and related chores. This application allows the user to manage their kitchen inventory through addition, deletion, viewing and calculating expenditures of ingredients. It also prompts the user by notifications to remind them of expiring or/and low quantities ingredients. The user can then make use of the chore task list feature to remind and keep track of upcoming tasks to perform.  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "#### Contribution Summary   "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "+ **Responsibility**: Testing"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "+ **Major enhancement**:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   + **Storage and Load Options**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "      + Functionality: Allows users to not just be able to save and load their data at the start of application but also saving and loading from backup files of their data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "      + Justification: This feature improves the product significantly because it serves the primary  function of saving and loading user data. This improves convenience as it reduces need for manual inputs. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "      + Highlights: This enhancement allows a user to go back to an older version of their data by using the backup feature to undo any mistakes made etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "+ **Minor enhancement**: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   + **Save Command**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "      + Functionality: With this enhancement, it allows user to access and update their backup files at any point of their session. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "      + Justification: This feature allows user to decide exactly when they would like to store the current state of the program. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "+ **Code contribution**: [Functional and Test code, Docs and others](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dzi-hui\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "+ **Other contributions**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   + Project management:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     + Ensures the testing of the project is done properly and on time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   + Enhancement to existing features:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     + Edited the storage Ui to make features more user friendly (Pull request: [#254](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/254/files).)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     + Wrote additional tests for existing storage features to attempt to increase coverage (Pull request: [#62](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/62).)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   + Documentation:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     + Edited the indexing of contents and fixed general typos in User Guide to improve readability (Pull requests: [#241](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/241), [#169](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/169).)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     + Contributed a portion of the content list of Developer Guide (Pull request: [#135](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/135).)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "   + Community:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     + Reviewed pull requests from teammates (with non-trival review comments.) (Pull request: [#44](https://github.com/AY1920S2-CS2113T-M16-2/tp/pull/44).)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     + Reported bugs for other teams such as T13-3 (Example comments: [#69](https://github.com/AY1920S2-CS2113T-T13-3/tp/pull/69), [#68](https://github.com/AY1920S2-CS2113T-T13-3/tp/pull/68), [#74](https://github.com/AY1920S2-CS2113T-T13-3/tp/pull/74), [#59](https://github.com/AY1920S2-CS2113T-T13-3/tp/pull/59))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     + Performed manual testing to reported bugs in general when reviewing pull requests or testing for bugs etc."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "#### Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Given below are the sections I contributed to the User Guide.   "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "+ [3.2.1. Select Load Files](https://github.com/zi-hui/tp/blob/master/docs/UserGuide.md#321-select-load-files-zi-hui)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "+ [3.2.2. Save Current State](https://github.com/zi-hui/tp/blob/master/docs/UserGuide.md#322-save-current-state-save-zi-hui)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "+ [4. Command Summary](https://github.com/zi-hui/tp/blob/master/docs/UserGuide.md#4-command-summary)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "#### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Given below are sections I contributed to the Developer Guide. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "+ [3.5. Storage Component](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide.html#35-storage-component)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "+ [4.4.1. Select files to load from and save to](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide.html#441-select-files-to-load-from-and-save-to)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "+ [4.4.2. Save current state](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide.html#442-save-current-state)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "+ Appendix F: Instructions for Manual Testing: [F.15. Saving data](https://ay1920s2-cs2113t-m16-2.github.io/tp/DeveloperGuide.html#f15-saving-data)"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 55
    }
  },
  {
    "path": "outputChore.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "[/] buy groceries (by: Tuesday 12pm)"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 1
    }
  },
  {
    "path": "outputExpenditure.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Expenditure: $1818.00,Amount used in cooking: $242.40,Fri 10/04/2020 21:28:40"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 1
    }
  },
  {
    "path": "outputIngredient.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "/n Beef /c Meat /q 30 /p 20.2 /e 20/02/2022"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 1
    }
  },
  {
    "path": "outputRecipe.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/n Chicken Salad [/n milo /c drink /q 10 /p 0.0 /e null] 1"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 1
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/KitchenHelper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.notification.ChoreNotification;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.notification.IngredientNotification;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Expenditure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class KitchenHelper {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Retrieves private ui from main class so other classes can use"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * to write to standard output or read from standard input without"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * triggering errors during runtest."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return private ui from this main class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private Ui getUi() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        String userChoice \u003d ui.getUserChoice();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ui.validUserChoice(userChoice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        createNewFiles();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (userChoice.trim().equals(\"1\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            storage \u003d new Storage(\"outputIngredient.txt\", \"outputRecipe.txt\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    \"outputChore.txt\", \"outputExpenditure.txt\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            loadFromStorage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else if (userChoice.trim().equals(\"2\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            storage \u003d new Storage(\"outputIngredientCopy.txt\", \"outputRecipeCopy.txt\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    \"outputChoreCopy.txt\", \"outputExpenditureCopy.txt\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            loadFromStorage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Loads data from storage files into respective ingredient, recipe and chore lists as well as weekly expenditure."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private void loadFromStorage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList \u003d new ArrayList\u003c\u003e(storage.getIngredientData());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeList \u003d new ArrayList\u003c\u003e(storage.getRecipeData());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            choreList \u003d new ArrayList\u003c\u003e(storage.getChoreData());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            storage.loadExpenditureData();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Expenditure.getInstance().setUi(getUi());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (FileNotFoundException err) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Expenditure.getInstance().loadExpenditureVariables(0, 0, null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Expenditure.getInstance().setUi(getUi());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Create storage output files if they do not exist."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private void createNewFiles() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File fileChore \u003d new File(\"outputChore.txt\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File fileIngredient \u003d new File(\"outputIngredient.txt\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File fileRecipe \u003d new File(\"outputRecipe.txt\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        File fileExpenditure \u003d new File(\"outputExpenditure.txt\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File fileChoreCopy \u003d new File(\"outputChoreCopy.txt\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File fileIngredientCopy \u003d new File(\"outputIngredientCopy.txt\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File fileRecipeCopy \u003d new File(\"outputRecipeCopy.txt\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File fileExpenditureCopy \u003d new File(\"outputExpenditureCopy.txt\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (!fileChore.exists()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fileChore.createNewFile();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (!fileIngredient.exists()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fileIngredient.createNewFile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (!fileRecipe.exists()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fileRecipe.createNewFile();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (!fileExpenditure.exists()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                fileExpenditure.createNewFile();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (!fileChore.exists()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fileChoreCopy.createNewFile();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (!fileIngredient.exists()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fileIngredientCopy.createNewFile();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (!fileRecipe.exists()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fileRecipeCopy.createNewFile();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (!fileExpenditure.exists()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fileExpenditureCopy.createNewFile();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private void run() throws KitchenHelperException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setUpLogger();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        showNotifications();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private void setUpLogger() throws KitchenHelperException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Output to console only when a serious failure has caused normal"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        execution of the program"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ConsoleHandler consoleOutput \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        consoleOutput.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        kitchenLogs.addHandler(consoleOutput);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Logs all information above the Level.Fine to a log file"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            FileHandler logFile \u003d new FileHandler(\"KitchenLogs.log\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            logFile.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            logFile.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.addHandler(logFile);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new KitchenHelperException(\"Error in Logging\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String userCommandInput \u003d \"\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                userCommandInput \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                command \u003d new Parser().parseUserCommand(userCommandInput);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                CommandResult result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                ui.showResultToUser(result);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                ui.printDivider();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                ui.printInvalidCmd();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                ui.print(e.getMessage());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                ui.printDivider();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } while (!userCommandInput.equalsIgnoreCase(ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private void showNotifications() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String choreNotification;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        choreNotification \u003d new ChoreNotification().getNotifications(choreList);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        System.out.println(choreNotification);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String ingredientNotification;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ingredientNotification \u003d new IngredientNotification().getNotifications(ingredientList);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        System.out.println(ingredientNotification);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static void main(String[] args) throws KitchenHelperException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new KitchenHelper().run();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Executes the command and return result."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param command the command being executed."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the return message of the command."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult executeCommand(Command command) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            CommandResult result \u003d command.execute(ingredientList, recipeList, choreList);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 78,
      "yantingsanity": 8,
      "jinfayap": 57,
      "cheongisabella": 32,
      "alwayshuizhen": 38,
      "JensonWee": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/AddChoreCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Adds a chore to the chore list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class AddChoreCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addchore\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have added this chore:\\n%s\\nNow you have %s chore%s in the list.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Adds a chore to the chore list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"TASK /by DEADLINE OR TASK /by \u003cdd/MM/yyyy HH:mm\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: addchore buy groceries /by Tuesday 12pm \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + \"OR addchore buy groceries /by 14/04/2020 12:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private String dateStr \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private Date date \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Constructor for AddChoreCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param description the description of the chore."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param dateStr the deadline in String."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public AddChoreCommand(String description, String dateStr) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.dateStr \u003d dateStr;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Constructor for AddChoreCommand."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param description the description of the chore."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param date the deadline as Java Date object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public AddChoreCommand(String description, Date date) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Gets the String deadline of this chore or empty String if Date deadline."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the deadline in String or empty String."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String getDateStr() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (dateStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return dateStr;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Adds a chore to the chore list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList the ArrayList of chores."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return success message of addition."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String addChore(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Chore newChore;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (dateStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            newChore \u003d new Chore(description, date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            newChore \u003d new Chore(description, dateStr);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        choreList.add(newChore);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Storage.saveChoreData(choreList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return String.format(MESSAGE_SUCCESS, newChore, choreList.size(), newChore.checkSingular(choreList));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the success message of adding chore to the chore list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser \u003d addChore(choreList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 2,
      "jinfayap": 4,
      "cheongisabella": 93
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/AddIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static seedu.kitchenhelper.common.Messages.NEGATIVE_ONE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Adds the ingredient to the inventory list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class AddIngredientCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    // Regex for checking the format of add ingredient"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String REGEX_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            \"/n( )+[a-zA-Z]+( [a-zA-Z]+)*( )+/c( )+[a-zA-Z]+( )+/q( )+[0-9]+( )+/p( )+\\\\d+(\\\\.\\\\d{1,2})?( )\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            + \"+/e( )+\\\\d{2}/\\\\d{2}/\\\\d{4}( )*\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addingredient\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Adds a ingredient to the ingredient list.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"/n \u003cINGREDIENT\u003e /c \u003cCATEGORY\u003e /q \u003cQUANTITY\u003e /p \u003cPRICE\u003e /e \u003cEXPIRY\u003e\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: addingredient /n Beef /c Meat /q 1 /p 13.5 /e 13/02/2022\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String ingredientName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String expiry;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Add Inventory Command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientName name of the ingredient."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param categoryName   category of the ingredient."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param quantity       number of serving of ingredient."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param price          cost of the ingredient."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiry         ingredient expiry date."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public AddIngredientCommand(String ingredientName, String categoryName, int quantity, double price, String expiry) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.expiry \u003d expiry;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Adds the ingredient to the ArrayList according to the category type."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param category       category of the ingredient."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList the ArrayList to store ingredients."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void addToCategory(String category, ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        switch (category.toLowerCase()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Meat.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Meat(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Vegetable.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Vegetable(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Drink.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Drink(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Fruit.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Fruit(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Staple.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Staple(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Dairy.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Dairy(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Miscellaneous.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            this.categoryName \u003d Miscellaneous.INGREDIENT_WORD;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Miscellaneous(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Sorts ingredientList arraylist by Category name, then, Ingredient name, then, Expiry Date."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void sortIngredientList(ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Collections.sort(ingredientList,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                Comparator.comparing(Ingredient::getIngredientName).thenComparing(Ingredient::getExpiryDate));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Check if the newly added ingredient has the same name (case ignored), same price and expiry date."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param i              ingredient object."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientName ingredient name."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param price          ingredient price."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiryDate     ingredient expiry date."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return true if has same name, price and expiry date, else return false."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public boolean hasSameNameAndPriceAndExpiry(Object i, String ingredientName, double price, String expiryDate) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        boolean sameName \u003d ((Ingredient) i).getIngredientName().equalsIgnoreCase(ingredientName);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        boolean samePrice \u003d ((Ingredient) i).getPrice() \u003d\u003d price;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        boolean sameExpiry \u003d ((Ingredient) i).getExpiryDate().equals(expiryDate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return sameName \u0026\u0026 samePrice \u0026\u0026 sameExpiry;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Get the index from the ingredientList if has matching name, price and expiry date."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the index if found, else return NEGATIVE_ONE."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public int mergeTogetherIndex(ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        int mergeIndex \u003d 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (Ingredient i : ingredientList) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (hasSameNameAndPriceAndExpiry(i, ingredientName, price, expiry)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                i.setQuantity(i.getQuantity() + quantity);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                return mergeIndex;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            mergeIndex++;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return NEGATIVE_ONE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the success message of adding inventory."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        int index \u003d mergeTogetherIndex(ingredientList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        if (index !\u003d NEGATIVE_ONE) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            Ingredient i \u003d ingredientList.get(index);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            int currentQuantity \u003d i.getQuantity();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            sortIngredientList(ingredientList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            Storage.saveIngredientData(ingredientList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    String.format(Messages.MESSAGE_COMBINE_INGREDIENT, i.getIngredientName(), currentQuantity,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                            currentQuantity - quantity));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            addToCategory(categoryName, ingredientList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            sortIngredientList(ingredientList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            Storage.saveIngredientData(ingredientList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            kitchenLogs.info(Messages.MESSAGE_ADD_INGREDIENT_LOG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    String.format(Messages.MESSAGE_ADD_INGREDIENT_SUCCESS, ingredientName, categoryName, quantity,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                            price, expiry));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 1,
      "jinfayap": 164,
      "alwayshuizhen": 1,
      "JensonWee": 8
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/AddRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Adds recipe to the list of recipes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class AddRecipeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addrecipe\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Adds a recipe to the recipe list.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_PARAMETER"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \u003d \"/n RECIPENAME /i INGRNAME:QUANTITY:CATEGORY \u003coptional: , INGRNAME:QUANTITY:CATEGORY\u003e\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_EXAMPLE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \u003d \"Example: addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final String logAddRecipe \u003d \"A new recipe has been added\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public HashMap\u003cString[], Integer\u003e parsedIngr;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Set the attributes of the Command class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param rawString     full user input string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrAndQty    a hashmap of ingredient with [ingredientName, ingredientCategory] as key"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *                      and ingredientQuantity as value."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setAttributesOfCmd(String rawString, HashMap\u003cString[], Integer\u003e ingrAndQty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setObjectVariables(rawString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setAction();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.parsedIngr \u003d ingrAndQty;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Sets the string without the keyword to be the values of the reicpe object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param rawString string that has removed the keyword."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setObjectVariables(String rawString) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        objectVariables \u003d rawString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Sets the object\u0027s action to add recipe."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setAction() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        actionType \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * The main utility function to add recipe."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param attributes     list of ingredients that have not been parsed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the success message of adding inventory."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String addRecipe(String attributes, ArrayList\u003cRecipe\u003e recipeList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Recipe freshRecipe \u003d new Recipe();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        freshRecipe.setRecipeName(attributes);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        if (checkIfRecipeExist(freshRecipe.getRecipeName(), recipeList)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new KitchenHelperException(\"There is an existing recipe!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        freshRecipe.addIngredientsToRecipe(parsedIngr);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeList.add(freshRecipe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Storage.saveRecipeData(recipeList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assert freshRecipe.recipeName.length() \u003e 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assert recipeList.size() \u003e 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        kitchenLogs.info(logAddRecipe);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return freshRecipe.recipeName + \" Recipe has been created with \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                + freshRecipe.recipeIngrQty + \" ingredients inside.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Checks for existing recipe with the same name."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param newRecipeName The name of the new recipe."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList    The list of recipes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return true when a recipe with the same name is found,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *          false otherwise."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Boolean checkIfRecipeExist(String newRecipeName, ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        boolean isExist \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (recipe.getRecipeName().equalsIgnoreCase(newRecipeName)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                isExist \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return isExist;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the success message of adding recipe."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String message \u003d addRecipe(this.objectVariables, recipeList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new CommandResult(\"There is an existing recipe with the same name!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 1,
      "jinfayap": 13,
      "alwayshuizhen": 107
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Abstract class to represent user\u0027s command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String actionType; //add, delete, list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String objectType; //ingredient, recipe, chore"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String objectVariables;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String getObjectVariables() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return objectVariables;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Set the Object Variables for Command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param attribute the values for the variables, can be recipe or ingredient names"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void setObjectVariables(String attribute) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        objectVariables \u003d attribute;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the Action Type for the Command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setActionType(String command) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        actionType \u003d command;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the Object Type for the Command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param type the name of the object type"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setObjectType(String type) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        objectType \u003d type;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Runs the command given by user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return cmdResult response given to user after successful execution."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CommandResult cmdResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return cmdResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 3,
      "yantingsanity": 18,
      "jinfayap": 19,
      "alwayshuizhen": 26,
      "JensonWee": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Returns message outcomes of commands upon execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Constructor for CommandResult."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param feedbackToUser text to be shown to user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 11,
      "cheongisabella": 8
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/CookRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Cooks a recipe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class CookRecipeCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cookrecipe\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Cooks a recipe from the recipe list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_PARAMETER"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \u003d \"/n RECIPENAME /p NUMOFPAX\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_EXAMPLE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \u003d \"Example: cookrecipe /n Chicken Salad /p 2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FAILURE_RECIPE_NOT_EXISTS \u003d \"The given recipe name does not exist!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String COMMAND_FAILURE_INSUFFICIENT_INGREDIENTS \u003d \"There are insufficient/\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                                            + \"missing ingredients!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String KITCHEN_HELPER_COOK \u003d \"Kitchen Helper is trying to cook!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_SUCCESS \u003d \"%s was cooked with a pax of %d\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final String logcookRecipe \u003d \"User attempted to cook with expired ingredient\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static ArrayList\u003cString\u003e expiredIngrNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String recipeName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public int pax;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Cooks a recipe as specified by user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList    the list of ingredients available to use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList        the list of recipe that is known."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the message after a successful cook."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws KitchenHelperException if there is no recipe that is wanted by user/ insufficient ingredients."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String cookRecipe(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        expiredIngrNames.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        // checks if the specified recipe given by user exists"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int indexOfRecipe \u003d checkIfRecipeExist(recipeList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (indexOfRecipe \u003e recipeList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return COMMAND_FAILURE_RECIPE_NOT_EXISTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        System.out.println(KITCHEN_HELPER_COOK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Recipe recipeToBeCooked \u003d recipeList.get(indexOfRecipe - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Boolean sufficientIngr \u003d checkForSufficientIngredient(ingredientList, recipeToBeCooked);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Boolean suffButLessExpiredIngr \u003d checkNotExpiredIngredientQty(ingredientList, recipeToBeCooked);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        if (sufficientIngr \u0026\u0026 suffButLessExpiredIngr) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            deductIngredients(ingredientList, recipeToBeCooked);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveIngredientData(ingredientList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return String.format(COMMAND_SUCCESS, recipeName, pax);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } else if ((sufficientIngr \u0026\u0026 !suffButLessExpiredIngr)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                || (!sufficientIngr \u0026\u0026 !suffButLessExpiredIngr \u0026\u0026 expiredIngrNames.size() !\u003d 0)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String expiredList \u003d craftExpiredList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (expiredList.length() \u003e 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                expiredList \u003d expiredList.substring(0, expiredList.length() - 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return COMMAND_FAILURE_INSUFFICIENT_INGREDIENTS"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    + \"\\nPlease check for these expired ingredients: \" + expiredList.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return COMMAND_FAILURE_INSUFFICIENT_INGREDIENTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Form the string of expired ingredients."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return string of expired ingredients."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String craftExpiredList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String expiredList \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (String item : expiredIngrNames) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            expiredList \u003d expiredList + item + \", \";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return expiredList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Check if the current ingredient is expired. If not, then deduct from the ingredient."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientToDeduct the ingredient where quantity is to be deducted from"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param totalCookedQty the remaining quantity of ingredients needed to cook"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return the remaining quantity of ingredients needed to cook"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public int checkIfIngredientExpired(Ingredient ingredientToDeduct, int totalCookedQty,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                        ArrayList\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        Date today \u003d new Date();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int quantity \u003d ingredientToDeduct.getQuantity();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            Date expiredDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(ingredientToDeduct.getExpiryDate());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (today.before(expiredDate)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                if (quantity \u003c\u003d totalCookedQty) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    totalCookedQty -\u003d quantity;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    Expenditure.getInstance().addAmountForCooking(ingredientToDeduct, quantity);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    ingredientToDeduct.setQuantity(0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    Expenditure.getInstance().addAmountForCooking(ingredientToDeduct, totalCookedQty);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    ingredientToDeduct.setQuantity(quantity - totalCookedQty);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    totalCookedQty \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (ingredientToDeduct.getQuantity() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                ingredientsList.remove(ingredientToDeduct);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            kitchenLogs.info(logcookRecipe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return totalCookedQty;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Deducts ingredients from list of ingredients sorted on expiry."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList    the list of ingredients available."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeToBeCooked  the recipe that the user want to cook."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void deductIngredients(ArrayList\u003cIngredient\u003e ingredientList, Recipe recipeToBeCooked) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Ingredient ingredient : recipeToBeCooked.getRecipeItem()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String ingredientName \u003d ingredient.getIngredientName();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            ArrayList\u003cIngredient\u003e listOfSameName \u003d getIngredientsWithSameName(ingredientList, ingredientName);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            int totalCookedQty \u003d pax * ingredient.getQuantity();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            for (Ingredient ingredientToDeduct : listOfSameName) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                if (totalCookedQty \u003d\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    totalCookedQty \u003d checkIfIngredientExpired(ingredientToDeduct, totalCookedQty, ingredientList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Get a list of ingredients that has the same name as the specified ingredient."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientList    the list of ingredients available."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientName  the ingredient to check for its occurrence in the ingredientlist"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return a list of ingredients with the same name as ingredientName"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getIngredientsWithSameName(ArrayList\u003cIngredient\u003e ingredientList,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                            String ingredientName) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cIngredient\u003e listOfSameName \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        for (Ingredient ingredient : ingredientList) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (ingredient.getIngredientName().equalsIgnoreCase(ingredientName)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                listOfSameName.add(ingredient);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return listOfSameName;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Checks if the recipe user wants exist."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList    the list of recipes."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the index of the recipe in the list or the size of list if not found."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public int checkIfRecipeExist(ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (recipeName.equalsIgnoreCase(recipe.recipeName)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            counter +\u003d 1;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        counter +\u003d 1;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Checks if there is sufficient ingredient for each ingredient needed in recipe."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList    the list of ingredients available."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeToBeCooked  the recipe that the user want to cook."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return true if there are sufficient ingredients, otherwise false."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Boolean checkForSufficientIngredient(ArrayList\u003cIngredient\u003e ingredientList, Recipe recipeToBeCooked) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Ingredient ingr : recipeToBeCooked.getRecipeItem()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            int totalCookedQty \u003d pax * ingr.getQuantity();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String ingrName \u003d ingr.getIngredientName().toLowerCase();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String ingrCategory \u003d ingr.getCategoryName().toLowerCase();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (getTotalIngredientQty(ingrName, ingrCategory, ingredientList) \u003c totalCookedQty) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Boolean checkNotExpiredIngredientQty(ArrayList\u003cIngredient\u003e ingredientList, Recipe recipeToBeCooked) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Date today \u003d new Date();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Ingredient ingr : recipeToBeCooked.getRecipeItem()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            int totalCookedQty \u003d pax * ingr.getQuantity();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String ingrName \u003d ingr.getIngredientName().toLowerCase();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            ArrayList\u003cIngredient\u003e listOfSameName \u003d getIngredientsWithSameName(ingredientList, ingrName);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            int goodIngrCount \u003d 0;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            for (Ingredient ingrNameInStore : listOfSameName) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    Date date1 \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(ingrNameInStore.getExpiryDate());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    if (today.before(date1)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                        goodIngrCount +\u003d ingrNameInStore.getQuantity();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                        expiredIngrNames.add(ingrName);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    kitchenLogs.info(logcookRecipe);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (goodIngrCount \u003c totalCookedQty) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Retrieves the quantity of each ingredient needed in the recipe."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrName          the name of the required ingredient."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList    the list of ingredients available."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the quantity of ingredients with the same name."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public int getTotalIngredientQty(String ingrName, String ingrCategory, ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int availableIngrCount \u003d 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Ingredient ingr : ingredientList) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (ingr.getIngredientName().equalsIgnoreCase(ingrName)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    \u0026\u0026 ingr.getCategoryName().equalsIgnoreCase(ingrCategory)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                availableIngrCount +\u003d ingr.getQuantity();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return availableIngrCount;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setExpiredIngrNames(ArrayList\u003cString\u003e expiredIngrNames) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.expiredIngrNames \u003d expiredIngrNames;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Sets the Recipe to be cooked."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param name  the name of the recipe to be cooked."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setRecipeName(String name) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.recipeName \u003d name;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Sets the number of pax for the recipe."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param numberofpax   the num of pax to cook."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setRecipePax(int numberofpax) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.pax \u003d numberofpax;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the success message of adding recipe."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String message \u003d cookRecipe(ingredientList, recipeList);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 2,
      "yantingsanity": 71,
      "cheongisabella": 3,
      "alwayshuizhen": 206
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DeleteChoreCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Deletes a chore from the chore list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class DeleteChoreCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletechore\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String DELETE_CHORE_MESSAGE_SUCCESS \u003d \"You have deleted this chore:\\n%s\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + \"Now you have %s chore%s in the list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String INVALID_INDEX \u003d \"Please choose an index in the chore list!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Deletes a chore from the chore list.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"\u003cindex\u003e\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: deletechore 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private int indexToDelete;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Constructor for DeleteChoreCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param indexToDelete the index in the list of the chore to delete."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public DeleteChoreCommand(int indexToDelete) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.indexToDelete \u003d indexToDelete;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Deletes a chore from the chore list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList the list of Chores."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return success message for successful deletion and error message for invalid index specified."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String deleteChore(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (indexToDelete \u003e choreList.size() || indexToDelete \u003c\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                throw new KitchenHelperException(INVALID_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Chore choreToDelete \u003d choreList.get(indexToDelete - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            choreList.remove(choreToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveChoreData(choreList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return String.format(DELETE_CHORE_MESSAGE_SUCCESS, choreToDelete, choreList.size(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    choreToDelete.checkSingular(choreList));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return khe.getMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the success or error message of deleting a chore from the chore list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser \u003d deleteChore(choreList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zi-hui": 2,
      "jinfayap": 3,
      "cheongisabella": 72
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DeleteIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Expenditure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class DeleteIngredientCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteingredient\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Usage: deleteingredient /i INGREDIENTINDEX [/q QUANTITY]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"/i INGREDIENTINDEX [/q QUANTITY]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Deletes an ingredient.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: deleteingredient /i 1 /q 2\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d String.format(\"%s\\n%s\\n%s\", COMMAND_DESC, COMMAND_USAGE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                            COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_SUCCESS \u003d \"%s has been deleted.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FAILURE \u003d \"This ingredient does not exist! Please type in a correct \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                    + \"ingredient index.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_SUCCESS_QUANTITY \u003d \"The quantity of %s has been changed!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_SUCCESS_ZERO_QUANTITY \u003d \"\\nThis ingredient has a quantity of 0 after \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                                + \"deduction, so it has been deleted.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FAILURE_QUANTITY \u003d \"Please enter a valid quantity to delete!\\nCurrently:\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                            + \"\\n%s : %d\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String LOG_INFO \u003d \"An ingredient has been deleted\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private static final String OBJECT_TYPE \u003d \"ingredient\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private Integer quantity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private Integer ingredientIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Constructor for Delete Ingredient Command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientIndex index of the ingredient to be deleted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param quantity number of serving of ingredient to be deleted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public DeleteIngredientCommand(Integer ingredientIndex, Integer quantity) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setActionType(COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectType(OBJECT_TYPE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.ingredientIndex \u003d ingredientIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the ingredient by index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientsList the list of ingredients"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return feedback to user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteIngredientByIndex(ArrayList\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int ingredientIndex \u003d this.ingredientIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (ingredientIndex \u003e -1 \u0026\u0026 ingredientIndex \u003c ingredientsList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert ingredientIndex \u003e\u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            Ingredient ingredientToDelete \u003d ingredientsList.get(ingredientIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            //Delete the entire ingredient when quantity is equals to zero too"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (quantity !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                feedbackToUser \u003d deleteQuantity(ingredientToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            int ingredientQuantity \u003d ingredientToDelete.getQuantity();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (ingredientQuantity \u003d\u003d 0 || quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                feedbackToUser +\u003d deleteIngredient(ingredientToDelete, ingredientsList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            Storage.saveIngredientData(ingredientsList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d COMMAND_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the ingredient from the ingredient list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientToDelete Ingredient to be deleted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientsList the list of ingredients"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return feedback to user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteIngredient(Ingredient ingredientToDelete, ArrayList\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        kitchenLogs.log(Level.INFO, LOG_INFO);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String ingredientName \u003d ingredientToDelete.getIngredientName();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int ingredientQuantity \u003d ingredientToDelete.getQuantity();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (ingredientQuantity \u003d\u003d 0 \u0026\u0026 quantity !\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d String.format(COMMAND_SUCCESS_ZERO_QUANTITY, ingredientName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d String.format(COMMAND_SUCCESS, ingredientName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Expenditure.getInstance().editExpenditure(ingredientToDelete, quantity);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingredientsList.remove(ingredientToDelete);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Deletes the quantity specified by the user from the ingredient."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientToDelete Ingredient to be deleted"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return feedback to user"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteQuantity(Ingredient ingredientToDelete) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String ingredientName \u003d ingredientToDelete.getIngredientName();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int ingredientQuantity \u003d ingredientToDelete.getQuantity();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (quantity \u003e 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            int newQuantity \u003d ingredientQuantity - quantity;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d updateNewQuantity(newQuantity, ingredientToDelete);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d String.format(COMMAND_FAILURE_QUANTITY, ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Update the quantity of an ingredient the ingredient list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param newQuantity  the new quantity for the ingredient"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientToDelete the ingredient to be deleted"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return feedback to user"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String updateNewQuantity(int newQuantity, Ingredient ingredientToDelete) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String ingredientName \u003d ingredientToDelete.getIngredientName();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int ingredientQuantity \u003d ingredientToDelete.getQuantity();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (newQuantity \u003c 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d String.format(COMMAND_FAILURE_QUANTITY, ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert ingredientQuantity !\u003d newQuantity;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Expenditure.getInstance().editExpenditure(ingredientToDelete, quantity);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            ingredientToDelete.setQuantity(newQuantity);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d String.format(COMMAND_SUCCESS_QUANTITY, ingredientName);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert ingredientToDelete.getQuantity() \u003d\u003d newQuantity;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return the execution of the deletion of ingredients or tasks."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                  ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        feedbackToUser \u003d deleteIngredientByIndex(ingredientList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        CommandResult cmdResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return cmdResult;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 1,
      "yantingsanity": 158,
      "jinfayap": 2,
      "cheongisabella": 3
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DeleteRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class DeleteRecipeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleterecipe\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"/n RECIPENAME OR /i RECIPEINDEX\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Usage: deleterecipe /n RECIPENAME OR deleterecipe /i RECIPEINDEX\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Delete the recipe. \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: deleterecipe /n Chicken Salad OR deleterecipe /i 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d String.format(\"%s\\n%s\\n%s\", COMMAND_DESC, COMMAND_USAGE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                    COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_SUCCESS \u003d \"%s has been deleted\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FAILURE \u003d \"This recipe does not exist! Please type in a correct \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                    + \"recipe name/index.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String LOG_INFO \u003d \"A recipe has been deleted\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private static final String OBJECT_TYPE \u003d \"recipe\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private Integer recipeIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Constructor for Delete Recipe Command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeName name of the recipe to be deleted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public DeleteRecipeCommand(String recipeName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setActionType(COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectType(OBJECT_TYPE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectVariables(recipeName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.recipeIndex \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Constructor for Delete Recipe Command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeIndex index of the recipe to be deleted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public DeleteRecipeCommand(Integer recipeIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setActionType(COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectType(OBJECT_TYPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Getting the index of the recipe to be deleted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeName the name of the recipe to be deleted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList the list of recipe"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public int getRecipeIndex(String recipeName, ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (recipe.getRecipeName().equalsIgnoreCase(recipeName)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                int index \u003d recipeList.indexOf(recipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the recipe for the recipe list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList the list of recipe"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteRecipe(ArrayList\u003cRecipe\u003e recipeList, Integer recipeIndex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (recipeIndex \u003e -1 \u0026\u0026 recipeIndex \u003c recipeList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert recipeList.size() \u003e 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            kitchenLogs.log(Level.INFO, LOG_INFO);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String recipeName \u003d recipeList.get(recipeIndex).getRecipeName();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            recipeList.remove(recipeList.get(recipeIndex));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveRecipeData(recipeList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d String.format(COMMAND_SUCCESS, recipeName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d COMMAND_FAILURE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the recipe by index."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList the list of recipe"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteRecipeByIndex(ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d this.recipeIndex;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser \u003d deleteRecipe(recipeList, index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the recipe by name."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList the list of recipe"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteRecipeByName(ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String recipeName \u003d this.objectVariables;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int recipeIndex \u003d getRecipeIndex(recipeName, recipeList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser \u003d deleteRecipe(recipeList, recipeIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return the execution of the deletion of ingredients or tasks."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                  ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (this.recipeIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d deleteRecipeByName(recipeList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d deleteRecipeByIndex(recipeList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        CommandResult cmdResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return cmdResult;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 2,
      "yantingsanity": 133,
      "jinfayap": 2
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DisplayExpenditureCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Expenditure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Displays user expenditure and amount used for cooking."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class DisplayExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"displayexpenditure\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Displays the expenditure in that week.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d \"displayexpenditure *No parameter\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            .format(\"Example: %s\", COMMAND_WORD);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String EXPENDITURE \u003d \"This is the total amount you spent on buying \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + \"Ingredients so far this week: $%.2f\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String AMOUNT_USED_IN_COOKING \u003d \"This is the amount you actually spent \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + \"for Ingredients used in your cooking this week: $%.2f\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return user expenditure and amount used for cooking."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Expenditure expenditureObject \u003d Expenditure.getInstance();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser \u003d String.format(EXPENDITURE, expenditureObject.totalExpenditure) + Ui.LS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                + String.format(AMOUNT_USED_IN_COOKING, expenditureObject.amountUsedInCooking);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 44
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Marks a chore as done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String INVALID_INDEX \u003d \"Please choose an index in the chore list!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String ALREADY_CHECKED \u003d \"This chore has already been marked as done.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have completed this chore:\\n%s\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Marks a chore as done.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"\u003cindex\u003e\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: done 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private int indexToCheck;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Mark item at index as done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param indexToCheck  the index to mark."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public DoneCommand(int indexToCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.indexToCheck \u003d indexToCheck;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Marks specified chore as completed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList the list of chores"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return  the message when task has been marked as done."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String markChoreDone(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (indexToCheck \u003e choreList.size() || indexToCheck \u003c\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                throw new KitchenHelperException(INVALID_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Chore choreToCheck \u003d choreList.get(indexToCheck - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (choreToCheck.isDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                throw new KitchenHelperException(ALREADY_CHECKED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            choreToCheck.markAsDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Storage.saveChoreData(choreList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return String.format(MESSAGE_SUCCESS, choreToCheck);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return khe.getMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the success message of marking item as done."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser \u003d markChoreDone(choreList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 56,
      "alwayshuizhen": 21
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Command when user exits program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Exiting KitchenHelper as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Exits the program.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Example: %s\", COMMAND_WORD);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the success message exiting."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 14,
      "cheongisabella": 3,
      "alwayshuizhen": 16
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Shows the user how to execute different commands supported by this program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String LS_LS \u003d Ui.LS + Ui.LS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String DLS \u003d Ui.DIVIDER + Ui.LS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_LOGO \u003d DLS + \"Ingredient\" + Ui.LS + DLS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String RECIPE_LOGO \u003d DLS + \"Recipe\" + Ui.LS + DLS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String CHORE_LOGO \u003d DLS + \"Chore\" + Ui.LS + DLS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMON_LOGO \u003d DLS + \"Common\" + Ui.LS + DLS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Shows the program command line interface instructions.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String.format(\"Example: %s\", COMMAND_WORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the success message of printing help."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                DLS + COMMON_LOGO"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + HelpCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + ResetCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + SaveStateCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + DisplayExpenditureCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + ExitCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + INGREDIENT_LOGO"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + AddIngredientCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + ListIngredientCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + DeleteIngredientCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + SearchIngredientCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + RECIPE_LOGO"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + AddRecipeCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + ListRecipeCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + CookRecipeCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + DeleteRecipeCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + SearchRecipeCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + CHORE_LOGO"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + AddChoreCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + ListChoreCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + DoneCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + DeleteChoreCommand.MESSAGE_USAGE + LS_LS"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + SearchChoreCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 7,
      "jinfayap": 45,
      "cheongisabella": 3,
      "alwayshuizhen": 8
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/InvalidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Represent an invalid command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_INVALID \u003d \"Invalid Command Format!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private final String invalidFeedback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for InvalidCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public InvalidCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.invalidFeedback \u003d MESSAGE_INVALID;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for InvalidCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param invalidFeedback feedback for invalid command message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public InvalidCommand(String invalidFeedback) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.invalidFeedback \u003d invalidFeedback;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the invalid message."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(invalidFeedback);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 38,
      "alwayshuizhen": 8
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ListChoreCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Displays the list of chores."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class ListChoreCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listchore\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Display all the chores.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d \"listchore *No parameter\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Example: %s\", COMMAND_WORD);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Loops through and displays each chore in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList the ArrayList of chores."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return empty list or the list of chores."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String listChore(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (choreList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d \"Your list of chores is currently empty.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d \"Here are the chores in your list:\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            for (int i \u003d 0; i \u003c choreList.size(); ++i) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                feedbackToUser +\u003d (\"\\n\" + Integer.toString(i + 1) + \". \" + choreList.get(i));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the list of chores."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser \u003d listChore(choreList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 1,
      "jinfayap": 4,
      "cheongisabella": 50,
      "JensonWee": 1
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ListIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "public class ListIngredientCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listingredient\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d \"listingredient \u003call|dairy|drink|fruit|meat|\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        + \"miscellaneous|staple|vegetable\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String[] categoryArray \u003d {\"all\",Dairy.INGREDIENT_WORD,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Drink.INGREDIENT_WORD,Fruit.INGREDIENT_WORD,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Meat.INGREDIENT_WORD,Miscellaneous.INGREDIENT_WORD,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Staple.INGREDIENT_WORD,Vegetable.INGREDIENT_WORD};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Display the ingredients in the list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"\u003call|dairy|drink|fruit|meat|miscellaneous|staple|vegetable\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: listingredient all; listingredient meat\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Constructor for ListIngredient Command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param category   category of the ingredient."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public ListIngredientCommand(String category) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assert category.length() \u003e 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Takes in parameter from user and prints out Ingredient belonging to the category name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param category       category of the ingredient."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param ingredientList the ArrayList that stores ingredients."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return result a string which contains the results"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String listIngredients(String category, ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String result \u003d \"Here is the list of Ingredients in Inventory:\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                + \"Format : [Ingredient Index] Ingredient Name | Quantity | Price | Expiry\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (ingredientList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            result +\u003d \"The Ingredient List is currently empty.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (category.equalsIgnoreCase(\"all\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                for (String categoryName : categoryArray) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    result +\u003d categoryName + \":\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    for (int i \u003d 0; i \u003c ingredientList.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        Ingredient ingredientObj \u003d ingredientList.get(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        if (ingredientObj.getCategoryName().equalsIgnoreCase(categoryName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                            result +\u003d \"[\" + (i + 1) + \"] \" + ingredientObj.getIngredientName() + \" | \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                    + ingredientObj.getQuantity() + \" portion(s) | $\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                    + ingredientObj.getPrice() + \" | Expiry Date : \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                    + ingredientObj.getExpiryDate() + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                result +\u003d category + \":\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                for (int i \u003d 0; i \u003c ingredientList.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    Ingredient ingredientObj \u003d ingredientList.get(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    if (ingredientObj.getCategoryName().equalsIgnoreCase(category)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        result +\u003d \"[\" + (i + 1) + \"] Ingredient Name : \" + ingredientObj.getIngredientName() + \" | \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                + Integer.toString(ingredientObj.getQuantity()) + \" portion(s) | $\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                + Double.toString(ingredientObj.getPrice()) + \" | Expiry Date : \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                + ingredientObj.getExpiryDate() + \"\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    if (i \u003d\u003d ingredientList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        result +\u003d \"The Ingredient List for your category (\" + category + \") is currently empty.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Retrieves the category of ingredient."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return  catgeory of ingredient."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Checks if the user is listing an exisitng catgeory."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return true if the category is defined, false otherwise."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public boolean checkCategoryValid() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        boolean validCategory \u003d false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        for (String catName : categoryArray) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (catName.equalsIgnoreCase(this.category)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                validCategory \u003d true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return validCategory;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the list of ingredients."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String message \u003d listIngredients(this.category, ingredientList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 17,
      "alwayshuizhen": 26,
      "JensonWee": 86
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ListRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "public class ListRecipeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listrecipe\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private String parameter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private int itemNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d \"listrecipe \u003citem number/all\u003e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Display the recipe.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_PARAMETER_LIMIT \u003d \"listingredient \u003citem number/all\u003e [Must be more than 0]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"STRING\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: listrecipe 1 or listrecipe all\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Constructor for ListRecipe Command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param parameter   parameter for ListRecipe. Either \u0027all\u0027 or item number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public ListRecipeCommand(String parameter) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (! parameter.equalsIgnoreCase(\"all\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            this.itemNumber \u003d Integer.parseInt(parameter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            assert itemNumber \u003e 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Returns itemNumber (integer of the string, parameter)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public int getItemNumber() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return this.itemNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Returns boolean of whether the itemNumber provided is valid in recipeArraylist()."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param itemNumber item number of the recipe user wants to view"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param recipeArrayList the ArrayList that stores Recipe."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return true if itemNumber exists in recipeArrayList, else return false."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public boolean checkItemValid(int itemNumber, ArrayList\u003cRecipe\u003e recipeArrayList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        boolean validItem \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (itemNumber \u003c\u003d recipeArrayList.size() \u0026\u0026 itemNumber \u003e 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            validItem \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return validItem;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Takes in parameter from user and prints out Recipe names OR recipe\u0027s ingredient list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * belonging to the recipe item."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param parameter       category of the ingredient."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param recipeArrayList the ArrayList that stores Recipe."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return result a string which contains the results"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String listRecipe(String parameter, ArrayList\u003cRecipe\u003e recipeArrayList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (parameter.equalsIgnoreCase(\"all\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            result \u003d \"\\nHere is the list of Recipe:\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    + \"\\nFormat:[Recipe Number] Recipe Name\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (recipeArrayList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                result +\u003d \"The Recipe List is currently empty.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                for (int i \u003d 0; i \u003c recipeArrayList.size(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    result +\u003d \"[\" + (i + 1) + \"] \" + recipeArrayList.get(i).getRecipeName() + \"\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            int itemNum \u003d this.itemNumber;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            result \u003d \"\\nHere is the list of Ingredients in Recipe:\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    + \"\\nFormat:Ingredient Name | Ingredient Category | Quantity\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (recipeArrayList.size() \u003d\u003d 0 || itemNum \u003e recipeArrayList.size() || itemNum \u003c 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                result +\u003d \"The Recipe List is currently empty.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                Recipe recipeItem \u003d recipeArrayList.get(itemNum - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                result +\u003d \"Recipe Name:\" + recipeItem.getRecipeName() + \"\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                ArrayList\u003cIngredient\u003e ingredientByCategory \u003d recipeItem.getRecipeItem();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                for (int i \u003d 0; i \u003c ingredientByCategory.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    Ingredient ingredientObj \u003d ingredientByCategory.get(i);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    result +\u003d \"Ingredient Name : \" + ingredientObj.getIngredientName()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                            + \" | Category : \" + ingredientObj.getCategoryName()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                            + \" | \" + Integer.toString(ingredientObj.getQuantity()) + \" portion(s) \\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the list of recipes."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String message \u003d listRecipe(this.parameter, recipeList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 4,
      "alwayshuizhen": 8,
      "JensonWee": 103
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ResetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Resets the Data structures of the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class ResetCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reset\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Resets the application.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: reset\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String.format(\"Example: %s\", COMMAND_WORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Resets the arraylist contents that stores user\u0027s input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList    list of ingredients."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList        list of recipes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList         list of chores."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the message to be displayed on the console."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String resetDatabase(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingredientList.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeList.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        choreList.clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Expenditure.getInstance().resetExpenditureData();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Storage.saveIngredientData(ingredientList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Storage.saveRecipeData(recipeList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Storage.saveChoreData(choreList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Storage.saveExpenditureData();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return \"All data has been wiped\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the message to be displayed on the console."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String message \u003d resetDatabase(ingredientList, recipeList, choreList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 5,
      "cheongisabella": 3,
      "alwayshuizhen": 48,
      "JensonWee": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/SaveStateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Saves the program at the current point in time when user calls it manually."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class SaveStateCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have saved the current state in the following files: \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String FILE_PATH_INGREDIENT \u003d \"outputIngredientCopy.txt, \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String FILE_PATH_RECIPE \u003d \"outputRecipeCopy.txt, \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String FILE_PATH_CHORE \u003d \"outputChoreCopy.txt, \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String FILE_PATH_EXPENDITURE \u003d \"outputExpenditureCopy.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Stores the current state of program into backup storage files.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String.format(\"Example: %s\", COMMAND_WORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Save current state of Kitchen Helper into new output files."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return success message of saved state successful."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String saveState() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        chooseSaveOption();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return MESSAGE_SUCCESS + FILE_PATH_INGREDIENT + FILE_PATH_RECIPE +  FILE_PATH_CHORE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                + FILE_PATH_EXPENDITURE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Copy current output files of Kitchen Helper into new output files to save current state."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private void chooseSaveOption() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var sourceIngredient \u003d new File(\"outputIngredient.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var sourceRecipe \u003d new File(\"outputRecipe.txt\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var sourceChore \u003d new File(\"outputChore.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        var sourceExpenditure \u003d new File(\"outputExpenditure.txt\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var destIngredient \u003d new File(\"outputIngredientCopy.txt\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var destRecipe \u003d new File(\"outputRecipeCopy.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var destChore \u003d new File(\"outputChoreCopy.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        var destExpenditure \u003d new File(\"outputExpenditureCopy.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Storage.copyFile(sourceIngredient, destIngredient);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Storage.copyFile(sourceRecipe, destRecipe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Storage.copyFile(sourceChore, destChore);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Storage.copyFile(sourceExpenditure, destExpenditure);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return the success message of saving current state of Kitchen Helper."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        String feedbackToUser \u003d saveState();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 60,
      "jinfayap": 3,
      "cheongisabella": 10
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/SearchChoreCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Search for chore in the chore list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class SearchChoreCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchchore\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Find chores in the chore list using a keyword.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"\u003cKEYWORD\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: searchchore groceries\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String SEARCH_TYPE \u003d \"chores\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Search Chore Command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param keyword the word to search."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public SearchChoreCommand(String keyword) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.keyword \u003d keyword.trim().toLowerCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the list of matching chores."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (this.keyword.equals(Messages.EMPTY_STRING)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                throw new KitchenHelperException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_SEARCH_EMPTY_STRING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(String.format(Messages.MESSAGE_SEARCH_LOG_INFO, SEARCH_TYPE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e findChoreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cInteger\u003e choreIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        int currIndex \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (Chore chore : choreList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (chore.toString().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                findChoreList.add(chore);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                choreIndex.add(currIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            currIndex++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        if (findChoreList.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            kitchenLogs.info(String.format(Messages.MESSAGE_SEARCH_LOG_INFO_EMPTY, SEARCH_TYPE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new CommandResult(String.format(Messages.MESSAGE_SEARCH_EMPTY_LIST, SEARCH_TYPE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        sb.append(String.format(Messages.MESSAGE_SEARCH_NON_EMPTY_LIST, SEARCH_TYPE))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .append(Ui.LS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assert findChoreList.size() \u003e 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(String.format(Messages.MESSAGE_SEARCH_LOG_INFO_FOUND, SEARCH_TYPE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (int i \u003d 0; i \u003c findChoreList.size(); ++i) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (i \u003d\u003d findChoreList.size() - 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                sb.append(String.format(Messages.NUMBER_FORMAT, i + 1))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        .append(findChoreList.get(i).toString())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        .append(String.format(Messages.SEARCH_INDEX, choreIndex.get(i)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            sb.append(String.format(Messages.NUMBER_FORMAT, i + 1))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(findChoreList.get(i).toString())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(String.format(Messages.SEARCH_INDEX, choreIndex.get(i)))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(Ui.LS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 94
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/SearchIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Search for ingredient in the ingredient list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class SearchIngredientCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchingredient\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Find ingredients in the ingredient list using a keyword.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"\u003cKEYWORD\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: searchingredient beef\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String SEARCH_TYPE \u003d \"ingredients\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Search Ingredient Command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param keyword the word to search."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public SearchIngredientCommand(String keyword) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.keyword \u003d keyword.trim().toLowerCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the list of matching ingredient."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (this.keyword.equals(Messages.EMPTY_STRING)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                throw new KitchenHelperException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_SEARCH_EMPTY_STRING);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(String.format(Messages.MESSAGE_SEARCH_LOG_INFO, SEARCH_TYPE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e findIngredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cInteger\u003e ingredientIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        int currIndex \u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (Ingredient ingredient : ingredientList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (ingredient.toFind().toLowerCase().contains(this.keyword)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                findIngredientList.add(ingredient);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                ingredientIndex.add(currIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            currIndex++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        if (findIngredientList.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            kitchenLogs.info(String.format(Messages.MESSAGE_SEARCH_LOG_INFO_EMPTY, SEARCH_TYPE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new CommandResult(String.format(Messages.MESSAGE_SEARCH_EMPTY_LIST, SEARCH_TYPE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        sb.append(String.format(Messages.MESSAGE_SEARCH_NON_EMPTY_LIST, SEARCH_TYPE))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .append(Ui.LS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assert findIngredientList.size() \u003e 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(String.format(Messages.MESSAGE_SEARCH_LOG_INFO_FOUND, SEARCH_TYPE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (int i \u003d 0; i \u003c findIngredientList.size(); ++i) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (i \u003d\u003d findIngredientList.size() - 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                sb.append(String.format(Messages.NUMBER_FORMAT, i + 1))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        .append(findIngredientList.get(i).toFind())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        .append(String.format(Messages.SEARCH_INDEX, ingredientIndex.get(i)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            sb.append(String.format(Messages.NUMBER_FORMAT, i + 1))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(findIngredientList.get(i).toFind())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(String.format(Messages.SEARCH_INDEX, ingredientIndex.get(i)))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(Ui.LS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 92
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/SearchRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Search for recipe name in the recipe list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class SearchRecipeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchrecipe\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Find common recipe name in the recipe list using a keyword.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"\u003cKEYWORD\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: searchrecipe chicken stew\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String SEARCH_TYPE \u003d \"recipes\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Search Recipe Command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param keyword the word to search."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public SearchRecipeCommand(String keyword) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.keyword \u003d keyword.trim().toLowerCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the list of matching recipe."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (this.keyword.equals(Messages.EMPTY_STRING)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                throw new KitchenHelperException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_SEARCH_EMPTY_STRING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(String.format(Messages.MESSAGE_SEARCH_LOG_INFO, SEARCH_TYPE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e findRecipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cInteger\u003e recipeIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        int currIndex \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (recipe.getRecipeName().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                findRecipeList.add(recipe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                recipeIndex.add(currIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            currIndex++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        if (findRecipeList.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            kitchenLogs.info(String.format(Messages.MESSAGE_SEARCH_LOG_INFO_EMPTY, SEARCH_TYPE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new CommandResult(String.format(Messages.MESSAGE_SEARCH_EMPTY_LIST, SEARCH_TYPE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        sb.append(String.format(Messages.MESSAGE_SEARCH_NON_EMPTY_LIST, SEARCH_TYPE))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .append(Ui.LS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assert findRecipeList.size() \u003e 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(String.format(Messages.MESSAGE_SEARCH_LOG_INFO_FOUND, SEARCH_TYPE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (int i \u003d 0; i \u003c findRecipeList.size(); ++i) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (i \u003d\u003d findRecipeList.size() - 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                sb.append(String.format(Messages.NUMBER_FORMAT, i + 1))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        .append(findRecipeList.get(i).getRecipeName())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        .append(String.format(Messages.SEARCH_INDEX, recipeIndex.get(i)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            sb.append(String.format(Messages.NUMBER_FORMAT, i + 1))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(findRecipeList.get(i).getRecipeName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(String.format(Messages.SEARCH_INDEX, recipeIndex.get(i)))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(Ui.LS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 93
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    // Common"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final int NEGATIVE_ONE \u003d -1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    // SearchCommand Common Message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_SEARCH_EMPTY_LIST \u003d \"There are no matching %s in your list.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_SEARCH_NON_EMPTY_LIST \u003d \"Here are your matching %s in your list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_SEARCH_EMPTY_STRING \u003d \"No keyword input detected.\\nEnter a keyword.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String NUMBER_FORMAT \u003d \"%d.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String SEARCH_INDEX \u003d \" [Location: Index %d]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_SEARCH_LOG_INFO \u003d \"Entering execution of finding matching %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_SEARCH_LOG_INFO_EMPTY \u003d \"Has non-matching %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_SEARCH_LOG_INFO_FOUND \u003d \"Found matching %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    // AddIngredient Command Message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_EXPIRED_INGREDIENT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            \"Expired ingredient detected in input.\" + Ui.LS + \"Please enter a non-expired expiry date.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_ZERO_QUANTITY \u003d \"Please enter a quantity more than 0.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_COMBINE_INGREDIENT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            \"Kitchen Helper has updated the quantity of %s to %d from %d\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_ADD_INGREDIENT_LOG \u003d \"A new ingredient has been added\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Invalid date entered.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_ADD_INGREDIENT_SUCCESS \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            \"KitchenHelper has added: Ingredient:%s Category:%s Quantity:%d Price:$%.2f Expiry:%s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    //AddChore Command Message"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String MESSAGE_OVERDUE_CHORE \u003d \"The deadline entered has already past.\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + Ui.LS + \"Please enter a future date.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 36,
      "cheongisabella": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/exception/ExpiredException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class ExpiredException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public ExpiredException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public ExpiredException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 11
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/exception/KitchenHelperException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class KitchenHelperException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Empty constructor for KitchenHelperException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public KitchenHelperException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for KitchenHelperException."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param message contain relevant information on the failed constraints."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public KitchenHelperException(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 24
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/exception/QuantityException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class QuantityException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public QuantityException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 6
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/notification/ChoreNotification.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.notification;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Checks if the chore deadline is approaching and alerts users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class ChoreNotification {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String DEADLINE_NOTIFICATION \u003d \"The deadline for these chores are approaching!\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String EMPTY_NOTIFICATION \u003d \"You have no deadlines upcoming in the next 3 days.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String OVERDUE_NOTIFICATION \u003d \"The deadline for these chores are overdue!\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * For those chores containing deadline specified by date,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * check for expired deadlines or deadlines upcoming in 3 days,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * then notifies the users."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList the list of Chores."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return String containing type of notification for users."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String getNotifications(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String notification \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String upcomingChores \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String overdueChores \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        for (Chore chore:choreList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (hasDateAsDeadline(chore) \u0026\u0026 isApproachingDeadline(chore)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                upcomingChores +\u003d (chore + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (hasDateAsDeadline(chore) \u0026\u0026 isOverdue(chore)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                overdueChores +\u003d (chore + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (!overdueChores.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            notification +\u003d OVERDUE_NOTIFICATION + overdueChores + Ui.LS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (upcomingChores.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            notification +\u003d EMPTY_NOTIFICATION + Ui.DIVIDER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            notification +\u003d DEADLINE_NOTIFICATION + upcomingChores + Ui.DIVIDER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return notification;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Checks if the deadline is approaching in 3 days."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param chore the chore to check."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return True if deadline is in 3 days or less."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean isApproachingDeadline(Chore chore) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date deadline \u003d chore.date;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        calendar.setTime(deadline);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        calendar.add(Calendar.DATE, -3);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date threeDaysBefore \u003d calendar.getTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (threeDaysBefore.before(currentDate) \u0026\u0026 deadline.after(currentDate)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Checks if the chore specifies deadline by date."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param chore the chore to check."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return True if chore deadline is Date object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean hasDateAsDeadline(Chore chore) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (chore.date !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Checks if deadline of chore is overdue."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param chore the chore to check."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return True if deadline over."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean isOverdue(Chore chore) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date deadline \u003d chore.date;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (deadline.before(currentDate)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 104
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/notification/IngredientNotification.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.notification;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class IngredientNotification {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String EXPIRING_NOTIFICATION \u003d \"These ingredients expiring date are approaching!\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String LOWQUANTITY_NOTIFICATION \u003d \"These ingredients are currently low stock [\u003c 5]!\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String EXPIRED_NOTIFICATION \u003d \"These ingredients are expired!\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String EMPTYEXPIRING_NOTIFICATION \u003d \"You have no ingredients that are \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            + \"expiring for the next 3 days.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String EMPTYLOWQUANTITY_NOTIFICATION \u003d \"You have no ingredients that are low in stock [\u003c 5].\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String EMPTYEXPIRED_NOTIFICATION \u003d \"You have no ingredients that are expired.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private String notification \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Returns the result of notification gotten from three methods :"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * checkForExpiringIngr, checkForLowQuantityIngr and checkForExpiredIngr."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param ingredientArrayList the ArrayList that stores ingredients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return result a string which contains the results"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String getNotifications(ArrayList\u003cIngredient\u003e ingredientArrayList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientExpiring \u003d checkForExpiringIngr(ingredientArrayList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientLowQuantity \u003d checkForLowQuantityIngr(ingredientArrayList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientExpired \u003d checkForExpiredIngr(ingredientArrayList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (!ingredientExpiring.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            notification +\u003d EXPIRING_NOTIFICATION;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            addToNotification(ingredientExpiring);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            notification +\u003d Ui.DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            notification +\u003d EMPTYEXPIRING_NOTIFICATION;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            notification +\u003d Ui.DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (!ingredientLowQuantity.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            notification +\u003d LOWQUANTITY_NOTIFICATION;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            addToNotification(ingredientLowQuantity);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            notification +\u003d Ui.DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            notification +\u003d EMPTYLOWQUANTITY_NOTIFICATION + Ui.DIVIDER  + \"\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (!ingredientExpired.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            notification +\u003d EXPIRED_NOTIFICATION;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            addToNotification(ingredientExpired);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            notification +\u003d Ui.DIVIDER  + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            notification +\u003d EMPTYEXPIRED_NOTIFICATION + Ui.DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return notification;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Returns Date format of a String date."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param date1 date"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return date date format of the string date"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public Date stringToDate(String date1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            date \u003d dateFormat.parse(date1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            System.out.println(\"Failed\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Adds data from ingredientArrayList into notification result."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param ingredientArrayList the Arraylist that stores Ingredient"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void addToNotification(ArrayList\u003cIngredient\u003e ingredientArrayList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        for (Ingredient i : ingredientArrayList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            notification +\u003d \"[\" + counter + \"] Ingredient name : \" + i.getIngredientName()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    + \" | \" + i.getQuantity() + \" portion(s) | $\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    + i.getPrice() + \" | Expiry Date : \" + i.getExpiryDate() + \"\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Checks all inggredients in ingredientArrayList and returns a newly formed arraylist which contains"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * ingredients that are expiring in 3 days."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param ingredientArrayList the Arraylist that stores Ingredient"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return ingredientExpiring the Arraylist that contains data of ingredients that is expiring in 3 days."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public ArrayList\u003cIngredient\u003e checkForExpiringIngr(ArrayList\u003cIngredient\u003e ingredientArrayList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientExpiring \u003d new ArrayList\u003cIngredient\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        for (Ingredient i : ingredientArrayList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            Date deadline \u003d stringToDate(i.getExpiryDate());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            calendar.setTime(deadline); //sets the time to deadline"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            calendar.add(Calendar.DATE, -3); //find out what the date 3 days before deadline"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            Date threeDaysBefore \u003d calendar.getTime(); //get this time in Date object form"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (threeDaysBefore.before(currentDate) \u0026\u0026 deadline.after(currentDate)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                ingredientExpiring.add(i);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return ingredientExpiring;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Checks all inggredients in ingredientArrayList and returns a newly formed arraylist which contains"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * ingredients that have low quantity of below 5."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param ingredientArrayList the Arraylist that stores Ingredient"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return ingredientExpiring the Arraylist that contains data of ingredients that is expiring in 3 days."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public ArrayList\u003cIngredient\u003e checkForLowQuantityIngr(ArrayList\u003cIngredient\u003e ingredientArrayList) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientLowQuantity \u003d new ArrayList\u003cIngredient\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        for (Ingredient i : ingredientArrayList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (i.getQuantity() \u003c 5) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                ingredientLowQuantity.add(i);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return ingredientLowQuantity;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Checks all inggredients in ingredientArrayList and returns a newly formed arraylist which contains"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * ingredients that are expired."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param ingredientArrayList the Arraylist that stores Ingredient"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return ingredientExpiring the Arraylist that contains data of ingredients that has expired."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public ArrayList\u003cIngredient\u003e checkForExpiredIngr(ArrayList\u003cIngredient\u003e ingredientArrayList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientExpired \u003d new ArrayList\u003cIngredient\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        for (Ingredient i : ingredientArrayList) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            Date deadline \u003d stringToDate(i.getExpiryDate());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (deadline.before(currentDate)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                ingredientExpired.add(i);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return ingredientExpired;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 4,
      "JensonWee": 152
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/Chore.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Allows users to add tasks to complete by certain deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Chore {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String dateStr \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Date date \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Constructor for Chore object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param description the task description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param dateStr the deadline specified in String."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Chore(String description, String dateStr) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.dateStr \u003d dateStr;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Constructor for Chore object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param description the task description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param date the deadline specified by Date Java class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Chore(String description, Date date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Marks the chore as done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return isDone class variable set to true."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean markAsDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return isDone \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Displays icon that represents whether chore is done or not."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return tick if chore is done and cross otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"/\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"x\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Checks if there is only one chore in the chorelist."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList the list of Chores."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return \"s\" to append to \"chore\" in feedback to user if zero or multiple chores."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String checkSingular(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (choreList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"s\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Converts deadline to a String in specified format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * if it is Java Date object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the deadline of type String."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String convertDateToString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (dateStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").format(date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return dateStr;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Distinguishes the deadline saved in text file between"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * String or Date object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param description the task description."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param dateStr the deadline saved in text file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return a new Chore object with either Date or String deadline."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static Chore createChoreWhenLoadFile(String description, String dateStr) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Date date \u003d dateFormat.parse(dateStr);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new Chore(description, date);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new Chore(description, dateStr);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To compare two Chore objects based on their attributes."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return boolean return false if any of the attributes are not equal to each other."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (o instanceof Chore) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Chore i \u003d (Chore) o;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (dateStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                return this.description.equals(i.description)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                        \u0026\u0026 this.isDone \u003d\u003d isDone"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                        \u0026\u0026 this.date.equals(i.date);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                return this.description.equals(i.description)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                        \u0026\u0026 this.isDone \u003d\u003d isDone"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                        \u0026\u0026 this.dateStr.equals(i.dateStr);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * To format each Chore as a String for display to user."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return String consisting of completion status, task description and deadline."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description + \" (by: \" + convertDateToString() + \")\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 16,
      "jinfayap": 5,
      "cheongisabella": 121
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/Expenditure.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.object;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Calculate user expenditure."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class Expenditure {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String PROMPT_REMOVE_FROM_EXPENDITURE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            \u003d \"The amount of money spent on this ingredient has already been recorded.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + \"Would you like to remove the amount spent on this item from the total expenditure?\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + Ui.DIVIDER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String PROMPT_ADD_TO_AMOUNT_USED"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            \u003d \"Would you like to add the amount spent on this item \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + \"to the amount used for cooking or consumption?\\n\" + Ui.DIVIDER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String REMOVAL_SUCCESS \u003d \"Ok! $%.2f is deducted from total expenditure.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String INCREASE_AMOUNT_USED \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            \"Ok! $%.2f is added to amount used in cooking or consumption.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String NO_CHANGE \u003d \"Ok! There are no changes to expenditure.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public double totalExpenditure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public double amountUsedInCooking;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Date lastSavedDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private static Expenditure onlyInstance \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Only one instance of Expenditure class can be instantiated."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private Expenditure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Import private ui from main KitchenHelper class so can prompt user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * to edit expenditure."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ui private ui from main."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void setUi(Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Instantiates singleton class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return already created or newly created Expenditure object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static Expenditure getInstance() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (onlyInstance \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            onlyInstance \u003d new Expenditure();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return onlyInstance;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Prepare the expenditure information to save in text format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the text to be saved."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String saveExpenditureFile() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String text;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        text \u003d String.format(\"Expenditure: $%.2f,\", totalExpenditure);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        text +\u003d String.format(\"Amount used in cooking: $%.2f,\", amountUsedInCooking);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        text +\u003d new SimpleDateFormat(\"EEE dd/MM/yyyy HH:mm:ss\").format(currentDate) + Ui.LS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Loads the last saved values of the class variables ."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param totalExpenditure the last saved total weekly expenditure."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param amountUsedInCooking the last saved amount used in cooking this week."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param lastSavedDate the last time user made any changes to expenditure."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void loadExpenditureVariables(double totalExpenditure, double amountUsedInCooking, Date lastSavedDate) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.totalExpenditure \u003d totalExpenditure;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.amountUsedInCooking \u003d amountUsedInCooking;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.lastSavedDate \u003d lastSavedDate;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        renewExpenditureValue();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Resets the values of all the class variables."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void resetExpenditureData() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.totalExpenditure \u003d 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.amountUsedInCooking \u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.lastSavedDate \u003d new Date();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Renews expenditure values at the start of every week at Monday midnight."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void renewExpenditureValue() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        calendar.set(Calendar.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        calendar.set(Calendar.MINUTE, 0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        calendar.set(Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date anyMonday \u003d calendar.getTime(); //past Monday"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date today \u003d new Date();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date pastMonday;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (anyMonday.after(today)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            calendar.add(Calendar.DATE,-7);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            pastMonday \u003d calendar.getTime();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            pastMonday \u003d anyMonday;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (lastSavedDate \u003d\u003d null || lastSavedDate.before(pastMonday)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            totalExpenditure \u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            amountUsedInCooking \u003d 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Add to total expenditure every time addingredient command"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * called to simulate new ingredient purchased."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param price Unit price of the ingredient."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param quantity Quantity of ingredient bought."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void addToExpenditure(double price, int quantity) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        totalExpenditure +\u003d (price * quantity);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Storage.saveExpenditureData();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Remove amount from total expenditure when user deletes ingredient"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * in the case where user deleting because user wrongly added ingredient,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * and does not want amount from incorrect addingredient to be included in total expenditure."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ingredientToDelete ingredient to be deleted."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param quantityToDelete amount of the ingredient to be deleted."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean removeFromExpenditure(Ingredient ingredientToDelete, Integer quantityToDelete) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String userResponse \u003d promptUser(PROMPT_REMOVE_FROM_EXPENDITURE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (userResponse.equalsIgnoreCase(\"yes\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            double price \u003d changePrice(ingredientToDelete, quantityToDelete);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            totalExpenditure -\u003d price;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            ui.print(String.format((REMOVAL_SUCCESS), price) + ui.LS + ui.DIVIDER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            ui.print(NO_CHANGE + ui.LS + ui.DIVIDER);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Adds prices of these ingredients to amount used in cooking,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * when user deletes ingredient manually after using to cook"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * or consuming."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ingredientToDelete ingredient to be deleted."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param quantityToDelete amount of the ingredient to be deleted."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void addToAmountUsed(Ingredient ingredientToDelete, Integer quantityToDelete) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String userResponse \u003d promptUser(PROMPT_ADD_TO_AMOUNT_USED);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (userResponse.equalsIgnoreCase(\"yes\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            double price \u003d changePrice(ingredientToDelete, quantityToDelete);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            amountUsedInCooking +\u003d price;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            ui.print(String.format((INCREASE_AMOUNT_USED), price) + ui.LS + ui.DIVIDER);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            ui.print(NO_CHANGE + ui.LS + ui.DIVIDER);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Adds to amount used in cooking whenever user calls cookrecipe command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ingredientToDelete the ingredient to used in cooking."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param quantityToDelete the amount of the ingredient used in cooking."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void addAmountForCooking(Ingredient ingredientToDelete, Integer quantityToDelete) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        amountUsedInCooking +\u003d changePrice(ingredientToDelete, quantityToDelete);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Storage.saveExpenditureData();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Prompts the user if they want to remove amount from total expenditure"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * and if not, then prompt whether to add amount to amount used in cooking"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * when they call deleteingredient command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ingredientToDelete ingredient to be deleted."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param quantityToDelete amount of the ingredient to be deleted."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void editExpenditure(Ingredient ingredientToDelete, Integer quantityToDelete) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (!removeFromExpenditure(ingredientToDelete, quantityToDelete)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                addToAmountUsed(ingredientToDelete, quantityToDelete);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Storage.saveExpenditureData();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Calculate the total amount to remove from total expenditure or to add to"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * amount used in cooking for each ingredient multiplied by their quantity deleted."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ingredientToDelete the ingredient to be deleted."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param quantityToDelete amount of the ingredient to be deleted."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the total change in amount to corresponding class variable."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public double changePrice(Ingredient ingredientToDelete, Integer quantityToDelete) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        double pricePerPiece \u003d ingredientToDelete.getPrice();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        int totalQuantityOfItem \u003d ingredientToDelete.getQuantity();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (quantityToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return pricePerPiece * totalQuantityOfItem;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return pricePerPiece * quantityToDelete;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Prompts the user for either a \"yes\" or \"no\" response."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param prompt the question to prompt the user."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return \"yes\" or \"no\"."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String promptUser(String prompt) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String userResponse;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ui.print(prompt);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        userResponse \u003d ui.getUserCommand().trim();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        while (!isValidResponse(userResponse)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            ui.print(\"Please enter either \\\"Yes\\\"/\\\"No\\\"\\n\" + ui.DIVIDER);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            userResponse \u003d ui.getUserCommand().trim();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return userResponse;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Checks if user response is either \"yes\" or \"no\"."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param userResponse the user response."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return false if user responds with any other input."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean isValidResponse(String userResponse) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String response \u003d userResponse;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (response.equalsIgnoreCase(\"no\") || response.equalsIgnoreCase(\"yes\")) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 257
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/Recipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * A Recipe represents a collection of ingredients of different types."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final String warningAddRecipe \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \"An unidentifiable ingredient has been added to ingredient of Miscellaneous category\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    ArrayList\u003cIngredient\u003e recipeItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String recipeName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Integer recipeIngrQty;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the addition of ingredients into recipe."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrAndQty the hashmap of ingredients."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void addIngredientsToRecipe(HashMap\u003cString[], Integer\u003e ingrAndQty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assert ingrAndQty.size() \u003e 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Map.Entry\u003cString[], Integer\u003e entry : ingrAndQty.entrySet()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String ingrName \u003d (entry.getKey())[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String ingrCategory \u003d (entry.getKey())[1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            Integer ingrQuantity \u003d entry.getValue();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            assert ingrName.length() \u003e 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            assert ingrCategory.length() \u003e 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            assert ingrQuantity \u003e\u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            Ingredient newIngredient \u003d createIngr(ingrName, ingrCategory, ingrQuantity);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            recipeItems.add(newIngredient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            assert recipeItems.size() \u003e 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeIngrQty \u003d recipeItems.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        sortRecipeItem();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Sorts recipeItems arraylist by Category name, then, Ingredient name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void sortRecipeItem() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Collections.sort(this.recipeItems, Comparator.comparing(Ingredient::getCategoryName)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                .thenComparing(Ingredient::getIngredientName));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the addition of ingredients into recipe."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrName the name of the ingredient."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrCategory the category of the ingredient."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrQuantity the quantity of the ingredient."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return Ingredient specific to its category."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Ingredient createIngr(String ingrName, String ingrCategory, Integer ingrQuantity) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        switch (ingrCategory.toLowerCase()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"dairy\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Dairy(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"drink\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Drink(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"fruit\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Fruit(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"meat\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Meat(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"miscellaneous\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Miscellaneous(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"staple\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Staple(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"vegetable\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Vegetable(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.warning(warningAddRecipe);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return new Miscellaneous(ingrName, \"Miscellaneous\", ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Loading of ingredients into a recipe."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredients the list of ingredients."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void addIngredientsToRecipeFromArrayList(ArrayList\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        for (Ingredient ingredient : ingredients) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            this.recipeItems.add(ingredient);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * For ease of saving into storage."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param attributes the string of ingredients and recipe."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void setRecipeNameForStorage(String attributes) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        recipeName \u003d attributes;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Sets the recipe name."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param attributes the list of ingredients and recipe name."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void setRecipeName(String attributes) throws KitchenHelperException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String recipeNameAndIngr \u003d attributes.substring(attributes.indexOf(\"/n\") + 3, attributes.indexOf(\"/i\") - 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String trimmedRecipeName \u003d recipeNameAndIngr.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            recipeName \u003d trimmedRecipeName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new KitchenHelperException(\"Invalid command\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Retrieve the name of a recipe."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the recipe name."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String getRecipeName() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return recipeName;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Get the list of ingredients in a recipe."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the arraylist of ingredients."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getRecipeItem() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return this.recipeItems;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To compare two Recipe objects based on their attributes."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return boolean return false if any of the attributes are not equal to each other."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (o instanceof Recipe) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Recipe i \u003d (Recipe) o;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return this.recipeName.equals(i.recipeName)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                    \u0026\u0026 this.recipeIngrQty \u003d\u003d recipeIngrQty"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                    \u0026\u0026 this.recipeItems.equals(i.recipeItems);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To format all variables of add ingredient as a string."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return String consisting of ingredient name, category, quantity, price and expiry."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return \"/n \" + getRecipeName() + \" \" + getRecipeItem() + \" \" + recipeItems.size();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zi-hui": 44,
      "yantingsanity": 4,
      "jinfayap": 5,
      "alwayshuizhen": 103,
      "JensonWee": 16
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Dairy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Dairy extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"dairy\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Dairy(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Dairy] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Drink.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Drink extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"drink\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Drink(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Drink] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Fruit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Fruit extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"fruit\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Fruit(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Fruit] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Represent an Ingredient object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public abstract class Ingredient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String ingredientName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String expiryDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String FIND_PARAMETERS \u003d \"%s Qty:%d $%.2f Exp:%s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Ingredient."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientName name of the ingredient."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param categoryName   category of the ingredient."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param quantity       quantity of the ingredient."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param price          price of the ingredient."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiryDate     expiry date of the ingredient."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Ingredient(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for ingredient name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return ingredient name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getIngredientName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for category name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return category name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for quantity."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return quantity."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Setters for quantity."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param quantity quantity of ingredient"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setQuantity(int quantity) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for price."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return price."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for expiry date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return expiry date."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getExpiryDate() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To format all variables of add ingredient as a string."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return String consisting of ingredient name, category, quantity, price and expiry."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return \"/n \" + getIngredientName() + \" /c \" + getCategoryName() + \" /q \" + getQuantity()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + \" /p \" + getPrice() + \" /e \" + getExpiryDate();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return String.format(FIND_PARAMETERS, getIngredientName(), getQuantity(), getPrice(), getExpiryDate());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To compare two Ingredient objects based on their attributes."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return boolean return false if any of the attributes are not equal to each other."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (o instanceof Ingredient) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient i \u003d (Ingredient) o;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return this.ingredientName.equals(i.ingredientName)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                \u0026\u0026 this.categoryName.equals(i.categoryName)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                \u0026\u0026 this.quantity \u003d\u003d i.quantity"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                \u0026\u0026 this.price \u003d\u003d price"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                \u0026\u0026 this.expiryDate.equals(i.expiryDate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 28,
      "yantingsanity": 9,
      "jinfayap": 80
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Meat.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Meat extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"meat\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Meat(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Meat] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Miscellaneous.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Miscellaneous extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"miscellaneous\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Miscellaneous(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Miscellaneous] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Staple.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Staple extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"staple\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Staple(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Staple] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Vegetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Vegetable extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"vegetable\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Vegetable(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Vegetable] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.AddChoreCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.AddIngredientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.AddRecipeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.CookRecipeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.DeleteChoreCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.DisplayExpenditureCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.InvalidCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.ListChoreCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.ListIngredientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.ListRecipeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.ResetCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.SaveStateCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.SearchChoreCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.SearchIngredientCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.SearchRecipeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.common.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Expenditure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.exception.ExpiredException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.QuantityException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Parse user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String LOG_WARNING_INDEX \u003d \"An IndexOutOfBounds exception has been caught\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final String warningPrepareRecipe \u003d \"An IO exception has been caught\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param input full user input string."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the command based on the user input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Command parseUserCommand(String input) throws KitchenHelperException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String[] userInputs \u003d splitInputLine(input, \" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        final String commandWord \u003d userInputs[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        final String parameters \u003d userInputs[1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case AddRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return prepareAddRecipe(parameters);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case AddIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return prepareAddIngredient(parameters);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        case AddChoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return prepareAddChore(parameters);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case CookRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return prepareCookRecipe(parameters);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        case DeleteRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return prepareDeleteRecipe(parameters);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        case DeleteIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return prepareDeleteIngredient(parameters);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        case DeleteChoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return prepareDeleteChore(parameters);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return prepareDoneChore(parameters);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        case DisplayExpenditureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return prepareDisplayExpenditure(parameters);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        case ListIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return prepareListIngredient(parameters);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        case ListRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return prepareListRecipe(parameters);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        case ListChoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return prepareListChore(parameters);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case SearchIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new SearchIngredientCommand(parameters);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case SearchRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new SearchRecipeCommand(parameters);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case SearchChoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new SearchChoreCommand(parameters);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case ResetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new ResetCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case SaveStateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return new SaveStateCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the addition of ingredients into recipe."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return hashmap of a formatted list of ingredients."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Command prepareAddRecipe(String attributes) throws KitchenHelperException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e ingrAndQty \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String ingredientList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand addCmd \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        if (!checkAddRecipeCmdFormat(attributes)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddRecipeCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            ingredientList \u003d attributes.substring(attributes.indexOf(\"/i\") + 3);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String[] splitedIngr \u003d ingredientList.split(\"[,][\\\\s]\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            for (int i \u003d 0; i \u003c splitedIngr.length; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                String item \u003d splitedIngr[i];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                String[] ingrContent \u003d item.split(\":\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                if (!checkAddRecipeIngrValidity(item, ingrContent)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    return new InvalidCommand("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                            String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddRecipeCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                String[] nameAndType \u003d new String[2];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                nameAndType[0] \u003d ingrContent[0];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                nameAndType[1] \u003d ingrContent[2].trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                ingrAndQty.put(nameAndType, Integer.parseInt(ingrContent[1]));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, warningPrepareRecipe, e.toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddRecipeCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        addCmd.setAttributesOfCmd(attributes, ingrAndQty);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return addCmd;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Checker for command format for addrecipe command."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param command   The full user input without keyword."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return  true if is of valid command, otherwise false."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Boolean checkAddRecipeCmdFormat(String command) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Boolean isValid \u003d true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String cmd \u003d command;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int sepCountForSlashN \u003d cmd.length() - (cmd.replace(\"/n\", \"a\").length());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cmd \u003d cmd.replace(\"/n\", \"a\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int sepCountForSlashI \u003d cmd.length() - (cmd.replace(\"/i\", \"a\").length());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cmd \u003d cmd.replace(\"/i\", \"a\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int sepCountForSlashOnly \u003d cmd.length() - (cmd.replace(\"/\", \"\").length());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        if (sepCountForSlashN \u003e 1 || sepCountForSlashI \u003e 1 || sepCountForSlashOnly \u003e 0) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Checker for prepareAddRecipe on the user input."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param item          Original string."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrContent   List of ingredients."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return true if none of the conditions are violated, false otherwise."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Boolean checkAddRecipeIngrValidity(String item, String[] ingrContent) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Boolean isValid \u003d true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int lenOfCmd \u003d ingrContent[0].length();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int qtyOfIngr \u003d Integer.parseInt(ingrContent[1]);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int separatorCounter \u003d item.length() - item.replace(\":\", \"\").length();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        if (lenOfCmd \u003c 1 || qtyOfIngr \u003c 1 || separatorCounter \u003e 2) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Prepares the addition of ingredient into inventory."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Command prepareAddIngredient(String attributes) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (!isValidUserInputFormat(attributes, AddIngredientCommand.REGEX_FORMAT)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                throw new KitchenHelperException(\"Invalid Add Inventory Format\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] nameAndOthers \u003d attributes.split(\"/c\\\\s\", 2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String itemName \u003d nameAndOthers[0].split(\"/n\\\\s+\")[1].trim();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            assert itemName.length() \u003e 0 : itemName;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] categoryAndOthers \u003d nameAndOthers[1].split(\"\\\\s+/q\\\\s+\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String category \u003d categoryAndOthers[0].trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            assert category.length() \u003e 0 : category;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] quantityAndOthers \u003d categoryAndOthers[1].split(\"\\\\s+/p\\\\s+\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            int quantity \u003d Integer.parseInt(quantityAndOthers[0]);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            assert quantity \u003e\u003d 0 : quantity;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (quantity \u003c\u003d 0) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                throw new QuantityException();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] priceAndExpiry \u003d quantityAndOthers[1].split(\"\\\\s+/e\\\\s+\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            double price \u003d Double.parseDouble(priceAndExpiry[0]);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            assert price \u003e\u003d 0.00 : price;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String expiry \u003d parseDateFormat(priceAndExpiry[1]);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (!isExpiredIngredient(expiry)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                throw new ExpiredException();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Expenditure.getInstance().addToExpenditure(price, quantity);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new AddIngredientCommand(itemName, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, InvalidCommand.MESSAGE_INVALID + \" \" + attributes);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddIngredientCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (DateTimeException dte) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new InvalidCommand(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (ExpiredException ee) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new InvalidCommand(Messages.MESSAGE_EXPIRED_INGREDIENT);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (QuantityException qe) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new InvalidCommand(Messages.MESSAGE_ZERO_QUANTITY);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Prepares the addition of a chore into chore list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Command prepareAddChore(String attributes) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String dateStr;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String[] descriptionAndDate \u003d attributes.split(\"/by\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            description \u003d descriptionAndDate[0].trim();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                throw new KitchenHelperException("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                        String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddChoreCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            dateStr \u003d descriptionAndDate[1].trim();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddChoreCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new InvalidCommand(khe.getMessage());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Date date \u003d dateFormat.parse(dateStr);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (isOverdueChore(date)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                throw new ExpiredException();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new AddChoreCommand(description, date);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new AddChoreCommand(description, dateStr);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (ExpiredException ee) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new InvalidCommand(Messages.MESSAGE_OVERDUE_CHORE);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the parameters needed for the cookrecipe function."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private Command prepareCookRecipe(String attributes) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookCmd \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String recipeName \u003d attributes.substring(attributes.indexOf(\"/n\") + 3, attributes.indexOf(\"/p\") - 1);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            int numOfPax \u003d Integer.parseInt(attributes.substring(attributes.indexOf(\"/p\") + 3));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (numOfPax \u003c 1) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                return new InvalidCommand("
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                        String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, cookCmd.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            cookCmd.setRecipeName(recipeName);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            cookCmd.setRecipePax(numOfPax);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, cookCmd.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return cookCmd;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Prepares the parameters needed for the list function."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private Command prepareListIngredient(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                throw new KitchenHelperException(\"Invalid ListIngredient command.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                for (int i \u003d 0; i \u003c ListIngredientCommand.categoryArray.length; i++) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    if (ListIngredientCommand.categoryArray[i].equalsIgnoreCase(parameters)) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    } else if (i \u003d\u003d ListIngredientCommand.categoryArray.length - 1) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        throw new KitchenHelperException(\"Invalid ListIngredient Category.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return new ListIngredientCommand(parameters);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            throw new KitchenHelperException(ListIngredientCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Prepares the parameters needed for the list function."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private Command prepareListChore(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (! parameters.isEmpty()) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                throw new KitchenHelperException(\"Invalid ListChore command.\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return new ListChoreCommand();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            throw new KitchenHelperException(ListChoreCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Prepares the parameters needed for the list function."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private Command prepareListRecipe(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                throw new KitchenHelperException(\"Invalid ListRecipe command.\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            parameters \u003d parameters.replaceAll(\"\\\\s+\",\"\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (! parameters.equalsIgnoreCase(\"all\")) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                if (! parameters.matches(\"-?\\\\d+\")) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    throw new KitchenHelperException(\"Invalid ListRecipe command.\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                } else if (Integer.parseInt(parameters) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    throw new NumberFormatException(\"Invalid Ingredient Index. Must be \u003e 0.\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return new ListRecipeCommand(parameters);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            throw new KitchenHelperException(ListRecipeCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            throw new KitchenHelperException(ListRecipeCommand.COMMAND_PARAMETER_LIMIT);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Prepares the deletion of recipe from the lists."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return hashmap of a formatted list of parameters to be deleted."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Command prepareDeleteRecipe(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (parameters.contains(\"/i\")) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                String [] typeAndName \u003d parameters.split((\"/i\\\\s\"), 2);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return new DeleteRecipeCommand(Integer.parseInt(typeAndName[1].trim()) - 1);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                String [] typeAndName \u003d parameters.split(\"/n\\\\s\",2);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return new DeleteRecipeCommand(typeAndName[1].trim());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            throw new KitchenHelperException(DeleteRecipeCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Prepares the deletion of ingredients from the lists."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return hashmap of a formatted list of parameters to be deleted."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Command prepareDeleteIngredient(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String [] typeAndName \u003d parameters.split(\"/i\\\\s\", 2);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String [] nameAndQuantity \u003d typeAndName[1].split(\"/q\\\\s\", 2);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (nameAndQuantity.length \u003e 1) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return new DeleteIngredientCommand(Integer.parseInt(nameAndQuantity[0].trim()) - 1,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                    Integer.parseInt(nameAndQuantity[1]));"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return new DeleteIngredientCommand(Integer.parseInt(nameAndQuantity[0].trim()) - 1,"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                            null);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            throw new KitchenHelperException(DeleteIngredientCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Prepares the deletion of a chore from the list."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Command prepareDeleteChore(String parameters) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            int indexToDelete \u003d Integer.parseInt(parameters.trim());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new DeleteChoreCommand(indexToDelete);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, DeleteChoreCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Prepares the command that marks chore as done."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Command prepareDoneChore(String parameters) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            int indexToCheck \u003d Integer.parseInt(parameters.trim());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new DoneCommand(indexToCheck);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, DoneCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Prepares the display of expenditure amounts."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param parameters user input string following the command word."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @throws KitchenHelperException if user adds input after command word."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Command prepareDisplayExpenditure(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (! parameters.isEmpty()) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                throw new KitchenHelperException(\"Invalid DisplayExpenditure command.\");"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new DisplayExpenditureCommand();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            throw new KitchenHelperException(DisplayExpenditureCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/contacts/blob/master/src/main/java/Contacts1.java"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "     * Split the user input into two parts with a specific regex."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param rawUserInput full user input string."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param regex        the quantifier to separate the string."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return an array of size 2 separated by the quantifier."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] splitInputLine(String rawUserInput, String regex) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] split \u003d rawUserInput.trim().split(regex, 2);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        return split.length \u003d\u003d 2 ? split : new String[]{split[0], \"\"}; // else no parameters"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Checks if the input string matches the regex."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param attributes the user input string."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param regex      quantifier to check if valid."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return true if it match, otherwise false."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public boolean isValidUserInputFormat(String attributes, String regex) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(attributes);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return matcher.matches();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Check if the user input a valid date."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiry the user input date."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the date in the form of dd/MM/yyyy."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String parseDateFormat(String expiry) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        LocalDate localDate \u003d changeDateToJavaFormat(expiry);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String formattedExpiry \u003d localDate.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        formattedExpiry \u003d formattedExpiry.replaceAll(\"-\", \"/\");"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return formattedExpiry;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Change to standard Java Date format."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiry the user input expiry date."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return LocalDate of the expiry date."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public LocalDate changeDateToJavaFormat(String expiry) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String[] splitExpiry \u003d expiry.split(\"/\");"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String day \u003d splitExpiry[0];"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String month \u003d splitExpiry[1];"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String year \u003d splitExpiry[2];"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return LocalDate.parse(year + \"-\" + month + \"-\" + day);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Check if the ingredient prior to adding is expired."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiry the user input expiry date."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return true is not expired, false if expired."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public boolean isExpiredIngredient(String expiry) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        LocalDate dt1 \u003d LocalDate.parse(changeDateToJavaFormat(expiry).toString());"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        LocalDate dt2 \u003d LocalDate.parse(LocalDate.now().toString());"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return dt2.isBefore(dt1);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Check if the chore is overdue prior to adding."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreDate the user input chore deadline."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return true if chore is overdue, false otherwise."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean isOverdueChore(Date choreDate) {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (choreDate.before(currentDate)) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 2,
      "yantingsanity": 56,
      "jinfayap": 146,
      "cheongisabella": 142,
      "alwayshuizhen": 120,
      "-": 16,
      "JensonWee": 73
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Expenditure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Storage class to get/load and store data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String filePathIngredient;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String filePathRecipe;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String filePathChore;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private String filePathExpenditure;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param filePathIngredient String of filepath for stored Ingredient data."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param filePathRecipe String of filepath for stored Recipe data."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param filePathChore String of filepath for stored Chore data."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param filePathExpenditure String of filepath for stored Expenditure data."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Storage(String filePathIngredient, String filePathRecipe, String filePathChore, String filePathExpenditure) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.filePathIngredient \u003d filePathIngredient;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.filePathRecipe \u003d filePathRecipe;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.filePathChore \u003d filePathChore;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.filePathExpenditure \u003d filePathExpenditure;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static void copyFile(File source, File dest) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Files.copy(source.toPath(), dest.toPath(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                    StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Gets the saved Ingredient data from text file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return ArrayList Contains data from saved text file"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws FileNotFoundException If file from file path does not exists."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getIngredientData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File file \u003d new File(filePathIngredient);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String userData \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getName \u003d userData.split(\"/n \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getCat \u003d getName[1].split(\" /c \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getQuantity \u003d getCat[1].split(\" /q \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getPrice \u003d getQuantity[1].split(\" /p \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getExpiry \u003d getPrice[1].split(\" /e \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String name \u003d getCat[0];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String category \u003d  getQuantity[0];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Integer quantity \u003d Integer.parseInt(getPrice[0]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Double price \u003d Double.parseDouble(getExpiry[0]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String expiry \u003d getExpiry[1];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            loadingIngredients(name, category, quantity, price, expiry, ingredientList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return ingredientList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Loads the ingredient into the ArrayList according to the category type."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param name name of the ingredient."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param category category of the ingredient."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param quantity number of serving of ingredient."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param price cost of the ingredient."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param expiry ingredient expiry date."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param ingredientList the ArrayList to store ingredients."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void loadingIngredients(String name, String category, Integer quantity, Double price, String expiry,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                            ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        switch (category.toLowerCase()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"dairy\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient diary \u003d new Dairy(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(diary);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"drink\": {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient drink \u003d new Drink(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(drink);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"fruit\": {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient fruit \u003d new Fruit(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(fruit);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"meat\": {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient meat \u003d new Meat(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(meat);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"miscellaneous\": {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient miscellaneous \u003d new Miscellaneous(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(miscellaneous);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"staple\": {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient staple \u003d new Staple(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(staple);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"vegetable\": {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient vegetable \u003d new Vegetable(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(vegetable);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + category);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Gets the saved Recipe data from text file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return ArrayList Contains data from saved text file"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws FileNotFoundException If file from file path does not exists."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public ArrayList\u003cRecipe\u003e getRecipeData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File file \u003d new File(filePathRecipe);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Recipe freshRecipe \u003d new Recipe();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ArrayList\u003cIngredient\u003e recipeItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String userData \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String removeQuantity \u003d userData.substring(userData.length() - 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Integer ingredientQuantity \u003d Integer.parseInt(removeQuantity);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String newUserData \u003d userData.substring(0, userData.length() - 1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] recipeName \u003d newUserData.split(\"/n \");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String addRecipeName \u003d recipeName[1].substring(0, recipeName[1].length() - 2);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Integer count \u003d ingredientQuantity + 1;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            freshRecipe.setRecipeNameForStorage(addRecipeName);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            while (count \u003e 1) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String command \u003d recipeName[count];"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String[] getName \u003d command.split(\" /c \");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String[] getCat \u003d getName[1].split(\" /q \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String[] getQuantity \u003d getCat[1].split(\" /p \");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String[] getPrice \u003d getQuantity[1].split(\" /e \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String name \u003d getName[0];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String category \u003d getCat[0];"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                Integer quantity \u003d Integer.parseInt(getQuantity[0]);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                Double price \u003d Double.parseDouble(getPrice[0]);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String expiry \u003d getPrice[1].substring(0, getPrice[1].length() - 2);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                loadingRecipeItems(name, category, quantity, price, expiry, recipeItems);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                count -\u003d 1;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            freshRecipe.addIngredientsToRecipeFromArrayList(recipeItems);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeList.add(freshRecipe);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return recipeList;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Loads the ingredient into the ArrayList according to the category type."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param name name of the ingredient."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param category category of the ingredient."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param quantity number of serving of ingredient."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param price cost of the ingredient."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param expiry ingredient expiry date."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param recipeItems the ArrayList to store ingredients of the recipe."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void loadingRecipeItems(String name, String category, Integer quantity, Double price, String expiry,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                                    ArrayList\u003cIngredient\u003e recipeItems) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        switch (category.toLowerCase()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"dairy\":"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient diary \u003d new Dairy(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(diary);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"drink\": {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient drink \u003d new Drink(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(drink);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"fruit\": {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient fruit \u003d new Fruit(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(fruit);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"meat\": {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient meat \u003d new Meat(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(meat);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"miscellaneous\": {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient miscellaneous \u003d new Miscellaneous(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(miscellaneous);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"staple\": {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient staple \u003d new Staple(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(staple);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"vegetable\": {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient vegetable \u003d new Vegetable(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(vegetable);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + category);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Gets the saved Chore data from text file."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return ArrayList Contains data from saved text file"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws FileNotFoundException If file from file path does not exists."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public ArrayList\u003cChore\u003e getChoreData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File file \u003d new File(filePathChore);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String userData \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            char isDone \u003d userData.charAt(1);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] description \u003d userData.substring(4).split(\" \\\\(by: \");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Chore todo \u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    Chore.createChoreWhenLoadFile(description[0],"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                            description[1].substring(0, description[1].length() - 1));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (isDone \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                todo.markAsDone();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            choreList.add(todo);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return choreList;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Loads the saved Expenditure data from the text file"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * into the singleton Expenditure class."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @throws FileNotFoundException if file from file path does not exist."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void loadExpenditureData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        File file \u003d new File(filePathExpenditure);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String userData \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String[] variables \u003d userData.split(\",\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            int expenditureIndex \u003d variables[0].indexOf(\u0027$\u0027) + 1;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            double expenditure \u003d Double.parseDouble(variables[0].substring(expenditureIndex));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            int amountUsedIndex \u003d variables[1].indexOf(\"$\") + 1;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            double amountUsed \u003d Double.parseDouble(variables[1].substring(amountUsedIndex));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"EEE dd/MM/yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Date lastSavedDate \u003d dateFormat.parse(variables[2]);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Expenditure.getInstance().loadExpenditureVariables(expenditure, amountUsed, lastSavedDate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (NoSuchElementException | IndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Expenditure.getInstance().loadExpenditureVariables(0, 0, null);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Saves and stores the ingredients in ArrayList Ingredient into a text file."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param ingredientList ArrayList."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static void saveIngredientData(ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"outputIngredient.txt\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            for (Ingredient ingredient : ingredientList) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fw.write(ingredient.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            err.printStackTrace();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Saves the recipe in recipeList ArrayList and recipe ingredients in recipeItems ArrayList into a text file."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param recipeList ArrayList."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static void saveRecipeData(ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"outputRecipe.txt\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fw.write(recipe.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            err.printStackTrace();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Saves the chores in choreList into a text file."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param choreList ArrayList."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static void saveChoreData(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"outputChore.txt\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            for (Chore chore : choreList) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fw.write(chore.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            err.printStackTrace();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Saves the Expenditure data into a text file."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static void saveExpenditureData() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"outputExpenditure.txt\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            fw.write(Expenditure.getInstance().saveExpenditureFile());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            err.printStackTrace();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 313,
      "jinfayap": 7,
      "cheongisabella": 57
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * UI of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printDivider() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Format of a comment input line. Comment lines are silently consumed when reading user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String COMMENT_LINE_FORMAT_REGEX \u003d \"#.*\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m KitchenHelper here\" + LS + \"What can I do for you?\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String MESSAGE_TO_CHOOSE_STATE \u003d \"Please enter \u00271\u0027 to load data from normal mode or \u00272\u0027 to\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            + \" load data from restore mode:\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String MESSAGE_FOR_NORMAL_MODE \u003d \"Okay data have been loaded from the main storage files.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String MESSAGE_FOR_RESTORE_MODE \u003d \"Okay data have been loaded from the backup storage files.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String MESSAGE_INVALID_CHOICE \u003d \"Invalid Choice! PLease choose either \u00271\u0027 for normal mode or\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            + \" \u00272\u0027 for restore mode.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String MESSAGE_TO_EXIT \u003d \"Please enter the exit command after selecting a loading mode.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printInvalidCmd() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(\"Invalid Command, please check your format!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String getUserChoice() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(MESSAGE_TO_CHOOSE_STATE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        String userChoice;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        userChoice \u003d in.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return userChoice;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void askForReInput() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(MESSAGE_INVALID_CHOICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        validUserChoice(getUserChoice());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void validUserChoice(String userChoice) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (userChoice.trim().equals(\"1\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.out.println(MESSAGE_FOR_NORMAL_MODE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else if (userChoice.trim().equals(\"2\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.out.println(MESSAGE_FOR_RESTORE_MODE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else if (userChoice.trim().equalsIgnoreCase(ExitCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.out.println(MESSAGE_TO_EXIT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            askForReInput();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            askForReInput();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/ui/TextUi.java"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the user input line should be ignored."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Input should be ignored if it is parsed as a comment, is only whitespace, or is empty."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param rawInputLine full raw user input line."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if the entire user input line should be ignored."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean shouldIgnore(String rawInputLine) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return rawInputLine.trim().isEmpty() || isCommentLine(rawInputLine);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/ui/TextUi.java"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the user input line is a comment line."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param rawInputLine full raw user input line."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if input line is a comment."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isCommentLine(String rawInputLine) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return rawInputLine.trim().matches(COMMENT_LINE_FORMAT_REGEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Display the welcome message during startup."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        showToConsole(DIVIDER, WELCOME_MESSAGE, DIVIDER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/ui/TextUi.java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the user command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the input line string"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String fullInputLine \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        //silently consume all ignored lines"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        while (shouldIgnore(fullInputLine)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            fullInputLine \u003d in.nextLine();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullInputLine;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * A method that can take in a variable number of arguments."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param message the argument."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void showToConsole(String... message) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            out.println(m);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Shows the results of the command to the user."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param result the CommandResult object."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void showResultToUser(CommandResult result) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        showToConsole(result.feedbackToUser);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 37,
      "jinfayap": 65,
      "cheongisabella": 5,
      "alwayshuizhen": 8,
      "-": 49
    }
  },
  {
    "path": "src/test/data/StorageTest/outputChore.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "[x] buy milk (by: Tuesday 12pm)"
      }
    ],
    "authorContributionMap": {
      "JensonWee": 1
    }
  },
  {
    "path": "src/test/data/StorageTest/outputIngredient.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "/n Beef /c meat /q 3 /p 20.0 /e 2020-03-18"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "/n Chicken /c meat /q 3 /p 20.0 /e 2020-03-18"
      }
    ],
    "authorContributionMap": {
      "JensonWee": 2
    }
  },
  {
    "path": "src/test/data/StorageTest/outputRecipe.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "/n Chicken Salad [/n Lettuce /c vegetable /q 4 /p 0.0 /e null, /n Chicken Breast /c meat /q 2 /p 0.0 /e null] 2"
      }
    ],
    "authorContributionMap": {
      "JensonWee": 1
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/KitchenHelperTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class KitchenHelperTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/AddChoreCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "class AddChoreCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void addChore() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        new AddChoreCommand(\"clean the toilet\", \"Saturday 5pm\").addChore(choreList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(1, choreList.size());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 18
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/AddIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class AddIngredientCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void addToCategory_testPass() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"20/02/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(ingredientList.get(0) instanceof Meat);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"Beef\", ingredientList.get(0).getIngredientName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"Meat\", ingredientList.get(0).getCategoryName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(30, ingredientList.get(0).getQuantity());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(20.2, ingredientList.get(0).getPrice());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"20/02/2020\", ingredientList.get(0).getExpiryDate());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void addToCategory_testFail() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"2020-02-20\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(ingredientList.get(0) instanceof Meat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"Pork\", ingredientList.get(0).getIngredientName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"Vegetable\", ingredientList.get(0).getCategoryName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(40, ingredientList.get(0).getQuantity());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(50.21, ingredientList.get(0).getPrice());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"2020.02-20\", ingredientList.get(0).getExpiryDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 39
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/AddRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class AddRecipeCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void addRecipe_testPass() throws KitchenHelperException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(1, recipeList.size());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void addRecipe_testFail() throws KitchenHelperException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertNotEquals(\"drink\", recipeList.get(0).getRecipeItem().getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void checkIfRecipeExist_testPass() throws KitchenHelperException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(Boolean.TRUE, newRecipe.checkIfRecipeExist(\"Chicken Salad\", recipeList));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 58
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/CookRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class CookRecipeCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void cookRecipe_testPassCase1() throws KitchenHelperException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 30, 20.2,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"20/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Lettuce\", \"Vegetable\", 15, 20.2,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"15/12/2020\").addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(2, ingredientList.size());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(30, ingredientList.get(0).getQuantity());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(15, ingredientList.get(1).getQuantity());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"Chicken Breast\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \"meat\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr2 \u003d new String[2];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr2[0] \u003d \"Lettuce\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr2[1] \u003d \"vegetable\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr2, 4);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookRecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cookRecipe.setRecipeName(\"Chicken Salad\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cookRecipe.setRecipePax(2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(Boolean.TRUE, cookRecipe.checkForSufficientIngredient(ingredientList, recipeList.get(0)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(\"Chicken Salad was cooked with a pax of 2\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                cookRecipe.cookRecipe(ingredientList, recipeList));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void cookRecipe_testPassCase2() throws KitchenHelperException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 1, 20.2,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"20/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Lettuce\", \"Vegetable\", 5, 20.2,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"15/12/2020\").addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Lettuce\", \"Vegetable\", 5, 20.2,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"15/12/2020\").addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"Chicken Breast\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \"meat\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr2 \u003d new String[2];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr2[0] \u003d \"Lettuce\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr2[1] \u003d \"vegetable\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr2, 4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookRecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cookRecipe.setRecipeName(\"Chicken Salad\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cookRecipe.setRecipePax(2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(\"There are insufficient/missing ingredients!\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                cookRecipe.cookRecipe(ingredientList, recipeList));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void cookRecipe_testPassCase3() throws KitchenHelperException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 5, 20.2,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"20/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Lettuce\", \"Vegetable\", 5, 20.2,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"15/02/2020\").addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Lettuce\", \"Vegetable\", 5, 20.2,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"15/12/2020\").addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"Chicken Breast\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \"meat\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr2 \u003d new String[2];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr2[0] \u003d \"Lettuce\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr2[1] \u003d \"vegetable\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr2, 4);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookRecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cookRecipe.setRecipeName(\"Chicken Salad\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cookRecipe.setRecipePax(2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(\"There are insufficient/missing ingredients!\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                + \"\\nPlease check for these expired ingredients: lettuce\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                cookRecipe.cookRecipe(ingredientList, recipeList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void cookRecipe_testPassCase4() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 5, 20.2,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"20/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Lettuce\", \"Vegetable\", 5, 20.2,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"15/02/2020\").addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookRecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cookRecipe.setRecipeName(\"Chicken Salad\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(\"The given recipe name does not exist!\", cookRecipe.cookRecipe(ingredientList, recipeList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void craftExpiredList_testPass() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cString\u003e expiredIngrNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        expiredIngrNames.add(\"hl milk\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand newrecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newrecipe.setExpiredIngrNames(expiredIngrNames);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(\"hl milk, \", newrecipe.craftExpiredList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void craftExpiredList_testFail() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cString\u003e expiredIngrNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        expiredIngrNames.add(\"hl milk\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand newrecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newrecipe.setExpiredIngrNames(expiredIngrNames);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertNotEquals(\"hl milk\", newrecipe.craftExpiredList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void checkIfRecipeExist_testPass() throws KitchenHelperException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \" \";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookRecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cookRecipe.setRecipeName(\"Chicken Salad\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(1, cookRecipe.checkIfRecipeExist(recipeList));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void checkIfRecipeExist_testFail() throws KitchenHelperException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \" \";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookRecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cookRecipe.setRecipeName(\"Warm Milk\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(2, cookRecipe.checkIfRecipeExist(recipeList));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void getTotalIngredientQty_testPass() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 30, 20.2,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"20/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 5, 20.2,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"25/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(2, ingredientList.size());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookRecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(35, cookRecipe.getTotalIngredientQty(\"Chicken Breast\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"Meat\", ingredientList));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void getTotalIngredientQty_testFail() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 30, 20.2,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"20/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 5, 20.2,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"25/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(2, ingredientList.size());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookRecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertNotEquals(50, cookRecipe.getTotalIngredientQty(\"Chicken Breast\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"Meat\", ingredientList));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void getIngredientsWithSameName_testPass() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 30, 20.2,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"20/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 5, 20.2,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"25/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Lettuce\", \"Vegetable\", 3, 20.2,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"15/12/2020\").addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(3, ingredientList.size());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 30, 20.2,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"20/12/2020\").addToCategory(\"Meat\", ingredientList2);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 5, 20.2,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"25/12/2020\").addToCategory(\"Meat\", ingredientList2);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(2, ingredientList2.size());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookRecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(ingredientList2, cookRecipe.getIngredientsWithSameName(ingredientList,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"Chicken Breast\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void getIngredientsWithSameName_testFail() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 30, 20.2,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"20/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 5, 20.2,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"25/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Lettuce\", \"Vegetable\", 3, 20.2,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"15/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(3, ingredientList.size());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookRecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertNotEquals(ingredientList, cookRecipe.getIngredientsWithSameName(ingredientList,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"Chicken Breast\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void checkForSufficientIngredient_testPass() throws KitchenHelperException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 30, 20.2,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"20/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 5, 20.2,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"25/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Lettuce\", \"Vegetable\", 3, 20.2,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                \"15/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(3, ingredientList.size());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \" \";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookRecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(Boolean.TRUE, cookRecipe.checkForSufficientIngredient(ingredientList, recipeList.get(0)));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void checkForSufficientIngredient_testFail() throws KitchenHelperException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Chicken Breast\", \"Meat\", 1, 20.2, \"20/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new AddIngredientCommand(\"Lettuce\", \"Vegetable\", 3, 20.2, \"15/12/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(2, ingredientList.size());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \" \";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookRecipe \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cookRecipe.setRecipeName(\"Chicken Salad\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        cookRecipe.setRecipePax(2);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertNotEquals(Boolean.TRUE, cookRecipe.checkForSufficientIngredient(ingredientList, recipeList.get(0)));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 282
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/DeleteChoreCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class DeleteChoreCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void deleteChore() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        choreList.add(new Chore(\"buy groceries\", \"Tuesday 12pm\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        DeleteChoreCommand deleteNegativeIndex \u003d new DeleteChoreCommand(-5);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(\"Please choose an index in the chore list!\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                deleteNegativeIndex.deleteChore(choreList));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        DeleteChoreCommand deleteValidIndex \u003d new DeleteChoreCommand(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        deleteValidIndex.deleteChore(choreList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(0, choreList.size());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        DeleteChoreCommand deleteInvalidIndex \u003d new DeleteChoreCommand(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(\"Please choose an index in the chore list!\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                deleteInvalidIndex.deleteChore(choreList));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 29
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/DeleteIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class DeleteIngredientCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void deleteIngredientByIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"20/12/2020\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        new AddIngredientCommand(\"kailan\", \"Vegetable\", 30, 30.45, \"18/12/2020\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 1; //Beef"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteIngredientQuantity \u003d new DeleteIngredientCommand(index - 1, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteIngredientQuantity.deleteIngredientByIndex(ingredientList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.get(index - 1).getQuantity(), 28);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteIngredientQuantityExceed \u003d new DeleteIngredientCommand(index, 30);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteIngredientQuantityExceed.deleteIngredientByIndex(ingredientList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.get(index - 1).getQuantity(), 28);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d 2; //kailan"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteKnownIngredient \u003d new DeleteIngredientCommand(index - 1, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteKnownIngredient.deleteIngredientByIndex(ingredientList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.size(), 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteUnknownIngredient \u003d new DeleteIngredientCommand(3, null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteUnknownIngredient.deleteIngredientByIndex(ingredientList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.size(), 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void deleteIngredient() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"20/12/2020\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                .addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        new AddIngredientCommand(\"kailan\", \"Vegetable\", 30, 30.45, \"18/12/2020\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                .addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteIngredientQuantity \u003d new DeleteIngredientCommand(1, 30);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteIngredientQuantity.deleteIngredientByIndex(ingredientList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.size(), 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //quantity \u003d\u003d 0 case and quantity is not null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 1; //Beef"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteIngredient \u003d new DeleteIngredientCommand(index - 1, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        Ingredient ingredientToDelete \u003d ingredientList.get(index - 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteIngredient.deleteIngredient(ingredientToDelete, ingredientList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.size(), 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        new AddIngredientCommand(\"kailan\", \"Vegetable\", 30, 30.45, \"18/12/2020\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                .addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //else case"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d 1; //kailan"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteIngredientQuantityNull \u003d new DeleteIngredientCommand(index - 1, null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingredientToDelete \u003d  ingredientList.get(index - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteIngredientQuantityNull.deleteIngredient(ingredientToDelete, ingredientList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertNotEquals(ingredientList.size(), 1); //supposed to be zero"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void deleteQuantity() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"20/12/2020\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                .addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        new AddIngredientCommand(\"kailan\", \"Vegetable\", 30, 30.45, \"18/12/2020\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                .addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //test whether quantity \u003e 0"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        System.out.println(ingredientList.size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteIngredientByQuantity \u003d new DeleteIngredientCommand(index - 1, 29);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        Ingredient ingredientToDeleteQuantity1 \u003d ingredientList.get(index - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteIngredientByQuantity.deleteQuantity(ingredientToDeleteQuantity1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientToDeleteQuantity1.getQuantity(), 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //else case"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d 2;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteIngredientByQuantity2 \u003d new DeleteIngredientCommand(index - 1, -1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        Ingredient ingredientToDeleteQuantity2 \u003d ingredientList.get(index - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteIngredientByQuantity2.deleteQuantity(ingredientToDeleteQuantity2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientToDeleteQuantity2.getQuantity(), 30);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void updateNewQuantity() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"20/12/2020\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                .addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        new AddIngredientCommand(\"kailan\", \"Vegetable\", 30, 30.45, \"18/12/2020\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                .addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 1; //beef"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        Ingredient ingredientToUpdate;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand updateOutOfRangeQuantity \u003d new DeleteIngredientCommand(index - 1, 40);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingredientToUpdate \u003d ingredientList.get(index - 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        updateOutOfRangeQuantity.updateNewQuantity(-10, ingredientToUpdate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientToUpdate.getQuantity(), 30);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d 2; //kailan"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand updateRangeQuantity \u003d new DeleteIngredientCommand(index - 1, 2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingredientToUpdate \u003d ingredientList.get(index - 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        updateRangeQuantity.updateNewQuantity(28, ingredientToUpdate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientToUpdate.getQuantity(), 28);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 114
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/DeleteRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class DeleteRecipeCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void deleteRecipeByName() throws KitchenHelperException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //successful deletion"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd \u003d new DeleteRecipeCommand(\"Chicken\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteCmd.deleteRecipeByName(recipeList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(1, recipeList.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //unsuccessful deletion"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd2 \u003d new DeleteRecipeCommand(\"Chicken Salad\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteCmd2.deleteRecipeByName(recipeList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(0, recipeList.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void deleteRecipeByIndex() throws KitchenHelperException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //unsuccessful deletion"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd \u003d new DeleteRecipeCommand(3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteCmd.deleteRecipeByIndex(recipeList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(1, recipeList.size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //successful deletion"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd2 \u003d new DeleteRecipeCommand(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteCmd2.deleteRecipeByIndex(recipeList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(0, recipeList.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void getRecipeIndex() throws KitchenHelperException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //Case 1: No such recipe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd \u003d new DeleteRecipeCommand(\"Chicken\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d deleteCmd.getRecipeIndex(deleteCmd.getObjectVariables().trim(), recipeList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(index, -1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //Case 2: Recipe is found and an index is returned"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd2 \u003d new DeleteRecipeCommand(\"Chicken Salad\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d deleteCmd2.getRecipeIndex(deleteCmd.getObjectVariables().trim(), recipeList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(index, 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 87
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void markChoreDone() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Chore newChore \u003d new Chore(\"buy groceries\", \"Tuesday 12pm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        choreList.add(newChore);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        DoneCommand checkValidIndex \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(false, newChore.isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        checkValidIndex.markChoreDone(choreList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(true, newChore.isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(\"This chore has already been marked as done.\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                checkValidIndex.markChoreDone(choreList));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        DoneCommand checkInvalidIndex \u003d new DoneCommand(2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(\"Please choose an index in the chore list!\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                checkInvalidIndex.markChoreDone(choreList));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 29
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/ListChoreCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "class ListChoreCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void listChore() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ListChoreCommand listEmptylist \u003d new ListChoreCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(\"Your list of chores is currently empty.\", listEmptylist.listChore(choreList));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        choreList.add(new Chore(\"buy groceries\", \"Tuesday 12pm\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ListChoreCommand listNonEmptyList \u003d new ListChoreCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(\"Here are the chores in your list:\\n1. \" + choreList.get(0),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                listNonEmptyList.listChore(choreList));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 25
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/ListIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "class ListIngredientCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandIngredient_validCategoryName_correctlyConstructed() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListIngredientCommand command \u003d new ListIngredientCommand(\"all\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(\"all\",command.getCategory());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertTrue(command.checkCategoryValid());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandIngredient_invalidCategoryName_correctlyConstructed() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListIngredientCommand command \u003d new ListIngredientCommand(\"laptop\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(\"laptop\",command.getCategory());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertFalse(command.checkCategoryValid());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandIngredient_invalidCategoryName2_correctlyConstructed() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListIngredientCommand command \u003d new ListIngredientCommand(\"123\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(\"123\",command.getCategory());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertFalse(command.checkCategoryValid());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JensonWee": 37
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/ListRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "class ListRecipeCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandRecipe_validItemNumber_correctlyConstructed() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListRecipeCommand command \u003d new ListRecipeCommand(\"1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // individual fields that compare privacy to simplify this"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(1,command.getItemNumber());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertTrue(command.checkItemValid(1, recipeList));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandRecipe_invalidItemNumber_correctlyConstructed() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListRecipeCommand command \u003d new ListRecipeCommand(\"1\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // individual fields that compare privacy to simplify this"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(1,command.getItemNumber());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertFalse(command.checkItemValid(2, recipeList));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JensonWee": 58
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/ResetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class ResetCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 7
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/SearchChoreCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class SearchChoreCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_notEmpty() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        choreArrayList.add(new Chore(\"buy groceries\", \"Tuesday 12pm\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        choreArrayList.add(new Chore(\"buy groceries\", \"Wednesday 12pm\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"Here are your matching chores in your list\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + Ui.LS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + \"1.[x] buy groceries (by: Tuesday 12pm) [Location: Index 1]\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + Ui.LS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + \"2.[x] buy groceries (by: Wednesday 12pm) [Location: Index 2]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchchore groceries\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_empty() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"There are no matching chores in your list.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchchore groceries\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_notFound() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        choreArrayList.add(new Chore(\"buy groceries\", \"Tuesday 12pm\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        choreArrayList.add(new Chore(\"buy groceries\", \"Wednesday 12pm\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"There are no matching chores in your list.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchchore fruits\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 4,
      "jinfayap": 54
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/SearchIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class SearchIngredientCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_notEmpty() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ingredientArrayList.add(new Meat(\"Beef\", \"meat\", 3, 20, \"18/03/2020\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ingredientArrayList.add(new Meat(\"Beef cubes\", \"meat\", 3, 20, \"18/03/2020\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"Here are your matching ingredients in your list\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + Ui.LS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + \"1.[Meat] Beef Qty:3 $20.00 Exp:18/03/2020 [Location: Index 1]\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + Ui.LS"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + \"2.[Meat] Beef cubes Qty:3 $20.00 Exp:18/03/2020 [Location: Index 2]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchingredient beef\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_empty() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"There are no matching ingredients in your list.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchingredient beef\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_notFound() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ingredientArrayList.add(new Meat(\"Beef\", \"meat\", 3, 20, \"18/03/2020\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ingredientArrayList.add(new Meat(\"Beef cubes\", \"meat\", 3, 20, \"18/03/2020\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"There are no matching ingredients in your list.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchingredient pork\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 4,
      "jinfayap": 55
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/SearchRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class SearchRecipeCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_notEmpty() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        addFirstRecipe(recipeArrayList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        addSecondRecipe(recipeArrayList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                \"Here are your matching recipes in your list\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + Ui.LS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + \"1.Chicken Salad [Location: Index 1]\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + Ui.LS"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + \"2.Chicken Stew [Location: Index 2]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchrecipe chicken\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_empty() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"There are no matching recipes in your list.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchrecipe chicken\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_notFound() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        addFirstRecipe(recipeArrayList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"There are no matching recipes in your list.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchrecipe pork\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void addSecondRecipe(ArrayList\u003cRecipe\u003e recipeArrayList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Recipe newRecipe \u003d new Recipe();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        newRecipe.recipeName \u003d \"Chicken Stew\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e recipeItems2 \u003d newRecipe.getRecipeItem();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        recipeItems2.add(newRecipe.createIngr(\"Chicken Breast\", \"meat\", 2));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        recipeItems2.add(newRecipe.createIngr(\"Lettuce\", \"vegetable\", 4));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        recipeArrayList.add(newRecipe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void addFirstRecipe(ArrayList\u003cRecipe\u003e recipeArrayList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Recipe newRecipe \u003d new Recipe();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        newRecipe.recipeName \u003d \"Chicken Salad\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e recipeItems \u003d newRecipe.getRecipeItem();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        recipeItems.add(newRecipe.createIngr(\"Chicken Breast\", \"meat\", 2));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        recipeItems.add(newRecipe.createIngr(\"Lettuce\", \"vegetable\", 4));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        recipeArrayList.add(newRecipe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 4,
      "jinfayap": 72
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/object/ExpenditureTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.object;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "class ExpenditureTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void saveExpenditureFile() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void loadExpenditureVariables() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Expenditure nullDateExpenditure \u003d Expenditure.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        nullDateExpenditure.loadExpenditureVariables(50, 20, null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(0, nullDateExpenditure.totalExpenditure);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(0, nullDateExpenditure.amountUsedInCooking);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertTrue(nullDateExpenditure.lastSavedDate \u003d\u003d null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        calendar.set(Calendar.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        calendar.set(Calendar.MINUTE, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        calendar.set(Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date pastMonday \u003d calendar.getTime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date today \u003d new Date();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        long daysDifference \u003d (pastMonday.getTime() - today.getTime()) / 1000 / 60 / 60 / 24;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertTrue(daysDifference \u003c\u003d 7);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (pastMonday.before(today)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Expenditure loadExpenditure \u003d Expenditure.getInstance();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            loadExpenditure.loadExpenditureVariables(200.38, 20.00, today);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            assertEquals(200.38, loadExpenditure.totalExpenditure);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            assertEquals(20, loadExpenditure.amountUsedInCooking);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            assertEquals(today, loadExpenditure.lastSavedDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            //pastMonday after today"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Expenditure resetDateExpenditure \u003d Expenditure.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            resetDateExpenditure.loadExpenditureVariables(200.38, 20.00, today);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            assertEquals(0, resetDateExpenditure.totalExpenditure);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            assertEquals(0, resetDateExpenditure.amountUsedInCooking);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            assertEquals(today, resetDateExpenditure.lastSavedDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void resetExpenditureData() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void addToExpenditure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Expenditure.getInstance().totalExpenditure \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Expenditure.getInstance().addToExpenditure(0.5, 20);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(10, Expenditure.getInstance().totalExpenditure);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void removeFromExpenditure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void addToAmountUsed() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void addAmountForCooking() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void editExpenditure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void changePrice() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void promptUser() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void isValidResponse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 92
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.KitchenHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.AddChoreCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.AddIngredientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.DeleteChoreCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.InvalidCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.SearchChoreCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.SearchRecipeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.SearchIngredientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.common.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static seedu.kitchenhelper.parser.Parser.splitInputLine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void parseUserCommand_testPass() throws KitchenHelperException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().parseUserCommand("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                \"addingredient /n Beef /c Meat /q 30 /p 20.2 /e 20/02/2022\") instanceof AddIngredientCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().parseUserCommand(\"searchingredient Beef\") instanceof SearchIngredientCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().parseUserCommand(\"searchrecipe chicken\") instanceof SearchRecipeCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().parseUserCommand(\"searchchore groceries\") instanceof SearchChoreCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void parseUserCommand_testFail() throws KitchenHelperException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .parseUserCommand(\"dada /n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\") instanceof AddIngredientCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void prepareAddInventory_testPass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String correctAttributes \u003d \"/n Beef /c Meat /q 30 /p 20.2 /e 20/02/2022\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().prepareAddIngredient(correctAttributes) instanceof AddIngredientCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d String.format(Messages.MESSAGE_ADD_INGREDIENT_SUCCESS, \"Beef\", \"Meat\", 30, 20.2, \"20/02/2022\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(output, showToConsole(new KitchenHelper()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .executeCommand(new Parser().prepareAddIngredient(correctAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void prepareAddInventory_testFail() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String incorrectAttributes \u003d \"/ Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().prepareAddIngredient(incorrectAttributes) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d \"Invalid Command Format!\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        + \"Adds a ingredient to the ingredient list. /n \u003cINGREDIENT\u003e /c \u003cCATEGORY\u003e /q \u003cQUANTITY\u003e /p \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        + \"\u003cPRICE\u003e /e\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        + \" \u003cEXPIRY\u003e\\n\" + \"Example: addingredient /n Beef /c Meat /q 1 /p 13.5 /e 13/02/2022\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(output, showToConsole(new KitchenHelper()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .executeCommand(new Parser().prepareAddIngredient(incorrectAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void prepareAddChore_testPass() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String correctAttributesWithString \u003d \"buy groceries /by Tuesday 12pm\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertTrue(new Parser().prepareAddChore(correctAttributesWithString) instanceof AddChoreCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String correctAttributesWithDate \u003d \"buy groceries /by 14/04/2020 12:00\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        AddChoreCommand addChoreCommandDate"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                \u003d (AddChoreCommand) new Parser().prepareAddChore(correctAttributesWithDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertTrue(addChoreCommandDate.getDateStr().isEmpty());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String overdueDate \u003d \"buy groceries /by 14/03/2020 12:00\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertTrue(new Parser().prepareAddChore(overdueDate) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void prepareAddChore_testFail() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String incorrectAttributes \u003d \"buy groceries\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String output \u003d \"Invalid Command Format!\\nAdds a chore to the chore list. \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                + \"TASK /by DEADLINE OR TASK /by \u003cdd/MM/yyyy HH:mm\u003e\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                        + \"Example: addchore buy groceries /by Tuesday 12pm \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                + \"OR addchore buy groceries /by 14/04/2020 12:00\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(output, showToConsole("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                new KitchenHelper().executeCommand(new Parser().prepareAddChore(incorrectAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    void prepareDeleteIngredient_testPass() throws KitchenHelperException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String correctAttributes \u003d \"/i 1\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //checking the instance of the DeleteIngredientCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertTrue(new Parser().prepareDeleteIngredient(correctAttributes) instanceof DeleteIngredientCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    void prepareDeleteIngredient_testFail() throws KitchenHelperException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String incorrectAttributes \u003d \"/i 1\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //checking the instance of the DeleteIngredientCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertTrue(new Parser().prepareDeleteIngredient(incorrectAttributes) instanceof DeleteIngredientCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String output \u003d String.format(DeleteIngredientCommand.COMMAND_FAILURE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(output, showToConsole(new KitchenHelper()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                .executeCommand(new Parser().prepareDeleteIngredient(incorrectAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    void prepareDeleteRecipeIndex_testPass() throws KitchenHelperException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String correctAttributes \u003d \"/i 1\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //checking the instance of the DeleteRecipeCommand"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertTrue(new Parser().prepareDeleteRecipe(correctAttributes) instanceof DeleteRecipeCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    void prepareDeleteRecipeIndex_testFail() throws KitchenHelperException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String incorrectAttributes \u003d \"/i -1\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //checking the instance of the DeleteRecipeCommand"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertTrue(new Parser().prepareDeleteRecipe(incorrectAttributes) instanceof DeleteRecipeCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String output \u003d String.format(DeleteRecipeCommand.COMMAND_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(output, showToConsole(new KitchenHelper()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                .executeCommand(new Parser().prepareDeleteRecipe(incorrectAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    void prepareDeleteRecipeName_testPass() throws KitchenHelperException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String correctAttributes \u003d \"/n Chicken Salad\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //checking the instance of the DeleteRecipeCommand"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertTrue(new Parser().prepareDeleteRecipe(correctAttributes) instanceof DeleteRecipeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    void prepareDeleteRecipeName_testFail() throws KitchenHelperException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String incorrectAttributes \u003d \"/n Chicken\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        //checking the instance of the DeleteRecipeCommand"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertTrue(new Parser().prepareDeleteRecipe(incorrectAttributes) instanceof DeleteRecipeCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String output \u003d String.format(DeleteRecipeCommand.COMMAND_FAILURE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(output, showToConsole(new KitchenHelper()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                .executeCommand(new Parser().prepareDeleteRecipe(incorrectAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void prepareDeleteChore_testPass() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String correctAttributes \u003d \"1\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertTrue(new Parser().prepareDeleteChore(correctAttributes) instanceof DeleteChoreCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void prepareDeleteChore_testFail() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String incorrectAttributes \u003d \"one\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d \"Invalid Command Format!\\n\" + \"Deletes a chore from the chore list. \u003cindex\u003e\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                        + \"Example: deletechore 1\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(output, showToConsole(new KitchenHelper()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                .executeCommand(new Parser().prepareDeleteChore(incorrectAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void splitInputLine_testPass() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String userInput \u003d \"addingredient /n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"addingredient\", splitInputLine(userInput, \" \")[0]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"/n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\", splitInputLine(userInput, \" \")[1]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void splitInputLine_testFail() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String userInput \u003d \"addingredient /n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"addingredient\", splitInputLine(userInput, \"\")[0]);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"/n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\", splitInputLine(userInput, \"/p\")[1]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void isValidUserInputFormat_testPass() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String regex \u003d \"/n( )+[a-zA-Z]+( [a-zA-Z]+)*( )+/c( )+[a-zA-Z]+( )+/q( )+[0-9]+( )+/p( )+\\\\d+(\\\\.\\\\d{1,2})?( )\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                       + \"+/e( )+\\\\d{2}/\\\\d{2}/\\\\d{4}( )*\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Beef cubes /c Meat /q 30 /p 20.2 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Kailan /c Vegetable /q 30 /p 20 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n miLK /c dairy /q 30 /p 20.2 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n APPLE /c fRuit /q 20 /p 20.22 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Rice /c Staple /q 30 /p 222.11 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .isValidUserInputFormat(\"/n apple cider alcohol drink /c Drink /q 30 /p 50.1 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n spoon /c miscellaneous /q 30 /p 20.2 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Beef cubes /c Meat /q 30 /p 20.2 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Extra space between ingredient\u0027category and identifier /q"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n APPLE /c fRuit  /q 20 /p 20.22 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void isValidUserInputFormat_testFail() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String regex \u003d \"/n( )+[a-zA-Z]+( [a-zA-Z]+)*( )+/c( )+[a-zA-Z]+( )+/q( )+[0-9]+( )+/p( )+\\\\d+(\\\\.\\\\d{1,2})?( )\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                       + \"+/e( )+\\\\d{2}/\\\\d{2}/\\\\d{4}( )*\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Invalid price notation"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n Beef /c Meat /q 30 /p 20.212 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Invalid Date format"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n Beef cubes /c Meat /q 30 /p 20.2 /e 12-13/2020\", regex));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Missing identifier /n"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"Kailan /c Vegetable /q 30 /p 20 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Missing space between ingredient name and identifier /c"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n miLK/c dairy /q 30 /p 20.2 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Invalid Date format, consist of 3 digit in day in a month"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n Rice /c Staple /q 30 /p 222.11 /e 201/02/2020\", regex));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Missing parameter"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n Beef cubes /c Meat /q 30 /p /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    String showToConsole(String... message) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            output.append(m);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 60,
      "jinfayap": 113,
      "cheongisabella": 35
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/storage/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package seedu.kitchenhelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private static String currentDirectory \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String OUTPUT_INGREDIENT \u003d currentDirectory + \"/src/test/data/StorageTest/outputIngredient.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String OUTPUT_RECIPE \u003d currentDirectory + \"/src/test/data/StorageTest/outputRecipe.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String OUTPUT_CHORE \u003d currentDirectory + \"/src/test/data/StorageTest/outputChore.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String OUTPUT_EXPENDITURE \u003d currentDirectory"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + \"/src/test/data/StorageTest/outputExpenditure.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String NEW_OUTPUT_INGREDIENT \u003d currentDirectory"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            + \"/src/test/data/NewStorageTest/outputIngredient.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String NEW_OUTPUT_RECIPE \u003d currentDirectory + \"/src/test/data/NewStorageTest/outputRecipe.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String NEW_OUTPUT_CHORE \u003d currentDirectory + \"/src/test/data/NewStorageTest/outputChore.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String NEW_OUTPUT_EXPENDITURE \u003d currentDirectory"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + \"/src/test/data/NewStorageTest/outputExpenditure.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Storage storage \u003d new Storage(OUTPUT_INGREDIENT, OUTPUT_RECIPE, OUTPUT_CHORE, OUTPUT_EXPENDITURE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void getIngredientDataTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage newStorage \u003d new StubStorage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            List\u003cIngredient\u003e ingredients \u003d storage.getIngredientData();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            List\u003cIngredient\u003e stubIngredients \u003d newStorage.getIngredientData();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            assertEquals(ingredients, stubIngredients);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void getRecipeData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage newStorage \u003d new StubStorage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            List\u003cRecipe\u003e recipe \u003d storage.getRecipeData();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            List\u003cRecipe\u003e stubRecipe \u003d newStorage.getRecipeData();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            assertEquals(recipe, stubRecipe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void getChoreData() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage newStorage \u003d new StubStorage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            List\u003cChore\u003e chore \u003d storage.getChoreData();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            List\u003cChore\u003e stubChore \u003d newStorage.getChoreData();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            assertEquals(chore, stubChore);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void saveIngredientData() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void saveRecipeData() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void saveChoreData() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private class StubStorage extends Storage {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        public StubStorage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            super(NEW_OUTPUT_INGREDIENT, NEW_OUTPUT_RECIPE, NEW_OUTPUT_CHORE, NEW_OUTPUT_EXPENDITURE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        public ArrayList\u003cIngredient\u003e getIngredientData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ArrayList\u003cIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            loadingIngredients(\"Beef\", \"meat\", 3, 20.0, \"2020-03-18\",ingredients);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            loadingIngredients(\"Chicken\", \"meat\", 3, 20.0, \"2020-03-18\", ingredients);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return ingredients;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        public ArrayList\u003cRecipe\u003e getRecipeData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Recipe freshRecipe \u003d new Recipe();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ArrayList\u003cIngredient\u003e recipeItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            freshRecipe.setRecipeNameForStorage(\"Chicken Salad\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            freshRecipe.recipeIngrQty \u003d 2;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            loadingRecipeItems(\"Chicken Breast\", \"meat\", 2, 0.0, \"null\", recipeItems);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            loadingRecipeItems(\"Lettuce\", \"vegetable\", 4, 0.0, \"null\", recipeItems);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            freshRecipe.addIngredientsToRecipeFromArrayList(recipeItems);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ArrayList\u003cRecipe\u003e recipe \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipe.add(freshRecipe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return recipe;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        public ArrayList\u003cChore\u003e getChoreData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ArrayList\u003cChore\u003e chore \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Chore todo \u003d Chore.createChoreWhenLoadFile(\"buy milk\", \"Tuesday 12pm\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            chore.add(todo);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return chore;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 98,
      "cheongisabella": 7,
      "JensonWee": 9
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addrecipe /n Chicken Stew /i Chicken Breast:2:meat, Lettuce:4:vegetable"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "addrecipe /n warm milk /i HL Milk:1:Dairy"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "displayexpenditure"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n HL Milk /c Dairy /q 3 /p 12.2 /e 01/03/2022"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "displayexpenditure"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "cookrecipe /n warm milk /p 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "displayexpenditure"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "listrecipe all"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Beef /c meat /q 3 /p 20 /e 18/03/2022"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Beef cubes /c meat /q 3 /p 20 /e 18/03/2022"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Beef cubes /c meat /q 5 /p 20 /e 18/03/2022"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Chicken Breast /c meat /q 4 /p 20 /e 20/12/2022"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Chicken Breast /c meat /q 3 /p 20 /e 18/12/2022"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n kailan /c Vegetable /q 30 /p 30.45 /e 12/03/2022"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n HL Milk /c Dairy /q 3 /p 12 /e 14/03/2022"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Milo /c Drink /q 30 /p 10 /e 20/012/2022"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Pear /c fruit /q 1 /p 1 /e 02/02/2022"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Lettuce /c Vegetable /q 10 /p 20 /e 20/12/2022"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Lettuce /c Vegetable /q 2 /p 20 /e 09/03/2022"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Apple /c fruit /q 1 /p 1 /e 02/02/2022"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Apple /c fruit /q 1 /p 1 /e 01/02/2022"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "addingredient /n Apple /c fruit /q 2 /p 1 /e 03/02/2022"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "addchore buy groceries /by Tuesday 12pm"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "addchore buy groceries"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "addchore buy groceries /by 05/04/2021 08:30"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "listchore"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "searchchore groceries"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "searchingredient beef"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "searchrecipe chicken"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "cookrecipe /n Chicken Salad /p 2"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "cookrecipe /n Chicken Salad /p 3"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleterecipe /n Chicken Salad"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deleterecipe /n Chicken Salad"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deleterecipe /n Chicken Stew"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "displayexpenditure"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deleteingredient /n HL milk"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 1 /q 2"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 1 /q 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "no"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "no"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "displayexpenditure"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 2 /q 40"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 2 /q 1"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "no"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "yes"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "displayexpenditure"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i /q"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i -1"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 1 /1 -1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 4"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "yes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "displayexpenditure"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 3"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "n"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "no"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "no"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 2"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "no"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "no"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "no"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "no"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 1"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "no"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "no"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deletechore 1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Beef /c meat /q 3 /p 20 /e 18/03/2022"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "reset"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 1,
      "yantingsanity": 17,
      "jinfayap": 21,
      "cheongisabella": 26,
      "alwayshuizhen": 3,
      "JensonWee": 12
    }
  }
]
