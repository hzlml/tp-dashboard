[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "group \u0027seedu.kitchenhelper\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    mainClassName \u003d \"seedu.kitchenhelper.KitchenHelper\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    archiveBaseName \u003d \"kitchenhelper\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 4,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jin Fa | [Github](https://github.com/jinfayap) | [Portfolio](docs/team/jinfa.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jin Xing | [Github](https://github.com/) | [Portfolio](docs/team/jinxing.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Isabella | [Github](https://github.com/) | [Portfolio](docs/team/isabella.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Lim Yan Ting| [Github](https://github.com/yantingsanity) | [Portfolio](docs/team/yanting.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hui Zhen | [Github](https://github.com/alwayshuizhen) | [Portfolio](docs/team/huizhen.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zi Hui | [Github](https://github.com/zi-hui) | [Portfolio](docs/team/zihui.md)"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 1,
      "yantingsanity": 2,
      "cheongisabella": 4,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "By: `CS2113T-M16-2` Since: `2020`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "![Supported Java versions](https://img.shields.io/badge/Java-11-blue.svg) ![Supported OS](https://img.shields.io/badge/Supported%20OS-Windows|MacOS|Linux-yellow.svg) "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- [Developer Guide](#developer-guide)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  * [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [1.1. Purpose](#11-purpose)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [1.2. Scope](#12-scope)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  * [2. Setting up](#2-setting-up)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  * [3. Design](#3-design)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.1. Architecture](#31-architecture)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.2. Ui Component](#32-ui-component)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.3. Logic Component](#33-logic-component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.4. Model Component](#34-model-component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.5. Storage Component](#35-storage-component)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.6. Common Classes](#36-common-classes)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  * [4. Implementation](#4-implementation)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [4.1.Ingredient-related Features](#41ingredient-related-features)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "      - [4.1.1. Addition of ingredient](#411-addition-of-ingredient)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.1.2. List all/ specific ingredient(s)](#412-list-all-specific-ingredients)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.1.3. Delete all/ specific ingredients(s)](#413-delete-all-specific-ingredientss)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.1.4. Search for ingredients based on keyword(s)](#414-search-for-ingredients-based-on-keywords)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [4.2. Recipe-related Features](#42-recipe-related-features)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "      - [4.2.1. Addition of recipe](#421-addition-of-recipe)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.2.2. List all/ specific recipe(s)](#422-list-all-specific-recipes)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.2.3. Delete all/ specific recipe(s)](#423-delete-all-specific-recipes)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.2.4. Search for recipe based on keyword(s)](#424-search-for-recipe-based-on-keywords)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [4.3. Chore-related Features](#43-chore-related-features)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "      - [4.3.1. Addition of chore](#431-addition-of-chore)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.3.2. List all/ specific chore(s)](#432-list-all-specific-chores)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.3.3. Delete all/ specific chore(s)](#433-delete-all-specific-chores)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [4.3.4. Search for chore based on keyword(s)](#434-search-for-chore-based-on-keywords)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [4.4. Storage](#44-storage)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "      - [4.4.1. Select files to load from and save to](#441-select-files-to-load-from-and-save-to)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "      - [4.4.2. Save current state](#442-save-current-state)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [4.5. Logging](#45-logging)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    + [4.6. Configuration](#46-configuration)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "  * [Appendices](#appendices)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [Appendix A: Product Scope](#appendix-a-product-scope)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [Appendix C: Value proposition - Use cases](#appendix-c-value-proposition---use-cases)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [Appendix D: Non-Functional Requirements](#appendix-d-non-functional-requirements)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [Appendix E: Glossary](#appendix-e-glossary)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [Appendix G: Instructions for Manual Testing](#appendix-g-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "      - [G.1. Launch and Shutdown](#g1-launch-and-shutdown)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "      - [G.2. Deleting a](#g2-deleting-a)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "      - [G.3. Saving data](#g3-saving-data)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 1.1. Purpose"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 1.2. Scope"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "## 2. Setting up"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 3.1. Architecture"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 3.2. Ui Component"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "![Ui Component](/docs/images/UI_Component.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "API: `Ui.java`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "The `Ui` component is a singleton class where all interaction will be made through this component"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "The `Ui` component,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "* Executes user commands using the command component"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "* Listens for changes and outputs messages from the Command component"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 3.3. Logic Component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 3.4. Model Component"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 3.5. Storage Component"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "image::Storage.png[Storage Class Diagram]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "A Storage object is created by the KitchenHelper class to handle the loading and saving of ingredients, recipes and chores data."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The Storage() method acts as a constructor with filepaths to local save files for ingredients, recipes and chores data."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The getIngredientData(), getRecipeData() and getChoreData() methods are used to read saved data from local files into the current session of KitchenHelper. loadingIngredients() and loadingRecipeItems() methods are called in getIngredientData() and getRecipeData() respectively to sort out which Ingredient object class each object belongs to."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The saveIngredientData(), saveRecipeData() and saveChoreData() methods write the current state of KitchenHelper into the local save files by calling them in command classes such as AddChoreCommand and DeleteIngredientCommand."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 3.6. Common Classes "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Classes used by multiple components are in the `seedu.kitchenhelper.object` package."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "This section describes some details on how the features are being implemented. All recipe/ ingredient/ chore-related features can be broken down into 4 distinct functionality, addition, listing, deletion and searching."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 4.1.Ingredient-related Features"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.1.1. Addition of ingredient"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The addition of the ingredient feature allows the user to keep track of the ingredients in the ingredient’s list.   "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "For example, `addingredient /n beef /c meat /q 2 /p 20 /e 2020-02-18` will add the ingredient `beef` "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "which have the following attributes:  category `meat`, quantity `2`, price `$20` and expiry `2020-02-18`  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### 4.1.1.1. Implementation"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "{insert sequence diagram of addingredient command}  "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The following steps explained “Sequence diagram for an example `addingredient` command”:  "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. The user enters  `addingredient /n beef /c meat /q 2 /p 20 /e 2020-02-18`.  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()` which splits the user’s input into 2 parts "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "and enters a switch case for execution.  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. `parseUserCommand` in the Parser object will call its own method `Parser#prepareAddIngredient`.  "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. `prepareAddIngredient` will first validates the user’s remaining attributes and if successful, "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "it will execute `AddIngredientCommand` with the attributes, "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "otherwise it will throw an `InvalidCommand` along with the syntax of `addingredient command`  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "5. On execute(), the ingredient is added based on the category into the ingredient’s list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.1.2. List all/ specific ingredient(s)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "The listing of Ingredients feature shows the user the existing data that is added by the user. The user is also able to specify which category would they want to display."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Command usage: `listingredient all` will show the details of all ingredients"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "which have the following attributes:  category `all`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "#### 4.1.2.1. Implementation"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "{insert sequence diagram}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Steps for `listingredient all` command:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "1. The user enters  `listingredient all`.  "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()` which splits the user’s input into 2 parts "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "and enters a switch case for execution.  "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "3. `parseUserCommand` in the Parser object will call its own method `Parser#prepareListIngredient`.  "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "4. `prepareListIngredient` will first validate if the user\u0027s input is belongs to `all/dairy/drink/fruit/meat/miscellaneous/staple/vegetable`, "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "following, it will return the items belonging into the category, "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "otherwise it will throw an `InvalidCommand` along with the syntax of `listingredient command`  "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "5. On execute(), the ingredient in the list will be printed out."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.1.3. Delete all/ specific ingredients(s)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The deletion feature for ingredients allows the user to delete ingredients either by the name or index of the ingredients. In addition to that, it allows users to reduce the quantity of a specific ingredient. "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cb\u003eImplementation\u003c/b\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "When the user attempts to reduce the quantity of ingredient at index 1 of the ingredients inventory by 4,  the `Kitchen Helper`, ‘Parser’ and ‘DeleteRecipeCommand` class will be called upon. The following sequence of steps will then occur: "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "1. The user keyed in “deleteingredient /i 1 /q 4”`. "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    2. A `UI` object will be created and it will call `UI#getUserCommand()` method to take in the input that the user has keyed in."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    3. A `String` object will be returned and saved into the `userCommandInput` variable in `Kitchen Helper`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    4. The variable `userCommandInput` is being parsed into the `Parser` class as an argument for this method `Parser#parseUserCommand`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "2. The command inserted by the user is being parsed into the `Parser` and a new `Command` object is being created. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    2. The variable `userCommandInput` will be identified as `deleteingredient` in the `Parser#parseUserCommand()`.The `Parser#prepareDeleteIngredient()` is being called to prepare the `userCommandInput` string to create a `DeleteIngredientCommand` object."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    3. The `DeleteIngredientCommand` object is created with the ingredientIndex and quantity set to 4. "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "3. The Command is now being executed. "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    2. The `DeleteIngredientCommand#execute()` will be called."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    3. As this is a deletion by ingredient index, the `ingredientIndex` variable is not null. As the `ingredientIndex` is not null, `DeleteIngredientCommand#deleteIngredientByIndex()`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    4. Next, `DeleteIngredientCommand#deleteIngredient()` is called to reduce the quantity of this ingredient since the `quantity` variable is not null. "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    6. Next, `DeleteIngredientCommand#updateNewQuantity()` will be called to update the quantity of this ingredient in our ingredients’ inventory."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    7. Lastly, a String called `feedbackToUser`will be returned to the user to inform the user of the outcome of the command. "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "4. The details will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cb\u003eDesign Considerations\u003c/b\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Aspect: How is the `DeleteIngredientCommand` initialise. \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Alternative 1 (Current Choice) \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|**Pros** | This gives us more flexibility on what object can be created with different variables since there are two methods of delete of ingredients. |  "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|**Cons** | There is an overload of constructors.|"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Alternative 2 \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|**Pros** |The Parser can call for one main default constructor. |"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|**Cons** | The single constructor will need to deal with 2 different methods of deletion, causing the constructor to have more than one purpose.|"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.1.4. Search for ingredients based on keyword(s)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The search for ingredients feature allows the user to find ingredients using a keyword in the ingredient’s list.  "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "For example, `searchingredient beef` will find all the ingredients that contain `beef`.  "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### 4.1.4.1. Implementation  "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "{insert sequence diagram of searchingredient command}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The following steps explained “Sequence diagram for an example `searchingredient` command”:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. The user enters `searchingredient beef`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()` which splits the user’s input into 2 parts "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "and enters a switch case for execution."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. `parseUserCommand` in the Parser object will call a method `SearchIngredientCommand`."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. On execute(), the list of ingredients that contains the keyword will be displayed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### 4.1.4.2. Design considerations:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Aspects: How `searchingredient` executes:  "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- Alternative 1 (current choice): Find if the keyword is part of the substring of the ingredient, "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "`[Meat] Beef Qty:3 $20.00 Exp:2020-03-18.`  "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Pros** | 1. Easily to find by any attributes such as category, ingredient’s name,  quantity, price and expiry date.|  "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Cons** | 1. Searching `beef [meat]` will fail to show any matching result.|"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- Alternative 2: Take in all the predicates given by the user and find using the predicates as a keyword"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Pros** | 1. More accurate searching of the ingredient is available for the user.|  "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Cons** | 1. Requires users to enter more precise predicate keywords which could be more inconvenient.|"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 4.2. Recipe-related Features"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.2.1. Addition of recipe"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Users can add a new recipe to the application where there must be at least one or more `ingredient`s. The failure to do so will trigger an exception where the user will be notified of an invalid command and the syntax of the addition of recipe will be displayed. "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "\u003e It is important that the name of the new recipe has not appeared in the list of recipes in the application."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "When the user attempts to create a new recipe, the `AddRecipeCommand`, ‘Parser’ and `Recipe` class will be accessed and the following sequence of actions are called to create a `recipe` object:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "##### 4.2.1.1. Implementation "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "When the user attempts to create a new recipe, the `AddRecipeCommand`, ‘Parser’ and `Recipe` class will be accessed and the following sequence of actions are called to create a `recipe` object:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "1. User executes `addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable` "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. A `Ui` object will be created and calls `Ui#getUserCommand()`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. Input will be parsed in `Command#parseUserCommand()` and identified with the keyword `addrecipe`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    ![Add Recipe Step 1](/docs/images/AddRecipe1.png)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "2. Parsing of user input and creation of command object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. This will automatically trigger the parsing of the user’s input string into a suitable format for the addition of `recipe` object in `Command#prepareAddRecipe()`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. A `AddRecipeCommand` object will be created and calls `AddRecipeCommand#setAttributesOfCmd()` to set the contents of the command into reader friendly formats."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    ![Add Recipe Step 2](/docs/images/AddRecipe2.png)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. The newly created object will call `#AddRecipeCommand#execute` which starts the process of adding a recipe, thus calling `Recipe#AddRecipe()`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. A `Recipe` object will be created with its name that was parsed in step 2."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    1. An additional step is included where a check for an existing recipe with the same name is conducted with `#AddRecipeCommand#checkIfRecipeExist()`. A `KitchenHelperException` exception will be triggered when there is an existing recipe."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    ![Add Recipe Step 3](/docs/images/AddRecipe3.png | width\u003d150)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "4. `Ingredient`s parsed in step 2 will be added to the newly created recipe according to their category through the calling of `Recipe#addIngredientsToRecipe()`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "\t"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "\t![Add Recipe Step 4](/docs/images/AddRecipe4.png)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "All description and warnings to the user utilises the `UI` class, which controls the printing of the text on the console. "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "The following sequence diagram shows how the `addrecipe` command works"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "{insert diagram}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "##### 4.2.1.2. Design Considerations"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Aspect: Parsing of the user’s input command"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Alternative 1 (current choice): The key parameters that are required are divided by the delimiter of ‘/’ followed by a specific letter. `(i.e. /i)`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Pros** | User would be able to have strings that may contain spaces (i.e. /n Chicken Salad /i Breast meat:2:meat) |"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Cons** | The order of delimiters needs to be standardized, users will not be able to re-order the delimiters. |"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Alternative 2: Multiple prompts for user’s input of a recipe name and ingredient(s)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Pros** | Users would not have to make sure that their command is syntactically right |"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Cons** | The constant prompting could subject the application to a negative experience in the difficulty to use the commands. |"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Alternative 3: User’s command are divided by space"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Pros** | The parsing can be easily done by calling Java built-in function `.split()` |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "|**Cons** | Values for each variable cannot contain spaces which makes the application restrictive. |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.2.2. List all/ specific recipe(s)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "The listing of Recipe feature shows the user the existing recipe and it\u0027s details that is added by the user."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Command usage: `listrecipe 1` will show the details of recipe number `1`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "which have the following attributes:  recipe number `1`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "#### 4.1.2.1. Implementation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "{insert sequence diagram}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Steps for `listrecipe 1` command:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "1. The user enters  `listrecipe 1`.  "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()` which splits the user’s input into 2 parts "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "and enters a switch case for execution.  "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "3. `parseUserCommand` in the Parser object will call its own method `Parser#prepareListRecipe`.  "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "4. `prepareListIngredient` will first validate if the user\u0027s input is a valid integer and if it\u0027s more than 0, "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "following, it will return the details belonging to the recipe, "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "otherwise it will throw an `InvalidCommand` along with the syntax of `listrecipe command`  "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "5. On execute(), the details in the recipe will be printed out."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.2.3. Delete all/ specific recipe(s)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The deletion feature for specific recipes allows the user to delete recipes either by the name or index of the recipe. "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cb\u003eImplementation\u003c/b\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "When the user attempts to delete the `Chicken Rice` recipe from Kitchen Helper, the `Kitchen Helper`, `Parser` and `DeleteRecipeCommand` class will be called upon. The following sequence of steps will then occur: "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "1. The user keyed in “deleterecipe /n `Chicken Rice”`."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    2. A `UI` object will be created and it will call `UI#getUserCommand()` method to take in the input that the user has keyed in. "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    3. A `String` object will be returned and saved into the `userCommandInput` variable in `Kitchen Helper`. "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    4. The variable `userCommandInput` is being parsed into the `Parser` class as an argument for this method `Parser#parseUserCommand()`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "2. The command inserted by the user is being parsed into the `Parser` and a new `Command` object is being created. "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    2. The variable `userCommandInput` will be identified as `deleterecipe` in the `Parser#parseUserCommand()`.The `Parser#prepareDeleteRecipe()` is being called to prepare the `userCommandInput` string to create a `DeleteRecipeCommand` object."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "3. The command is now being executed."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    2. The `DeleteRecipeCommand#execute()` will be called."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    3. As this is a deletion by recipe name, the `recipeIndex` variable is set as null. As the variable is null, `DeleteRecipeCommand#deleteRecipeByName()` will be called."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    4. Next, the `DeleteRecipeCommand#getRecipeIndex()` to get the index based on the recipe name that the user has inputted. With the given index, `DeleteRecipeCommand#deleteRecipe()` will be called to delete the recipe. "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    5. Lastly, a String called `feedbackToUser`will be returned to the user to inform the user of the outcome of the command. "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "4. The details will then be printed onto the console using `Ui#showResultToUser(result)`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cb\u003eDesign Considerations\u003c/b\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Aspect: How is the `DeleteRecipeCommand` initialise. \u003cbr\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Alternative 1 (Current Choice): Usage of 2 constructors \u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|**Pros** | This gives us more flexibility on what object can be created with different variables since there are two methods of recipe deletion. |  "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|**Cons** | There is an overload of constructors.|"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Alternative 2: Usage of 1 constructor \u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|**Pros** |The Parser can call for one main default constructor. |"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "|**Cons** | The single constructor will need to deal with 2 different methods of deletion, causing the constructor to have more than one purpose.|"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.2.4. Search for recipe based on keyword(s)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The search for recipe feature allows the user to find recipes using a keyword in the recipe’s list.  "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "For example, `searchrecipe Chicken` will find all recipes that contain `Chicken`.  "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### 4.2.4.1. Implementation"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "{insert sequence diagram of searchrecipe command}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The following steps explained “Sequence diagram for an example `searchrecipe` command”:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. The user enters `searchrecipe Chicken`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()` which splits the user’s input into 2 parts "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "and enters a switch case for execution.  "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. `parseUserCommand` in the Parser object will call a method `SearchRecipeCommand`.  "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. On execute(), the list of recipes\u0027 name that contains the keyword will be displayed.  "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### 4.2.4.2. Design considerations:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Aspects: How `searchrecipe` executes:  "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- Alternative 1 (current choice): Find if the keyword is part of the substring of the recipe’s name "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "and returns the recipe’s name and the index of recipe in the recipe’s list.  "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Pros** | 1. Easy to find similar recipe by their name.|  "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Cons** | 1. Only shows the different recipe that contains the keyword.|"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- Alternative 2: Find the keyword within the recipe’s ingredient.  "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Pros** | 1. More accurate searching of the recipe that uses the ingredients.|  "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Cons** | 1. Could be more memory intensive to find if the list is huge.|"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 4.3. Chore-related Features"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.3.1. Addition of chore"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.3.2. List all/ specific chore(s)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.3.3. Delete all/ specific chore(s)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 4.3.4. Search for chore based on keyword(s)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The search for chore feature allows the user to find chores using a keyword in the chore’s list.  "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "For example, `searchchore groceries` will find all chores that contain `groceries`.  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### 4.3.4.1. Implementation  "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "{insert sequence diagram of searchchore command}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The following steps explained “Sequence diagram for an example `searchchore` command”:  "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. The user enters `searchchore groceries`  "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()` which splits the user’s input into 2 parts "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "and enters a switch case for execution.  "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. `parseUserCommand` in the Parser object will call a method `SearchChoreCommand`.  "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. On execute(), the list of chore that contains the keyword will be displayed.  "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "##### 4.3.4.2. Design considerations:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- Alternative 1 (current choice): Find if the keyword is part of the substring of the chore, "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "`[x] buy groceries (by: Tuesday 12pm)`.   "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Pros** | 1. Easily to find by any attributes such as description and date.|  "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Cons** | 1. Searching `buy groceries [x]` will fail to show any matching result.|"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- Alternative 2: Take in all the predicates given by the user and find using the predicates as a keyword  "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Pros** | 1. More accurate searching of the chore is available for the user..|  "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "|**Cons** | 1. Requires users to enter more precise predicate keywords which could be more inconvenient.|"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 4.4. Storage"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "#### 4.4.1. Select files to load from and save to"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The select files to load from and save to feature allows the user to choose an option to either load their data from the auto-save mode or the manual-save mode. The auto-save mode keeps track of and stores all changes made in the program and provides the user with the most recent representation of their inventory. While the manual-save mode stores the state of the program data from the most recent usage of the save command by the user. "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "If the user chooses the manual-save mode, it will overwrite all the data stored in auto-save mode. However, any subsequent changes made to the program data will be saved by auto-save mode regardless of initial load options. To save by manual-save mode, the user will have to use the save current state function with the save command (see section 4.4.2)[4.4.2. Save current state](#442-save-current-state)."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "\u003cb\u003eImplementation\u003c/b\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "1. For instance, if the User selects to load files from auto-save mode, User executes `1`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "\t1. A `Ui` object will be created and calls `Ui#getUserChoice()` and returns String `UserChoice`. "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "\t1. The `Ui` object then calls `Ui#validUserChoice()` with `UserChoice` as the parameter. If `UserChoice` is invalid, `Ui#validUserChoice()` will call `Ui#askForReInput()`."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "\t1. The variable `userCommandInput` is being parsed into the `Parser` class as an argument for this method `Parser#parseUserCommand()`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "2. Creation of storage object"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    Ingredient data:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    1. A `Storage` object will be created and calls `Storage#getIngredientData()` to load and parse the contents of ingredient save file into a newly created `ingredientList ArrayList\u003cIngredient\u003e`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    1. ` Storage#getIngredientData()` will call `Storage#loadingIngredient()` to create `Ingredient` objects based on the category type of ingredients in the `ingredientList`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    Recipe data:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    1. A `Storage` object will be created and calls `Storage#getRecipeData()` to load and parse the contents of recipe save file into a newly created `recipeList ArrayList\u003cRecipe\u003e`."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    1. `Storage#getRecipeData()` will create a `Recipe` object and `recipeItems ArrayList\u003cIngredient\u003e`. It then calls `Storage#loadingRecipeItems()` to create `Ingredient` objects based on the category type of ingredients in each recipe into the `recipeItems`. Every ` recipeItems` of each recipe will then be added into `recipeList`."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    Chore data:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    1. A `Storage` object will be created and calls `Storage#getChoreData()` to load and parse the contents of chore save file into a newly created `choreList ArrayList\u003cChore\u003e`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "All description and warnings to the user utilises the UI class, which controls the printing of the text on the console."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The sequence diagram below summarizes how loading data works:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "image::Loading.jpeg[Load Data Sequence Diagram]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "\u003cb\u003eDesign considerations:\u003c/b\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Aspects: How saving of files executes:  "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "- Alternative 1 (current choice): Overwriting files with entire current ArrayLists every time changes are made."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Pros** | Easier to implement when it comes to delete commands as there is no need to loop through the whole ArrayList to find and compare the object to delete and update files.|  "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Cons** | Takes more time to load and save.|"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "- Alternative 2: Appending the new changes to the files every time changes are made."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Pros** | Faster as there is no need to go through the whole ArrayList whenever we save since changes are appended individually.|  "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Cons** | Difficult and slower to implement for commands that require deletion of objects.|"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "#### 4.4.2. Save current state"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The save current state feature allows the user to store the current state of the program data by manual-save mode. Manual-save mode data will be updated and replaced with the current state when save command is implemented."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "\u003cb\u003eImplementation\u003c/b\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "The following steps explain how `save` command works:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "1. The user enters `save`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "2. `KitchenHelper` calls `Parser#parseUserCommand()` which splits the user’s input into 2 parts "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "and enters a switch case for execution.  "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "3. `parseUserCommand` in the Parser object will call a method `SaveStateCommand`.  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "4. On execute(), `Storage.copyFile()` will be called three times to copy contents of ingredients, recipes and chore save files into their respective manual-mode save files."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "\u003cb\u003eDesign considerations:\u003c/b\u003e \u003cbr\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Aspects: How saving of current state data executes:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "- Alternative 1 (current choice): Using Files.copy to copy content of auto-save files to manual-save files."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Pros** | Easy to implement as less code is needed with Java 7 Files helper class.|  "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Cons** | Relatively slow copy performance when file size increases.|"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "- Alternative 2: Using FileChannels to copy content of auto-save files to manual-save files."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Pros** | The FileChannels technique is usually faster than its alternatives such as basic streams.|  "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "|**Cons** | It may fail for very large files and more lines of codes are needed for implementation.|"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 4.5. Logging"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Logging in the application refers to storing exceptions, warnings and messages that occur during the execution of Kitchen Helper. It was included to help developers to identify bugs and to simplify their debugging process. "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "The `java.util.logging` package in Java is used for logging. The logging mechanism can be managed from the `KitchenHelper` class through the `kitchenLogs` logger object."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "All control of the logger for the application can be viewed/ altered in the `setUpLogger()` method. The current settings for the logger are as follow:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- All logs of `Level.SEVERE` level will be shown on the console when an input/ program flow has caused a possible disruption to the execution of the program. (See the levels of logging below)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- All information above ‘Level.FINE’ level is logged into a log file, `KitchenLogs.log`."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- Logging is made to be displayed in the `SimpleFormatter` style where the date, class and error description are logged."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Logging Levels:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- `Level.SEVERE`: a serious failure, which prevents normal execution of the program, for end users and system administrators."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- `Level.WARNING`: a potential problem, for end users and system administrators."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- `Level.INFO`: reasonably significant informational message for end users and system administrators."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- `Level.CONFIG`: hardware configuration, such as CPU type."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "- `Level.FINE`, `Level.FINER`, `Level.FINEST`: three levels used for providing tracing information for the software developers."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Additional logging can be done by adding the calling of the global logger and invoking the function `log()`. This will ensure that all loggings will be made to the same file across the various classes. "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "An example is shown below:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "```java"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "kitchenLogs.log(Level.WARNING, description_of_warning_here, e.toString());"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "```"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### 4.6. Configuration"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "## Appendices "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Appendix A: Product Scope"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Appendix B: User Stories"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Appendix C: Value proposition - Use cases"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Appendix E: Glossary"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "* *Mainstream OS* - Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Appendix G: Instructions for Manual Testing"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### G.1. Launch and Shutdown"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### G.2. Deleting a "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### G.3. Saving data"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 93,
      "yantingsanity": 71,
      "jinfayap": 132,
      "-": 27,
      "alwayshuizhen": 164,
      "JensonWee": 31
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "# Kitchen Helper"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Our project, Kitchen Helper is a household application which tracks household inventory, creates recipes which would indicate how much ingredients will be used, and assigns tasks to household members. The application will be easy to use, with intuitive ways of editing, finding and tracking tasks that have been added. It is optimised for those who prefer working with Command Line Interface (CLI). Kitchen Helper provides convenience in our often busy lives, so give this application a chance to help you!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "This user guide aims to help you learn your way around our application, making the learning process smooth and effortless. So what are you waiting for? Let’s go!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 4,
      "-": 5,
      "JensonWee": 1
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "# Kitchen Helper - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "By: `Team CS2113T-M16-2` Since: `March 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "- [User Guide]()"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  * [1. Introduction](#1-introduction)  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  * [2. Quick Start](#2-quick-start)  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  * [3. Features](#3-features)  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [3.1. General Commands](#31-general-commands)  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "       - [3.1.1. Viewing help: `help`](#311-viewing-help-help)  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "       - [3.1.2. Exiting the Program: `exit`](#312-exiting-the-program-exit)  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [3.2. Ingredient](#32-ingredient)  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "       - [3.2.1. Adding an ingredient: `addingredient`](#321-adding-an-ingredient-addingredient)  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "       - [3.2.2. List ingredient: `listingredient`](#322-list-ingredient-listingredient)  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "       - [3.2.3. Delete an ingredient: `deleteingredient`](#323-delete-an-ingredient-deleteingredient)  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "       - [3.2.4. Search for ingredient: `searchingredient`](#324-search-for-ingredient-searchingredient)  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [3.3. Recipe](#33-recipe)  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.3.1. Adding a recipe: `addrecipe`](#331-adding-a-recipe-addrecipe)  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.3.2. List recipe: `listrecipe`](#332-list-recipes-listrecipe-1)  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.3.3. Delete a recipe: `deleterecipe`](#333-delete-a-recipe-deleterecipe)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.3.4. Search for recipe: `searchrecipe`](#334-search-for-recipe-searchrecipe)  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "      - [3.3.5. Cooking a recipe: `cookrecipe`](#335-cooking-a-recipe-cookrecipe)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    + [3.4. Chore](#34-chore)  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.4.1. Adding a chore: `addchore`](#341-adding-a-chore-addchore)  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.4.2. List chore: `listchore`](#342-list-chore-listchore)  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.4.3. Delete a chore: `deletechore`](#343-delete-a-chore-deletechore)  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "      - [3.4.4. Search for chore: `searchchore`](#344-search-for-chore-searchchore)  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    + [3.5 Storage](#35-storage)  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "      - [3.5.1. Select Load Files](#351-select-load-files)  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "      - [3.5.2. Save Current State: `save`](#352-save-current-state-save)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  * [4. Command Summary](#4-command-summary)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Our Project, Kitchen Helper is a kitchen application that is designed to facilitate users to track kitchen inventory effectively. KitchenHelper also enables users to create recipes with different ingredients and allows auto deduction when you cook using the recipe. Kitchen Helper also provides prompts when your ingredient is running low or even chores that should be completed by a deadline.      "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " It is optimised for those who prefer working with Command Line Interface (CLI). Kitchen Helper provides convenience in our often busy lives, so give this application a chance to help you!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "This user guide aims to help you learn your way around our application, making the learning process smooth and effortless. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "So what are you waiting for? Let’s go!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "1. Ensure that you have Java `11` or above installed on your computer."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "2. Download the latest version of `KitchenHelper` from [here](https://github.com/AY1920S2-CS2113T-M16-2/tp/releases)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for KitchenHelper."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "4. Type the command `java -jar kitchenhelper.jar` in the command prompt to start the application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "5. Type the command in the command box and press `Enter` to execute it.  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   e.g. typing `help` and pressing `Enter` will display help information."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "6. Some example commands you can try:  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "   * `help` : lists all commands "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   * `addingredient /n Beef cubes /c meat /q 3 /p 20 /e 18/03/2020` : adds an ingredient to the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   * `listingredient meat` : list the ingredients that has the category meat."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "   * `exit` : exits the application."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "7. Refer to [Section 3, \"Features\"](#3-features) for details of each command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Command Format: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "- Words that are enclosed by angle brackets are the parameters to be supplied by the user. E.g. `deleterecipe /n \u003crecipe_name\u003e`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "- Items in angle brackets with the word “optional:\u0027\u0027 are optional. E.g. `deleteingredient /n \u003cingredient_name\u003e:\u003coptional:quantity\u003e` can be used as `deleteingredient /n apple or deleteingredient /n name /q 2`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "### 3.1. General Commands"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.1.1. Viewing help: `help`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Shows a list of available commands and their usages.  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Format:__ `help`  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.1.2. Exiting the Program: `exit`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Exits the program.  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Format:__ `exit`  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "### 3.2. Ingredient"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.2.1. Adding an ingredient: `addingredient`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "You can add an ingredient to the Kitchen Helper for tracking, containing various details."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Format:__ `addingredient /n \u003cINGREDIENT\u003e /c \u003cCATEGORY\u003c /q \u003cQUANTITY\u003e /p \u003cPRICE\u003e /e \u003cEXPIRY\u003e`  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `INGREDIENT` is the name of your ingredient."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `CATEGORY` is the category of your ingredient.  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "The different types of `CATEGORY` are listed below: "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Meat`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Vegetable`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Staple`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Fruit`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Dairy`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Drink`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `Miscellaneous`  "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ":speech_balloon: Any `CATEGORY` that does not falls in the list would be put under `Miscellaneous`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `QUANTITY` is the number of servings of the ingredient."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `QUANTITY` in the format of whole number."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `PRICE` is the cost of the ingredient."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `PRICE` can be given up to 2 decimal points."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `EXPIRY` is the expiry date of the ingredient."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  + `EXPIRY` in the format of dd/MM/yyyy e.g. 01/12/2020."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command:** \u003cbr\u003e `addingredient /n Beef cubes /c meat /q 3 /p 20 /e 18/03/2020` \u003cbr\u003e **Description:** \u003cbr\u003e Creates a new ingredient called `Beef cubes`, which have the following attributes: category `meat`, quantity `3`, price `20` , expiry date `18/03/2020`. | addingredient /n Beef cubes /c meat /q 3 /p 20 /e 18/03/2020 \u003cbr\u003e You have added Ingredient:Beef cubes Category:meat Quantity:3 Price:$20.00 Expiry:18/03/2020 to the ingredient list\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command:** \u003cbr\u003e `addingredient /n kailan /c Vegetable /q 30 /p 30.45 /e 12/03/2020` \u003cbr\u003e **Description:** \u003cbr\u003e Creates a new ingredient called `kailan`, which have the following attributes: category `Vegetable`, quantity `30`, price `30.45` , expiry date `12/03/2020`. | addingredient /n kailan /c Vegetable /q 30 /p 30.45 /e 12/03/2020 \u003cbr\u003e You have added Ingredient:kailan Category:Vegetable Quantity:30 Price:$30.45 Expiry:12/03/2020 to the ingredient list\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command:** \u003cbr\u003e `addingredient /n Milo /c Drink /q 30 /p 10 /e 20/12/2020` \u003cbr\u003e **Description:** \u003cbr\u003e Creates a new ingredient called `Milo`, which have the following attributes: category `Drink`, quantity `30`, price `10` , expiry date `20/12/2020`. | addingredient /n Milo /c Drink /q 30 /p 10 /e 20/12/2020 \u003cbr\u003e You have added Ingredient:Milo Category:Drink Quantity:30 Price:$10.00 Expiry:20/12/2020 to the ingredient list\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.2.2. List ingredient: `listingredient`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Prints out a list of ingredients added by the user. Allow users to choose which category to print out from."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "__Format:__ `listingredient \u003call/dairy/drink/fruit/meat/miscellaneous/staple/vegetable\u003e`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "__Example of usage:__"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "* `listingredient all`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "* `listingredient meat`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "* `listingredient vegetable`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.2.3. Delete an ingredient: `deleteingredient`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Delete the specified ingredient or reduce an ingredient’s quantity from the ingredients inventory in Kitchen Helper using ingredient\u0027s name or index. "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "The name or index of the ingredient can be found by displaying the list of ingredients. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "__Format__: `deleteingredient /n \u003cINGREDIENT\u003e [/q QUANTITY]` OR `deleteingredient /i \u003cINGREDIENT_INDEX\u003e [/q QUANTITY]`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Command: \u003cbr\u003e `deleteingredient /n apple /q 2` \u003cbr\u003e Description: \u003cbr\u003e Deletes `2 apples` from the total quantity of `apples.` | `deleteingredient /n apple /q 2` \u003cbr\u003e `The quantity of apple has been changed!`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Command: \u003cbr\u003e `deleteingredient /n wagyu beef` \u003cbr\u003e Deletes the ingredient named `wagyu beef` from the ingredients list. | `deleteingredient /n wagyu beef` \u003cbr\u003e `wagyu beef has been deleted.`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Command: \u003cbr\u003e `deleteingredient /i 1` \u003cbr\u003e Deletes the item specified by `index 1` in the ingredient list. | `deleteingredient /i 1` \u003cbr\u003e `apple has been deleted.`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.2.4. Search for ingredient: `searchingredient`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "You can search for ingredients based on a given keyword.  "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Format:__ `searchingredient \u003cKEYWORD\u003e`  "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `KEYWORD` is the word to search for ingredient in Kitchen Helper."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command:** \u003cbr\u003e `searchingredient beef` \u003cbr\u003e **Description:** \u003cbr\u003e Search by ingredient\u0027s name. | searchingredient beef \u003cbr\u003e Here are your matching ingredients in your list \u003cbr\u003e 1. \\[Meat\\] Beef Qty: 3 $20.00 Exp: 18/03/2020 \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command:** \u003cbr\u003e `searchingredient meat` \u003cbr\u003e **Description:** \u003cbr\u003e Search by ingredient\u0027s category. | searchingredient meat \u003cbr\u003e Here are your matching ingredients in your list \u003cbr\u003e 1. \\[Meat\\] Beef Qty: 3 $20.00 Exp: 18/03/2020 \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command:** \u003cbr\u003e `searchingredient 18/03/2020` \u003cbr\u003e **Description:** \u003cbr\u003e Search by ingredient\u0027s expiry date. | searchingredient 18/03/2020 \u003cbr\u003e Here are your matching ingredients in your list \u003cbr\u003e 1. \\[Meat\\] Beef Qty: 3 $20.00 Exp: 18/03/2020 \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "### 3.3. Recipe"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.3.1. Adding a recipe: `addrecipe`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Adds a new unique recipe into the List in Kitchen Helper."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "__Format:__ `addrecipe /n \u003crecipe_name\u003e /i \u003cingredient_name\u003e:\u003cquantity\u003e:\u003ccategory\u003e[,..]`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Command: \u003cbr\u003e `addrecipe /n Rice Ball /i Rice:3:staple` \u003cbr\u003e Description: \u003cbr\u003e Creates a new recipe called `Rice Ball` which contains one ingredient, `3` portions of `Rice`. | addrecipe /n Rice Ball /i Rice:3:staple \u003cbr\u003eRice Ball Recipe has been created with 1 ingredients inside.\u003cbr\u003e\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "#### 3.3.2. List recipes: `listrecipe 1`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "Prints out details of recipe added by the user. Allow users to choose which recipe to print out from."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "#### Listing all recipes: `listrecipe all`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "__Format:__ `listrecipe \u003crecipe number\u003e`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "__Example of usage:__"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "* `listingredient 1`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "* `listingredient 2`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.3.3. Delete a recipe: `deleterecipe`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Deletes the specific recipe name or index from the list in Kitchen Helper. The name or index of the recipe can be found by displaying the list of recipes. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "__Format__: `deleterecipe /n \u003cRECIPE\u003e` OR `deleterecipe /i \u003cRECIPE_INDEX\u003e`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Command: \u003cbr\u003e `deleterecipe /n pasta` \u003cbr\u003e Description: \u003cbr\u003e Deletes the recipe with the name of `pasta` from the recipe list.| `deleterecipe /n pasta` \u003cbr\u003e `pasta has been deleted.`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "Command: \u003cbr\u003e `deleterecipe /i 2` \u003cbr\u003e Description: \u003cbr\u003e Deletes recipe by index. In this case, delete recipe with the `index 2` from the recipe list. | `deleterecipe /i 2` \u003cbr\u003e `Beef Salad has been deleted`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.3.4. Search for recipe: `searchrecipe`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "You can search for recipes based on a given keyword.  "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Format:__ `searchrecipe \u003cKEYWORD\u003e`  "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `KEYWORD` is the word to search for recipe\u0027s name in Kitchen Helper."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command:** \u003cbr\u003e `searchrecipe Chicken Stew` \u003cbr\u003e **Description:** \u003cbr\u003e Search by recipe\u0027s name. | searchrecipe Chicken Stew \u003cbr\u003e Here are your matching recipes in your list \u003cbr\u003e 1.Chicken Stew located at listrecipe 1 \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "#### 3.3.5. Cooking a recipe: `cookrecipe`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Cooks a recipe specified by the user by the recipe’s name."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "__Format:__ `cookrecipe /n \u003crecipe_name\u003e /p \u003cnumber_of_pax\u003e`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "`cookrecipe /n chicken salad /p 2` | Cooks the ‘chicken salad’ recipe with a pax 2."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "### 3.4. Chore"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.4.1. Adding a chore: `addchore`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Adds a chore to the chore list in Kitchen Helper."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "__Format:__ `addchore \u003ctask_description\u003e /by \u003cdeadline\u003e`  "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Command: \u003cbr\u003e `addchore buy groceries /by Monday 12pm` \u003cbr\u003e Description: \u003cbr\u003e Creates a new chore called `buy groceries` which contains the deadline `Monday 12pm.` | addchore buy groceries /by Monday 12pm \u003cbr\u003e You have added this chore: \u003cbr\u003e [x] buy groceries (by: Monday 12pm) \u003cbr\u003e Now you have 2 chores in the list. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.4.2. List chore: `listchore`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Displays all the items currently in the chore list in Kitchen Helper."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "__Format:__ `listchore`  "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Command: \u003cbr\u003e `listchore` | listchore \u003cbr\u003e Here are the chores in your list: \u003cbr\u003e 1. [x] buy groceries (by: Monday 12pm) \u003cbr\u003e 2. [/] scrub the floor (by: this Saturday) \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "#### 3.4.3. Delete a chore: `deletechore`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Deletes the chore specified by the index in the chore list in Kitchen Helper. The index of the chore can be found by displaying the list of chores."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "__Format:__ `deletechore \u003cindex_to_delete\u003e`  "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Command: \u003cbr\u003e `deletechore 1` \u003cbr\u003e Description: \u003cbr\u003e Deletes the item specified by `index 1` in the chore list. | deletechore 1 \u003cbr\u003e You have deleted this chore: \u003cbr\u003e [x] buy groceries (by: Monday 12pm) \u003cbr\u003e Now you have 0 chores in the list. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "#### 3.4.4. Search for chore: `searchchore`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "You can search for chores based on a given keyword.  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Format:__ `searchchore \u003cKEYWORD\u003e`  "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "* `KEYWORD` is the word to search for chores in Kitchen Helper."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command:** \u003cbr\u003e `searchchore groceries` \u003cbr\u003e **Description:** \u003cbr\u003e Search by chore\u0027s description. | searchchore groceries \u003cbr\u003e Here are your matching chores in your list \u003cbr\u003e 1.\\[x\\] buy groceries (by: Tuesday 12pm) \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "**Command:** \u003cbr\u003e `searchchore Tuesday` \u003cbr\u003e **Description:** \u003cbr\u003e Search by chore\u0027s date. | searchchore Tuesday \u003cbr\u003e Here are your matching chores in your list \u003cbr\u003e 1.\\[x\\] buy groceries (by: Tuesday 12pm) \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "#### 3.4.5. Mark chore as done: `done`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Marks the chore specified by the index in the chore list in Kitchen Helper as done. The index of the chore can be found by displaying the list of chores."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "__Format:__ `done \u003cindex_to_check\u003e`  "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "Command: \u003cbr\u003e `done 1` \u003cbr\u003e Description: \u003cbr\u003e Marks the item specified by `index 1` in the chore list as done. | done 1 \u003cbr\u003e You have completed this chore: \u003cbr\u003e [/] buy groceries (by: Monday 12pm) \u003cbr\u003e \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### 3.5. Storage"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "#### 3.5.1. Select Load Files"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Prompts the user with the option to either load their data from auto-save mode or the manual-save mode. If the user chooses the manual-save mode,  it will overwrite all the data stored in auto-save mode. However, any subsequent changes made to the program data will be saved through auto-save mode regardless of initial load options, to save through manual-save mode, user will have to use the save command [Section 3.5.3, \"Save Current State\"](#352-save-current-state-save)."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "__Format:__ `addchore \u003ctask_description\u003e /by \u003cdeadline\u003e`  "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Command: \u003cbr\u003e `1` \u003cbr\u003e Description: \u003cbr\u003e Data loaded from most recent auto-save mode files.  | Please enter \u00271\u0027 for auto-save and \u00272\u0027 for manual-save: \u003cbr\u003e 1 \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e Okay auto-save chosen. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Command: \u003cbr\u003e `2` \u003cbr\u003e Description: \u003cbr\u003e Data loaded from most recent manual-save mode files.  | Please enter \u00271\u0027 for auto-save and \u00272\u0027 for manual-save: \u003cbr\u003e 2 \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \u003cbr\u003e Okay manual-save chosen. \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "#### 3.5.2. Save Current State: `save`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Saves the current state of the program into manual-save mode files. "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "__Format:__ `save`  "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Command: \u003cbr\u003e `save` \u003cbr\u003e  Description: \u003cbr\u003e Data saved into manual-save mode files.  | save \u003cbr\u003e You have saved the current state in the following files: outputIngredientCopy.txt, outputRecipeCopy.txt, outputChoreCopy.txt  \u003cbr\u003e \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Here is a short summary of the command used in KitchenHelper application.  "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Refer back to [Section 3, \"Features\"](#3-features) for more information on the usage of commands.  "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__General Commands__  "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Feature | Command  "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "------- | -------  "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "help | `help`  "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "exit | `exit`  "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Ingredient Commands__  "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Feature | Command  "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "------- | -------  "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient | `addingredient /n INGREDIENT /c CATEGORY /q QUANTITY /p PRICE /e EXPIRY`\u003cbr\u003e e.g. `addingredient /n Beef cubes /c meat /q 3 /p 20 /e 2020-03-18`  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient | `deleteingredient /n \u003cingredient_name\u003e\u003e [/q quantity]` OR `deleteingredient /i \u003cingredient_index\u003e [/q quantity]` \u003cbr\u003e e.g.`deleteingredient /n apple /q 2` OR `deleteingredient /i 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "searchingredient | `searchingredient KEYWORD` \u003cbr\u003e e.g. `searchingredient beef`  "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Recipe Commands__  "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Feature | Command  "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "------- | -------  "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "addrecipe | `addrecipe /n \u003crecipe name\u003e /i \u003cingredient_name\u003e:\u003cquantity\u003e:\u003ccategory\u003e[,..]`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleterecipe | `deleterecipe /n \u003crecipe_name\u003e` OR `deleterecipe /i \u003crecipe_index\u003e` \u003cbr\u003e e.g. `deleterecipe /n pasta` OR `deleterecipe /i 2`\u003cbr\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "searchrecipe | `searchrecipe KEYWORD` \u003cbr\u003e e.g. `searchrecipe Chicken Stew`  "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "__Chore Commands__  "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "Feature | Command  "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "------- | -------  "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "searchchore | `searchchore KEYWORD` \u003cbr\u003e e.g. `searchchore groceries`  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "__Storage Commands__"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Feature | Command  "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "------- | -------  "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "save current state | `save`  "
      }
    ],
    "authorContributionMap": {
      "zi-hui": 33,
      "yantingsanity": 29,
      "jinfayap": 156,
      "cheongisabella": 35,
      "-": 20,
      "alwayshuizhen": 23,
      "JensonWee": 15
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/KitchenHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.notification.ChoreNotification;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class KitchenHelper {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        String userChoice \u003d ui.getUserChoice();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ui.validUserChoice(userChoice);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (userChoice.equals(\"1\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            storage \u003d new Storage(\"outputIngredient.txt\", \"outputRecipe.txt\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                    \"outputChore.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                ingredientList \u003d new ArrayList\u003c\u003e(storage.getIngredientData());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                recipeList \u003d new ArrayList\u003c\u003e(storage.getRecipeData());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                choreList \u003d new ArrayList\u003c\u003e(storage.getChoreData());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            } catch (FileNotFoundException err) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else if (userChoice.equals(\"2\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            createNewFiles();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            storage \u003d new Storage(\"outputIngredientCopy.txt\", \"outputRecipeCopy.txt\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                    \"outputChoreCopy.txt\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                ingredientList \u003d new ArrayList\u003c\u003e(storage.getIngredientData());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                recipeList \u003d new ArrayList\u003c\u003e(storage.getRecipeData());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                choreList \u003d new ArrayList\u003c\u003e(storage.getChoreData());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            } catch (FileNotFoundException err) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Populate empty saved state files with current output files if save command have never been called by user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private void createNewFiles() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var sourceIngredient \u003d new File(\"outputIngredient.txt\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var sourceRecipe \u003d new File(\"outputRecipe.txt\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var sourceChore \u003d new File(\"outputChore.txt\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var destIngredient \u003d new File(\"outputIngredientCopy.txt\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var destRecipe \u003d new File(\"outputRecipeCopy.txt\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var destChore \u003d new File(\"outputChoreCopy.txt\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (destIngredient.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.copyFile(sourceIngredient, destIngredient);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (destRecipe.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.copyFile(sourceRecipe, destRecipe);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (destChore.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.copyFile(sourceChore, destChore);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private void run() throws KitchenHelperException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setUpLogger();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        showNotifications();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private void setUpLogger() throws KitchenHelperException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Output to console only when a serious failure has caused normal"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        execution of the program"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ConsoleHandler consoleOutput \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        consoleOutput.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        kitchenLogs.addHandler(consoleOutput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Logs all information above the Level.Fine to a log file"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            FileHandler logFile \u003d new FileHandler(\"KitchenLogs.log\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            logFile.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            logFile.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.addHandler(logFile);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new KitchenHelperException(\"Error in Logging\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String userCommandInput \u003d \"\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                userCommandInput \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                command \u003d new Parser().parseUserCommand(userCommandInput);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                CommandResult result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                ui.showResultToUser(result);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                ui.printDivider();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                ui.printInvalidCmd();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                ui.print(e.getMessage());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                ui.printDivider();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } while (!userCommandInput.equalsIgnoreCase(ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private void showNotifications() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String choreNotification;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        choreNotification \u003d new ChoreNotification().getNotifications(choreList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        System.out.println(choreNotification);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static void main(String[] args) throws KitchenHelperException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new KitchenHelper().run();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Executes the command and return result."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param command the command being executed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the return message of the command."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult executeCommand(Command command) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            CommandResult result \u003d command.execute(ingredientList, recipeList, choreList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 58,
      "yantingsanity": 8,
      "jinfayap": 57,
      "cheongisabella": 9,
      "alwayshuizhen": 38
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/AddChoreCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Adds a chore to the chore list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class AddChoreCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addchore\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have added this chore:\\n%s\\nNow you have %s chore%s in the list.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Adds a chore to the chore list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"TASK /by DATE\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: addchore buy groceries /by Tuesday 12pm\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private String dateStr \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private Date date \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Constructor for AddChoreCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param description the description of the chore."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param dateStr the date or time to complete the chore by."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public AddChoreCommand(String description, String dateStr) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.dateStr \u003d dateStr;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public AddChoreCommand(String description, Date date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Adds a chore to the chore list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList the ArrayList of chores."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return success message of addition."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String addChore(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Chore newChore;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (dateStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            newChore \u003d new Chore(description, date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            newChore \u003d new Chore(description, dateStr);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        choreList.add(newChore);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Storage.saveChoreData(choreList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return String.format(MESSAGE_SUCCESS, newChore, choreList.size(), newChore.checkSingular(choreList));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the success message of adding chore to the chore list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser \u003d addChore(choreList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 2,
      "jinfayap": 4,
      "cheongisabella": 74
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/AddIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Adds the ingredient to the inventory list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class AddIngredientCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addingredient\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            \"You have added Ingredient:%s Category:%s Quantity:%d Price:$%.2f Expiry:%s to the ingredient list\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Adds a ingredient to the ingredient list.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"/n INGREDIENT /c CATEGORY /q QUANTITY /p PRICE /e EXPIRY\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: addingredient /n Beef /c Meat /q 1 /p 13.5 /e 13/02/2020\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public final String logAddIngredient \u003d \"A new ingredient has been added\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String ingredientName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String expiry;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Add Inventory Command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientName name of the ingredient."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param categoryName   category of the ingredient."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param quantity       number of serving of ingredient."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param price          cost of the ingredient."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiry         ingredient expiry date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public AddIngredientCommand(String ingredientName, String categoryName, int quantity, double price, String expiry) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.expiry \u003d expiry;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Adds the ingredient to the ArrayList according to the category type."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param category       category of the ingredient."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList the ArrayList to store ingredients."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void addToCategory(String category, ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        switch (category.toLowerCase()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Meat.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Meat(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            sortIngredientList(ingredientList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveIngredientData(ingredientList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Vegetable.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Vegetable(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            sortIngredientList(ingredientList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveIngredientData(ingredientList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Drink.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Drink(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            sortIngredientList(ingredientList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveIngredientData(ingredientList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Fruit.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Fruit(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            sortIngredientList(ingredientList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveIngredientData(ingredientList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Staple.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Staple(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            sortIngredientList(ingredientList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveIngredientData(ingredientList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Dairy.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Dairy(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            sortIngredientList(ingredientList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveIngredientData(ingredientList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Miscellaneous.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            this.categoryName \u003d Miscellaneous.INGREDIENT_WORD;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Miscellaneous(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            sortIngredientList(ingredientList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveIngredientData(ingredientList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Sorts ingredientList arraylist by Category name, then, Ingredient name, then, Expiry Date."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void sortIngredientList(ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Collections.sort(ingredientList, Comparator.comparing(Ingredient::getIngredientName)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                .thenComparing(Ingredient::getExpiryDate));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the success message of adding inventory."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        addToCategory(categoryName, ingredientList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(logAddIngredient);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 8,
      "jinfayap": 108,
      "alwayshuizhen": 1,
      "JensonWee": 18
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/AddRecipeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Adds recipe to the list of recipes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class AddRecipeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addrecipe\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Adds a recipe to the recipe list.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_PARAMETER"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \u003d \"/n RECIPENAME /i INGRNAME:QUANTITY:CATEGORY \u003coptional: , INGRNAME:QUANTITY:CATEGORY\u003e\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_EXAMPLE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \u003d \"Example: addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final String logAddRecipe \u003d \"A new recipe has been added\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public HashMap\u003cString[], Integer\u003e parsedIngr;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Set the attributes of the Command class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param rawString     full user input string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrAndQty    a hashmap of ingredient with [ingredientName, ingredientCategory] as key"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *                      and ingredientQuantity as value."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setAttributesOfCmd(String rawString, HashMap\u003cString[], Integer\u003e ingrAndQty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setObjectVariables(rawString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setAction();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.parsedIngr \u003d ingrAndQty;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Sets the string without the keyword to be the values of the reicpe object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param rawString string that has removed the keyword."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setObjectVariables(String rawString) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        objectVariables \u003d rawString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Sets the object\u0027s action to add recipe."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setAction() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        actionType \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * The main utility function to add recipe."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param attributes     list of ingredients that have not been parsed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the success message of adding inventory."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String addRecipe(String attributes, ArrayList\u003cRecipe\u003e recipeList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Recipe freshRecipe \u003d new Recipe();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        freshRecipe.setRecipeName(attributes);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        if (checkIfRecipeExist(freshRecipe.getRecipeName(), recipeList)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new KitchenHelperException(\"There is an existing recipe!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        freshRecipe.addIngredientsToRecipe(parsedIngr);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeList.add(freshRecipe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Storage.saveRecipeData(recipeList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assert freshRecipe.recipeName.length() \u003e 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assert recipeList.size() \u003e 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        kitchenLogs.info(logAddRecipe);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return freshRecipe.recipeName + \" Recipe has been created with \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                + freshRecipe.recipeIngrQty + \" ingredients inside.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Checks for existing recipe with the same name."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param newRecipeName The name of the new recipe."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList    The list of recipes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return true when a recipe with the same name is found,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *          false otherwise."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Boolean checkIfRecipeExist(String newRecipeName, ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        boolean isExist \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (recipe.getRecipeName().equalsIgnoreCase(newRecipeName)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                isExist \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return isExist;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the success message of adding recipe."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String message \u003d addRecipe(this.objectVariables, recipeList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new CommandResult(\"There is an existing recipe with the same name!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 1,
      "jinfayap": 13,
      "alwayshuizhen": 107
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Abstract class to represent user\u0027s command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String actionType; //add, delete, list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String objectType; //ingredient, recipe, chore"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String objectVariables;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String getObjectVariables() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return objectVariables;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Set the Object Variables for Command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param attribute the values for the variables, can be recipe or ingredient names"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void setObjectVariables(String attribute) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        objectVariables \u003d attribute;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the Action Type for the Command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setActionType(String command) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        actionType \u003d command;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the Object Type for the Command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param type the name of the object type"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setObjectType(String type) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        objectType \u003d type;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Runs the command given by user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return cmdResult response given to user after successful execution."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CommandResult cmdResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return cmdResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 3,
      "yantingsanity": 18,
      "jinfayap": 19,
      "alwayshuizhen": 26,
      "JensonWee": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 11
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/CookRecipeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Cooks a recipe."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class CookRecipeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cookrecipe\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Cooks a recipe from the recipe list.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_PARAMETER"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \u003d \"/n RECIPENAME /p NUMOFPAX\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_EXAMPLE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \u003d \"Example: cookrecipe /n Chicken Salad /p 2\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FAILURE_RECIPE_NOT_EXISTS \u003d \"The given recipe name does not exist!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FAILURE_INSUFFICIENT_INGREDIENTS \u003d \"There are insufficient/\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                                            + \"missing ingredients!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String KITCHEN_HELPER_COOK \u003d \"Kitchen Helper is trying to cook!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_SUCCESS \u003d \"%s was cooked with a pax of %d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String recipeName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public int pax;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Cooks a recipe as specified by user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList    the list of ingredients available to use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList        the list of recipe that is known."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the message after a successful cook."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws KitchenHelperException if there is no recipe that is wanted by user/ insufficient ingredients."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String cookRecipe(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throws KitchenHelperException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        // checks if the specified recipe given by user exists"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int indexOfRecipe \u003d checkIfRecipeExist(recipeList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (indexOfRecipe \u003e recipeList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return COMMAND_FAILURE_RECIPE_NOT_EXISTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        System.out.println(KITCHEN_HELPER_COOK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Recipe recipeToBeCooked \u003d recipeList.get(indexOfRecipe - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        if (checkForSufficientIngredient(ingredientList, recipeToBeCooked)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            deductIngredients(ingredientList, recipeToBeCooked);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return COMMAND_FAILURE_INSUFFICIENT_INGREDIENTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return String.format(COMMAND_SUCCESS, recipeName, pax);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Deducts ingredients from list of ingredients sorted on expiry."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList    the list of ingredients available."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeToBeCooked  the recipe that the user want to cook."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void deductIngredients(ArrayList\u003cIngredient\u003e ingredientList, Recipe recipeToBeCooked) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Ingredient ingredient : recipeToBeCooked.getRecipeItem()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String ingredientName \u003d ingredient.getIngredientName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            ArrayList\u003cIngredient\u003e listOfSameName \u003d getIngredientsWithSameName(ingredientList, ingredientName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            int totalCookedQty \u003d pax * ingredient.getQuantity();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            for (Ingredient ingredientToDeduct : listOfSameName) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                int quantity \u003d ingredientToDeduct.getQuantity();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                if (totalCookedQty \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                } else if (quantity \u003c\u003d totalCookedQty) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    totalCookedQty -\u003d quantity;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    ingredientToDeduct.setQuantity(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                } else if (quantity \u003e totalCookedQty) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    ingredientToDeduct.setQuantity(quantity - totalCookedQty);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    totalCookedQty \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Get a list of ingredients that has the same name as the specified ingredient."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientList    the list of ingredients available."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientName  the ingredient to check for its occurrence in the ingredientlist"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return a list of ingredients with the same name as ingredientName"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getIngredientsWithSameName(ArrayList\u003cIngredient\u003e ingredientList,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                            String ingredientName) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cIngredient\u003e listOfSameName \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        for (Ingredient ingredient : ingredientList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (ingredient.getIngredientName().equalsIgnoreCase(ingredientName)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                listOfSameName.add(ingredient);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return listOfSameName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Checks if the recipe user wants exist."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList    the list of recipes."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the index of the recipe in the list or the size of list if not found."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public int checkIfRecipeExist(ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (recipeName.equalsIgnoreCase(recipe.recipeName)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            counter +\u003d 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        counter +\u003d 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Checks if there is sufficient ingredient for each ingredient needed in recipe."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList    the list of ingredients available."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeToBeCooked  the recipe that the user want to cook."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return true if there are sufficient ingredients, otherwise false."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Boolean checkForSufficientIngredient(ArrayList\u003cIngredient\u003e ingredientList, Recipe recipeToBeCooked) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        boolean isSufficient \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Ingredient ingr : recipeToBeCooked.getRecipeItem()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            int totalCookedQty \u003d pax * ingr.getQuantity();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (getIngredientQty(ingr.getIngredientName().toLowerCase(), ingredientList) \u003c totalCookedQty) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                isSufficient \u003d false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return isSufficient;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Retrieves the quantity of each ingredient needed in the recipe."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrName          the name of the required ingredient."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList    the list of ingredients available."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the quantity of ingredients with the same name."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public int getIngredientQty(String ingrName, ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int availableIngrCount \u003d 0;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Ingredient ingr : ingredientList) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (ingr.getIngredientName().equalsIgnoreCase(ingrName)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                availableIngrCount +\u003d ingr.getQuantity();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return availableIngrCount;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Sets the Recipe to be cooked."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param name  the name of the recipe to be cooked."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setRecipeName(String name) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.recipeName \u003d name;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Sets the number of pax for the recipe."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param numberofpax   the num of pax to cook."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setRecipePax(int numberofpax) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.pax \u003d numberofpax;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the success message of adding recipe."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String message \u003d cookRecipe(ingredientList, recipeList);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 47,
      "alwayshuizhen": 143
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DeleteChoreCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Deletes a chore from the chore list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class DeleteChoreCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletechore\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String DELETE_CHORE_MESSAGE_SUCCESS \u003d \"You have deleted this chore:\\n%s\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + \"Now you have %s chore%s in the list.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String INVALID_INDEX \u003d \"Please choose an index in the chore list!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String DELETE_ALL_MESSAGE_SUCCESS \u003d \"You have deleted all the chores. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + \"Now you have 0 chores in the list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String DELETE_ALL_PROMPT \u003d \"Are you sure you want to delete all the chores in your list?\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + \"\\nEnter \\\"Yes\\\"/\\\"No\\\"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String DELETE_ALL_CANCELLATION \u003d \"Ok then. Nothing has been deleted. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            + \"You still have %s chore%s in the list.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Deletes a chore from the chore list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"\u003cindex\u003e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: deletechore 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private int indexToDelete;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private boolean isDeleteAll \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Constructor for DeleteChoreCommand."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param indexToDelete the index in the list of the chore to delete."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public DeleteChoreCommand(int indexToDelete) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.indexToDelete \u003d indexToDelete;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public DeleteChoreCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.isDeleteAll \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Deletes a chore from the chore list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList the ArrayList of chores."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return success message for successful deletion and error message for invalid index specified."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String deleteChore(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (indexToDelete \u003e choreList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                throw new KitchenHelperException(INVALID_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Chore choreToDelete \u003d choreList.get(indexToDelete - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            choreList.remove(choreToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveChoreData(choreList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return String.format(DELETE_CHORE_MESSAGE_SUCCESS, choreToDelete, choreList.size(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    choreToDelete.checkSingular(choreList));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return khe.getMessage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String deleteAll(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String userResponse \u003d promptUser();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (userResponse.equalsIgnoreCase(\"no\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return String.format(DELETE_ALL_CANCELLATION, choreList.size(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    choreList.get(0).checkSingular(choreList));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            choreList.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Storage.saveChoreData(choreList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return DELETE_ALL_MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String promptUser() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String userResponse;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        System.out.println(DELETE_ALL_PROMPT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        userResponse \u003d new Scanner(System.in).nextLine().trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        while (!isValidResponse(userResponse)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            System.out.println(\"Please enter either \\\"Yes\\\"/\\\"No\\\"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            userResponse \u003d new Scanner(System.in).nextLine().trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return userResponse;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean isValidResponse(String userResponse) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String response \u003d userResponse;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (response.equalsIgnoreCase(\"no\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else if (response.equalsIgnoreCase(\"yes\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the success or error message of deleting a chore from the chore list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (isDeleteAll) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d deleteAll(choreList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d deleteChore(choreList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zi-hui": 2,
      "jinfayap": 3,
      "cheongisabella": 121
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DeleteIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class DeleteIngredientCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteingredient\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Usage: deleteingredient /n INGREDIENT [/q QUANTITY] OR \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                + \"deleteingredient /i \u003cindex\u003e [/q QUANTITY]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Deletes an ingredient. \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: deleteingredient /n Beef /q 2 OR deleteingredient /i 1 /q 2\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d String.format(\"%s\\n%s\\n%s\", COMMAND_DESC, COMMAND_USAGE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                            COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_SUCCESS \u003d \"%s has been deleted.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FAILURE \u003d \"This ingredient does not exist! Please type in a correct \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                    + \"ingredient name/index.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_SUCCESS_QUANTITY \u003d \"The quantity of %s has been changed!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FAILURE_QUANTITY \u003d \"Please enter a valid quantity to delete!\\nCurrently:\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                            + \"\\n%s : %d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_USAGE, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String LOG_INFO \u003d \"An ingredient has been deleted\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private static final String OBJECT_TYPE \u003d \"ingredient\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private Integer quantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private Integer ingredientIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Constructor for Delete Ingredient Command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientIndex index of the ingredient to be deleted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param quantity number of serving of ingredient to be deleted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public DeleteIngredientCommand(Integer ingredientIndex, Integer quantity) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setActionType(COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectType(OBJECT_TYPE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.ingredientIndex \u003d ingredientIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Constructor for Delete Ingredient Command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientName name of the ingredient to be deleted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param quantity number of serving of ingredient to be deleted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public DeleteIngredientCommand(String ingredientName, Integer quantity) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setActionType(COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectType(OBJECT_TYPE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectVariables(ingredientName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.ingredientIndex \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Getting the index of the ingredient to be deleted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientName the name of the ingredient to be deleted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientsList the list of ingredients"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return index if the ingredient is found in the ingredient list, else -1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public int getIngredientIndex(String ingredientName, ArrayList\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        for (Ingredient ingredient : ingredientsList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (ingredient.getIngredientName().equalsIgnoreCase(ingredientName)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                int index \u003d ingredientsList.indexOf(ingredient);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Update the quantity of an ingredient the ingredient list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param newQuantity  the new quantity for the ingredient"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientToDelete the ingredient to be deleted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return feedback to user"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String updateNewQuantity(int newQuantity, Ingredient ingredientToDelete) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String ingredientName \u003d ingredientToDelete.getIngredientName();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int ingredientQuantity \u003d ingredientToDelete.getQuantity();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (newQuantity \u003c 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d String.format(COMMAND_FAILURE_QUANTITY, ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert ingredientQuantity !\u003d newQuantity;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            ingredientToDelete.setQuantity(newQuantity);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d String.format(COMMAND_SUCCESS_QUANTITY, ingredientName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert ingredientToDelete.getQuantity() \u003d\u003d newQuantity;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the ingredient by name."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientsList the list of ingredients"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return feedback to user"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteIngredientByName(ArrayList\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int ingredientIndex \u003d getIngredientIndex(this.objectVariables, ingredientsList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser \u003d deleteIngredient(ingredientsList, ingredientIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the ingredient by index."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientsList the list of ingredients"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return feedback to user"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteIngredientByIndex(ArrayList\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int ingredientIndex \u003d this.ingredientIndex;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser \u003d deleteIngredient(ingredientsList, ingredientIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the ingredient from the ingredient list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientsList the list of ingredients"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return feedback to user"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteIngredient(ArrayList\u003cIngredient\u003e ingredientsList, Integer indexOfIngredient) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (indexOfIngredient \u003e -1 \u0026\u0026 indexOfIngredient \u003c ingredientsList.size()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert indexOfIngredient \u003e\u003d 0;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            Ingredient ingredientToDelete \u003d ingredientsList.get(indexOfIngredient);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String ingredientName \u003d ingredientToDelete.getIngredientName();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            int ingredientQuantity \u003d ingredientToDelete.getQuantity();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                kitchenLogs.log(Level.INFO, LOG_INFO);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                ingredientsList.remove(ingredientToDelete);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                feedbackToUser \u003d String.format(COMMAND_SUCCESS, ingredientName);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } else if (quantity \u003e 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                int newQuantity \u003d ingredientQuantity - quantity;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                feedbackToUser \u003d updateNewQuantity(newQuantity, ingredientToDelete);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                feedbackToUser \u003d String.format(COMMAND_FAILURE_QUANTITY, ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveIngredientData(ingredientsList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d COMMAND_FAILURE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return the execution of the deletion of ingredients or tasks."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                  ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (this.ingredientIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d deleteIngredientByName(ingredientList);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d deleteIngredientByIndex(ingredientList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        CommandResult cmdResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return cmdResult;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 2,
      "yantingsanity": 178,
      "jinfayap": 3
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DeleteRecipeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class DeleteRecipeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleterecipe\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"Usage: deleterecipe /n RECIPENAME OR deleterecipe /i \u003cindex\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Delete the recipe. \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: deleterecipe /n Chicken Salad OR deleterecipe /i 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d String.format(\"%s\\n%s\\n%s\", COMMAND_DESC, COMMAND_USAGE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                    COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_SUCCESS \u003d \"%s has been deleted\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FAILURE \u003d \"This recipe does not exist! Please type in a correct \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                    + \"recipe name/index.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String LOG_INFO \u003d \"A recipe has been deleted\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private static final String OBJECT_TYPE \u003d \"recipe\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_USAGE, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private Integer recipeIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Constructor for Delete Recipe Command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeName name of the recipe to be deleted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public DeleteRecipeCommand(String recipeName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setActionType(COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectType(OBJECT_TYPE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectVariables(recipeName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.recipeIndex \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Constructor for Delete Recipe Command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeIndex index of the recipe to be deleted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public DeleteRecipeCommand(Integer recipeIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setActionType(COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectType(OBJECT_TYPE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Getting the index of the recipe to be deleted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeName the name of the recipe to be deleted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList the list of recipe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public int getRecipeIndex(String recipeName, ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (recipe.getRecipeName().equalsIgnoreCase(recipeName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                int index \u003d recipeList.indexOf(recipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the recipe for the recipe list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList the list of recipe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteRecipe(ArrayList\u003cRecipe\u003e recipeList, Integer recipeIndex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (recipeIndex \u003e -1 \u0026\u0026 recipeIndex \u003c recipeList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert recipeList.size() \u003e 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            kitchenLogs.log(Level.INFO, LOG_INFO);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String recipeName \u003d recipeList.get(recipeIndex).getRecipeName();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            recipeList.remove(recipeList.get(recipeIndex));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage.saveRecipeData(recipeList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d String.format(COMMAND_SUCCESS, recipeName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d COMMAND_FAILURE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the recipe by index."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList the list of recipe"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteRecipeByIndex(ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d this.recipeIndex;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser \u003d deleteRecipe(recipeList, index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the recipe by name."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList the list of recipe"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteRecipeByName(ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String recipeName \u003d this.objectVariables;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int recipeIndex \u003d getRecipeIndex(recipeName, recipeList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser \u003d deleteRecipe(recipeList, recipeIndex);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return the execution of the deletion of ingredients or tasks."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                  ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (this.recipeIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d deleteRecipeByName(recipeList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d deleteRecipeByIndex(recipeList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        CommandResult cmdResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return cmdResult;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 2,
      "yantingsanity": 131,
      "jinfayap": 3
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Represent the keyword used to identify the action."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String INVALID_INDEX \u003d \"Please choose an index in the chore list!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have completed this chore:\\n%s\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Marks a chore as done.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"\u003cindex\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: done 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    private int indexToCheck;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Mark item at index as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param indexToCheck  the index to mark."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public DoneCommand(int indexToCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.indexToCheck \u003d indexToCheck;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Marks specified chore as completed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList the list of chores"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return  the message when task has been marked as done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String markChoreDone(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (indexToCheck \u003e choreList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                throw new KitchenHelperException(INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Chore choreToCheck \u003d choreList.get(indexToCheck - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            choreToCheck.markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Storage.saveChoreData(choreList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return String.format(MESSAGE_SUCCESS, choreToCheck);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return khe.getMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the success message of marking item as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser \u003d markChoreDone(choreList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 51,
      "alwayshuizhen": 22
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Exiting KitchenHelper as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Exits the program\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Example: %s\", COMMAND_WORD);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the success message exiting."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 14,
      "alwayshuizhen": 16
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_LOGO \u003d Ui.DIVIDER + Ui.LS + \"Ingredient\" + Ui.LS + Ui.DIVIDER + Ui.LS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String RECIPE_LOGO \u003d Ui.DIVIDER + Ui.LS + \"Recipe\" + Ui.LS + Ui.DIVIDER + Ui.LS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String CHORE_LOGO \u003d Ui.DIVIDER + Ui.LS + \"Chore\" + Ui.LS + Ui.DIVIDER + Ui.LS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMON_LOGO \u003d Ui.DIVIDER + Ui.LS + \"Common\" + Ui.LS + Ui.DIVIDER + Ui.LS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Shows the program command line interface instructions\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String.format(\"Example: %s\", COMMAND_WORD);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the success message of printing help."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                Ui.DIVIDER + Ui.LS + COMMON_LOGO + HelpCommand.MESSAGE_USAGE + Ui.LS + Ui.LS + ExitCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + Ui.LS + Ui.LS + INGREDIENT_LOGO + AddIngredientCommand.MESSAGE_USAGE + Ui.LS + Ui.LS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + ListIngredientCommand.MESSAGE_USAGE + Ui.LS + Ui.LS + DeleteIngredientCommand.MESSAGE_USAGE + Ui.LS"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + Ui.LS + RECIPE_LOGO + AddRecipeCommand.MESSAGE_USAGE + Ui.LS + Ui.LS + ListRecipeCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + Ui.LS + Ui.LS + DeleteRecipeCommand.MESSAGE_USAGE + Ui.LS + Ui.LS + CHORE_LOGO"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + AddChoreCommand.MESSAGE_USAGE + Ui.LS + Ui.LS + ListChoreCommand.MESSAGE_USAGE + Ui.LS + Ui.LS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + DeleteChoreCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 7,
      "jinfayap": 28,
      "alwayshuizhen": 8
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Represent an invalid command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_INVALID \u003d \"Invalid Command Format!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private final String invalidFeedback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for InvalidCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public InvalidCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.invalidFeedback \u003d MESSAGE_INVALID;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for InvalidCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param invalidFeedback feedback for invalid command message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public InvalidCommand(String invalidFeedback) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.invalidFeedback \u003d invalidFeedback;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the invalid message."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(invalidFeedback);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 38,
      "alwayshuizhen": 8
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ListChoreCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " * Displays the list of chores."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class ListChoreCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listchore\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Display all the chores\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d \"listchore *No parameter\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Example: %s\", COMMAND_WORD);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Loops through and displays each chore in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList the ArrayList of chores."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return empty list or the list of chores."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String listChore(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (choreList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d \"Your list of chores is currently empty.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d \"Here are the chores in your list:\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            for (int i \u003d 0; i \u003c choreList.size(); ++i) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                feedbackToUser +\u003d (\"\\n\" + Integer.toString(i + 1) + \". \" + choreList.get(i));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the list of chores."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser \u003d listChore(choreList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 1,
      "jinfayap": 4,
      "cheongisabella": 50,
      "JensonWee": 1
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ListIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "public class ListIngredientCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listingredient\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d \"listingredient \u003call|dairy|drink|fruit|meat|\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        + \"miscellaneous|staple|vegetable\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String[] categoryArray \u003d {\"all\",Dairy.INGREDIENT_WORD,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Drink.INGREDIENT_WORD,Fruit.INGREDIENT_WORD,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Meat.INGREDIENT_WORD,Miscellaneous.INGREDIENT_WORD,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Staple.INGREDIENT_WORD,Vegetable.INGREDIENT_WORD};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Display the ingredients in the list\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"\u003call|dairy|drink|fruit|meat|miscellaneous|staple|vegetable\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: listingredient all; listingredient meat\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Constructor for ListIngredient Command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param category   category of the ingredient."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public ListIngredientCommand(String category) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assert category.length() \u003e 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String listIngredients(String category, ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String result \u003d \"Here is the list of Ingredients in Inventory:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                + \"Format : Ingredient Name|Quantity|Price|Expiry\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (ingredientList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            result +\u003d \"The Ingredient List is currently empty.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (category.equalsIgnoreCase(\"all\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                for (String categoryName : categoryArray) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    result +\u003d categoryName + \":\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    for (int i \u003d 0; i \u003c ingredientList.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        Ingredient ingredientObj \u003d ingredientList.get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        if (ingredientObj.getCategoryName().equalsIgnoreCase(categoryName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                            result +\u003d ingredientObj.getIngredientName() + \"|\" + ingredientObj.getQuantity() + \"|\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                    + ingredientObj.getPrice() + \"|\" + ingredientObj.getExpiryDate() + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                result +\u003d category + \":\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                for (int i \u003d 0; i \u003c ingredientList.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    Ingredient ingredientObj \u003d ingredientList.get(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    if (ingredientObj.getCategoryName().equalsIgnoreCase(category)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        result +\u003d ingredientObj.getIngredientName() + \"|\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                + Integer.toString(ingredientObj.getQuantity()) + \"|\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                + Double.toString(ingredientObj.getPrice()) + \"|\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                + ingredientObj.getExpiryDate() + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    if (i \u003d\u003d ingredientList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        result +\u003d \"The Ingredient List for your category (\" + category + \") is currently empty.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Retrieves the category of ingredient."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return  catgeory of ingredient."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Checks if the user is listing an exisitng catgeory."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return true if the category is defined, false otherwise."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public boolean checkCategoryValid() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        boolean validCategory \u003d false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        for (String catName : categoryArray) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (catName.equalsIgnoreCase(this.category)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                validCategory \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return validCategory;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the list of ingredients."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String message \u003d listIngredients(this.category, ingredientList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 17,
      "alwayshuizhen": 26,
      "JensonWee": 77
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ListRecipeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "public class ListRecipeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listrecipe\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private int itemNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d \"listrecipe \u003citem number\u003e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Display the recipe\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"INTEGER\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: listrecipe 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Constructor for ListIngredient Command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param itemNumber   category of the ingredient."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public ListRecipeCommand(int itemNumber) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        this.itemNumber \u003d itemNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assert itemNumber \u003e 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public int getItemNumber() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return this.itemNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public boolean checkItemValid(int itemNumber, ArrayList\u003cRecipe\u003e recipeArrayList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        boolean validItem \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (itemNumber \u003c\u003d recipeArrayList.size() \u0026\u0026 itemNumber \u003e 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            validItem \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return validItem;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String listRecipe(int itemNum, ArrayList\u003cRecipe\u003e recipeArrayList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String result \u003d \"\\nHere is the list of Ingredients in Recipe:\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                + \"\\nFormat:Ingredient Name|Ingredient Category|Quantity|Price|Expiry\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (recipeArrayList.size() \u003d\u003d 0 || itemNum \u003e recipeArrayList.size() || itemNum \u003c 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            result +\u003d \"The Recipe List is currently empty.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            Recipe recipeItem \u003d recipeArrayList.get(itemNum - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            result +\u003d \"Recipe Name:\" + recipeItem.getRecipeName() + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            ArrayList\u003cIngredient\u003e ingredientByCategory \u003d recipeItem.getRecipeItem();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            for (int i \u003d 0; i \u003c ingredientByCategory.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                Ingredient ingredientObj \u003d ingredientByCategory.get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                result +\u003d ingredientObj.getIngredientName() + \"|\" + ingredientObj.getCategoryName()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        + \"|\" + Integer.toString(ingredientObj.getQuantity()) + \"|\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        + Double.toString(ingredientObj.getPrice()) + \"|\" + ingredientObj.getExpiryDate() + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the list of recipes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String message \u003d listRecipe(this.itemNumber, recipeList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 6,
      "alwayshuizhen": 8,
      "JensonWee": 63
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ResetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Resets the Data structures of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class ResetCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reset\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Resets the arraylist contents that stores user\u0027s input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList    list of ingredients."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList        list of recipes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList         list of chores."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the message to be displayed on the console."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String resetDatabase(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingredientList.clear();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeList.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        choreList.clear();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return \"All data has been wiped\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the message to be displayed on the console."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String message \u003d resetDatabase(ingredientList, recipeList, choreList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 48
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/SaveStateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class SaveStateCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have saved the current state in the following files: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String FILE_PATH_INGREDIENT \u003d \"outputIngredientCopy.txt, \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String FILE_PATH_RECIPE \u003d \"outputRecipeCopy.txt, \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String FILE_PATH_CHORE \u003d \"outputChoreCopy.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Save current state of Kitchen Helper into new output files."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return success message of saved state successful."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String saveState() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        chooseSaveOption();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return MESSAGE_SUCCESS + FILE_PATH_INGREDIENT + FILE_PATH_RECIPE +  FILE_PATH_CHORE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Copy current output files of Kitchen Helper into new output files to save current state."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private void chooseSaveOption() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var sourceIngredient \u003d new File(\"outputIngredient.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var sourceRecipe \u003d new File(\"outputRecipe.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var sourceChore \u003d new File(\"outputChore.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var destIngredient \u003d new File(\"outputIngredientCopy.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var destRecipe \u003d new File(\"outputRecipeCopy.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        var destChore \u003d new File(\"outputChoreCopy.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Storage.copyFile(sourceIngredient, destIngredient);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Storage.copyFile(sourceRecipe, destRecipe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Storage.copyFile(sourceChore, destChore);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return the success message of saving current state of Kitchen Helper."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        String feedbackToUser \u003d saveState();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 61
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/SearchChoreCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Search for chore in the chore list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class SearchChoreCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchchore\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Find chores in the chore list using a keyword.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"KEYWORD\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: searchchore groceries\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String EMPTY_LIST \u003d \"There are no matching chores in your list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String NON_EMPTY_LIST \u003d \"Here are your matching chores in your list\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String NUMBER_FORMAT \u003d \"%d.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String LOG_INFO \u003d \"Entering execution of finding matching chores\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String LOG_INFO_EMPTY \u003d \"Has non-matching chore\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String LOG_INFO_Found \u003d \"Found matching chore\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Search Chore Command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param keyword the word to search."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public SearchChoreCommand(String keyword) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the list of matching chores."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(LOG_INFO);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e findChoreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (Chore chore : choreList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (chore.toString().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                findChoreList.add(chore);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        if (findChoreList.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            kitchenLogs.info(LOG_INFO_EMPTY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new CommandResult(EMPTY_LIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        sb.append(NON_EMPTY_LIST)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .append(Ui.LS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assert findChoreList.size() \u003e 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(LOG_INFO_Found);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (int i \u003d 0; i \u003c findChoreList.size(); ++i) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (i \u003d\u003d findChoreList.size() - 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                sb.append(String.format(NUMBER_FORMAT, i + 1))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        .append(findChoreList.get(i).toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            sb.append(String.format(NUMBER_FORMAT, i + 1))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(findChoreList.get(i).toString())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(Ui.LS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 82
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/SearchIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Search for ingredient in the ingredient list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class SearchIngredientCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchingredient\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Find ingredients in the ingredient list using a keyword.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"KEYWORD\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: searchingredient beef\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String EMPTY_LIST \u003d \"There are no matching ingredient in your list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String NON_EMPTY_LIST \u003d \"Here are your matching ingredients in your list\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String NUMBER_FORMAT \u003d \"%d.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String LOG_INFO \u003d \"Entering execution of finding matching ingredients\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String LOG_INFO_EMPTY \u003d \"Has non-matching ingredient\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String LOG_INFO_Found \u003d \"Found matching ingredient\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Search Ingredient Command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param keyword the word to search."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public SearchIngredientCommand(String keyword) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the list of matching ingredient."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(LOG_INFO);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e findIngredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (Ingredient ingredient : ingredientList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (ingredient.toFind().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                findIngredientList.add(ingredient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        if (findIngredientList.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            kitchenLogs.info(LOG_INFO_EMPTY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new CommandResult(EMPTY_LIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        sb.append(NON_EMPTY_LIST)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .append(Ui.LS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assert findIngredientList.size() \u003e 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(LOG_INFO_Found);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (int i \u003d 0; i \u003c findIngredientList.size(); ++i) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (i \u003d\u003d findIngredientList.size() - 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                sb.append(String.format(NUMBER_FORMAT, i + 1))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        .append(findIngredientList.get(i).toFind());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            sb.append(String.format(NUMBER_FORMAT, i + 1))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(findIngredientList.get(i)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                            .toFind()).append(Ui.LS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 81
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/SearchRecipeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Search for recipe name in the recipe list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class SearchRecipeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchrecipe\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Find common recipe name in the recipe list using a keyword.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"KEYWORD\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: searchrecipe chicken stew\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format(\"%s: %s\", COMMAND_WORD, COMMAND_DESC) + Ui.LS + String"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            .format(\"Parameter: %s\\n%s\", COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String EMPTY_LIST \u003d \"There are no matching recipes in your list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String NON_EMPTY_LIST \u003d \"Here are your matching recipes in your list\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String RECIPE_INDEX \u003d \" located at listrecipe %d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String NUMBER_FORMAT \u003d \"%d.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String LOG_INFO \u003d \"Entering execution of finding matching recipe\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String LOG_INFO_EMPTY \u003d \"Has non-matching recipe\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String LOG_INFO_Found \u003d \"Found matching recipe\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Search Recipe Command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param keyword the word to search."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public SearchRecipeCommand(String keyword) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the list of matching recipe."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(LOG_INFO);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e findRecipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cInteger\u003e recipeIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        int currIndex \u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (recipe.getRecipeName().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                findRecipeList.add(recipe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                recipeIndex.add(currIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            currIndex++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        if (findRecipeList.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            kitchenLogs.info(LOG_INFO_EMPTY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new CommandResult(EMPTY_LIST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        sb.append(NON_EMPTY_LIST)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .append(Ui.LS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assert findRecipeList.size() \u003e 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(LOG_INFO_Found);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (int i \u003d 0; i \u003c findRecipeList.size(); ++i) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (i \u003d\u003d findRecipeList.size() - 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                sb.append(String.format(NUMBER_FORMAT, i + 1))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        .append(findRecipeList.get(i).getRecipeName())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        .append(String.format(RECIPE_INDEX, recipeIndex.get(i)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            sb.append(String.format(NUMBER_FORMAT, i + 1))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(findRecipeList.get(i).getRecipeName())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(String.format(RECIPE_INDEX, recipeIndex.get(i)))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    .append(Ui.LS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 88
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/exception/KitchenHelperException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class KitchenHelperException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for KitchenHelperException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param message contain relevant information on the failed constraints."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public KitchenHelperException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 15
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/notification/ChoreNotification.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.notification;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class ChoreNotification {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String DEADLINE_NOTIFICATION \u003d \"The deadline for these chores are approaching!\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String EMPTY_NOTIFICATION \u003d \"You have no deadlines upcoming in the next 3 days.\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String OVERDUE_NOTIFICATION \u003d \"The deadline for these chores are overdue!\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String getNotifications(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String notification \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String upcomingChores \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String overdueChores \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        for (Chore chore:choreList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (hasDateAsDeadline(chore) \u0026\u0026 isApproachingDeadline(chore)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                upcomingChores +\u003d (chore + \"\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (hasDateAsDeadline(chore) \u0026\u0026 isOverdue(chore)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                overdueChores +\u003d (chore + \"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (!overdueChores.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            notification +\u003d OVERDUE_NOTIFICATION + overdueChores + Ui.LS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (upcomingChores.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            notification +\u003d EMPTY_NOTIFICATION + Ui.DIVIDER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            notification +\u003d DEADLINE_NOTIFICATION + upcomingChores + Ui.DIVIDER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return notification;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean isApproachingDeadline(Chore chore) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date deadline \u003d chore.date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        calendar.setTime(deadline); //sets the time to deadline"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        calendar.add(Calendar.DATE, -3); //find out what the date 3 days before deadline"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date threeDaysBefore \u003d calendar.getTime(); //get this time in Date object form"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (threeDaysBefore.before(currentDate) \u0026\u0026 deadline.after(currentDate)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean hasDateAsDeadline(Chore chore) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (chore.date !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean isOverdue(Chore chore) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date deadline \u003d chore.date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (deadline.before(currentDate)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 75
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/notification/IngredientNotification.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.notification;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class IngredientNotification {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/Chore.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Chore {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String dateStr \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Date date \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have %s this chore:\\n%s\\nNow you have %s chore%s in the list.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Chore(String description, String dateStr) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.dateStr \u003d dateStr;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Chore(String description, Date date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean markAsDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"/\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"x\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String checkSingular(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (choreList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String convertDateToString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (dateStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").format(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return dateStr;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description + \" (by: \" + convertDateToString() + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 5,
      "cheongisabella": 53
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/Recipe.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * A Recipe represents a collection of ingredients of different types."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final String warningAddRecipe \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \"An unidentifiable ingredient has been added to ingredient of Miscellaneous category\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    ArrayList\u003cIngredient\u003e recipeItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String recipeName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Integer recipeIngrQty;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the addition of ingredients into recipe."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrAndQty the hashmap of ingredients."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void addIngredientsToRecipe(HashMap\u003cString[], Integer\u003e ingrAndQty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assert ingrAndQty.size() \u003e 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Map.Entry\u003cString[], Integer\u003e entry : ingrAndQty.entrySet()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String ingrName \u003d (entry.getKey())[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String ingrCategory \u003d (entry.getKey())[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            Integer ingrQuantity \u003d entry.getValue();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            assert ingrName.length() \u003e 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            assert ingrCategory.length() \u003e 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            assert ingrQuantity \u003e\u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            Ingredient newIngredient \u003d createIngr(ingrName, ingrCategory, ingrQuantity);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            recipeItems.add(newIngredient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            assert recipeItems.size() \u003e 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeIngrQty \u003d recipeItems.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        sortRecipeItem();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Sorts recipeItems arraylist by Category name, then, Ingredient name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void sortRecipeItem() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        Collections.sort(this.recipeItems, Comparator.comparing(Ingredient::getCategoryName)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                .thenComparing(Ingredient::getIngredientName));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the addition of ingredients into recipe."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrName the name of the ingredient."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrCategory the category of the ingredient."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrQuantity the quantity of the ingredient."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return Ingredient specific to its category."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Ingredient createIngr(String ingrName, String ingrCategory, Integer ingrQuantity) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        switch (ingrCategory.toLowerCase()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"dairy\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Dairy(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"drink\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Drink(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"fruit\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Fruit(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"meat\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Meat(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"miscellaneous\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Miscellaneous(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"staple\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Staple(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"vegetable\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Vegetable(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.warning(warningAddRecipe);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Miscellaneous(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Loading of ingredients into a recipe."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingredients the list of ingredients."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void addIngredientsToRecipeFromArrayList(ArrayList\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        for (Ingredient ingredient : ingredients) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            this.recipeItems.add(ingredient);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * For ease of saving into storage."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param attributes the string of ingredients and recipe."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void setRecipeNameForStorage(String attributes) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        recipeName \u003d attributes;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Sets the recipe name."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param attributes the list of ingredients and recipe name."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setRecipeName(String attributes) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String recipeNameAndIngr \u003d attributes.substring(attributes.indexOf(\"/n\") + 3, attributes.indexOf(\"/i\") - 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeName \u003d recipeNameAndIngr;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Retrieve the name of a recipe."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the recipe name."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String getRecipeName() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return recipeName;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Get the list of ingredients in a recipe."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the arraylist of ingredients."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getRecipeItem() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return this.recipeItems;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To format all variables of add ingredient as a string."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return String consisting of ingredient name, category, quantity, price and expiry."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return \"/n \" + getRecipeName() + \" \" + getRecipeItem() + \" \" + recipeItems.size();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zi-hui": 21,
      "yantingsanity": 4,
      "jinfayap": 5,
      "alwayshuizhen": 104,
      "JensonWee": 16
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Dairy.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Dairy extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"dairy\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Dairy(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Dairy] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Drink.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Drink extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"drink\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Drink(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Drink] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Fruit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Fruit extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"fruit\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Fruit(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Fruit] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Ingredient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Represent an Ingredient object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public abstract class Ingredient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String ingredientName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String expiryDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String FIND_PARAMETERS \u003d \"%s Qty:%d $%.2f Exp:%s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Ingredient."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientName name of the ingredient."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param categoryName   category of the ingredient."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param quantity       quantity of the ingredient."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param price          price of the ingredient."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiryDate     expiry date of the ingredient."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Ingredient(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for ingredient name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return ingredient name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getIngredientName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for category name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return category name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for quantity."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return quantity."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Setters for quantity."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param quantity quantity of ingredient"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setQuantity(int quantity) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for price."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return price."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for expiry date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return expiry date."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getExpiryDate() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To format all variables of add ingredient as a string."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return String consisting of ingredient name, category, quantity, price and expiry."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return \"/n \" + getIngredientName() + \" /c \" + getCategoryName() + \" /q \" + getQuantity()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + \" /p \" + getPrice() + \" /e \" + getExpiryDate();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return String.format(FIND_PARAMETERS, getIngredientName(), getQuantity(), getPrice(), getExpiryDate());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To compare two Ingredient objects based on their attributes."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return boolean return false if any of the attributes are not equal to each other."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (o instanceof Ingredient) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient i \u003d (Ingredient) o;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return this.ingredientName.equals(i.ingredientName)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                \u0026\u0026 this.categoryName.equals(i.categoryName)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                \u0026\u0026 this.quantity \u003d\u003d i.quantity"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                \u0026\u0026 this.price \u003d\u003d price"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                \u0026\u0026 this.expiryDate.equals(i.expiryDate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 28,
      "yantingsanity": 9,
      "jinfayap": 80
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Meat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Meat extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"meat\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Meat(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Meat] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Miscellaneous.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Miscellaneous extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"miscellaneous\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Miscellaneous(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Miscellaneous] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Staple.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Staple extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"staple\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Staple(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Staple] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Vegetable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Vegetable extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"vegetable\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Vegetable(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String toFind() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return \"[Vegetable] \" + super.toFind();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 9
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.command.AddChoreCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.command.AddIngredientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.AddRecipeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.command.DeleteChoreCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.command.ResetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.command.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.SaveStateCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.SearchChoreCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.SearchIngredientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.SearchRecipeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.ListChoreCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.ListIngredientCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.ListRecipeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.command.InvalidCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.command.CookRecipeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Parse user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String LOG_WARNING_INDEX \u003d \"An IndexOutOfBounds exception has been caught\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final String warningPrepareRecipe \u003d \"An IO exception has been caught\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INVALID_DATE \u003d \"An invalid date has been entered\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param input full user input string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the command based on the user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Command parseUserCommand(String input) throws KitchenHelperException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String[] userInputs \u003d splitInputLine(input, \" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        final String commandWord \u003d userInputs[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        final String parameters \u003d userInputs[1];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case AddRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return prepareAddRecipe(parameters);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case AddIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return prepareAddIngredient(parameters);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        case AddChoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return prepareAddChore(parameters);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case CookRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return prepareCookRecipe(parameters);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        case DeleteRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return prepareDeleteRecipe(parameters);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        case DeleteIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return prepareDeleteIngredient(parameters);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        case DeleteChoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return prepareDeleteChore(parameters);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return prepareDoneChore(parameters);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        case ListIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return prepareListIngredient(parameters);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        case ListRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return prepareListRecipe(parameters);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        case ListChoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return prepareListChore(parameters);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case SearchIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new SearchIngredientCommand(parameters);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case SearchRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new SearchRecipeCommand(parameters);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case SearchChoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new SearchChoreCommand(parameters);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case ResetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new ResetCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case SaveStateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return new SaveStateCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the addition of ingredients into recipe."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return hashmap of a formatted list of ingredients."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Command prepareAddRecipe(String attributes) throws KitchenHelperException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e ingrAndQty \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String ingredientList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand addCmd \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            ingredientList \u003d attributes.substring(attributes.indexOf(\"/i\") + 3);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String[] splitedIngr \u003d ingredientList.split(\"[,][\\\\s]\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            for (int i \u003d 0; i \u003c splitedIngr.length; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                String item \u003d splitedIngr[i];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                String[] ingrContent \u003d item.split(\":\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                String[] nameAndType \u003d new String[2];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                nameAndType[0] \u003d ingrContent[0];"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                nameAndType[1] \u003d ingrContent[2];"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                ingrAndQty.put(nameAndType, Integer.parseInt(ingrContent[1]));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, warningPrepareRecipe, e.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddRecipeCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        addCmd.setAttributesOfCmd(attributes, ingrAndQty);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return addCmd;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Prepares the addition of ingredient into inventory."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Command prepareAddIngredient(String attributes) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            // Regex for checking the format of add ingredient"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String addInventoryRegex \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    \"/n [a-zA-Z]+( [a-zA-Z]+)* /c [a-zA-Z]+ /q [0-9]+ /p \\\\d+(\\\\.\\\\d{1,2})? /e \\\\d{2}/\\\\d{2}/\\\\d{4}\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (!isValidUserInputFormat(attributes, addInventoryRegex)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                throw new KitchenHelperException(\"Invalid Add Inventory Format\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] nameAndOthers \u003d attributes.split(\"/c\\\\s\", 2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String itemName \u003d nameAndOthers[0].split(\"/n\\\\s+\")[1].trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            assert itemName.length() \u003e 0 : itemName;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] categoryAndOthers \u003d nameAndOthers[1].split(\"\\\\s+/q\\\\s+\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String category \u003d categoryAndOthers[0].trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            assert category.length() \u003e 0 : category;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] quantityAndOthers \u003d categoryAndOthers[1].split(\"\\\\s+/p\\\\s+\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            int quantity \u003d Integer.parseInt(quantityAndOthers[0]);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            assert quantity \u003e\u003d 0 : quantity;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] priceAndExpiry \u003d quantityAndOthers[1].split(\"\\\\s+/e\\\\s+\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            double price \u003d Double.parseDouble(priceAndExpiry[0]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            assert price \u003e\u003d 0.00 : price;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String expiry \u003d parseDateFormat(priceAndExpiry[1]);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new AddIngredientCommand(itemName, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING,InvalidCommand.MESSAGE_INVALID + \" \" + attributes);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddIngredientCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (DateTimeException dte) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new InvalidCommand(INVALID_DATE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Prepares the addition of a chore into chore list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Command prepareAddChore(String attributes) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String dateStr;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String[] descriptionAndDate \u003d attributes.split(\"/by\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            description \u003d descriptionAndDate[0].trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                throw new KitchenHelperException("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                        String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddChoreCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            dateStr \u003d descriptionAndDate[1].trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddChoreCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new InvalidCommand(khe.getMessage());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Date date \u003d dateFormat.parse(dateStr);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new AddChoreCommand(description, date);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new AddChoreCommand(description, dateStr);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the parameters needed for the cookrecipe function."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private Command prepareCookRecipe(String attributes) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CookRecipeCommand cookCmd \u003d new CookRecipeCommand();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String recipeName \u003d attributes.substring(attributes.indexOf(\"/n\") + 3, attributes.indexOf(\"/p\") - 1);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            int numOfPax \u003d Integer.parseInt(attributes.substring(attributes.indexOf(\"/p\") + 3));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            cookCmd.setRecipeName(recipeName);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            cookCmd.setRecipePax(numOfPax);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, cookCmd.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return cookCmd;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Prepares the parameters needed for the list function."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private Command prepareListIngredient(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                throw new KitchenHelperException(\"Invalid ListIngredient command.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                for (int i \u003d 0; i \u003c ListIngredientCommand.categoryArray.length; i++) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    if (ListIngredientCommand.categoryArray[i].equalsIgnoreCase(parameters)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    } else if (i \u003d\u003d ListIngredientCommand.categoryArray.length - 1) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        throw new KitchenHelperException(\"Invalid ListIngredient Category.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return new ListIngredientCommand(parameters);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            throw new KitchenHelperException(ListIngredientCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Prepares the parameters needed for the list function."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private Command prepareListChore(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (! parameters.isEmpty()) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                throw new KitchenHelperException(\"Invalid ListChore command.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return new ListChoreCommand();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            throw new KitchenHelperException(ListChoreCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Prepares the parameters needed for the list function."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private Command prepareListRecipe(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            int itemNumber \u003d Integer.parseInt(parameters);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                throw new KitchenHelperException(\"Invalid ListRecipe command.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return new ListRecipeCommand(itemNumber);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            throw new KitchenHelperException(ListRecipeCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            throw new KitchenHelperException(ListRecipeCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Prepares the deletion of recipe from the lists."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return hashmap of a formatted list of parameters to be deleted."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private Command prepareDeleteRecipe(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (parameters.contains(\"/i\")) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                String [] typeAndName \u003d parameters.split((\"/i\\\\s\"), 2);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return new DeleteRecipeCommand(Integer.parseInt(typeAndName[1].trim()) - 1);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                String [] typeAndName \u003d parameters.split(\"/n\\\\s\",2);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return new DeleteRecipeCommand(typeAndName[1].trim());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            throw new KitchenHelperException(DeleteRecipeCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Prepares the deletion of ingredients from the lists."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return hashmap of a formatted list of parameters to be deleted."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private Command prepareDeleteIngredient(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String [] typeAndName \u003d parameters.split(\"/n|/i\\\\s\", 2);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String [] nameAndQuantity \u003d typeAndName[1].split(\"/q\\\\s\", 2);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (parameters.contains(\"/i\")) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                if (nameAndQuantity.length \u003e 1) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    return new DeleteIngredientCommand(Integer.parseInt(nameAndQuantity[0].trim()) - 1,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                        Integer.parseInt(nameAndQuantity[1]));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    return new DeleteIngredientCommand(Integer.parseInt(nameAndQuantity[0].trim()) - 1,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                null);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                if (nameAndQuantity.length \u003e 1) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    return new DeleteIngredientCommand(nameAndQuantity[0].trim(), Integer.parseInt(nameAndQuantity[1]));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    return new DeleteIngredientCommand(nameAndQuantity[0].trim(), null);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            throw new KitchenHelperException(DeleteIngredientCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * Prepares the deletion of a chore from the list."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     *"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Command prepareDeleteChore(String parameters) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            int indexToDelete \u003d Integer.parseInt(parameters.trim());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new DeleteChoreCommand(indexToDelete);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (parameters.trim().equalsIgnoreCase(\"all\")) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                return new DeleteChoreCommand();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, DeleteChoreCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Command prepareDoneChore(String parameters) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            int indexToCheck \u003d Integer.parseInt(parameters.trim());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new DoneCommand(indexToCheck);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, DoneCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/contacts/blob/master/src/main/java/Contacts1.java"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Split the user input into two parts with a specific regex."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param rawUserInput full user input string."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param regex        the quantifier to separate the string."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return an array of size 2 separated by the quantifier."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static String[] splitInputLine(String rawUserInput, String regex) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String[] split \u003d rawUserInput.trim().split(regex, 2);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return split.length \u003d\u003d 2 ? split : new String[]{split[0], \"\"}; // else no parameters"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Checks if the input string matches the regex."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param attributes the user input string."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param regex      quantifier to check if valid."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return true if it match, otherwise false."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public boolean isValidUserInputFormat(String attributes, String regex) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(attributes);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return matcher.matches();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Check if the user input a valid date."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiry the user input date."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the date in the form of dd/MM/yyyy."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String parseDateFormat(String expiry) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String[] splitExpiry \u003d expiry.split(\"/\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        LocalDate localDate;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String day \u003d splitExpiry[0];"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String month \u003d splitExpiry[1];"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String year \u003d splitExpiry[2];"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        localDate \u003d LocalDate.parse(year + \"-\" + month + \"-\" + day);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String formattedExpiry \u003d localDate.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        formattedExpiry \u003d formattedExpiry.replaceAll(\"-\", \"/\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return formattedExpiry;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 15,
      "yantingsanity": 64,
      "jinfayap": 129,
      "cheongisabella": 72,
      "alwayshuizhen": 78,
      "-": 2,
      "JensonWee": 66
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Storage class to get/load and store data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String filePathIngredient;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String filePathRecipe;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String filePathChore;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param filePathIngredient String of filepath for stored Ingredient data."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param filePathRecipe String of filepath for stored Recipe data."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param filePathChore String of filepath for stored Chore data."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public Storage(String filePathIngredient, String filePathRecipe, String filePathChore) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.filePathIngredient \u003d filePathIngredient;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.filePathRecipe \u003d filePathRecipe;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.filePathChore \u003d filePathChore;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static void copyFile(File source, File dest) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Files.copy(source.toPath(), dest.toPath(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                    StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Gets the saved Ingredient data from text file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return ArrayList Contains data from saved text file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws FileNotFoundException If file from file path does not exists."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getIngredientData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File file \u003d new File(filePathIngredient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String userData \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getName \u003d userData.split(\"/n \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getCat \u003d getName[1].split(\" /c \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getQuantity \u003d getCat[1].split(\" /q \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getPrice \u003d getQuantity[1].split(\" /p \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getExpiry \u003d getPrice[1].split(\" /e \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String name \u003d getCat[0];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String category \u003d  getQuantity[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Integer quantity \u003d Integer.parseInt(getPrice[0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Double price \u003d Double.parseDouble(getExpiry[0]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String expiry \u003d getExpiry[1];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            loadingIngredients(name, category, quantity, price, expiry, ingredientList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return ingredientList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Loads the ingredient into the ArrayList according to the category type."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param name name of the ingredient."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param category category of the ingredient."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param quantity number of serving of ingredient."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param price cost of the ingredient."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param expiry ingredient expiry date."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param ingredientList the ArrayList to store ingredients."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void loadingIngredients(String name, String category, Integer quantity, Double price, String expiry,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                            ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        switch (category.toLowerCase()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"dairy\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient diary \u003d new Dairy(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(diary);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"drink\": {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient drink \u003d new Drink(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(drink);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"fruit\": {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient fruit \u003d new Fruit(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(fruit);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"meat\": {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient meat \u003d new Meat(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(meat);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"miscellaneous\": {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient miscellaneous \u003d new Miscellaneous(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(miscellaneous);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"staple\": {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient staple \u003d new Staple(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(staple);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"vegetable\": {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient vegetable \u003d new Vegetable(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(vegetable);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + category);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Gets the saved Recipe data from text file."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return ArrayList Contains data from saved text file"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws FileNotFoundException If file from file path does not exists."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public ArrayList\u003cRecipe\u003e getRecipeData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File file \u003d new File(filePathRecipe);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Recipe freshRecipe \u003d new Recipe();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ArrayList\u003cIngredient\u003e recipeItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String userData \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String removeQuantity \u003d userData.substring(userData.length() - 1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Integer ingredientQuantity \u003d Integer.parseInt(removeQuantity);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String newUserData \u003d userData.substring(0, userData.length() - 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] recipeName \u003d newUserData.split(\"/n \");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String addRecipeName \u003d recipeName[1].substring(0, recipeName[1].length() - 2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Integer count \u003d ingredientQuantity + 1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            freshRecipe.setRecipeNameForStorage(addRecipeName);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            while (count \u003e 1) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String command \u003d recipeName[count];"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String[] getName \u003d command.split(\" /c \");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String[] getCat \u003d getName[1].split(\" /q \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String[] getQuantity \u003d getCat[1].split(\" /p \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String[] getPrice \u003d getQuantity[1].split(\" /e \");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String name \u003d getName[0];"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String category \u003d getCat[0];"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                Integer quantity \u003d Integer.parseInt(getQuantity[0]);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                Double price \u003d Double.parseDouble(getPrice[0]);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String expiry \u003d getPrice[1].substring(0, getPrice[1].length() - 2);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                loadingRecipeItems(name, category, quantity, price, expiry, recipeItems);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                count -\u003d 1;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            freshRecipe.addIngredientsToRecipeFromArrayList(recipeItems);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeList.add(freshRecipe);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return recipeList;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Loads the ingredient into the ArrayList according to the category type."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param name name of the ingredient."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param category category of the ingredient."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param quantity number of serving of ingredient."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param price cost of the ingredient."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param expiry ingredient expiry date."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param recipeItems the ArrayList to store ingredients of the recipe."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private void loadingRecipeItems(String name, String category, Integer quantity, Double price, String expiry,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                                    ArrayList\u003cIngredient\u003e recipeItems) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        switch (category.toLowerCase()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"dairy\":"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient diary \u003d new Dairy(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(diary);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"drink\": {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient drink \u003d new Drink(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(drink);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"fruit\": {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient fruit \u003d new Fruit(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(fruit);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"meat\": {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient meat \u003d new Meat(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(meat);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"miscellaneous\": {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient miscellaneous \u003d new Miscellaneous(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(miscellaneous);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"staple\": {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient staple \u003d new Staple(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(staple);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"vegetable\": {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient vegetable \u003d new Vegetable(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            recipeItems.add(vegetable);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + category);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Gets the saved Chore data from text file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return ArrayList Contains data from saved text file"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws FileNotFoundException If file from file path does not exists."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public ArrayList\u003cChore\u003e getChoreData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File file \u003d new File(filePathChore);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String userData \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            char isDone \u003d userData.charAt(1);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] description \u003d userData.substring(4).split(\" \\\\(by: \");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            //Chore todo \u003d new Chore(description[0], description[1].substring(0, description[1].length() - 1));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Chore todo \u003d"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    createChore(description[0], description[1].substring(0, description[1].length() - 1));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (isDone \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                todo.markAsDone();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            choreList.add(todo);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return choreList;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Chore createChore(String description, String dateStr) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Date date \u003d dateFormat.parse(dateStr);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new Chore(description, date);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return new Chore(description, dateStr);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Saves and stores the ingredients in ArrayList Ingredient into a text file."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param ingredientList ArrayList."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static void saveIngredientData(ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"outputIngredient.txt\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            for (Ingredient ingredient : ingredientList) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fw.write(ingredient.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            err.printStackTrace();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Saves the recipe in recipeList ArrayList and recipe ingredients in recipeItems ArrayList into a text file."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param recipeList ArrayList."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static void saveRecipeData(ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"outputRecipe.txt\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fw.write(recipe.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            err.printStackTrace();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Saves the chores in choreList into a text file."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param choreList ArrayList."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static void saveChoreData(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"outputChore.txt\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            for (Chore chore : choreList) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fw.write(chore.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            err.printStackTrace();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 314,
      "jinfayap": 7,
      "cheongisabella": 17
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * UI of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printDivider() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Format of a comment input line. Comment lines are silently consumed when reading user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String COMMENT_LINE_FORMAT_REGEX \u003d \"#.*\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m KitchenHelper here\" + LS + \"What can I do for you?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String MESSAGE_TO_CHOOSE_STATE \u003d \"Please enter \u00271\u0027 for auto-save and \u00272\u0027 for manual-save:\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String MESSAGE_FOR_AUTO_SAVE \u003d \"Okay auto-save chosen.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String MESSAGE_FOR_SAVED_STATE \u003d \"Okay manual-save chosen.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static final String MESSAGE_INVALID_USER_CHOICE \u003d \"Invalid Choice! PLease choose either option 1 or 2\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printInvalidCmd() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(\"Invalid Command, please check your format!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String getUserChoice() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(MESSAGE_TO_CHOOSE_STATE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        String userChoice;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        userChoice \u003d in.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return userChoice;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void askForReInput() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(MESSAGE_INVALID_USER_CHOICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        validUserChoice(getUserChoice());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void validUserChoice(String userChoice) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (userChoice.equals(\"1\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.out.println(MESSAGE_FOR_AUTO_SAVE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else if (userChoice.equals(\"2\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.out.println(MESSAGE_FOR_SAVED_STATE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            askForReInput();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/ui/TextUi.java"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Returns true if the user input line should be ignored."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Input should be ignored if it is parsed as a comment, is only whitespace, or is empty."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param rawInputLine full raw user input line."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return true if the entire user input line should be ignored."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private boolean shouldIgnore(String rawInputLine) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return rawInputLine.trim().isEmpty() || isCommentLine(rawInputLine);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/ui/TextUi.java"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Returns true if the user input line is a comment line."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param rawInputLine full raw user input line."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return true if input line is a comment."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private boolean isCommentLine(String rawInputLine) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return rawInputLine.trim().matches(COMMENT_LINE_FORMAT_REGEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Display the welcome message during startup."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        showToConsole(DIVIDER, WELCOME_MESSAGE, DIVIDER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/ui/TextUi.java"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Get the user command."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the input line string"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String fullInputLine \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        //silently consume all ignored lines"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        while (shouldIgnore(fullInputLine)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            fullInputLine \u003d in.nextLine();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        out.println(fullInputLine);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return fullInputLine;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * A method that can take in a variable number of arguments."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param message the argument."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void showToConsole(String... message) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            out.println(m);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Shows the results of the command to the user."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param result the CommandResult object."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void showResultToUser(CommandResult result) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        showToConsole(result.feedbackToUser);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 30,
      "jinfayap": 109,
      "cheongisabella": 4,
      "alwayshuizhen": 8,
      "-": 6
    }
  },
  {
    "path": "src/test/data/StorageTest/outputChore.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "[x] buy milk (by: Tuesday 12pm)"
      }
    ],
    "authorContributionMap": {
      "JensonWee": 1
    }
  },
  {
    "path": "src/test/data/StorageTest/outputIngredient.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "/n Beef /c meat /q 3 /p 20.0 /e 2020-03-18"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "/n Chicken /c meat /q 3 /p 20.0 /e 2020-03-18"
      }
    ],
    "authorContributionMap": {
      "JensonWee": 2
    }
  },
  {
    "path": "src/test/data/StorageTest/outputRecipe.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "/n Chicken Salad [/n Lettuce /c vegetable /q 4 /p 0.0 /e null, /n Chicken Breast /c meat /q 2 /p 0.0 /e null] 2"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "/n Chicken Salad [/n Chicken Breast /c meat /q 2 /p 0.0 /e null, /n Lettuce /c vegetable /q 4 /p 0.0 /e null] 2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "/n Chicken Salad [/n Chicken Breast /c meat /q 2 /p 0.0 /e null, /n Lettuce /c vegetable /q 4 /p 0.0 /e null] 2"
      }
    ],
    "authorContributionMap": {
      "JensonWee": 3
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/KitchenHelperTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class KitchenHelperTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/AddChoreCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "class AddChoreCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void addChore() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        new AddChoreCommand(\"clean the toilet\", \"Saturday 5pm\").addChore(choreList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(1, choreList.size());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 18
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/AddIngredientCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class AddIngredientCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void addToCategory_testPass() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"20/02/2020\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(ingredientList.get(0) instanceof Meat);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"Beef\", ingredientList.get(0).getIngredientName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"Meat\", ingredientList.get(0).getCategoryName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(30, ingredientList.get(0).getQuantity());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(20.2, ingredientList.get(0).getPrice());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"20/02/2020\", ingredientList.get(0).getExpiryDate());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void addToCategory_testFail() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"2020-02-20\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(ingredientList.get(0) instanceof Meat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"Pork\", ingredientList.get(0).getIngredientName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"Vegetable\", ingredientList.get(0).getCategoryName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(40, ingredientList.get(0).getQuantity());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(50.21, ingredientList.get(0).getPrice());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"2020.02-20\", ingredientList.get(0).getExpiryDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 39
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/AddRecipeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class AddRecipeCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void addRecipe_testPass() throws KitchenHelperException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(1, recipeList.size());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void addRecipe_testFail() throws KitchenHelperException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertNotEquals(\"drink\", recipeList.get(0).getRecipeItem().getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void checkIfRecipeExist_testPass() throws KitchenHelperException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(Boolean.TRUE, newRecipe.checkIfRecipeExist(\"Chicken Salad\", recipeList));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 58
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/DeleteChoreCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class DeleteChoreCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void deleteChore() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        choreList.add(new Chore(\"buy groceries\", \"Tuesday 12pm\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        DeleteChoreCommand deleteValidIndex \u003d new DeleteChoreCommand(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        deleteValidIndex.deleteChore(choreList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(0, choreList.size());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        DeleteChoreCommand deleteInvalidIndex \u003d new DeleteChoreCommand(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(\"Please choose an index in the chore list!\", deleteInvalidIndex.deleteChore(choreList));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 24
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/DeleteIngredientCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class DeleteIngredientCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void deleteIngredient() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"2020-02-20\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"kailan\", \"Vegetable\", 30, 30.45, \"2020-03-12\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteIngredientQuantity \u003d new DeleteIngredientCommand(\"Beef\", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d deleteIngredientQuantity.getIngredientIndex(\"Beef\", ingredientList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteIngredientQuantity.deleteIngredientByName(ingredientList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.get(index).getQuantity(), 28);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteIngredientQuantityExceed \u003d new DeleteIngredientCommand(\"Beef\", 30);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteIngredientQuantityExceed.deleteIngredientByName(ingredientList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.get(index).getQuantity(), 28);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteKnownIngredient \u003d new DeleteIngredientCommand(\"kailan\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteKnownIngredient.deleteIngredientByName(ingredientList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.size(), 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteUnknownIngredient \u003d new DeleteIngredientCommand(\"chocolate\", null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteUnknownIngredient.deleteIngredientByName(ingredientList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.size(), 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void getIngredientIndex() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"2020-02-20\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"kailan\", \"Vegetable\", 30, 30.45, \"2020-03-12\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteKnownIngredient \u003d new DeleteIngredientCommand(\"kailan\", -1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d deleteKnownIngredient.getIngredientIndex(\"kailan\", ingredientList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(index, 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteUnknownIngredient \u003d new DeleteIngredientCommand(\"Chocolate\", 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d deleteUnknownIngredient.getIngredientIndex(\"Chocolate\", ingredientList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(index, -1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void updateNewQuantity() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"2020-02-20\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"kailan\", \"Vegetable\", 30, 30.45, \"2020-03-12\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        Ingredient ingredientToUpdate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand updateRangeQuantity \u003d new DeleteIngredientCommand(\"kailan\", 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d updateRangeQuantity.getIngredientIndex(\"kailan\", ingredientList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingredientToUpdate \u003d ingredientList.get(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        updateRangeQuantity.updateNewQuantity(28, ingredientToUpdate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientToUpdate.getQuantity(), 28);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand updateOutOfRangeQuantity \u003d new DeleteIngredientCommand(\"Beef\", 40);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d updateOutOfRangeQuantity.getIngredientIndex(\"Beef\", ingredientList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingredientToUpdate \u003d ingredientList.get(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        updateOutOfRangeQuantity.updateNewQuantity(-10, ingredientToUpdate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientToUpdate.getQuantity(), 30);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 72,
      "jinfayap": 6
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/DeleteRecipeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class DeleteRecipeCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void deleteRecipe() throws KitchenHelperException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd \u003d new DeleteRecipeCommand(\"Chicken\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteCmd.deleteRecipeByName(recipeList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(1, recipeList.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd2 \u003d new DeleteRecipeCommand(\"Chicken Salad\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteCmd2.deleteRecipeByName(recipeList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(0, recipeList.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void getRecipeIndex() throws KitchenHelperException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd \u003d new DeleteRecipeCommand(\"Chicken\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d deleteCmd.getRecipeIndex(deleteCmd.getObjectVariables().trim(), recipeList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(index, -1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd2 \u003d new DeleteRecipeCommand(\"Chicken Salad\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d deleteCmd2.getRecipeIndex(deleteCmd.getObjectVariables().trim(), recipeList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(index, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 59
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void markChoreDone() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        Chore newChore \u003d new Chore(\"buy groceries\", \"Tuesday 12pm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        choreList.add(newChore);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        DoneCommand checkValidIndex \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(false, newChore.isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        checkValidIndex.markChoreDone(choreList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(true, newChore.isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        DoneCommand checkInvalidIndex \u003d new DoneCommand(2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(\"Please choose an index in the chore list!\", checkInvalidIndex.markChoreDone(choreList));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 26
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/ListChoreCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "class ListChoreCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void listChore() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ListChoreCommand listEmptylist \u003d new ListChoreCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(\"Your list of chores is currently empty.\", listEmptylist.listChore(choreList));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        choreList.add(new Chore(\"buy groceries\", \"Tuesday 12pm\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        ListChoreCommand listNonEmptyList \u003d new ListChoreCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(\"Here are the chores in your list:\\n1. \" + choreList.get(0),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                listNonEmptyList.listChore(choreList));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheongisabella": 25
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/ListIngredientCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "class ListIngredientCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandIngredient_validCategoryName_correctlyConstructed() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListIngredientCommand command \u003d new ListIngredientCommand(\"all\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // TODO: add comparison of tags to person.equals and equality methods to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // individual fields that compare privacy to simplify this"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(\"all\",command.getCategory());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertTrue(command.checkCategoryValid());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandIngredient_invalidCategoryName_correctlyConstructed() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListIngredientCommand command \u003d new ListIngredientCommand(\"laptop\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // TODO: add comparison of tags to person.equals and equality methods to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // individual fields that compare privacy to simplify this"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(\"laptop\",command.getCategory());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertFalse(command.checkCategoryValid());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JensonWee": 36
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/ListRecipeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "class ListRecipeCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandRecipe_validItemNumber_correctlyConstructed() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListRecipeCommand command \u003d new ListRecipeCommand(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // individual fields that compare privacy to simplify this"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(1,command.getItemNumber());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertTrue(command.checkItemValid(1, recipeList));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandRecipe_invalidItemNumber_correctlyConstructed() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListRecipeCommand command \u003d new ListRecipeCommand(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // individual fields that compare privacy to simplify this"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(1,command.getItemNumber());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertFalse(command.checkItemValid(2, recipeList));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JensonWee": 58
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/ResetCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class ResetCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 7
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/SearchChoreCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class SearchChoreCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_notEmpty() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        choreArrayList.add(new Chore(\"buy groceries\", \"Tuesday 12pm\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        choreArrayList.add(new Chore(\"buy groceries\", \"Wednesday 12pm\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"Here are your matching chores in your list\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + Ui.LS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + \"1.[x] buy groceries (by: Tuesday 12pm)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + Ui.LS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + \"2.[x] buy groceries (by: Wednesday 12pm)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchchore groceries\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_empty() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"There are no matching chores in your list.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchchore groceries\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_notFound() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        choreArrayList.add(new Chore(\"buy groceries\", \"Tuesday 12pm\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        choreArrayList.add(new Chore(\"buy groceries\", \"Wednesday 12pm\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"There are no matching chores in your list.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchchore fruits\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 4,
      "jinfayap": 54
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/SearchIngredientCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class SearchIngredientCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_notEmpty() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ingredientArrayList.add(new Meat(\"Beef\", \"meat\", 3, 20, \"18/03/2020\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ingredientArrayList.add(new Meat(\"Beef cubes\", \"meat\", 3, 20, \"18/03/2020\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"Here are your matching ingredients in your list\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + Ui.LS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + \"1.[Meat] Beef Qty:3 $20.00 Exp:18/03/2020\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + Ui.LS"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                + \"2.[Meat] Beef cubes Qty:3 $20.00 Exp:18/03/2020\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchingredient beef\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_empty() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"There are no matching ingredient in your list.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchingredient beef\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_notFound() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ingredientArrayList.add(new Meat(\"Beef\", \"meat\", 3, 20, \"18/03/2020\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ingredientArrayList.add(new Meat(\"Beef cubes\", \"meat\", 3, 20, \"18/03/2020\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"There are no matching ingredient in your list.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchingredient pork\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 4,
      "jinfayap": 55
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/SearchRecipeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class SearchRecipeCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_notEmpty() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        addFirstRecipe(recipeArrayList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        addSecondRecipe(recipeArrayList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                \"Here are your matching recipes in your list\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + Ui.LS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + \"1.Chicken Salad located at listrecipe 1\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + Ui.LS"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                + \"2.Chicken Stew located at listrecipe 2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchrecipe chicken\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_empty() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"There are no matching recipes in your list.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchrecipe chicken\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void execute_notFound() throws KitchenHelperException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cChore\u003e choreArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        addFirstRecipe(recipeArrayList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String expectedOutput \u003d \"There are no matching recipes in your list.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d new Parser().parseUserCommand(\"searchrecipe pork\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .execute(ingredientArrayList, recipeArrayList, choreArrayList).feedbackToUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(expectedOutput, output);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void addSecondRecipe(ArrayList\u003cRecipe\u003e recipeArrayList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Recipe newRecipe \u003d new Recipe();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        newRecipe.recipeName \u003d \"Chicken Stew\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e recipeItems2 \u003d newRecipe.getRecipeItem();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        recipeItems2.add(newRecipe.createIngr(\"Chicken Breast\", \"meat\", 2));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        recipeItems2.add(newRecipe.createIngr(\"Lettuce\", \"vegetable\", 4));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        recipeArrayList.add(newRecipe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void addFirstRecipe(ArrayList\u003cRecipe\u003e recipeArrayList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Recipe newRecipe \u003d new Recipe();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        newRecipe.recipeName \u003d \"Chicken Salad\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e recipeItems \u003d newRecipe.getRecipeItem();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        recipeItems.add(newRecipe.createIngr(\"Chicken Breast\", \"meat\", 2));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        recipeItems.add(newRecipe.createIngr(\"Lettuce\", \"vegetable\", 4));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        recipeArrayList.add(newRecipe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 4,
      "jinfayap": 72
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.KitchenHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.AddIngredientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.AddChoreCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import seedu.kitchenhelper.command.DeleteChoreCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.InvalidCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.SearchIngredientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.SearchRecipeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.SearchChoreCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static seedu.kitchenhelper.parser.Parser.splitInputLine;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void parseUserCommand_testPass() throws KitchenHelperException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().parseUserCommand("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                \"addingredient /n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\") instanceof AddIngredientCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().parseUserCommand(\"searchingredient Beef\") instanceof SearchIngredientCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().parseUserCommand(\"searchrecipe chicken\") instanceof SearchRecipeCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().parseUserCommand(\"searchchore groceries\") instanceof SearchChoreCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void parseUserCommand_testFail() throws KitchenHelperException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .parseUserCommand(\"dada /n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\") instanceof AddIngredientCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void prepareAddInventory_testPass() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String correctAttributes \u003d \"/n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().prepareAddIngredient(correctAttributes) instanceof AddIngredientCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d String.format(AddIngredientCommand.MESSAGE_SUCCESS, \"Beef\", \"Meat\", 30, 20.2, \"20/02/2020\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(output, showToConsole(new KitchenHelper()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .executeCommand(new Parser().prepareAddIngredient(correctAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void prepareAddInventory_testFail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String incorrectAttributes \u003d \"/ Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().prepareAddIngredient(incorrectAttributes) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d \"Invalid Command Format!\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        + \"Adds a ingredient to the ingredient list. /n INGREDIENT /c CATEGORY /q QUANTITY /p PRICE /e\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        + \" EXPIRY\\n\" + \"Example: addingredient /n Beef /c Meat /q 1 /p 13.5 /e 13/02/2020\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(output, showToConsole(new KitchenHelper()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .executeCommand(new Parser().prepareAddIngredient(incorrectAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void prepareAddChore_testPass() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String correctAttributes \u003d \"buy groceries /by Tuesday 12pm\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertTrue(new Parser().prepareAddChore(correctAttributes) instanceof AddChoreCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void prepareAddChore_testFail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String incorrectAttributes \u003d \"buy groceries\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String output \u003d \"Invalid Command Format!\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                + \"Adds a chore to the chore list. TASK /by DATE\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                + \"Example: addchore buy groceries /by Tuesday 12pm\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(output, showToConsole(new KitchenHelper()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                .executeCommand(new Parser().prepareAddChore(incorrectAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void prepareDeleteChore_testPass() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String correctAttributes \u003d \"1\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertTrue(new Parser().prepareDeleteChore(correctAttributes) instanceof DeleteChoreCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    void prepareDeleteChore_testFail() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String incorrectAttributes \u003d \"one\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String output \u003d \"Invalid Command Format!\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                + \"Deletes a chore from the chore list. \u003cindex\u003e\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                + \"Example: deletechore 1\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        assertEquals(output, showToConsole(new KitchenHelper()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                .executeCommand(new Parser().prepareDeleteChore(incorrectAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void splitInputLine_testPass() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String userInput \u003d \"addingredient /n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"addingredient\", splitInputLine(userInput, \" \")[0]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"/n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\", splitInputLine(userInput, \" \")[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void splitInputLine_testFail() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String userInput \u003d \"addingredient /n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"addingredient\", splitInputLine(userInput, \"\")[0]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"/n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\", splitInputLine(userInput, \"/p\")[1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void isValidUserInputFormat_testPass() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String regex \u003d \"/n [a-zA-Z]+( [a-zA-Z]+)* /c [a-zA-Z]+ /q [0-9]+ /p \\\\d+(\\\\.\\\\d{1,2})? /e \\\\d{2}/\\\\d{2}/\\\\d{4}\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Beef /c Meat /q 30 /p 20.2 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Beef cubes /c Meat /q 30 /p 20.2 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Kailan /c Vegetable /q 30 /p 20 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n miLK /c dairy /q 30 /p 20.2 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n APPLE /c fRuit /q 20 /p 20.22 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Rice /c Staple /q 30 /p 222.11 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .isValidUserInputFormat(\"/n apple cider alcohol drink /c Drink /q 30 /p 50.1 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n spoon /c miscellaneous /q 30 /p 20.2 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Beef cubes /c Meat /q 30 /p 20.2 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void isValidUserInputFormat_testFail() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String regex \u003d \"/n [a-zA-Z]+( [a-zA-Z]+)* /c [a-zA-Z]+ /q [0-9]+ /p \\\\d+(\\\\.\\\\d{1,2})? /e \\\\d{2}/\\\\d{2}/\\\\d{4}\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Invalid price notation"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n Beef /c Meat /q 30 /p 20.212 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Invalid Date format"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n Beef cubes /c Meat /q 30 /p 20.2 /e 12-13/2020\", regex));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Missing identifier /n"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"Kailan /c Vegetable /q 30 /p 20 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Missing space between ingredient name and identifier /c"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n miLK/c dairy /q 30 /p 20.2 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Extra space between ingredient\u0027category and identifier /q"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n APPLE /c fRuit  /q 20 /p 20.22 /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Invalid Date format, consist of 3 digit in day in a month"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n Rice /c Staple /q 30 /p 222.11 /e 201/02/2020\", regex));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Missing parameter"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n Beef cubes /c Meat /q 30 /p /e 20/02/2020\", regex));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    String showToConsole(String... message) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            output.append(m);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 111,
      "cheongisabella": 34
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package seedu.kitchenhelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private static String currentDirectory \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String OUTPUT_INGREDIENT \u003d currentDirectory + \"/src/test/data/StorageTest/outputIngredient.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String OUTPUT_RECIPE \u003d currentDirectory + \"/src/test/data/StorageTest/outputRecipe.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String OUTPUT_CHORE \u003d currentDirectory + \"/src/test/data/StorageTest/outputChore.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String NEW_OUTPUT_INGREDIENT \u003d currentDirectory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            + \"/src/test/data/NewStorageTest/outputIngredient.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String NEW_OUTPUT_RECIPE \u003d currentDirectory + \"/src/test/data/NewStorageTest/outputRecipe.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String NEW_OUTPUT_CHORE \u003d currentDirectory + \"/src/test/data/NewStorageTest/outputChore.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public Storage storage \u003d new Storage(OUTPUT_INGREDIENT, OUTPUT_RECIPE, OUTPUT_CHORE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void getIngredientDataTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Storage newStorage \u003d new StubStorage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            List\u003cIngredient\u003e ingredients \u003d storage.getIngredientData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            List\u003cIngredient\u003e stubIngredients \u003d newStorage.getIngredientData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            assertEquals(ingredients, stubIngredients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void getRecipeData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void getChoreData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void saveIngredientData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void saveRecipeData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    void saveChoreData() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private class StubStorage extends Storage {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        public StubStorage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            super(NEW_OUTPUT_INGREDIENT, NEW_OUTPUT_RECIPE, NEW_OUTPUT_CHORE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        public ArrayList\u003cIngredient\u003e getIngredientData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ArrayList\u003cIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            loadingIngredients(\"Beef\", \"meat\", 3, 20.0, \"2020-03-18\",ingredients);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            loadingIngredients(\"Chicken\", \"meat\", 3, 20.0, \"2020-03-18\", ingredients);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return ingredients;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 61,
      "JensonWee": 9
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addrecipe /n Chicken Stew /i Chicken Breast:2:meat, Lettuce:4:vegetable"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Beef /c meat /q 3 /p 20 /e 18/03/2020"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Beef cubes /c meat /q 3 /p 20 /e 18/03/2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Chicken Breast /c meat /q 4 /p 20 /e 20/03/2020"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Chicken Breast /c meat /q 3 /p 20 /e 18/03/2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n kailan /c Vegetable /q 30 /p 30.45 /e 12/03/2020"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n HL Milk /c Dairy /q 3 /p 12.2 /e 14/03/2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Milo /c Drink /q 30 /p 10 /e 20/012/2020"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Pear /c fruit /q 1 /p 1 /e 02/02/2020"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Lettuce /c Vegetable /q 4 /p 20 /e 20/03/2020"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Lettuce /c Vegetable /q 8 /p 20 /e 09/03/2020"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Apple /c fruit /q 1 /p 1 /e 02/02/2020"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Apple /c fruit /q 1 /p 1 /e 01/02/2020"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Apple /c fruit /q 1 /p 1 /e 03/02/2020"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deleteingredient /n Apple"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deleteingredient /n Apple"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deleteingredient /n Apple"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deleteingredient /n Pear"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "addchore buy groceries /by Tuesday 12pm"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "addchore buy groceries"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "searchchore groceries"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "searchingredient beef"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "searchrecipe chicken"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "cookrecipe /n Chicken Salad /p 2"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "cookrecipe /n Chicken Salad /p 3"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /n Beef"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deleteingredient /n Beef cubes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /n kailan /q 35"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /n kailan"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleterecipe /n Chicken Salad"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deleterecipe /n Chicken Salad"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deleterecipe /n Chicken Stew"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deleteingredient /n HL milk"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 4"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 3"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 2"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /i 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "deletechore 1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "listingredient all"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "listchore"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 1,
      "yantingsanity": 11,
      "jinfayap": 20,
      "cheongisabella": 2,
      "alwayshuizhen": 1,
      "JensonWee": 14
    }
  }
]
