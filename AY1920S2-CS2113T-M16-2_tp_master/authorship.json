[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "group \u0027seedu.kitchenhelper\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    mainClassName \u003d \"seedu.kitchenhelper.KitchenHelper\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    archiveBaseName \u003d \"kitchenhelper\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    enableAssertions \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 4,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jin Fa | [Github](https://github.com/jinfayap) | [Portfolio](docs/team/jinfa.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jin Xing | [Github](https://github.com/) | [Portfolio](docs/team/jinxing.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Isabella | [Github](https://github.com/) | [Portfolio](docs/team/isabella.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Lim Yan Ting| [Github](https://github.com/yantingsanity) | [Portfolio](docs/team/yanting.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hui Zhen | [Github](https://github.com/alwayshuizhen) | [Portfolio](docs/team/huizhen.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zi Hui | [Github](https://github.com/zi-hui) | [Portfolio](docs/team/zihui.md)"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 1,
      "yantingsanity": 2,
      "cheongisabella": 4,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/KitchenHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class KitchenHelper {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /* Hi pls, look at this main program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/Main.java */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        storage \u003d new Storage(\"output.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private void run() throws KitchenHelperException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setUpLogger();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private void setUpLogger() throws KitchenHelperException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Output to console only when a serious failure has caused normal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        execution of the program"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ConsoleHandler consoleOutput \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        consoleOutput.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        kitchenLogs.addHandler(consoleOutput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Logs all information above the Level.Fine to a log file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            FileHandler logFile \u003d new FileHandler(\"KitchenLogs.log\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            logFile.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            logFile.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.addHandler(logFile);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new KitchenHelperException(\"Error in Logging\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String userCommandInput \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                // takes in the user\u0027s input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                userCommandInput \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                // parse input to return obj of the corresponding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                // type of command (i.e add/ delete/ list/ help / exit)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                command \u003d new Parser().parseUserCommand(userCommandInput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                CommandResult result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                ui.showResultToUser(result);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                ui.printDivider();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                ui.printInvalidCmd();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                ui.print(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                ui.printDivider();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } while (!userCommandInput.equalsIgnoreCase(ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static void main(String[] args) throws KitchenHelperException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new KitchenHelper().run();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Executes the command and return result."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param command the command being executed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the return message of the command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult executeCommand(Command command) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            // to check if you get the right object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            // System.out.println(command.getClass().getName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            CommandResult result \u003d command.execute(ingredientList, recipeList, choreList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 3,
      "yantingsanity": 8,
      "jinfayap": 60,
      "cheongisabella": 1,
      "alwayshuizhen": 45
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/AddIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Adds the ingredient to the inventory list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class AddIngredientCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addingredient\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            \"You have added Ingredient:%s Category:%s Quantity:%d Price:$%.2f Expiry:%s to the inventory list\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Adds a ingredient to the inventory list.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"/n INGREDIENT /c CATEGORY /q QUANTITY /p PRICE /e EXPIRY\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: addingredient /n Beef /c Meat /q 1 /p 13.5 /e 2020-02-13\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public final String logAddIngredient \u003d \"A new ingredient has been added\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String ingredientName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String expiry;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Add Inventory Command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientName name of the ingredient."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param categoryName   category of the ingredient."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param quantity       number of serving of ingredient."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param price          cost of the ingredient."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiry         ingredient expiry date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public AddIngredientCommand(String ingredientName, String categoryName, int quantity, double price, String expiry) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.expiry \u003d expiry;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Adds the ingredient to the ArrayList according to the category type."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param category       category of the ingredient."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList the ArrayList to store ingredients."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void addToCategory(String category, ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        switch (category.toLowerCase()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Meat.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Meat(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Vegetable.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Vegetable(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Drink.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Drink(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Fruit.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Fruit(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Staple.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Staple(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Dairy.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Dairy(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Miscellaneous.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            this.categoryName \u003d Miscellaneous.INGREDIENT_WORD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Miscellaneous(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the success message of adding inventory."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        addToCategory(categoryName, ingredientList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        kitchenLogs.info(logAddIngredient);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 1,
      "jinfayap": 108
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/AddRecipeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Perform addition-related commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class AddRecipeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addrecipe\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Adds a recipe to the recipe list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_PARAMETER"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \u003d \"/n RECIPENAME /i INGRNAME:QUANTITY:CATEGORY \u003coptional: , INGRNAME:QUANTITY:CATEGORY\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_EXAMPLE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \u003d \"Example: addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final String logAddRecipe \u003d \"A new recipe has been added\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public HashMap\u003cString[], Integer\u003e parsedIngr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Set the object\u0027s type."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setTypeOfObject() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        objectType \u003d \"recipe\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Set the attributes of the Command class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param rawString full user input string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrAndQty a hashmap of ingredient with [ingredientName, ingredientCategory] as key"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *                   and ingredientQuantity as value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setAttributesOfCmd(String rawString, HashMap\u003cString[], Integer\u003e ingrAndQty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setTypeOfObject();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setObjectVariables(rawString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setAction();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.parsedIngr \u003d ingrAndQty;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setObjectVariables(String rawString) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        objectVariables \u003d rawString;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setAction() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        actionType \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String addRecipe(String attributes, ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Recipe freshRecipe \u003d new Recipe();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        freshRecipe.setRecipeName(attributes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        freshRecipe.addIngredientsToRecipe(parsedIngr);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeList.add(freshRecipe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assert freshRecipe.recipeName.length() \u003e 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assert recipeList.size() \u003e 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        kitchenLogs.info(logAddRecipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return freshRecipe.recipeName + \" Recipe has been created with \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                + freshRecipe.recipeIngrQty + \" ingredients inside.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String addChore(String objectVariables, ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String[] objectTypeAndOthers \u003d objectVariables.split(\"chore \", 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String[] descriptionAndDate \u003d objectTypeAndOthers[1].trim().split(\"/by\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String description \u003d descriptionAndDate[0].trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            String date \u003d descriptionAndDate[1].trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Chore newChore \u003d new Chore(description, date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            choreList.add(newChore);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            newChore.setEditType(COMMAND_WORD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d String.format(Chore.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    newChore.editType, newChore, choreList.size(), newChore.checkSingular(choreList));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d \"You need to add a date with \\\"/by\\\" in the description.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String message \u003d addRecipe(this.objectVariables,recipeList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 12,
      "cheongisabella": 17,
      "alwayshuizhen": 67
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Abstract class to represent user\u0027s command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String actionType; //add, delete, list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String objectType; //ingredient, recipe, chore"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String objectVariables;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String getActionType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return actionType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String getObjectType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return objectType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String getObjectVariables() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return objectVariables;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the Action Type for the Command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setActionType(String command) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        actionType \u003d command;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the Object Type for the Command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param type the name of the object type"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setObjectType(String type) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        objectType \u003d type;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the Object Variables for Command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param attribute the values for the variables, can be recipe or ingredient names"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setObjectVariables(String attribute) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        objectVariables \u003d attribute;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String addChore(String objectVariables, ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String deleteChore(String objectVariables, ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String listIngredients(ArrayList\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String listRecipe(String objectVariables, ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String listChore(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Runs the command given by user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return cmdResult response given to user after successful execution."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (actionType.equals(DeleteCommand.COMMAND_WORD) \u0026\u0026 objectType.equals(\"chore\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d deleteChore(objectVariables, choreList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else if (actionType.equals(ListCommand.COMMAND_WORD) \u0026\u0026 objectType.equals(\"ingredient\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            feedbackToUser \u003d listIngredients(ingredientList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else if (actionType.equals(ListCommand.COMMAND_WORD) \u0026\u0026 objectType.equals(\"recipe\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            feedbackToUser \u003d listRecipe(objectVariables, recipeList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else if (actionType.equals(ListCommand.COMMAND_WORD) \u0026\u0026 objectType.equals(\"chore\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d listChore(choreList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CommandResult cmdResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return cmdResult;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 32,
      "jinfayap": 10,
      "cheongisabella": 17,
      "alwayshuizhen": 28,
      "JensonWee": 21
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 11
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static int quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the Object Type for the Command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param object the name of the object type"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setTypeOfObject(String object) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String[] attributes \u003d object.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (attributes[0].equalsIgnoreCase(\"recipe\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            objectType \u003d \"recipe\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else if (attributes[0].equalsIgnoreCase(\"ingredient\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            objectType \u003d \"ingredient\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else if (attributes[0].equalsIgnoreCase(\"chore\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            objectType \u003d \"chore\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the other parameters for the DeleteCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param attributes all the parameters for DeleteCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setDeleteParams(HashMap\u003cString, String\u003e attributes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setAction();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setTypeOfObject(attributes.get(\"type\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setOtherAttributes(attributes);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the Action Type for the Command (delete)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setAction() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        actionType \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the other parameters for the DeleteCommand."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param attributes all the parameters for DeleteCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setOtherAttributes(HashMap\u003cString, String\u003e attributes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        objectVariables \u003d attributes.get(\"nameToDelete\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        quantity \u003d Integer.parseInt(attributes.get(\"quantity\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String deleteChore(String numberToDelete, ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            int number \u003d Integer.parseInt(numberToDelete.trim());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            Chore choreToDelete \u003d choreList.get(number - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            choreList.remove(choreToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            choreToDelete.setEditType(COMMAND_WORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d String.format(Chore.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                    choreToDelete.editType, choreToDelete, choreList.size(), choreToDelete.checkSingular(choreList));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d \"The description of \\\"delete\\\" has to be an integer in the list.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d \"The description of \\\"delete\\\" has to be an integer in the list.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return the execution of the deletion of ingredients or tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult  execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return super.execute(ingredientList, recipeList, choreList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 57,
      "jinfayap": 14,
      "cheongisabella": 16,
      "alwayshuizhen": 10
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DeleteIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class DeleteIngredientCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteingredient\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"deleteingredient /n INGREDIENT [/q QUANTITY]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Deletes an ingredient. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: deleteingredient /n Beef /q 2\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d String.format(\"%s%s\\n%s\", COMMAND_DESC, COMMAND_USAGE, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_SUCCESS \u003d \"%s has been deleted.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FAILURE \u003d \"This ingredient does not exist! Please type in a correct \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                    + \"ingredient name.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_SUCCESS_QUANTITY \u003d \"The quantity of %s has been changed!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FAILURE_QUANTITY \u003d \"Please enter a valid quantity to delete!\\nCurrently:\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                                            + \"\\n%s : %d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String LOG_INFO \u003d \"An ingredient has been deleted\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private static final String OBJECT_TYPE \u003d \"ingredient\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private static int quantity \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Constructor for Delete Ingredient Command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientName name of the ingredient to be deleted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param quantity number of serving of ingredient to be deleted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public DeleteIngredientCommand(String ingredientName, int quantity) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setActionType(COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectType(OBJECT_TYPE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectVariables(ingredientName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Getting the index of the ingredient to be deleted."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientName the name of the ingredient to be deleted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientsList the list of ingredients"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return index if the ingredient is found in the ingredient list, else -1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public int getIngredientIndex(String ingredientName, ArrayList\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        for (Ingredient ingredient : ingredientsList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (ingredient.getIngredientName().equalsIgnoreCase(ingredientName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                int index \u003d ingredientsList.indexOf(ingredient);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Update the quantity of an ingredient the ingredient list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param newQuantity  the new quantity for the ingredient"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientToDelete the ingredient to be deleted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return feedback to user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String updateNewQuantity(int newQuantity, Ingredient ingredientToDelete) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String ingredientName \u003d ingredientToDelete.getIngredientName();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int ingredientQuantity \u003d ingredientToDelete.getQuantity();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (newQuantity \u003c 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d String.format(COMMAND_FAILURE_QUANTITY, ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert ingredientQuantity !\u003d newQuantity;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            ingredientToDelete.setQuantity(newQuantity);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d String.format(COMMAND_SUCCESS_QUANTITY, ingredientName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert ingredientToDelete.getQuantity() \u003d\u003d newQuantity;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the ingredient from the ingredient list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientsList the list of ingredients"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return feedback to user"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteIngredient(ArrayList\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String ingredientName \u003d this.objectVariables;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int indexOfIngredient \u003d getIngredientIndex(ingredientName, ingredientsList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (indexOfIngredient !\u003d -1) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert ingredientsList.size() \u003e 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            Ingredient ingredientToDelete \u003d ingredientsList.get(indexOfIngredient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (quantity \u003c\u003d -1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                kitchenLogs.log(Level.INFO, LOG_INFO);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                ingredientsList.remove(ingredientToDelete);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                feedbackToUser \u003d String.format(COMMAND_SUCCESS, ingredientName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                int newQuantity \u003d ingredientToDelete.getQuantity() - quantity;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                feedbackToUser \u003d updateNewQuantity(newQuantity, ingredientToDelete);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d COMMAND_FAILURE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return the execution of the deletion of ingredients or tasks."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                  ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser \u003d deleteIngredient(ingredientList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        CommandResult cmdResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return cmdResult;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 129
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DeleteRecipeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class DeleteRecipeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleterecipe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_USAGE \u003d \"deleterecipe /n RECIPENAME\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Delete the recipe. \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: deleterecipe /n Chicken Salad\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d String.format(\"%s%s\\n%s\", COMMAND_DESC, COMMAND_USAGE, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_SUCCESS \u003d \"%s has been deleted\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String COMMAND_FAILURE \u003d \"This recipe does not exist! Please type in a correct recipe name.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String LOG_INFO \u003d \"A recipe has been deleted\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private static final String OBJECT_TYPE \u003d \"recipe\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public DeleteRecipeCommand(String recipeName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setActionType(COMMAND_WORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectType(OBJECT_TYPE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setObjectVariables(recipeName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Getting the index of the recipe to be deleted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeName the name of the recipe to be deleted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList the list of recipe"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public int getRecipeIndex(String recipeName, ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (recipe.getRecipeName().equalsIgnoreCase(recipeName)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                int index \u003d recipeList.indexOf(recipe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the recipe for the recipe list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList the list of recipe"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteRecipe(ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String recipeName \u003d this.objectVariables;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d getRecipeIndex(recipeName, recipeList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (index !\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert recipeList.size() \u003e 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            kitchenLogs.log(Level.INFO, LOG_INFO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            recipeList.remove(recipeList.get(index));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d String.format(COMMAND_SUCCESS, recipeName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d COMMAND_FAILURE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return the execution of the deletion of ingredients or tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                  ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser \u003d deleteRecipe(recipeList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        CommandResult cmdResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return cmdResult;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 84
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Exiting KitchenHelper as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 10,
      "alwayshuizhen": 8
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 7
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Represent an invalid command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_INVALID \u003d \"Invalid Command Format!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private final String invalidFeedback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for InvalidCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public InvalidCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.invalidFeedback \u003d MESSAGE_INVALID;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for InvalidCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param invalidFeedback feedback for invalid command message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public InvalidCommand(String invalidFeedback) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.invalidFeedback \u003d invalidFeedback;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the invalid message."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(invalidFeedback);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 38,
      "alwayshuizhen": 8
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d \"list ingredient\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void setListParams(HashMap\u003cString, String\u003e attributes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        actionType \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        setTypeOfObject(attributes.get(\"type\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (attributes.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            objectVariables \u003d attributes.get(\"item\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void setTypeOfObject(String object) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String[] attributes \u003d object.split(\"\\\\s\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (attributes[0].equalsIgnoreCase(\"recipe\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            objectType \u003d \"recipe\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else if (attributes[0].equalsIgnoreCase(\"ingredient\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            objectType \u003d \"ingredient\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else if (attributes[0].equalsIgnoreCase(\"chore\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            objectType \u003d \"chore\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String listIngredients(ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String result \u003d \"Here is the list of Ingredients in Inventory:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                + \"Format : Ingredient Name | Quantity | Price | Expiry\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String[] categoryArray \u003d {Dairy.INGREDIENT_WORD, Drink.INGREDIENT_WORD, Fruit.INGREDIENT_WORD,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            Meat.INGREDIENT_WORD, Miscellaneous.INGREDIENT_WORD, Staple.INGREDIENT_WORD, Vegetable.INGREDIENT_WORD};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (ingredientList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            result +\u003d \"The Ingredient List is currently empty.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            for (String categoryName : categoryArray) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                result +\u003d categoryName + \" : \\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                for (int i \u003d 0; i \u003c ingredientList.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    Ingredient ingredientObj \u003d ingredientList.get(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    if (ingredientObj.getCategoryName().equals(categoryName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        result +\u003d ingredientObj.getIngredientName() + \" | \" + ingredientObj.getQuantity() + \" | \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                + ingredientObj.getPrice() + \" | \" + ingredientObj.getExpiryDate() + \" \\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String listRecipe(String itemNumber, ArrayList\u003cRecipe\u003e recipeArrayList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        int itemNum \u003d Integer.parseInt(itemNumber) - 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String result \u003d \"\\nHere is the list of Ingredients in Recipe:\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                + \"\\nFormat : Ingredient Name | Ingredient Category | Quantity | Price | Expiry\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (recipeArrayList.size() \u003d\u003d 0 || (itemNum + 1) \u003e recipeArrayList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            result +\u003d \"The Recipe List is currently empty.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            Recipe recipeItem \u003d recipeArrayList.get(itemNum);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            result +\u003d \"Recipe Name : \" + recipeArrayList.get(itemNum).getRecipeName() + \"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            for (int i \u003d 0; i \u003c recipeItem.getRecipeItem().size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                Ingredient ingredientObj \u003d recipeItem.getRecipeItem().get(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                result +\u003d ingredientObj.getIngredientName() + \" | \" + ingredientObj.getCategoryName()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        + \" | \" + ingredientObj.getQuantity() + \" | \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        + ingredientObj.getPrice() + \" | \" + ingredientObj.getExpiryDate() + \" \\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String listChore(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        String feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (choreList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d \"Your list of chores is currently empty.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            feedbackToUser \u003d \"Here are the chores in your list:\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            for (int i \u003d 0; i \u003c choreList.size(); ++i) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                feedbackToUser +\u003d (Integer.toString(i + 1) + \". \" + choreList.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return super.execute(ingredientList, recipeList, choreList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 19,
      "cheongisabella": 12,
      "alwayshuizhen": 9,
      "JensonWee": 63
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/exception/KitchenHelperException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class KitchenHelperException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for KitchenHelperException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param message contain relevant information on the failed constraints."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public KitchenHelperException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 15
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/Chore.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Chore {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String editType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have %s this chore:\\n%s\\nNow you have %s chore%s in the list.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public Chore(String description, String date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void setEditType(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (command.equals(\"add\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            this.editType \u003d \"added\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            this.editType \u003d \"deleted\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public boolean markAsDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"/\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"x\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String checkSingular(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        if (choreList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            return \"s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description + \"(by: \" + date + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 5,
      "cheongisabella": 45
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/Recipe.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * A Recipe represents a collection of ingredients of different types."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenLogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final String warningAddRecipe \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            \"An unidentifiable ingredient has been added to ingredient of Miscellaneous category\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    ArrayList\u003cIngredient\u003e recipeItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String recipeName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Integer recipeIngrQty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the addition of ingredients into recipe."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrAndQty the hashmap of ingredients."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void addIngredientsToRecipe(HashMap\u003cString[], Integer\u003e ingrAndQty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assert ingrAndQty.size() \u003e 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Map.Entry\u003cString[], Integer\u003e entry : ingrAndQty.entrySet()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String ingrName \u003d (entry.getKey())[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String ingrCategory \u003d (entry.getKey())[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            Integer ingrQuantity \u003d entry.getValue();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            assert ingrName.length() \u003e 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            assert ingrCategory.length() \u003e 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            assert ingrQuantity \u003e\u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            Ingredient newIngredient \u003d createIngr(ingrName, ingrCategory, ingrQuantity);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            recipeItems.add(newIngredient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            assert recipeItems.size() \u003e 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeIngrQty \u003d recipeItems.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the addition of ingredients into recipe."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrName the name of the ingredient."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrCategory the category of the ingredient."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrQuantity the quantity of the ingredient."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return Ingredient specific to its category."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Ingredient createIngr(String ingrName, String ingrCategory, Integer ingrQuantity) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        switch (ingrCategory.toLowerCase()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"dairy\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Dairy(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"drink\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Drink(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"fruit\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Fruit(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"meat\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Meat(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"miscellaneous\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Miscellaneous(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"staple\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Staple(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"vegetable\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Vegetable(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenLogs.warning(warningAddRecipe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Miscellaneous(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setRecipeName(String attributes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String recipeNameAndIngr \u003d attributes.substring(attributes.indexOf(\"/n\") + 3, attributes.indexOf(\"/i\") - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeName \u003d recipeNameAndIngr;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String getRecipeName() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return recipeName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getRecipeItem() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(recipeItems.size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return this.recipeItems;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 4,
      "jinfayap": 5,
      "alwayshuizhen": 80,
      "JensonWee": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Dairy.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Dairy extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"dairy\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Dairy(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Drink.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Drink extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"drink\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Drink(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Fruit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Fruit extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"fruit\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Fruit(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Ingredient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Represent an Ingredient object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public abstract class Ingredient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String ingredientName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String expiryDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Ingredient."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientName name of the ingredient."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param categoryName   category of the ingredient."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param quantity       quantity of the ingredient."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param price          price of the ingredient."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiryDate     expiry date of the ingredient."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Ingredient(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for ingredient name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return ingredient name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getIngredientName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for category name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return category name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for quantity."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return quantity."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Setters for quantity."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param quantity quantity of ingredient"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setQuantity(int quantity) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for price."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return price."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for expiry date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return expiry date."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getExpiryDate() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To format all variables of add ingredient as a string."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return String consisting of ingredient name, category, quantity, price and expiry."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return \"/n \" + getIngredientName() + \" /c \" + getCategoryName() + \" /q \" + getQuantity()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + \" /p \" + getPrice() + \" /e \" + getExpiryDate();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 10,
      "yantingsanity": 10,
      "jinfayap": 75
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Meat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Meat extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"meat\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Meat(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Miscellaneous.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Miscellaneous extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"miscellaneous\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Miscellaneous(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Staple.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Staple extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"staple\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Staple(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Vegetable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Vegetable extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"vegetable\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Vegetable(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.command.AddRecipeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.AddIngredientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.InvalidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Parse user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static final Logger kitchenlogs \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static final String LOG_WARNING_INDEX \u003d \"An IndexOutOfBounds exception has been caught\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public final String warningPrepareRecipe \u003d \"An IO exception has been caught\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param input full user input string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the command based on the user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Command parseUserCommand(String input) throws KitchenHelperException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String[] userInputs \u003d splitInputLine(input, \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        final String commandWord \u003d userInputs[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        final String parameters \u003d userInputs[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case AddRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return prepareAddRecipe(parameters);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case AddIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return prepareAddIngredient(parameters);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        case DeleteRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return prepareDeleteRecipe(parameters);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        case DeleteIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return prepareDeleteIngredient(parameters);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            ListCommand listCmd \u003d new ListCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            HashMap\u003cString, String\u003e listParams \u003d prepareListParams(parameters);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            listCmd.setListParams(listParams);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return listCmd;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            DeleteCommand deleteCmd \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            HashMap\u003cString, String\u003e deleteParams \u003d prepareDeleteParams(parameters);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            deleteCmd.setDeleteParams(deleteParams);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return deleteCmd;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the addition of ingredients into recipe."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return hashmap of a formatted list of ingredients."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Command prepareAddRecipe(String attributes) throws KitchenHelperException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e ingrAndQty \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String ingredientList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand addCmd \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            ingredientList \u003d attributes.substring(attributes.indexOf(\"/i\") + 3);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String[] splitedIngr \u003d ingredientList.split(\"[,][\\\\s]\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            for (String item : splitedIngr) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                String[] ingrContent \u003d item.split(\":\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                String[] nameAndType \u003d new String[2];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                nameAndType[0] \u003d ingrContent[0];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                nameAndType[1] \u003d ingrContent[2];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                ingrAndQty.put(nameAndType, Integer.parseInt(ingrContent[1]));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            kitchenlogs.log(Level.WARNING, warningPrepareRecipe, e.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddRecipeCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        addCmd.setAttributesOfCmd(attributes, ingrAndQty);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return addCmd;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Prepares the addition of ingredient into inventory."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Command prepareAddIngredient(String attributes) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            // Regex for checking the format of add ingredient"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String addInventoryRegex \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    \"/n [a-zA-Z]+( [a-zA-Z]+)* /c [a-zA-Z]+ /q [0-9]+ /p \\\\d+(\\\\.\\\\d{1,2})? /e \\\\d{4}-\\\\d{2}-\\\\d{2}\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (!isValidUserInputFormat(attributes, addInventoryRegex)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                throw new KitchenHelperException(\"Invalid Add Inventory Format\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] nameAndOthers \u003d attributes.split(\"/c\\\\s\", 2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String itemName \u003d nameAndOthers[0].split(\"/n\\\\s+\")[1].trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            assert itemName.length() \u003e 0 : itemName;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] categoryAndOthers \u003d nameAndOthers[1].split(\"\\\\s+/q\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String category \u003d categoryAndOthers[0].trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            assert category.length() \u003e 0 : category;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] quantityAndOthers \u003d categoryAndOthers[1].split(\"\\\\s+/p\\\\s+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            int quantity \u003d Integer.parseInt(quantityAndOthers[0]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            assert quantity \u003e\u003d 0 : quantity;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] priceAndExpiry \u003d quantityAndOthers[1].split(\"\\\\s+/e\\\\s+\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            double price \u003d Double.parseDouble(priceAndExpiry[0]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            assert price \u003e\u003d 0.00 : price;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String expiry \u003d priceAndExpiry[1];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new AddIngredientCommand(itemName, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            kitchenlogs.log(Level.WARNING,InvalidCommand.MESSAGE_INVALID + \" \" + attributes);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddIngredientCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "  "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * Prepares the parameters needed for the list function."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private HashMap\u003cString, String\u003e prepareListParams(String attributes) throws KitchenHelperException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        HashMap\u003cString, String\u003e listParam \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            String[] typeName \u003d attributes.split(\"\\\\s\", 2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            listParam.put(\"type\", typeName[0].trim());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (typeName.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                listParam.put(\"item\", typeName[1].trim());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (listParam.get(\"type\").equalsIgnoreCase(\"recipe\") \u0026\u0026 typeName.length !\u003d 2) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                throw new KitchenHelperException(\"list recipe \u003cinteger\u003e\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (listParam.get(\"type\").isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                throw new KitchenHelperException(\"list \u003ctype\u003e\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            throw new KitchenHelperException(ListCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return listParam;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Prepares the deletion of recipe from the lists."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return hashmap of a formatted list of parameters to be deleted."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private Command prepareDeleteRecipe(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String [] typeAndName \u003d parameters.split(\"/n\\\\s\",2);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert typeAndName.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return new DeleteRecipeCommand(typeAndName[1].trim());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            kitchenlogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            throw new KitchenHelperException(DeleteRecipeCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Prepares the deletion of ingredients from the lists."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param parameters full user input string."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return hashmap of a formatted list of parameters to be deleted."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private Command prepareDeleteIngredient(String parameters) throws KitchenHelperException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String [] typeAndName \u003d parameters.split(\"/n\\\\s\", 2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert typeAndName.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String [] nameAndQuantity \u003d typeAndName[1].split(\"/q\\\\s\", 2);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            assert nameAndQuantity.length \u003e\u003d 1;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (nameAndQuantity.length \u003e 1) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return new DeleteIngredientCommand(nameAndQuantity[0].trim(), Integer.parseInt(nameAndQuantity[1]));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                return new DeleteIngredientCommand(nameAndQuantity[0].trim(), -1);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            kitchenlogs.log(Level.WARNING, LOG_WARNING_INDEX, e.toString());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            throw new KitchenHelperException(DeleteIngredientCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private HashMap\u003cString, String\u003e prepareDeleteParams(String attributes) throws KitchenHelperException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        HashMap\u003cString, String\u003e deleteParam \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            if (attributes.indexOf(\"/n\") \u003d\u003d -1) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                String [] typeAndNumber \u003d attributes.split(\" \", 2);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                deleteParam.put(\"type\", typeAndNumber[0].trim());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                deleteParam.put(\"nameToDelete\", typeAndNumber[1].trim());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                deleteParam.put(\"quantity\", \"-1\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (deleteParam.get(\"type\").equalsIgnoreCase(\"chore\")) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "                throw new KitchenHelperException(\"delete chore \u003cinteger\u003e\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            throw new KitchenHelperException(\"\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return deleteParam;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/contacts/blob/master/src/main/java/Contacts1.java"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Split the user input into two parts with a specific regex."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param rawUserInput full user input string."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param regex        the quantifier to separate the string."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return an array of size 2 separated by the quantifier."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static String[] splitInputLine(String rawUserInput, String regex) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String[] split \u003d rawUserInput.trim().split(regex, 2);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return split.length \u003d\u003d 2 ? split : new String[]{split[0], \"\"}; // else no parameters"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Checks if the input string matches the regex."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param attributes the user input string."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param regex      quantifier to check if valid."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return true if it match, otherwise false."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public boolean isValidUserInputFormat(String attributes, String regex) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(attributes);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        boolean isMatch \u003d matcher.matches();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        if (isMatch) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 76,
      "jinfayap": 106,
      "cheongisabella": 13,
      "alwayshuizhen": 43,
      "-": 2,
      "JensonWee": 23
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Storage class to get/load and store data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param filePath String of filepath for stored data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Gets the saved Ingredient data from text file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return ArrayList Contains data from saved text file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws FileNotFoundException If file from file path does not exists."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getIngredientData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String userData \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getName \u003d userData.split(\"/n \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getCat \u003d getName[1].split(\" /c \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getQuantity \u003d getCat[1].split(\" /q \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getPrice \u003d getQuantity[1].split(\" /p \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] getExpiry \u003d getPrice[1].split(\" /e \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String name \u003d getCat[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String category \u003d  getQuantity[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Integer quantity \u003d Integer.parseInt(getPrice[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Double price \u003d Double.parseDouble(getExpiry[0]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String expiry \u003d getExpiry[1];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            loadingIngredients(name, category, quantity, price, expiry, ingredientList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return ingredientList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Loads the ingredient into the ArrayList according to the category type."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param name name of the ingredient."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param category category of the ingredient."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param quantity number of serving of ingredient."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param price cost of the ingredient."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param expiry ingredient expiry date."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param ingredientList the ArrayList to store ingredients."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private void loadingIngredients(String name, String category, Integer quantity, Double price, String expiry,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                                    ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"Dairy\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient diary \u003d new Dairy(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(diary);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"Drink\": {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient drink \u003d new Drink(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(drink);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"Fruit\": {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient fruit \u003d new Fruit(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(fruit);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"Meat\": {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient meat \u003d new Meat(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(meat);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"Miscellaneous\": {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient miscellaneous \u003d new Miscellaneous(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(miscellaneous);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"Staple\": {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient staple \u003d new Staple(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(staple);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        case \"Vegetable\": {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            Ingredient vegetable \u003d new Vegetable(name, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ingredientList.add(vegetable);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + category);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Saves and stores the ingredients in ArrayList Ingredient into a text file."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param ingredientList ArrayList."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void saveIngredientData(ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"output.txt\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            for (Ingredient ingredient : ingredientList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fw.write(ingredient.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            err.printStackTrace();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Saves the recipe in recipeList ArrayList and recipe ingredients in recipeItems ArrayList into a text file."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param recipeList ArrayList."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param recipeItems ArrayList."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void saveRecipeData(ArrayList\u003cRecipe\u003e recipeList, ArrayList\u003cIngredient\u003e recipeItems) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"output.txt\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fw.write(recipe.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            err.printStackTrace();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Saves the chores in recipeList choreList into a text file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param choreList ArrayList."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void saveChoreData(ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"output.txt\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            for (Chore chore : choreList) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fw.write(chore.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            err.printStackTrace();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 163,
      "jinfayap": 5
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * UI of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printDivider() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Format of a comment input line. Comment lines are silently consumed when reading user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String COMMENT_LINE_FORMAT_REGEX \u003d \"#.*\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m KitchenHelper here\" + LS + \"What can I do for you?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printInvalidCmd() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(\"Invalid Command, please check your format!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/ui/TextUi.java"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Returns true if the user input line should be ignored."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Input should be ignored if it is parsed as a comment, is only whitespace, or is empty."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param rawInputLine full raw user input line."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return true if the entire user input line should be ignored."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private boolean shouldIgnore(String rawInputLine) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return rawInputLine.trim().isEmpty() || isCommentLine(rawInputLine);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/ui/TextUi.java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Returns true if the user input line is a comment line."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param rawInputLine full raw user input line."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return true if input line is a comment."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private boolean isCommentLine(String rawInputLine) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return rawInputLine.trim().matches(COMMENT_LINE_FORMAT_REGEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Display the welcome message during startup."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        showToConsole(DIVIDER, WELCOME_MESSAGE, DIVIDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/ui/TextUi.java"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Get the user command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the input line string"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String fullInputLine \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        //silently consume all ignored lines"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        while (shouldIgnore(fullInputLine)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            fullInputLine \u003d in.nextLine();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        out.println(fullInputLine);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return fullInputLine;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * A method that can take in a variable number of arguments."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param message the argument."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void showToConsole(String... message) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            out.println(m);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Shows the results of the command to the user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param result the CommandResult object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void showResultToUser(CommandResult result) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        showToConsole(result.feedbackToUser);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 109,
      "cheongisabella": 4,
      "alwayshuizhen": 8,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/KitchenHelperTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class KitchenHelperTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/AddIngredientCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class AddIngredientCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void addToCategory_testPass() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"2020-02-20\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(ingredientList.get(0) instanceof Meat);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"Beef\", ingredientList.get(0).getIngredientName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"Meat\", ingredientList.get(0).getCategoryName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(30, ingredientList.get(0).getQuantity());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(20.2, ingredientList.get(0).getPrice());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"2020-02-20\", ingredientList.get(0).getExpiryDate());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void addToCategory_testFail() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"2020-02-20\").addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(ingredientList.get(0) instanceof Meat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"Pork\", ingredientList.get(0).getIngredientName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"Vegetable\", ingredientList.get(0).getCategoryName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(40, ingredientList.get(0).getQuantity());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(50.21, ingredientList.get(0).getPrice());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"2020.02-20\", ingredientList.get(0).getExpiryDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 39
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/AddRecipeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class AddRecipeCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void addRecipe_testPass() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertEquals(1, recipeList.size());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void addRecipe_testFail() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ingr[1] \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        assertNotEquals(\"drink\", recipeList.get(0).getRecipeItem().getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 42
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/DeleteIngredientCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class DeleteIngredientCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void deleteIngredient() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"2020-02-20\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"kailan\", \"Vegetable\", 30, 30.45, \"2020-03-12\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteIngredientQuantity \u003d new DeleteIngredientCommand(\"Beef\", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d deleteIngredientQuantity.getIngredientIndex(\"Beef\", ingredientList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteIngredientQuantity.deleteIngredient(ingredientList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.get(index).getQuantity(), 28);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteIngredientQuantityExceed \u003d new DeleteIngredientCommand(\"Beef\", 30);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteIngredientQuantityExceed.deleteIngredient(ingredientList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.get(index).getQuantity(), 28);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteKnownIngredient \u003d new DeleteIngredientCommand(\"kailan\", -1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteKnownIngredient.deleteIngredient(ingredientList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.size(), 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteUnknownIngredient \u003d new DeleteIngredientCommand(\"chocolate\", -1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteUnknownIngredient.deleteIngredient(ingredientList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientList.size(), 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void getIngredientIndex() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"2020-02-20\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"kailan\", \"Vegetable\", 30, 30.45, \"2020-03-12\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteKnownIngredient \u003d new DeleteIngredientCommand(\"kailan\", -1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d deleteKnownIngredient.getIngredientIndex(\"kailan\", ingredientList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(index, 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand deleteUnknownIngredient \u003d new DeleteIngredientCommand(\"Chocolate\", 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d deleteUnknownIngredient.getIngredientIndex(\"Chocolate\", ingredientList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(index, -1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void updateNewQuantity() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"Beef\", \"Meat\", 30, 20.2, \"2020-02-20\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Meat\", ingredientList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new AddIngredientCommand(\"kailan\", \"Vegetable\", 30, 30.45, \"2020-03-12\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                                .addToCategory(\"Vegetable\", ingredientList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        Ingredient ingredientToUpdate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand updateRangeQuantity \u003d new DeleteIngredientCommand(\"kailan\", 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d updateRangeQuantity.getIngredientIndex(\"kailan\", ingredientList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingredientToUpdate \u003d ingredientList.get(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        updateRangeQuantity.updateNewQuantity(28, ingredientToUpdate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientToUpdate.getQuantity(), 28);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteIngredientCommand updateOutOfRangeQuantity \u003d new DeleteIngredientCommand(\"Beef\", 40);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d updateOutOfRangeQuantity.getIngredientIndex(\"Beef\", ingredientList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingredientToUpdate \u003d ingredientList.get(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        updateOutOfRangeQuantity.updateNewQuantity(-10, ingredientToUpdate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(ingredientToUpdate.getQuantity(), 30);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 72,
      "jinfayap": 6
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/DeleteRecipeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class DeleteRecipeCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void deleteRecipe() throws KitchenHelperException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd \u003d new DeleteRecipeCommand(\"Chicken\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteCmd.deleteRecipe(recipeList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(1, recipeList.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd2 \u003d new DeleteRecipeCommand(\"Chicken Salad\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        deleteCmd2.deleteRecipe(recipeList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(0, recipeList.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void getRecipeIndex() throws KitchenHelperException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        HashMap\u003cString[], Integer\u003e parsedIngr \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String[] ingr \u003d new String[2];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[0] \u003d \"milo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ingr[1] \u003d \"drink\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        parsedIngr.put(ingr, 10);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String attributes \u003d \"recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        AddRecipeCommand newRecipe \u003d new AddRecipeCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.setAttributesOfCmd(attributes, parsedIngr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        newRecipe.addRecipe(attributes, recipeList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd \u003d new DeleteRecipeCommand(\"Chicken\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d deleteCmd.getRecipeIndex(deleteCmd.getObjectVariables().trim(), recipeList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(index, -1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        DeleteRecipeCommand deleteCmd2 \u003d new DeleteRecipeCommand(\"Chicken Salad\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        index \u003d deleteCmd2.getRecipeIndex(deleteCmd.getObjectVariables().trim(), recipeList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        assertEquals(index, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 59
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandIngredient_validData_correctlyConstructed() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListCommand command \u003d new ListCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        HashMap\u003cString, String\u003e listParam \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        listParam.put(\"type\", \"ingredient\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        listParam.put(\"item\", \"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        command.setListParams(listParam);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // TODO: add comparison of tags to person.equals and equality methods to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // individual fields that compare privacy to simplify this"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(\"list\", command.getActionType());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(\"ingredient\",command.getObjectType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(\"\", command.getObjectVariables());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandIngredient_validData_wronglyConstructed() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListCommand command \u003d new ListCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        HashMap\u003cString, String\u003e listParam \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        listParam.put(\"type\", \"ingredient\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        listParam.put(\"item\", \"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        command.setListParams(listParam);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // TODO: add comparison of tags to person.equals and equality methods to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // individual fields that compare privacy to simplify this"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertNotEquals(\"delete\", command.getActionType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertNotEquals(\"recipe\",command.getObjectType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertNotEquals(\"1\", command.getObjectVariables());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandRecipe_validData_correctlyConstructed() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListCommand command \u003d new ListCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        HashMap\u003cString, String\u003e listParam \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        listParam.put(\"type\", \"recipe\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        listParam.put(\"item\", \"1\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        command.setListParams(listParam);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // TODO: add comparison of tags to person.equals and equality methods to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // individual fields that compare privacy to simplify this"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(\"list\", command.getActionType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(\"recipe\",command.getObjectType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertEquals(\"1\", command.getObjectVariables());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void listCommandRecipe_validData_wronglyConstructed() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        ListCommand command \u003d new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        HashMap\u003cString, String\u003e listParam \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        listParam.put(\"type\", \"recipe\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        listParam.put(\"item\", \"1\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        command.setListParams(listParam);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // TODO: add comparison of tags to person.equals and equality methods to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        // individual fields that compare privacy to simplify this"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertNotEquals(\"delete\", command.getActionType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertNotEquals(\"ingredient\",command.getObjectType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        assertNotEquals(\"0\", command.getObjectVariables());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JensonWee": 78
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.KitchenHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.AddIngredientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.InvalidCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import static seedu.kitchenhelper.parser.Parser.splitInputLine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void parseUserCommand_testPass() throws KitchenHelperException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().parseUserCommand("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                \"addingredient /n Beef /c Meat /q 30 /p 20.2 /e 2020-02-20\") instanceof AddIngredientCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void parseUserCommand_testFail() throws KitchenHelperException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .parseUserCommand(\"dada /n Beef /c Meat /q 30 /p 20.2 /e 2020-02-20\") instanceof AddIngredientCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void prepareAddInventory_testPass() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String correctAttributes \u003d \"/n Beef /c Meat /q 30 /p 20.2 /e 2020-02-20\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().prepareAddIngredient(correctAttributes) instanceof AddIngredientCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d String.format(AddIngredientCommand.MESSAGE_SUCCESS, \"Beef\", \"Meat\", 30, 20.2, \"2020-02-20\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(output, showToConsole(new KitchenHelper()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .executeCommand(new Parser().prepareAddIngredient(correctAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void prepareAddInventory_testFail() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String incorrectAttributes \u003d \"/ Beef /c Meat /q 30 /p 20.2 /e 2020-02-20\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().prepareAddIngredient(incorrectAttributes) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String output \u003d \"Invalid Command Format!\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        + \"Adds a ingredient to the inventory list. /n INGREDIENT /c CATEGORY /q QUANTITY /p PRICE /e\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                        + \" EXPIRY\\n\" + \"Example: addingredient /n Beef /c Meat /q 1 /p 13.5 /e 2020-02-13\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(output, showToConsole(new KitchenHelper()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .executeCommand(new Parser().prepareAddIngredient(incorrectAttributes)).feedbackToUser));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void splitInputLine_testPass() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String userInput \u003d \"addingredient /n Beef /c Meat /q 30 /p 20.2 /e 2020-02-20\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"addingredient\", splitInputLine(userInput, \" \")[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertEquals(\"/n Beef /c Meat /q 30 /p 20.2 /e 2020-02-20\", splitInputLine(userInput, \" \")[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void splitInputLine_testFail() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String userInput \u003d \"addingredient /n Beef /c Meat /q 30 /p 20.2 /e 2020-02-20\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"addingredient\", splitInputLine(userInput, \"\")[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertNotEquals(\"/n Beef /c Meat /q 30 /p 20.2 /e 2020-02-20\", splitInputLine(userInput, \"/p\")[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void isValidUserInputFormat_testPass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String regex \u003d \"/n [a-zA-Z]+( [a-zA-Z]+)* /c [a-zA-Z]+ /q [0-9]+ /p \\\\d+(\\\\.\\\\d{1,2})? /e \\\\d{4}-\\\\d{2}-\\\\d{2}\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Beef /c Meat /q 30 /p 20.2 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Beef cubes /c Meat /q 30 /p 20.2 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Kailan /c Vegetable /q 30 /p 20 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n miLK /c dairy /q 30 /p 20.2 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n APPLE /c fRuit /q 20 /p 20.22 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Rice /c Staple /q 30 /p 222.11 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                .isValidUserInputFormat(\"/n apple cider alcohol drink /c Drink /q 30 /p 50.1 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n spoon /c miscellaneous /q 30 /p 20.2 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertTrue(new Parser().isValidUserInputFormat(\"/n Beef cubes /c Meat /q 30 /p 20.2 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    void isValidUserInputFormat_testFail() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String regex \u003d \"/n [a-zA-Z]+( [a-zA-Z]+)* /c [a-zA-Z]+ /q [0-9]+ /p \\\\d+(\\\\.\\\\d{1,2})? /e \\\\d{4}-\\\\d{2}-\\\\d{2}\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Invalid price notation"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n Beef /c Meat /q 30 /p 20.212 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Invalid Date format"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n Beef cubes /c Meat /q 30 /p 20.2 /e 02-02-2020\", regex));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Missing identifier /n"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"Kailan /c Vegetable /q 30 /p 20 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Missing space between ingredient name and identifier /c"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n miLK/c dairy /q 30 /p 20.2 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Extra space between ingredient\u0027category and identifier /q"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n APPLE /c fRuit  /q 20 /p 20.22 /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Invalid Date format, consist of 3 digit in day in a month"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n Rice /c Staple /q 30 /p 222.11 /e 2020-02-201\", regex));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        // Missing parameter"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        assertFalse(new Parser().isValidUserInputFormat(\"/n Beef cubes /c Meat /q 30 /p /e 2020-02-20\", regex));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    String showToConsole(String... message) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            output.append(m);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 105
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "addrecipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Beef /c Meat /q 3 /p 20 /e 2020-03-18"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n kailan /c Vegetable /q 30 /p 30.45 /e 2020-03-12"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n HL Milk /c Dairy /q 3 /p 12.2 /e 2020-03-14"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addingredient /n Milo /c Drink /q 30 /p 10 /e 2020-012-20"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "add chore buy groceries /by Tuesday 12pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "list chore"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleterecipe /n Chicken Salad"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /n Beef /q 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /n kailan /q 35"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "deleteingredient /n kailan"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "delete chore 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 5,
      "jinfayap": 5,
      "cheongisabella": 3
    }
  }
]
