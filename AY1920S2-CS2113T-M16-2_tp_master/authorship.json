[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "group \u0027seedu.kitchenhelper\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    mainClassName \u003d \"seedu.kitchenhelper.KitchenHelper\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    archiveBaseName \u003d \"kitchenhelper\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 3,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jin Fa | [Github](https://github.com/jinfayap) | [Portfolio](docs/team/jinfa.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jin Xing | [Github](https://github.com/) | [Portfolio](docs/team/jinxing.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Isabella | [Github](https://github.com/) | [Portfolio](docs/team/isabella.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Lim Yan Ting| [Github](https://github.com/yantingsanity) | [Portfolio](docs/team/yanting.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheongisabella"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hui Zhen | [Github](https://github.com/alwayshuizhen) | [Portfolio](docs/team/huizhen.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zi Hui | [Github](https://github.com/zi-hui) | [Portfolio](docs/team/zihui.md)"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 1,
      "yantingsanity": 2,
      "cheongisabella": 4,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/KitchenHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class KitchenHelper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cChore\u003e choreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /* Hi pls, look at this main program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/Main.java */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String userCommandInput \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                // takes in the user\u0027s input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                userCommandInput \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                // parse input to return obj of the corresponding"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                // type of command (i.e add/ delete/ list/ help / exit)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                command \u003d new Parser().parseUserCommand(userCommandInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                CommandResult result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                ui.showResultToUser(result);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                ui.printDivider();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } catch (KitchenHelperException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                ui.printInvalidCmd();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                ui.printDivider();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } while (!userCommandInput.equalsIgnoreCase(ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static void main(String[] args) throws KitchenHelperException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        new KitchenHelper().run();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private CommandResult executeCommand(Command command) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            // to check if you get the right object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            // System.out.println(command.getClass().getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            CommandResult result \u003d command.execute(ingredientList, recipeList, choreList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 8,
      "jinfayap": 56,
      "alwayshuizhen": 12
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Perform addition-related commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public HashMap\u003cString[], Integer\u003e parsedIngr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Set the object\u0027s type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param object full user input string excluding the action word."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setTypeOfObject(String object) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String[] attributes \u003d object.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        if (attributes[0].equalsIgnoreCase(\"recipe\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            objectType \u003d \"recipe\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } else if (attributes[0].equalsIgnoreCase(\"ingredient\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            objectType \u003d \"ingredient\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } else if (attributes[0].equalsIgnoreCase(\"chore\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            objectType \u003d \"chore\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Set the attributes of the Command class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param rawString full user input string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrAndQty a hashmap of ingredient with [ingredientName, ingredientCategory] as key"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *                   and ingredientQuantity as value"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setAttributesOfCmd(String rawString, HashMap\u003cString[], Integer\u003e ingrAndQty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setTypeOfObject(rawString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setObjectVariables(rawString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        setAction();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.parsedIngr \u003d ingrAndQty;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setObjectVariables(String rawString) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        objectVariables \u003d rawString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setAction() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        actionType \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void addIngredients(String attributes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String addRecipe(String attributes, ArrayList\u003cRecipe\u003e recipeList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Recipe freshRecipe \u003d new Recipe();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        freshRecipe.setRecipeName(attributes);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        freshRecipe.addIngredientsToRecipe(parsedIngr);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeList.add(freshRecipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return freshRecipe.recipeName + \" Recipe has been created with \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                + freshRecipe.recipeIngrQty + \" ingredients inside.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void addChores(String attributes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return super.execute(ingredientList, recipeList, choreList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 19,
      "alwayshuizhen": 61
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/AddInventoryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Adds the ingredient to the inventory list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class AddInventoryCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addinventory\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            \"You have added Ingredient:%s Category:%s Quantity:%d Price:$%.2f Expiry:%s to the inventory list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_DESC \u003d \"Adds a ingredient to the inventory list.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_PARAMETER \u003d \"/n INGREDIENT /c CATEGORY /q QUANTITY /p PRICE /e EXPIRY\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: addinventory /n Beef /c Meat /q 1 /p 13.5 /e 2020-02-13\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String.format(\"%s %s\\n%s\", COMMAND_DESC, COMMAND_PARAMETER, COMMAND_EXAMPLE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String ingredientName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String expiry;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Add Inventory Command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientName name of the ingredient."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param categoryName   category of the ingredient."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param quantity       number of serving of ingredient."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param price          cost of the ingredient."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiry         ingredient expiry date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public AddInventoryCommand(String ingredientName, String categoryName, int quantity, double price, String expiry) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.expiry \u003d expiry;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Adds the ingredient to the ArrayList according to the category type."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param category       category of the ingredient."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList the ArrayList to store ingredients."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void addToCategory(String category, ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        switch (category.toLowerCase()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Meat.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Meat(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Vegetable.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Vegetable(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Drink.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Drink(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Fruit.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Fruit(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Staple.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Staple(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Dairy.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Dairy(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case Miscellaneous.INGREDIENT_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            ingredientList.add(new Miscellaneous(ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the success message of adding inventory."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        addToCategory(categoryName, ingredientList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, ingredientName, categoryName, quantity, price, expiry));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 102
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Abstract class to represent user\u0027s command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String actionType; //add, delete, list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String objectType; //ingredient, recipe, chore"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static String objectVariables;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String addRecipe(String attributes, ArrayList\u003cRecipe\u003e recipeList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteRecipe(String objectVariables, ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteIngredient(String objectVariables, ArrayList\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String listIngredients(ArrayList\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String listRecipe(String objectVariables, ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Runs the command given by user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param recipeList list of recipes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param choreList list of chores."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return cmdResult response given to user after successful execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        //throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        if (actionType.equals(AddCommand.COMMAND_WORD) \u0026\u0026 objectType.equals(\"recipe\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            feedbackToUser \u003d addRecipe(objectVariables, recipeList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } else if (actionType.equals(AddCommand.COMMAND_WORD) \u0026\u0026 objectType.equals(\"ingredient\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            // change here for your part!"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(\"hello add ingr\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } else if (actionType.equals(AddCommand.COMMAND_WORD) \u0026\u0026 objectType.equals(\"chore\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(\"hello add chore\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else if (actionType.equals(DeleteCommand.COMMAND_WORD) \u0026\u0026 objectType.equals(\"recipe\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d deleteRecipe(objectVariables, recipeList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else if (actionType.equals(DeleteCommand.COMMAND_WORD) \u0026\u0026 objectType.equals(\"ingredient\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d deleteIngredient(objectVariables, ingredientList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else if (actionType.equals(ListCommand.COMMAND_WORD) \u0026\u0026 objectType.equals(\"ingredient\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            feedbackToUser \u003d listIngredients(ingredientList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else if (actionType.equals(ListCommand.COMMAND_WORD) \u0026\u0026 objectType.equals(\"recipe\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            feedbackToUser \u003d listRecipe(objectVariables, recipeList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        CommandResult cmdResult \u003d new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return cmdResult;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 13,
      "jinfayap": 12,
      "alwayshuizhen": 38,
      "JensonWee": 12
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 11
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public static int quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the Object Type for the Command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param object the name of the object type"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setTypeOfObject(String object) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String[] attributes \u003d object.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (attributes[0].equalsIgnoreCase(\"recipe\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            objectType \u003d \"recipe\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else if (attributes[0].equalsIgnoreCase(\"ingredient\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            objectType \u003d \"ingredient\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else if (attributes[0].equalsIgnoreCase(\"chore\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            objectType \u003d \"chore\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the other parameters for the DeleteCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param attributes all the parameters for DeleteCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setDeleteParams(HashMap\u003cString, String\u003e attributes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setAction();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setTypeOfObject(attributes.get(\"type\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        setOtherAttributes(attributes);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the Action Type for the Command (delete)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setAction() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        actionType \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Set the other parameters for the DeleteCommand."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param attributes all the parameters for DeleteCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setOtherAttributes(HashMap\u003cString, String\u003e attributes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        objectVariables \u003d attributes.get(\"nameToDelete\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        quantity \u003d Integer.parseInt(attributes.get(\"quantity\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the ingredient from the ingredient list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientName the ingredient name to be deleted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientsList the list of ingredients"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteIngredient(String ingredientName, ArrayList\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        for (Ingredient ingredient : ingredientsList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (ingredient.getIngredientName().equalsIgnoreCase(ingredientName)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                if (quantity \u003c\u003d -1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    ingredientsList.remove(ingredient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    feedbackToUser \u003d ingredientName + \" has been deleted.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    ingredient.setQuantity(ingredient.getQuantity() - quantity);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                    feedbackToUser \u003d \"The quantity of \" + ingredientName + \" has been changed!\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                count +\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (count \u003c 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d \"This ingredient does not exist! Please type in a correct ingredient name.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Delete the recipe for the recipe list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeName the recipe name to be deleted"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList the list of recipe"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String deleteRecipe(String recipeName, ArrayList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        for (Recipe recipe : recipeList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (recipe.getRecipeName().equalsIgnoreCase(recipeName.trim())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            count +\u003d 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        if (count \u003c\u003d (recipeList.size() - 1) \u0026\u0026 (count \u003e\u003d 0)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            recipeList.remove(recipeList.get(count));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d recipeName + \" has been deleted.\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            feedbackToUser \u003d \"This recipe does not exist! Please type in a correct recipe name.\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void deleteChores(String attributes) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return the execution of the deletion of ingredients or tasks."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult    execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return super.execute(ingredientList, recipeList, choreList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 112,
      "jinfayap": 19,
      "alwayshuizhen": 10
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Exiting KitchenHelper as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 10,
      "alwayshuizhen": 8
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 7
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Represent an invalid command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String MESSAGE_INVALID \u003d \"Invalid Command Format!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private final String invalidFeedback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for InvalidCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public InvalidCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.invalidFeedback \u003d MESSAGE_INVALID;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for InvalidCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param invalidFeedback feedback for invalid command message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public InvalidCommand(String invalidFeedback) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.invalidFeedback \u003d invalidFeedback;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientList list of ingredients."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param recipeList     list of recipes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param choreList      list of chores."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the invalid message."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return new CommandResult(invalidFeedback);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 38,
      "alwayshuizhen": 8
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Chore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d \"list ingredient\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void setListParams(HashMap\u003cString, String\u003e attributes) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        actionType \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        setTypeOfObject(attributes.get(\"type\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (attributes.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            objectVariables \u003d attributes.get(\"item\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public void setTypeOfObject(String object) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String[] attributes \u003d object.split(\"\\\\s\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (attributes[0].equalsIgnoreCase(\"recipe\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            objectType \u003d \"recipe\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else if (attributes[0].equalsIgnoreCase(\"ingredient\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            objectType \u003d \"ingredient\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else if (attributes[0].equalsIgnoreCase(\"chore\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            objectType \u003d \"chore\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String listIngredients(ArrayList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String result \u003d \"Here is the list of Ingredients in Inventory:\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                + \"Format : Ingredient Name | Quantity | Price | Expiry\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String[] categoryArray \u003d {Dairy.INGREDIENT_WORD, Drink.INGREDIENT_WORD, Fruit.INGREDIENT_WORD,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            Meat.INGREDIENT_WORD, Miscellaneous.INGREDIENT_WORD, Staple.INGREDIENT_WORD, Vegetable.INGREDIENT_WORD};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (ingredientList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            result +\u003d \"The Ingredient List is currently empty.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            for (String categoryName : categoryArray) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                result +\u003d categoryName + \" : \\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                for (int i \u003d 0; i \u003c ingredientList.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    Ingredient ingredientObj \u003d ingredientList.get(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                    if (ingredientObj.getCategoryName().equals(categoryName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        result +\u003d ingredientObj.getIngredientName() + \" | \" + ingredientObj.getQuantity() + \" | \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                                + ingredientObj.getPrice() + \" | \" + ingredientObj.getExpiryDate() + \" \\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public String listRecipe(String itemNumber, ArrayList\u003cRecipe\u003e recipeArrayList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        int itemNum \u003d Integer.parseInt(itemNumber) - 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        String result \u003d \"\\nHere is the list of Ingredients in Recipe:\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                + \"\\nFormat : Ingredient Name | Ingredient Category | Quantity | Price | Expiry\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        if (recipeArrayList.size() \u003d\u003d 0 || (itemNum + 1) \u003e recipeArrayList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            result +\u003d \"The Recipe List is currently empty.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            Recipe recipeItem \u003d recipeArrayList.get(itemNum);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            result +\u003d \"Recipe Name : \" + recipeArrayList.get(itemNum).getRecipeName() + \"\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            for (int i \u003d 0; i \u003c recipeItem.getRecipeItem().size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                Ingredient ingredientObj \u003d recipeItem.getRecipeItem().get(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                result +\u003d ingredientObj.getIngredientName() + \" | \" + ingredientObj.getCategoryName()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        + \" | \" + ingredientObj.getQuantity() + \" | \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                        + ingredientObj.getPrice() + \" | \" + ingredientObj.getExpiryDate() + \" \\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void listChores(String attributes) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public CommandResult execute(ArrayList\u003cIngredient\u003e ingredientList, ArrayList\u003cRecipe\u003e recipeList,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                                 ArrayList\u003cChore\u003e choreList) throws KitchenHelperException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return super.execute(ingredientList, recipeList, choreList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 16,
      "alwayshuizhen": 8,
      "JensonWee": 68
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/exception/KitchenHelperException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class KitchenHelperException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for KitchenHelperException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param message contain relevant information on the failed constraints."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public KitchenHelperException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 15
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/Chore.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Chore {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 5
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/Recipe.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Dairy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Drink;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Fruit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Meat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Miscellaneous;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Staple;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.object.ingredient.Vegetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * A Recipe represents a collection of ingredients of different types."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    ArrayList\u003cIngredient\u003e recipeItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String recipeName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Integer recipeIngrQty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the addition of ingredients into recipe."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrAndQty the hashmap of ingredients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void addIngredientsToRecipe(HashMap\u003cString[], Integer\u003e ingrAndQty) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Map.Entry\u003cString[], Integer\u003e entry : ingrAndQty.entrySet()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String ingrName \u003d (entry.getKey())[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String ingrCategory \u003d (entry.getKey())[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            Integer ingrQuantity \u003d entry.getValue();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            Ingredient newIngredient \u003d createIngr(ingrName, ingrCategory, ingrQuantity);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            recipeItems.add(newIngredient);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeIngrQty \u003d recipeItems.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the addition of ingredients into recipe."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrName the name of the ingredient."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrCategory the category of the ingredient."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ingrQuantity the quantity of the ingredient."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return Ingredient specific to its category."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Ingredient createIngr(String ingrName, String ingrCategory, Integer ingrQuantity) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        switch (ingrCategory.toLowerCase()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"dairy\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Dairy(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"drink\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Drink(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"fruit\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Fruit(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"meat\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Meat(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"miscellaneous\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Miscellaneous(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"staple\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Staple(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        case \"vegetable\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return new Vegetable(ingrName, ingrCategory, ingrQuantity, 0, null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setRecipeName(String attributes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String recipeNameAndIngr \u003d attributes.substring(attributes.indexOf(\"/n\") + 3, attributes.indexOf(\"/i\") - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        recipeName \u003d recipeNameAndIngr;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public String getRecipeName() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return recipeName;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getRecipeItem() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return this.recipeItems;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 4,
      "jinfayap": 5,
      "alwayshuizhen": 68,
      "JensonWee": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Dairy.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Dairy extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"dairy\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Dairy(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Drink.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Drink extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"drink\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Drink(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Fruit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Fruit extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"fruit\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Fruit(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Ingredient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Represent an Ingredient object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public abstract class Ingredient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String ingredientName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private String expiryDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Constructor for Ingredient."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param ingredientName name of the ingredient."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param categoryName   category of the ingredient."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param quantity       quantity of the ingredient."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param price          price of the ingredient."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param expiryDate     expiry date of the ingredient."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Ingredient(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for ingredient name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return ingredient name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getIngredientName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for category name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return category name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for quantity."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return quantity."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Setters for quantity."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param quantity quantity of ingredient"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public void setQuantity(int quantity) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for price."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return price."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Getters for expiry date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return expiry date."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getExpiryDate() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 10,
      "jinfayap": 75
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Meat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Meat extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"meat\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Meat(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Miscellaneous.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Miscellaneous extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"miscellaneous\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Miscellaneous(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Staple.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Staple extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"staple\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Staple(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/object/ingredient/Vegetable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.object.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "public class Vegetable extends Ingredient {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static final String INGREDIENT_WORD \u003d \"vegetable\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    public Vegetable(String ingredientName, String categoryName, int quantity, double price, String expiryDate) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        super(ingredientName, categoryName, quantity, price, expiryDate);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 6,
      "jinfayap": 4
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.AddInventoryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.InvalidCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "import seedu.kitchenhelper.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import seedu.kitchenhelper.exception.KitchenHelperException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * Parse user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param input full user input string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the command based on the user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Command parseUserCommand(String input) throws KitchenHelperException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String[] userInputs \u003d splitInputLine(input, \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        final String commandWord \u003d userInputs[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        final String parameters \u003d userInputs[1];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            AddCommand addCmd \u003d new AddCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            HashMap\u003cString[], Integer\u003e ingrAndQty \u003d prepareAddRecipe(parameters);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            addCmd.setAttributesOfCmd(parameters, ingrAndQty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return addCmd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case AddInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return prepareAddInventory(parameters);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            ListCommand listCmd \u003d new ListCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            HashMap\u003cString, String\u003e listParams \u003d prepareListParams(parameters);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            listCmd.setListParams(listParams);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            return listCmd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            DeleteCommand deleteCmd \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            HashMap\u003cString, String\u003e deleteParams \u003d prepareDeleteParams(parameters);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            deleteCmd.setDeleteParams(deleteParams);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            return deleteCmd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prepares the addition of ingredients into recipe."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return hashmap of a formatted list of ingredients."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public HashMap\u003cString[], Integer\u003e prepareAddRecipe(String attributes) throws KitchenHelperException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        HashMap\u003cString[], Integer\u003e ingrAndQty \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String ingredientList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            ingredientList \u003d attributes.substring(attributes.indexOf(\"/i\") + 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String[] splitedIngr \u003d ingredientList.split(\"[,][\\\\s]\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            for (String item : splitedIngr) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                String[] ingrContent \u003d item.split(\":\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                String[] nameAndType \u003d new String[2];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                nameAndType[0] \u003d ingrContent[0];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                nameAndType[1] \u003d ingrContent[2];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                ingrAndQty.put(nameAndType, Integer.parseInt(ingrContent[1]));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new KitchenHelperException(\"Invalid Command\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return ingrAndQty;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Prepares the addition of ingredient into inventory."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the prepared command."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private Command prepareAddInventory(String attributes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            // Regex for checking the format of add inventory"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String addInventoryRegex \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    \"/n [a-zA-Z]+ /c [a-zA-Z]+ /q [0-9]+ /p \\\\d+(\\\\.\\\\d{1,2})? /e \\\\d{4}-\\\\d{2}-\\\\d{2}\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            if (!isValidUserInputFormat(attributes, addInventoryRegex)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                throw new KitchenHelperException(\"Invalid Add Inventory Format\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] nameAndOthers \u003d attributes.split(\"/c\\\\s\", 2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String itemName \u003d nameAndOthers[0].split(\"/n\\\\s+\")[1].trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] categoryAndOthers \u003d nameAndOthers[1].split(\"\\\\s+/q\\\\s+\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String category \u003d categoryAndOthers[0].trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] quantityAndOthers \u003d categoryAndOthers[1].split(\"\\\\s+/p\\\\s+\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            int quantity \u003d Integer.parseInt(quantityAndOthers[0]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String[] priceAndExpiry \u003d quantityAndOthers[1].split(\"\\\\s+/e\\\\s+\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            double price \u003d Double.parseDouble(priceAndExpiry[0]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            String expiry \u003d priceAndExpiry[1];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new AddInventoryCommand(itemName, category, quantity, price, expiry);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        } catch (KitchenHelperException khe) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return new InvalidCommand("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "                    String.format(\"%s\\n%s\", InvalidCommand.MESSAGE_INVALID, AddInventoryCommand.COMMAND_FORMAT));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * Prepares the deletion of recipe and ingredients from the lists."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @param attributes full user input string."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @return hashmap of a formatted list of parameters to be deleted."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     * @throws KitchenHelperException if the command is invalid"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    private HashMap\u003cString, String\u003e prepareListParams(String attributes) throws KitchenHelperException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        HashMap\u003cString, String\u003e listParam \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            String[] typeName \u003d attributes.split(\"\\\\s\", 2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            listParam.put(\"type\", typeName[0].trim());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            if (typeName.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "                listParam.put(\"item\", typeName[1].trim());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "            throw new KitchenHelperException(ListCommand.COMMAND_FORMAT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "        return listParam;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JensonWee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JensonWee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "    private HashMap\u003cString, String\u003e prepareDeleteParams(String attributes) throws KitchenHelperException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        HashMap\u003cString, String\u003e deleteParam \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String [] typeAndName \u003d attributes.split(\"/n\\\\s\", 2);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            deleteParam.put(\"type\", typeAndName[0].trim());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            String [] nameAndQuantity \u003d typeAndName[1].split(\"/q\\\\s\", 2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            deleteParam.put(\"nameToDelete\", nameAndQuantity[0].trim());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (nameAndQuantity.length \u003e 1) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                deleteParam.put(\"quantity\", nameAndQuantity[1].trim());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                deleteParam.put(\"quantity\", \"-1\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            if (deleteParam.get(\"type\").equalsIgnoreCase(\"ingredient\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                throw new KitchenHelperException(\"delete ingredient /n INGREDIENT [/q QUANTITY]\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            } else if (deleteParam.get(\"type\").equalsIgnoreCase(\"recipe\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "                throw new KitchenHelperException(\"delete recipe /n RECIPENAME\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "            throw new KitchenHelperException(\"\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "        return deleteParam;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/contacts/blob/master/src/main/java/Contacts1.java"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Split the user input into two parts with a specific regex."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param rawUserInput full user input string."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param regex        the quantifier to separate the string."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return an array of size 2 separated by the quantifier."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public static String[] splitInputLine(String rawUserInput, String regex) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String[] split \u003d rawUserInput.trim().split(regex, 2);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return split.length \u003d\u003d 2 ? split : new String[]{split[0], \"\"}; // else no parameters"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Checks if the input string matches the regex."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param attributes the user input string."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param regex      quantifier to check if valid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return true if it match, otherwise false."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private boolean isValidUserInputFormat(String attributes, String regex) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(attributes);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        boolean isMatch \u003d matcher.matches();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        if (isMatch) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 44,
      "jinfayap": 96,
      "alwayshuizhen": 34,
      "-": 2,
      "JensonWee": 18
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 5
    }
  },
  {
    "path": "src/main/java/seedu/kitchenhelper/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import seedu.kitchenhelper.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " * UI of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinfayap"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printDivider() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Format of a comment input line. Comment lines are silently consumed when reading user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String COMMENT_LINE_FORMAT_REGEX \u003d \"#.*\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m KitchenHelper here\" + LS + \"What can I do for you?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinfayap"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printInvalidCmd() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(\"Invalid Command, please check your format!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/ui/TextUi.java"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Returns true if the user input line should be ignored."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Input should be ignored if it is parsed as a comment, is only whitespace, or is empty."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param rawInputLine full raw user input line."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return true if the entire user input line should be ignored."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private boolean shouldIgnore(String rawInputLine) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return rawInputLine.trim().isEmpty() || isCommentLine(rawInputLine);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/ui/TextUi.java"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Returns true if the user input line is a comment line."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param rawInputLine full raw user input line."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return true if input line is a comment."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private boolean isCommentLine(String rawInputLine) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return rawInputLine.trim().matches(COMMENT_LINE_FORMAT_REGEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Display the welcome message during startup."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        showToConsole(DIVIDER, WELCOME_MESSAGE, DIVIDER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author AY1920S2-CS2113T-M16-2-reused"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //Reused from"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    //https://github.com/nus-cs2113-AY1920S2/personbook/blob/master/src/main/java/seedu/personbook/ui/TextUi.java"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Get the user command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @return the input line string"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        String fullInputLine \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        //silently consume all ignored lines"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        while (shouldIgnore(fullInputLine)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            fullInputLine \u003d in.nextLine();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        out.println(fullInputLine);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        return fullInputLine;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * A method that can take in a variable number of arguments."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param message the argument."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    private void showToConsole(String... message) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "            out.println(m);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * Shows the results of the command to the user."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     * @param result the CommandResult object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    public void showResultToUser(CommandResult result) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "        showToConsole(result.feedbackToUser);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 109,
      "alwayshuizhen": 8,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/kitchenhelper/KitchenHelperTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "package seedu.kitchenhelper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "class KitchenHelperTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinfayap": 2,
      "-": 10
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "add recipe /n Chicken Salad /i Chicken Breast:2:meat, Lettuce:4:vegetable"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addinventory /n Beef /c Meat /q 3 /p 20 /e 2020-03-18"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addinventory /n Kailan /c Vegetable /q 30 /p 30.45 /e 2020-03-12"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addinventory /n HLMilk /c Dairy /q 3 /p 12.2 /e 2020-03-14"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "addinventory /n Milo /c Drink /q 30 /p 10 /e 2020-012-20"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "delete recipe /n Chicken Salad"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "delete ingredient /n Beef /q 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yantingsanity"
        },
        "content": "delete ingredient /n Kailan"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinfayap"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "yantingsanity": 3,
      "jinfayap": 6
    }
  }
]
