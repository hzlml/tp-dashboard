[
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nguyen Thanh Duc | [Github](https://github.com/thanhduc2000) | [Portfolio](docs/team/ducng.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Justin Tan | [Github](https://github.com/JustinnT) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Brandon Chong | [Github](https://github.com/brandoncjh) | [Portfolio](https://linkedin.com/in/brandoncjh)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Andy Aw Bo Yang | [Github](https://github.com/andy-aw-why) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Samantha Goh | [Github](https://github.com/yukilite) | [Portfolio](docs/team/yukilite.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "Yukilite": 3,
      "brandoncjh": 1,
      "thanhduc2000": 1,
      "-": 4,
      "andy-aw-why": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.unknownCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static int indexNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static PatientList patientList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static AppointmentList appointmentList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        indexNumber \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList \u003d new PatientList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void startup() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cPatient\u003e patientListToLoad \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cAppointment\u003e appointmentListToLoad \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            patientListToLoad \u003d storage.loadSavedPatients();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            patientListToLoad \u003d new ArrayList\u003cPatient\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            patientList \u003d new PatientList(patientListToLoad);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            appointmentListToLoad \u003d storage.loadSavedAppointments();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            appointmentListToLoad \u003d new ArrayList\u003cAppointment\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            appointmentList \u003d new AppointmentList(appointmentListToLoad);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        startup();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                String fullCommand \u003d ui.readFromUser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                Command c \u003d parser.parseCommand(fullCommand); //return what type of command you should execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                assert c !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                c.execute(ui, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            } catch (unknownCommandException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                ui.showUnknownCommandError();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                //todo justin ui print error message"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main (String[] args) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 28,
      "brandoncjh": 25,
      "thanhduc2000": 18,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addp\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String PATIENT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String AGE \u003d \"age\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String ADDRESS \u003d \"address\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String CONTACT_NUMBER \u003d \"phone\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private static final String EXAMPLE \u003d \"addp \\\\name Justin \\\\address Pasir Ris \\\\age 20 \\\\phone 98889888\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a patient to the patient\u0027s list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String patientName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Constructor for the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param patientInfo the map containing the patient information"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public AddCommand(Map\u003cString, String\u003e patientInfo) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.patientName \u003d patientInfo.get(PATIENT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (patientInfo.get(AGE).isBlank()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            this.age \u003d -1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                this.age \u003d Integer.parseInt(patientInfo.get(AGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                /** If string is given, a message will be shown and the age will be set to -1 **/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                /** TODO: Justin please add this error message too **/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                System.out.println(e + \": Received string for age. Setting age to be -1\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                this.age \u003d -1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.address \u003d patientInfo.get(ADDRESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.contactNumber \u003d patientInfo.get(CONTACT_NUMBER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * For this execution, the patient will be added into the patient list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param ui      ui object for displaying information"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param storage storage object to do auto saving"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @see PatientList#getPatientList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @see Storage#savePatientList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient \u003d new Patient(this.patientName, this.age, this.address, this.contactNumber);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Hacky method to add patient into patient list **/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientList.getPatientList().add(newPatient);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Autosaving upon each add **/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        storage.savePatientList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Assuming that there is a confimation message indicating the adding of patient is a susccess **/"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        //TODO: justin ui.showSuccessAdd();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 8,
      "thanhduc2000": 7,
      "andy-aw-why": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * Super class for all the types of command sub-classes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Execution method that will be overriden its child classes (the different command classes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui the ui object which can be used to display text"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public abstract void execute(Ui ui, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 2,
      "thanhduc2000": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * Delete a patient\u0027s record with certain index in the patient\u0027s list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-08"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletep\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"deletep \\\\index 12\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private static final String PATIENT_INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete a patient from the list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int patientIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor which pass a hash map with only 1 item containing the index of"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * the patient that needs to be removed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param fieldsToChange a hash map with only 1 item which is a field called"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *                       \"index\" and the value of the index needed to delete"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public DeleteCommand(Map\u003cString, String\u003e fieldsToChange) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.patientIndex \u003d Integer.parseInt(fieldsToChange.get(PATIENT_INDEX));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to delete the patient from the list by getting that patient\u0027s index then"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * remove it and auto-save the changes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui the ui object which can be used to display text"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see PatientList#getPatientRecord"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#savePatientList  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        // Get the patient\u0027s record based on its index from the list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Patient patient \u003d PatientList.getPatientRecord(patientIndex - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        // Remove the patient\u0027s information from the patient\u0027s list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        PatientList.getPatientList().remove(patient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        //Auto-save the changes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        storage.savePatientList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        //TODO Justin ui.showDeleteSuccess(); To be implemented later"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 4,
      "thanhduc2000": 61
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * Show a list of commands and what is the correct input\u0027s format"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-08"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMANDS_MESSAGE_USAGE \u003d AddCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + UpdateCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + ListCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + HelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to print out all the commands that user can input with usage and examples of them"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui the ui object which can be used to display text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        System.out.println(COMMANDS_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "thanhduc2000": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"listp : List all the patients.\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"Example: listp\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Empty constructor. Only used to create the ListCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * For this execution, the patient list will be displayed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param ui the ui object which can be used to display text"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Show the enitre list. This is the onlu method in Ui that is static for some reason **/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui.showEntireList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "thanhduc2000": 5,
      "andy-aw-why": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * Edit the information of the patient existed in the patient\u0027s list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-08"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class UpdateCommand extends Command{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editp\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"editp \\\\index 5  \\\\address Clementi \\\\phone 83487846\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String PATIENT_INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String PATIENT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String AGE \u003d \"age\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String ADDRESS \u003d \"address\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String CONTACT_NUMBER \u003d \"contactNumber\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Update the information of patient in the list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int patientIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String patientName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor which pass a hash map with keys as fields to change and values"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * as content in that fields that needs to be changed. If there is no need to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * change in a field in the patient\u0027s record, it will be automatically set as"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param fieldsToChange a hash map which pass all the fields needed to be changed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *                       as key and content as values"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public UpdateCommand(Map\u003cString, String\u003e fieldsToChange) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.patientIndex \u003d Integer.parseInt(fieldsToChange.get(PATIENT_INDEX));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.patientName \u003d fieldsToChange.get(PATIENT_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        boolean isAgeEqualNull \u003d fieldsToChange.get(AGE).isBlank();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if(isAgeEqualNull) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.age \u003d -1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.age \u003d Integer.parseInt(fieldsToChange.get(AGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.address \u003d fieldsToChange.get(ADDRESS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.contactNumber \u003d fieldsToChange.get(CONTACT_NUMBER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to update the patient by getting the patient\u0027s record based on its index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * and update it based on the queries by users, and auto-save it to the data file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui the ui object which can be used to display text"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see PatientList#getPatientRecord"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Patient#setPatientInfo"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#savePatientList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        // Get the patient\u0027s record based on its index from the list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Patient patient \u003d PatientList.getPatientRecord(patientIndex - 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        // Updating the information"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patient.setPatientInfo(patientName,age,address,contactNumber);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        // Updating it back to its corresponding index in the patient\u0027s list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        PatientList.getPatientList().set(patientIndex - 1,patient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        //Auto-save the changes"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        storage.savePatientList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        //TODO Justin ui.showUpdateSuccess(); To be implemented later"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 4,
      "thanhduc2000": 85
    }
  },
  {
    "path": "src/main/java/seedu/duke/enums/PatientFieldKeys.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * This enum reflects the changeable fields for the Patient Class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * @author Justin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * The only exception is indexNumber, as the indexNumber for each patient is not dependant on the individual,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * but rather the system (duke)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public enum PatientFieldKeys {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    INDEX,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    NAME,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    AGE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    ADDRESS,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    CONTACT_NUMBER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        switch(this) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        case INDEX:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            return \"index\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case NAME :"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"name\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case AGE :"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"age\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADDRESS :"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"address\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case CONTACT_NUMBER :"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"phone\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 32,
      "thanhduc2000": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DukeExceptions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * This class throws custom exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class DukeExceptions {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method throws a noKeyExistException if the key is not found in the input that the user supplied"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *         For example: user input \"addp \\name Justin \\address Pasir Ris\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *         Key is : \"\\age\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *         Since \\age cannot be found in user input, this method will throw noKeyExistException."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param keyValue the key value pair \"Key \u003d\u003e value\" as a size \u003d 2 String array."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws noKeyExistException throws exception when there is no key associated with any value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void doesKeyExist(String[] keyValue) throws noKeyExistException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        if (keyValue.length !\u003d 2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new noKeyExistException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * THis method throws a unknownCommandException when the user supplied in an unknown command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * All commands available are listed as final Strings in Parser class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws unknownCommandException when user supplied command are not amongst the final Strings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void unknownCommand() throws unknownCommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        throw new unknownCommandException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/noKeyExistException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class noKeyExistException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/unknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class unknownCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.enums.PatientFieldKeys;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.DukeExceptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.noKeyExistException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.unknownCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final int COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final int LIMIT \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final int VALUE_STRING_INDEX \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final int VALUE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String ADD_PATIENT \u003d \"addp\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String EDIT_PATIENT \u003d \"editp\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String DELETE_PATIENT \u003d \"deletep\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String LIST_PATIENT \u003d \"listp\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static final String REGEX_BACKSLASH \u003d \"\\\\\\\\\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This methods returns the command from the user input string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return the actual command to execute"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String getCommand(String fullCommand) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String[] splits \u003d fullCommand.split(REGEX_BACKSLASH, LIMIT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return splits[COMMAND_INDEX].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method returns strictly the String that is between the fieldKey and \" \\\" delimiter."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * It will only return the value that is behind the first key."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns an empty String if the key supplied cannot be found in the fullCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * For example: param fullCommand \u003d \"addp \\name Justin \\address Pasir Ris \\name Ananda\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Supplied key is \"\\name\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Default delimiter is \"\\\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns String value \"Justin\" since it is the value behind the first key"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Note: This method only searches of known keys (key values in the patient field enum). Therefore, any"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * unknown keys in the full command will be ignore."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * For example: param fullCommand \u003d \"addp \\name Justin \\adress Pasir Ris \\age 20\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * \"\\adress\" will be ignored as it is a mis-spelling of the enum fieldKeys \"address\"."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Note: The default delimiter in this method is exactly \" \\\". Any sequence of characters that does not follow this"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * delimiter will be considered as the value to the key."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * For example: param fullCommand \u003d \"\\name Justin\\age 24\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The value returned for key \"\\name\" will be \"Justin\\age 24\"."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The value return for key \"\\age\" will be EMPTY_STRING."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the entire command that the user supplied"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param key         the patient field, prepended with REGEX_BACKSLASH. This key is an enum."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return the String that is between key and \" \\\" delimiter"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String findValue(String fullCommand, String key) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String[] keyValue \u003d fullCommand.split(key, LIMIT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.doesKeyExist(keyValue);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String valueString \u003d keyValue[VALUE_STRING_INDEX];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String delimiter \u003d WHITESPACE + REGEX_BACKSLASH;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String[] b \u003d valueString.split(delimiter, LIMIT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String value \u003d b[VALUE_INDEX];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return value.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (noKeyExistException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return BLANK_STRING;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method returns a HashMap that matches the Patient fields to edit to the values to edit in."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The HashMap is guaranteed to contain the keys found in the enum PatientFieldKeys."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The values however will be determined by the user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a HashMap that matches the patient\u0027s fieldKey to value."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @see PatientFieldKeys for the list of keys guaranteed to be in the HashMap"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @see #findValue(String fullCommand ,String key) value returned by this method will be stored at key."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private Map\u003cString, String\u003e getPatientFields(String fullCommand) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (PatientFieldKeys pf : PatientFieldKeys.values()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String field \u003d pf.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String key \u003d WHITESPACE + REGEX_BACKSLASH + field; // String key \u003d \"\\key\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String value \u003d findValue(fullCommand, key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange.put(field, value);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            if(field.equals(ADD_PATIENT)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                Duke.indexNumber++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                fieldsToChange.put(INDEX, Integer.toString(Duke.indexNumber));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return fieldsToChange;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method returns the command object to be executed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws an unknownCommandException for the caller to catch when user supplied an unknown command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a command object to be executed"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws unknownCommandException Throws custom duke exception to catch and print error message."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public Command parseCommand(String fullCommand) throws unknownCommandException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String commandAsString \u003d getCommand(fullCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        switch (commandAsString) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADD_PATIENT :"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case EDIT_PATIENT :"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        case DELETE_PATIENT:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange \u003d getPatientFields(fullCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            command \u003d getCommandObject(commandAsString, fieldsToChange);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            command \u003d getCommandObject(commandAsString, null);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return command; //return a command object to @andyyy/@duccc"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method returns the specific type of command object."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws an unknownCommandException for the caller to catch when user supplied an unknown command"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param command the command that was specified"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fieldsToChange the HashMap of what to add or edit"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a specific command object that is specified by @param command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws unknownCommandException Throws custom duke exception to catch and print error message."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private Command getCommandObject(String command, Map\u003cString, String\u003e fieldsToChange) throws unknownCommandException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADD_PATIENT:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assert fieldsToChange !\u003d null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new AddCommand(fieldsToChange);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case EDIT_PATIENT:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assert fieldsToChange !\u003d null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new UpdateCommand(fieldsToChange);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case DELETE_PATIENT:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new DeleteCommand(fieldsToChange);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case LIST_PATIENT:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.unknownCommand();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 156,
      "thanhduc2000": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/record/Appointment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class contains the date and time for each patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public Appointment(String date, String time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Overrides the default toString command so that the patient\u0027s appointment"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * details can be printed in a specific string format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @return newToString The formatted string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        String newToString \u003d \"{\" + \"[Date]:\" + \" \" + getDate() + \" \"+ \"|\" + \"[Time]:\" + \" \" + getTime() + \"}\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        return newToString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/record/Patient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class contains the patient information such as name, age, address and contact number."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Patient (String name, int age, String address, String contactNumber) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String getContactNumber() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return contactNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Overrides the default toString command so that the patient information can be printed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * in a specific string format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @return newToString The formatted string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        String newToString \u003d \"{\" + \"[Name]:\"+ \" \" + getName() + \" \" + \"|\" + \" \" + \"[Age]:\" + \" \" + getAge() + \" \" + \"|\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                + \" \" + \"[Address]:\" + \" \" +  getAddress() + \" \" + \"|\" + \" \" + \"[Contact Number]:\" + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                + getContactNumber() + \"}\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        return newToString;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * This part is implemented for the UpdateCommand class by Duc"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Update the name if it is not null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param name name that needs to be updated"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if(name !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Update the age if it is a positive integer"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param age age that needs to be updated"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if(age \u003e\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.age \u003d age;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Update the address if it is not null"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param address address that needs to be updated"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setAddress(String address) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if(address !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Update the contact number if it is not null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param contactNumber contact number that needs to be updated"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setContactNumber(String contactNumber) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if(contactNumber !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to update all the patient\u0027s information"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param name name that needs to be updated"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param age age that needs to be updated"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param address address that needs to be updated"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param contactNumber contact number that needs to be updated"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setPatientInfo(String name, int age, String address, String contactNumber) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setAge(age);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setAddress(address);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setContactNumber(contactNumber);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Yukilite": 14,
      "thanhduc2000": 98
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/AppointmentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class AppointmentList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static List\u003cAppointment\u003e appointmentList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public AppointmentList(List\u003cAppointment\u003e savedPatientList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.appointmentList \u003d savedPatientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    //getter and setter"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public List\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.appointmentList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void setAppointmentList(List appointmentListInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.appointmentList \u003d appointmentListInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Appointment getAppointmentRecord(int appointmentIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.getAppointmentList().get(appointmentIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static int getTotalAppointments() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return appointmentList.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 3,
      "brandoncjh": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/PatientList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class PatientList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private static List\u003cPatient\u003e patientList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public PatientList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.patientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public PatientList(List\u003cPatient\u003e savedPatientList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.patientList \u003d savedPatientList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static List\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return patientList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void setPatientList(List patientListInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.patientList \u003d patientListInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static Patient getPatientRecord(int patientIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return getPatientList().get(patientIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static int getTotalPatients() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return patientList.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 5,
      "brandoncjh": 12,
      "thanhduc2000": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String appointmentListSaveLocation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String patientListSaveLocation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static PatientList patientList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static AppointmentList appointmentList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final String SAVE_DIRECTORY \u003d \"saves\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final String APPOINTMENT_LIST_SAVE_FILEPATH \u003d \"saves/appointments.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final String PATIENT_LIST_SAVE_FILEPATH \u003d \"saves/patients.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String PIPE_DELIMITER \u003d \" | \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.appointmentListSaveLocation \u003d APPOINTMENT_LIST_SAVE_FILEPATH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.patientListSaveLocation \u003d PATIENT_LIST_SAVE_FILEPATH;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    //load save file for Appointments list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public List\u003cAppointment\u003e loadSavedAppointments() throws FileNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        File appointmentSave \u003d new File(this.appointmentListSaveLocation);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (!appointmentSave.exists()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            File newDirectory \u003d new File(SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            boolean isNewDirectoryCreated \u003d newDirectory.mkdir();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (isNewDirectoryCreated) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                File newFile \u003d new File(APPOINTMENT_LIST_SAVE_FILEPATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    newFile.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    System.out.println(\"Failed to create file in new directory\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                System.out.println(\"Failed to create directory\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        //TODO: parse the text file, return List of Appointments"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cAppointment\u003e appointmentListToReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        Scanner s \u003d new Scanner(appointmentSave);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //TODO: parse savefile substring, update Appointment constructor"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //process each line, construct new Appointment object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String appointmentString \u003d s.nextLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String[] patientFields \u003d appointmentString.split(\" \\\\| \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            for (String field: patientFields) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                if (field.trim().isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    field \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Appointment newAppointmentToLoad \u003d new Appointment(patientFields[0], patientFields[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            appointmentListToReturn.add(newAppointmentToLoad);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return appointmentListToReturn;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    //load save file for Patients list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public List\u003cPatient\u003e loadSavedPatients() throws FileNotFoundException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        File patientSave \u003d new File(this.patientListSaveLocation);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (!patientSave.exists()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            File newDirectory \u003d new File(SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            boolean isNewDirectoryCreated \u003d newDirectory.mkdir();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (isNewDirectoryCreated) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                File newFile \u003d new File(PATIENT_LIST_SAVE_FILEPATH);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    newFile.createNewFile();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    System.out.println(\"Failed to create file in new directory\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                System.out.println(\"Failed to create directory\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        //TODO: parse the text file, return List of Patients"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cPatient\u003e patientListToReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        Scanner s \u003d new Scanner(patientSave);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //TODO: parse savefile substring, update Patient constructor"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //process each line, construct new Appointment object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String patientString \u003d s.nextLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String[] patientFields \u003d patientString.split(\" \\\\| \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            for (String field: patientFields) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                if (field.trim().isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    field \u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Patient newPatientToLoad \u003d new Patient(patientFields[0], Integer.parseInt(patientFields[1]),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    patientFields[2], patientFields[3]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            patientListToReturn.add(newPatientToLoad);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return patientListToReturn;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void saveAppointmentsList(AppointmentList appointmentListToSave) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        FileWriter fwAppointmentSave;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fwAppointmentSave \u003d new FileWriter(this.appointmentListSaveLocation);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String newAppointmentString \u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        for (int i\u003d0; i \u003c appointmentList.getTotalAppointments(); i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            Appointment newAppointmentData \u003d appointmentList.getAppointmentRecord(i);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            newAppointmentString \u003d newAppointmentData.getDate() + PIPE_DELIMITER + newAppointmentData.getTime() + LS;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fwAppointmentSave.write(newAppointmentString);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        fwAppointmentSave.close();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void savePatientList() throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        FileWriter fwPatientSave;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fwPatientSave \u003d new FileWriter(this.appointmentListSaveLocation);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String newPatientString \u003d null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        for (int i\u003d0; i \u003c patientList.getTotalPatients(); i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            Patient newPatientData \u003d patientList.getPatientRecord(i);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            newPatientString \u003d newPatientData.getName() + PIPE_DELIMITER +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    newPatientData.getAge() + PIPE_DELIMITER +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    newPatientData.getAddress() + PIPE_DELIMITER +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    newPatientData.getContactNumber() + LS;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fwPatientSave.write(newPatientString);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        fwPatientSave.close();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 29,
      "brandoncjh": 115,
      "thanhduc2000": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * Represents the user interface that will interact with the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * @author Justin"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String logo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * A constructor for the class Ui. This constructor will run the startup procedures of geting the user\u0027s"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * name and greeting him."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "//        this.logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "//                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "//                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "//                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "//                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "//        startUpGreetings();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Final modifier to prevent method overriding."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @see"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * \u003ca href\u003d\"https://stackoverflow.com/questions/3404301/whats-wrong-with-overridable-method-calls-in-constructors\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * What\u0027s wrong with overridable method calls in constructors\u003c/a\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public final void startUpGreetings() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        getUserName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Hello \" + userName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Final modifier to prevent method overriding."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @see #startUpGreetings()."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public final void getUserName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        this.userName \u003d in.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns a string that captures the entire user input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return entire user input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String readFromUser() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method prints whenever an unknownCommand Exception is caught."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * TODO: Maybe can improve this to echo the last string that user input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void showUnknownCommandError() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Unknown command\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method prints the entire patientList"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showEntireList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d PatientList.getPatientList(); //getPatientList() method by @Brandonnn"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (Patient p : patientList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            System.out.println(p); //override Patient class toString by @Sammmmm"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 71,
      "thanhduc2000": 13
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.SortedMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient1 \u003d new Patient(\"s;dlskd;l\", 23, \"Li\", \"121\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient2 \u003d new Patient(\" \", 15, \" \", \"15454455\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient3 \u003d new Patient(\"ewuioaiwoe\", 33, \"Lo\", \"1989\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient4 \u003d new Patient(\"aeiwae\", 13,  \"to\", \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient5 \u003d new Patient(\"LSDs\", -1, \"Lis\", \"12\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testNormalInput() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString,String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"asdasd\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"12\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"asdasd\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"asdsad\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(tempMap);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            int number \u003d 12;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(number, addCommand.getAge());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testEmptyString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString,String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(tempMap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testAge() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString,String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(tempMap);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            int number \u003d -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(number, addCommand.getAge());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testNonIntAge() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString,String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"asdsad\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"asdsada\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"asdsds\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"asdsadsad\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(tempMap);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            int number \u003d -1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(number, addCommand.getAge());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testEmptyMap() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString,String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(tempMap);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testAddNormalString() throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui ui \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString,String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"asd\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"23\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"asdsds\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"asdsadsad\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(tempMap);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient1 \u003d new Patient(\"s;dlskd;l\", 23, \"Li\", \"121\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient2 \u003d new Patient(\" \", 15, \" \", \"15454455\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient3 \u003d new Patient(\"ewuioaiwoe\", 33, \"Lo\", \"1989\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient4 \u003d new Patient(\"aeiwae\", 13,  \"to\", \" \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient5 \u003d new Patient(\"LSDs\", -1, \"Lis\", \"12\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        List\u003cPatient\u003e savedPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient3);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient4);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient5);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientList patientList \u003d new PatientList(savedPatientList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        addCommand.execute(ui,storage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient temppatient \u003d patientList.getPatientList().get(patientList.getPatientList().size() - 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient \u003d new Patient(\"asd\", 23,\"asdsds\",\"asdsadsad\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getName(),newPatient.getName());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getAge(),newPatient.getAge());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getAddress(),newPatient.getAddress());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getContactNumber(),newPatient.getContactNumber());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testAddEmptyString() throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui ui \u003d null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString,String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(tempMap);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient1 \u003d new Patient(\"s;dlskd;l\", 23, \"Li\", \"121\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient2 \u003d new Patient(\" \", 15, \" \", \"15454455\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient3 \u003d new Patient(\"ewuioaiwoe\", 33, \"Lo\", \"1989\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient4 \u003d new Patient(\"aeiwae\", 13,  \"to\", \" \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient5 \u003d new Patient(\"LSDs\", -1, \"Lis\", \"12\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        List\u003cPatient\u003e savedPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient3);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient4);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient5);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientList patientList \u003d new PatientList(savedPatientList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        addCommand.execute(ui,storage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient temppatient \u003d patientList.getPatientList().get(patientList.getPatientList().size() - 1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient \u003d new Patient(\"\", -1,\"\",\"\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getName(),newPatient.getName());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getAge(),newPatient.getAge());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getAddress(),newPatient.getAddress());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getContactNumber(),newPatient.getContactNumber());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andy-aw-why": 171
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import static seedu.duke.command.UpdateCommand.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute_1() throws Exception{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        PatientList patientList \u003d new PatientList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"peony\", 33, \"clementi road\", \"61234567\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"yoshino\", 8, \"shibuya\", \"13182371\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"kurumi\", 15, \"hokkaido\", \"31732913\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(PATIENT_INDEX, \"3\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command command \u003d new DeleteCommand(fieldsToChange);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        command.execute(ui,storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(4, patientList.getTotalPatients());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Name]: peony | [Age]: 33 | [Address]: clementi road | [Contact Number]: 61234567}\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                patientList.getPatientRecord(0).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Name]: yoshino | [Age]: 8 | [Address]: shibuya | [Contact Number]: 13182371}\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                patientList.getPatientRecord(1).toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Name]: ren | [Age]: 17 | [Address]: tokyo | [Contact Number]: 31093991}\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                patientList.getPatientRecord(2).toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Name]: ren | [Age]: 17 | [Address]: tokyo | [Contact Number]: 31093991}\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                patientList.getPatientRecord(3).toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 42
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute() throws Exception{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command command \u003d new HelpCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        command.execute(ui,storage);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 18
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String EXPECTED_OUTPUT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            \"{[Name]: s;dlskd;l | [Age]: 23 | [Address]: Li | [Contact Number]: 121}\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                    \"{[Name]:   | [Age]: 15 | [Address]:   | [Contact Number]: 15454455}\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                    \"{[Name]: ewuioaiwoe | [Age]: 33 | [Address]: Lo | [Contact Number]: 1989}\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                    System.lineSeparator() +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                    \"{[Name]: aeiwae | [Age]: 13 | [Address]: to | [Contact Number]:  }\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                    \"{[Name]: LSDs | [Age]: -1 | [Address]: Lis | [Contact Number]: 12}\" + System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testListWithPatients() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui ui \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient1 \u003d new Patient(\"s;dlskd;l\", 23, \"Li\", \"121\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient2 \u003d new Patient(\" \", 15, \" \", \"15454455\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient3 \u003d new Patient(\"ewuioaiwoe\", 33, \"Lo\", \"1989\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient4 \u003d new Patient(\"aeiwae\", 13,  \"to\", \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient5 \u003d new Patient(\"LSDs\", -1, \"Lis\", \"12\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        List\u003cPatient\u003e savedPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient4);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savedPatientList.add(newPatient5);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientList patientList \u003d new PatientList(savedPatientList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Reused from https://coderanch.com/t/587280/java/assertEquals-println **/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        listCommand.execute(ui,storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(EXPECTED_OUTPUT, outContent.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testListWithoutPatients() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui ui \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        List\u003cPatient\u003e savedPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientList patientList \u003d new PatientList(savedPatientList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Reused from https://coderanch.com/t/587280/java/assertEquals-println **/"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        listCommand.execute(ui,storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(EMPTY, outContent.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andy-aw-why": 74
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/UpdateCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import static seedu.duke.command.UpdateCommand.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class UpdateCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute_1() throws Exception{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        PatientList patientList \u003d new PatientList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"peony\", 33, \"clementi road\", \"61234567\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"yoshino\", 8, \"shibuya\", \"13182371\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"kurumi\", 15, \"hokkaido\", \"31732913\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(PATIENT_INDEX, \"3\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(PATIENT_NAME, \"Joe Harris\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(AGE, \"20\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(ADDRESS, \"Jurong East\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(CONTACT_NUMBER, \"8225 3819\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command command \u003d new UpdateCommand(fieldsToChange);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        command.execute(ui,storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Name]: Joe Harris | [Age]: 20 | [Address]: Jurong East | [Contact Number]: 8225 3819}\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                patientList.getPatientRecord(2).toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 2"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute_2() throws Exception{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        PatientList patientList \u003d new PatientList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"peony\", 33, \"clementi road\", \"61234567\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"yoshino\", 8, \"shibuya\", \"13182371\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"kurumi\", 15, \"hokkaido\", \"31732913\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(PATIENT_INDEX, \"3\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(PATIENT_NAME, null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(AGE, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(ADDRESS, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(CONTACT_NUMBER, \"8225 3819\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command command \u003d new UpdateCommand(fieldsToChange);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        command.execute(ui,storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Name]: kurumi | [Age]: 15 | [Address]: hokkaido | [Contact Number]: 8225 3819}\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                patientList.getPatientRecord(2).toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 65
    }
  },
  {
    "path": "src/test/java/seedu/duke/record/AppointmentTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "class AppointmentTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testGetDate() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Appointment appointment \u003d new Appointment(\"22 July 2020\", \"12.30pm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"22 July 2020\", appointment.getDate());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testGetTime() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Appointment appointment \u003d new Appointment(\"22 July 2020\", \"12:30pm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"12:30pm\", appointment.getTime());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Appointment appointment \u003d new Appointment(\"22 July 2020\", \"12.30pm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"{[Date]: 22 July 2020 |[Time]: 12.30pm}\", appointment.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 26
    }
  },
  {
    "path": "src/test/java/seedu/duke/record/PatientTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "class PatientTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"61234567\" );"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"peony\", patient.getName());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testGetAge() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"61234567\" );"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(33, patient.getAge());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testGetAddress() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"61234567\" );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"clementi road\", patient.getAddress());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testGetContactNumber() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"61234567\" );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"61234567\", patient.getContactNumber());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"john\", 45, \"jail\", \"91234567\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"{[Name]: john | [Age]: 45 | [Address]: jail | [Contact Number]: 91234567}\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "                patient.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testSetName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setName(\"peony\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"peony\", patient.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testSetAge() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setAge(33);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(33, patient.getAge());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testSetAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setAddress(\"clementi road\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"clementi road\", patient.getAddress());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testSetContactNumber() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setContactNumber(\"11111111\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"11111111\", patient.getContactNumber());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testSetPatientInfo() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setPatientInfo(\"chucky\", 11, \"im going to kill you\", \"44444444\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"chucky\", patient.getName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(11, patient.getAge());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"im going to kill you\", patient.getAddress());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"44444444\", patient.getContactNumber());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 80
    }
  }
]
