[
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nguyen Thanh Duc | [Github](https://github.com/thanhduc2000) | [Portfolio](docs/team/ducng.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Justin Tan | [Github](https://github.com/JustinnT) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Brandon Chong | [Github](https://github.com/brandoncjh) | [Portfolio](https://linkedin.com/in/brandoncjh)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Andy Aw Bo Yang | [Github](https://github.com/andy-aw-why) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Samantha Goh | [Github](https://github.com/yukilite) | [Portfolio](docs/team/yukilite.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "Yukilite": 3,
      "brandoncjh": 1,
      "thanhduc2000": 1,
      "-": 4,
      "andy-aw-why": 1
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "# User Guide For Hospital Management System v1.0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "# Table of content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "\u003c!-- TOC --\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "* [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    + [1.1. Starting HAMS](#11-starting-hams)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "* [2. Features](#2-features)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "* [3. Command Format](#3-command-format)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "* [4. Command Usage](#4-command-usage)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    + [4.1. Patient Commands](#41-patient-commands)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.1.1 Add new patient record](#411-add-a-new-patient-record)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.1.2 List all existing patient records](#412-list-all-existing-patients)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.1.3 Delete existing patient record](#413-delete-an-existing-patient)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.1.4 Edit existing patient record](#414-edit-an-existing-patient)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    + [4.2. Appointment Commands](#42-appointment-commands)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.2.1 Add new appointment record](#421-add-a-new-appointment-record)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.2.2 List all existing appointment records](#422-list-all-existing-appointments)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.2.3 Delete existing appointment record](#423-delete-an-existing-appointment)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.2.4 Edit existing appointment record](#424-edit-an-existing-appointment)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    + [4.3. Viewing help](#43-view-help)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    + [4.4. Exiting the program](#44-exit-hams-program)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "* [5. Command Summary](#5-command-summary)  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "* [6. FAQ](#6-faq)  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003c!-- /TOC --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "HAMS is a CLI-based medical facility administration system that assists in the maintenance of various medical records.  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Its functionality has some resemblance to the Duke ChatBot, a CS2113 individual project."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "HAMS is designed for administrative assistants in medical facilities, like hospitals or polyclinics, that *prefer using"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "CLI to keep track of various medical records* and *can type fast*."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "### 1.1 Starting HAMS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "1. Ensure you have JDK 11 installed on your computer. You can download the installer for your OS from [here](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "2. Download the latest .jar file release for HAMS from [GitHub](https://github.com/AY1920S2-CS2113T-T13-3/tp/releases)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "3. Move the .jar to an empty folder."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "4. Open Command Prompt."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "5. In Command Prompt, change your current working directory to the folder containing the .jar using `cd \u003cPath of folder containing .jar\u003e`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "6. Run the .jar using `$ java -jar hams-1.0.jar`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "## 2. Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### Keep track of different record types"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "HAMS provides you with an easy-to-use system that helps manage and keep track of two types of medical records: *Patients* and *Appointments*."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### View all your tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The `lista` or `listp` command that HAMS provides can display all the Appointment or Patient records within the system in a readable format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### Auto-save and store these records"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "HAMS has an auto-save feature which stores Patient and Appointments every time you add or modify them. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "With this feature, your tasks will be saved every time you leave the application and can be easily retrieved when you reopen the application subsequently."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "## 3. Command Format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Words enclosed within angle brackets `[]` are the parameters to be supplied by the user. Other keywords stated are compulsory and they should be included."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "For example, in `adda \\date [date] \\time [time]`, `adda` is the command keyword that adds an Appointment record. "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "`\\date` and `\\time` are compulsory labels to denoting what field the subsequent information belongs to."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "`[date]` is the date of the appointment to be supplied by you. `[time]` represents the time of the appointment to be supplied by you."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "A valid input would be `adda \\date Mar 17 \\time 2pm`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "## 4. Command Usage"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "### 4.1 `Patient` Commands"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.1.1 Add a new Patient record"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The program allows you to add a new Patient record to the current list of Patient records. The command contains:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "1. the `addp` keyword"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "2. `\\name` followed by the name of the patient "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "3. `\\age` followed by the age of the patient"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "4. `\\address` followed by the address of the patient"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "5. `\\phone` followed by the contact number of the patient"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "(All these fields will be developed so that later on they have certain limit and validation of the text or number inputted)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Format: `addp \\name [name] \\age [age] \\address [address] \\phone [phone]`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "- `addp \\name Justin \\address Pasir Ris \\age 20 \\phone 98889888`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/addp%20success.PNG)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "- `addp \\age 20 \\phone 98889888 \\name Justin \\address Pasir Ris`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/addp%20success2.PNG)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of wrong usage "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "- `addp` "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected error outcome:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/addp%20fail.PNG)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.1.2 List all existing Patients"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The command simply contains the \u0027listp\u0027 keyword."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Format: `listp`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "`listp`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "##### Expected outcome "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/listp.PNG)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.1.3 Delete an existing Patient"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The program allows you to delete an existing Patient record by its index in the list. The command contains:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "1. the `deletep` keyword"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "2. `\\index` followed by the index number of the patient to be deleted "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Format: `deletep \\index [patient number in list]`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`deletep \\index 2`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/delete_success.PNG)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of wrong usage:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "- `deletep \\index a`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected error outcome:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/delete_fail.PNG)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.1.4 Edit an existing Patient"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The program allows you to make changes to an existing Patient record by its index in the list. The command contains:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "1. the `editp` keyword"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "2. `\\index` followed by the index number of the Patient record in the list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "3. `\\name` followed by the name of the patient"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "4. `\\age` followed by the age of the patient"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "4. `\\address` followed by the address of the patient"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "4. `\\phone` the contact number of the patient"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Note that users do not need to include any single field that needs to be modified in the command."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Illustration will be later shown in the command\u0027s format and usage."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Format: `editp \\index [patientNumber] \\name [name] \\age [age] \\address [address] \\phone [phone]`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`editp \\index 1  \\name Justin \\age 23 \\address Clementi \\phone 83487846`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/editp_success.PNG)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "###### Before:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/editp_before.PNG)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "###### After:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/editp_after.PNG)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`editp \\age 99 \\address Bedok \\phone 89993999 \\name Justin \\index 1`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/editp_success2.PNG)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "###### Before:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/editp_before2.PNG)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "###### After:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/editp_after2.PNG)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example of wrong usage: "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`editp \\index a \\address Paris Ris \\phone 93489678`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/editp_fail.PNG)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "### 4.2 `Appointment` Commands"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.2.1 Add a new Appointment record"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The program allows you to add a new Appointment record to the current list of Appointment records. The command contains:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "1. the `adda` keyword"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "2. `\\date` followed by the date of the appointment"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "3. `\\time` followed by the time of the appointment"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "(Both date and time are currently in string so they will be further developed later)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Format: `adda \\date [date] \\time [time]`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "- `adda \\date 14-03-2020 \\time 10am`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "`//Insert UI here`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### Example of wrong usage (missing description): "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "`//Insert UI here`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected error outcome:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "`//Insert UI here`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.2.2 List all existing Appointments"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The command simply contains the \u0027lista\u0027 keyword."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Format: `lista`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "`lista`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### Example of wrong usage : "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "##### Expected error outcome:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.2.3 Delete an existing Appointment"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The program allows you to delete an existing Appointment record by its index in the list. The command contains:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "1. the `deletea` keyword"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "2. `\\index` followed by the index number of the Appointment to be deleted "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Format: `deletea \\index [appointment number in list]`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "- `deletea \\index 3`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### Example of wrong usage : "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "##### Expected error outcome:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.2.4 Edit an existing Appointment"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The program allows you to make changes to an existing Appointment record by its index in the list. The command contains:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "1. the `edita` keyword"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "2. `\\index` followed by the index number of the Appointment in the list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "3. `\\date` followed by the date of the appointment "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "4. `\\time` followed by the time of the appointment"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Note that users do not need to include any single field that needs to be modified in the command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Illustration will be later shown in the command\u0027s format and usage"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Format: `edita \\index [appointmentNumber] \\date [date] \\time [time]`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "`edita \\index 3 \\date 20-05-2021 \\time 11pm`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "`edita \\index 3 \\time 11pm \\date 20-05-2021`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "`edita \\index 5 \\time 11:30am`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "### 4.3 View help"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The \u0027help\u0027 keyword provides you with a list of valid commands, their functions and their proper usages."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "### 4.4 Exit HAMS program"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "This command exits the HAMS program and saves the current Patient/Appointment data into separate local save files (in `/saves/appointments.txt` or `/saves/patients.txt`). These files will be loaded to the program when it is run again subsequently."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "`exit`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome: "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "* `adda \\date [date] \\time [time]` Adds date and time of an appointment"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "* `addp \\name [name] \\age [age] \\address [address] \\phone [phone]` Adds name, age, address, and contact number of patient"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "* `lista` List all the appointments from the appointment\u0027s list"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "* `listp` List all the patients from the patient\u0027s list"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "* `deletea \\index [appointment number in list]` Delete an appointment by the list\u0027s appointment number"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "* `deletep \\index [patient number in list]` Delete a patient by the list\u0027s patient number"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "* `edita \\index [appointmentNumber] \\date [date] \\time [time]` Edit date or time of an appointment by the list\u0027s appointment number"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "* `editp \\index [patientNumber] \\name [name] \\age [age] \\address [address] \\phone [phone]` Edit date or time of an appointment by the list\u0027s appointment number"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "* `help` Give you a manual on a list of valid commands and their usage"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "* `exit` Exit the program and save the task into an offline data file (in `/saves/appointments.txt` or `/saves/patients.txt`)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "## 6. FAQ"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**Q**: Would my details be captured if I randomnize the input order of the keywords?"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `addp \\phone 12345678 \\address NUS \\age 22 \\name John Doe`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `addp \\name John Doe \\address NUS \\ age 22 \\ phone 12345678`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**A**: Yes. The system is keyword-sensitive. Regardless of the order given, it stores the information within each command used respectively. Both examples provided above would result in the same information stored. "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**Q**: Why does my patient list display a \"-1\" in the age field?"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `{[Name]: Tommy | [Age]: -1 | [Address]:  | [Contact Number]: 92331234}`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**A**: The age field provided by the user is empty. "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JustinnT": 25,
      "Yukilite": 10,
      "brandoncjh": 139,
      "thanhduc2000": 110,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.DescriptionIsEmptyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.IndexNotIntegerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.NoFieldCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static int patientIndexNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static int appointmentIndexNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static PatientList patientList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static AppointmentList appointmentList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This constructor initializes the other ui, parser and storage classes to be used in the java.duke.Duke program."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see Ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see Parser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see Storage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        patientIndexNumber \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        appointmentIndexNumber \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        ui.printHello();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method loads any previous patient particulars and its respective appointment details"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * from storage if any, or creates a new one if its a new entry."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see PatientList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see Storage"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void startup() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cPatient\u003e patientListToLoad \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cAppointment\u003e appointmentListToLoad \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            patientListToLoad \u003d storage.loadSavedPatients();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            patientListToLoad \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            patientList \u003d new PatientList(patientListToLoad);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            appointmentListToLoad \u003d storage.loadSavedAppointments();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            appointmentListToLoad \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            appointmentList \u003d new AppointmentList(appointmentListToLoad);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Runs the program."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        startup();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                String fullCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                Command c \u003d parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                assert c !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                c.execute(ui, storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            } catch (UnknownCommandException | DescriptionIsEmptyException | InvalidIndexException"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    | IndexNotIntegerException | NoFieldCommandException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                ui.showExceptionError(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                //todo justin ui print error message"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 45,
      "Yukilite": 13,
      "brandoncjh": 23,
      "thanhduc2000": 18,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddAppointmentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class deals with the command relating to adding of appointments into the appointment list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * It achieves this by acting as a bridge to connect the functions of {@link seedu.duke.parser.Parser},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * {@link Appointment}, {@link AppointmentList} and {@link Storage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * To elaborate, it converts the output of {@link seedu.duke.parser.Parser} into a {@link Appointment} object, after"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * which the {@link Appointment} object is then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * added into the {@link AppointmentList} list. Finally, the {@link Storage} class will be used to save the updated"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * list into offline data to reflect the change."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class AddAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"adda\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String EXAMPLE \u003d \"adda \\\\date 20-12-2020 \\\\time 2300\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add an appointment to the appointment\u0027s list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String DATE \u003d \"date\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String TIME \u003d \"time\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Constructor for the appointment class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param appointmentInfo the \u003ccode\u003eMap\u003c/code\u003e that contains the information relating to the appointment."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public AddAppointmentCommand(Map\u003cString, String\u003e appointmentInfo) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.date \u003d appointmentInfo.get(DATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.time \u003d appointmentInfo.get(TIME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * For this execution, the appointment information is added into the appointment list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @throws IOException this exception is thrown by the {@link Storage} class if it fails to save the current"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     *                     appointment list into offline data."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Appointment appointment \u003d new Appointment(this.date, this.time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        /* Hacky method to add appointments into the appointment list.*/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentList.getAppointmentList().add(appointment);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        /* For Auto-saving */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        storage.saveAppointmentsList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        ui.showAppointmentAddSuccess();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 21,
      "Yukilite": 5,
      "andy-aw-why": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddPatientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class deals with the command relating to adding of patient into the patient list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * It achieves this by acting as a bridge to connect the functions of {@link seedu.duke.parser.Parser} class,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * {@link Patient} class and {@link PatientList} class\u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003eTo elaborate, it converts the output of {@link seedu.duke.parser.Parser} into a {@link Patient} object, after"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * which the {@link Patient} object is then added into the {@link PatientList} list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class AddPatientCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addp\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String PATIENT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String AGE \u003d \"age\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String ADDRESS \u003d \"address\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String CONTACT_NUMBER \u003d \"phone\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private static final String EXAMPLE \u003d \"addp \\\\name Justin \\\\address Pasir Ris \\\\age 20 \\\\phone 98889888\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a patient to the patient\u0027s list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String patientName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Constructor for the AddPatientCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param patientInfo the map containing the patient information"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public AddPatientCommand(Map\u003cString, String\u003e patientInfo) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.patientName \u003d patientInfo.get(PATIENT_NAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (patientInfo.get(AGE).isBlank()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            this.age \u003d -1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                this.age \u003d Integer.parseInt(patientInfo.get(AGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                /** If string is given, a message will be shown and the age will be set to -1 **/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                Ui.showSetAgeError();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                this.age \u003d -1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.address \u003d patientInfo.get(ADDRESS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.contactNumber \u003d patientInfo.get(CONTACT_NUMBER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * For this execution, the patient will be added into the patient list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param ui      ui object for displaying information"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param storage storage object to do auto saving"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @see PatientList#getPatientList"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @see Storage#savePatientList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient \u003d new Patient(this.patientName, this.age, this.address, this.contactNumber);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Hacky method to add patient into patient list **/"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientList.getPatientList().add(newPatient);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Checking to see if patient object is created and placed correctly in the patient list **/"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assert PatientList.getPatientList().get(PatientList.getTotalPatients() - 1).getName().equals(this.patientName) :"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                \"Wrong name!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assert PatientList.getPatientList().get(PatientList.getTotalPatients() - 1).getAge() \u003d\u003d this.age : \"Wrong \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                + \"age!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assert PatientList.getPatientList().get(PatientList.getTotalPatients() - 1).getAddress().equals(this.address) :"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                \"Wrong address!\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assert PatientList.getPatientList().get(PatientList.getTotalPatients() - 1).getContactNumber()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                .equals(this.contactNumber) : \"Wrong number!\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Autosaving upon each add **/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        storage.savePatientList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        /** Assuming that there is a confimation message indicating the adding of patient is a success**/"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        ui.showPatientAddSuccess();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 15,
      "Yukilite": 2,
      "thanhduc2000": 6,
      "andy-aw-why": 76
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Super class for all the types of command sub-classes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Method to return false in default for exit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Execution method that will be overriden its child classes (the different command classes)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public abstract void execute(Ui ui, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 2,
      "JustinnT": 2,
      "thanhduc2000": 24,
      "andy-aw-why": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteAppointmentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Delete an appointment\u0027s record with certain index in the appointment\u0027s list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-14"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class DeleteAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletea\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"deletea \\\\index 12\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete an appointment from the list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String APPOINTMENT_INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor which pass a hash map with only 1 item containing the index of"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * the patient that needs to be removed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param fieldsToChange a hash map with only 1 item which is a field called"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *                       \"index\" and the value of the index needed to delete"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public DeleteAppointmentCommand(Map\u003cString, String\u003e fieldsToChange) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.index \u003d Integer.parseInt(fieldsToChange.get(APPOINTMENT_INDEX));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            if (index \u003e AppointmentList.getTotalAppointments() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showNumberError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showIndexError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to delete the appointment from the list by getting that appointment\u0027s index then"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * remove it and auto-save the changes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see AppointmentList#getAppointmentRecord"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#saveAppointmentsList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Get the appointment\u0027s record based on its index from the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            Appointment appointment \u003d AppointmentList.getAppointmentRecord(index - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Remove the appointment\u0027s information from the patient\u0027s list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            AppointmentList.getAppointmentList().remove(appointment);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            //Auto-save the changes"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            storage.saveAppointmentsList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showDeleteAppointmentSuccess();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 3,
      "JustinnT": 8,
      "thanhduc2000": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeletePatientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Delete a patient\u0027s record with certain index in the patient\u0027s list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-08"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class DeletePatientCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletep\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"deletep \\\\index 12\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete a patient from the list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String PATIENT_INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int patientIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor which pass a hash map with only 1 item containing the index of"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * the patient that needs to be removed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param fieldsToChange a hash map with only 1 item which is a field called"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *                       \"index\" and the value of the index needed to delete"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public DeletePatientCommand(Map\u003cString, String\u003e fieldsToChange) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.patientIndex \u003d Integer.parseInt(fieldsToChange.get(PATIENT_INDEX));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            if (patientIndex \u003e PatientList.getTotalPatients() || patientIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showNumberError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showIndexError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to delete the patient from the list by getting that patient\u0027s index then"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * remove it and auto-save the changes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see PatientList#getPatientRecord"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#savePatientList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Get the patient\u0027s record based on its index from the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Patient patient \u003d PatientList.getPatientRecord(patientIndex - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Remove the patient\u0027s information from the patient\u0027s list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            PatientList.getPatientList().remove(patient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            //Auto-save the changes"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            storage.savePatientList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showDeletePatientSuccess();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 3,
      "JustinnT": 11,
      "thanhduc2000": 64
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditAppointmentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.NoFieldCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Edit the information of the appointment existed in the appointment\u0027s list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-14"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class EditAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edita\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"edita \\\\index 5  \\\\date 01/03/2020 \\\\time 10am\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String APPOINTMENT_INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String APPOINTMENT_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String APPOINTMENT_TIME \u003d \"time\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edit the information of appointment in the list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor which pass a hash map with keys as fields to change and values"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * as content in that fields that needs to be changed. If there is no need to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * change in a field in the appointment\u0027s record, it will be automatically set as"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param fieldsToChange a hash map which pass all the fields needed to be changed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *                       as key and content as values"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public EditAppointmentCommand(Map\u003cString, String\u003e fieldsToChange) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.index \u003d Integer.parseInt(fieldsToChange.get(APPOINTMENT_INDEX));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            if (index \u003e PatientList.getTotalPatients() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showNumberError();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showIndexError();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.date \u003d fieldsToChange.get(APPOINTMENT_DATE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.time \u003d fieldsToChange.get(APPOINTMENT_TIME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to update the appointment by getting the appointment\u0027s record based on its index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * and update it based on the queries by users, and auto-save it to the data file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see AppointmentList#getAppointmentRecord"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Appointment#setAppointmentInfo"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#saveAppointmentsList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Get the appointment\u0027s record based on its index from the list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            Appointment appointment \u003d AppointmentList.getAppointmentRecord(index - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Updating the information"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            appointment.setAppointmentInfo(date, time);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Updating it back to its corresponding index in the appointment\u0027s list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            AppointmentList.getAppointmentList().set(index - 1, appointment);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            //Auto-save the changes"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            storage.saveAppointmentsList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showUpdateAppointmentSuccess();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 2,
      "JustinnT": 6,
      "thanhduc2000": 86
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditPatientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Edit the information of the patient existed in the patient\u0027s list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-08"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class EditPatientCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editp\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"editp \\\\index 5  \\\\address Clementi \\\\phone 83487846\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String PATIENT_INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String PATIENT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String AGE \u003d \"age\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String ADDRESS \u003d \"address\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String CONTACT_NUMBER \u003d \"phone\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Update the information of patient in the list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int patientIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String patientName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor which pass a hash map with keys as fields to change and values"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * as content in that fields that needs to be changed. If there is no need to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * change in a field in the patient\u0027s record, it will be automatically set as"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param fieldsToChange a hash map which pass all the fields needed to be changed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *                       as key and content as values"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public EditPatientCommand(Map\u003cString, String\u003e fieldsToChange) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.patientIndex \u003d Integer.parseInt(fieldsToChange.get(PATIENT_INDEX));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            if (patientIndex \u003e PatientList.getTotalPatients() || patientIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showNumberError();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showIndexError();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.patientName \u003d fieldsToChange.get(PATIENT_NAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        boolean isAgeEqualNull \u003d fieldsToChange.get(AGE).isBlank();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (isAgeEqualNull) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.age \u003d -1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                this.age \u003d Integer.parseInt(fieldsToChange.get(AGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                Ui.showSetAgeError();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                this.age \u003d -1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.address \u003d fieldsToChange.get(ADDRESS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.contactNumber \u003d fieldsToChange.get(CONTACT_NUMBER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to update the patient by getting the patient\u0027s record based on its index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * and update it based on the queries by users, and auto-save it to the data file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see PatientList#getPatientRecord"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Patient#setPatientInfo"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#savePatientList"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        // Get the patient\u0027s record based on its index from the list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Patient patient \u003d PatientList.getPatientRecord(patientIndex - 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Updating the information"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            patient.setPatientInfo(patientName, age, address, contactNumber);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Updating it back to its corresponding index in the patient\u0027s list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            PatientList.getPatientList().set(patientIndex - 1, patient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            //Auto-save the changes"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            storage.savePatientList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showUpdatePatientSuccess();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 3,
      "JustinnT": 12,
      "thanhduc2000": 96
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Terminate the program when the user\u0027s input is \"exit\"."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-14"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Type to exit the program.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Set the termination of the program to be true."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Method to print the bye message for users."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Ui.showByeMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 3,
      "JustinnT": 1,
      "thanhduc2000": 39
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Show a list of commands and what is the correct input\u0027s format."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-08"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMANDS_MESSAGE_USAGE \u003d AddAppointmentCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + AddPatientCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + EditAppointmentCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + EditPatientCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + DeleteAppointmentCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"\\n\" + DeletePatientCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            + \"\\n\" + ListAppointmentCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"\\n\" + ListPatientCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Method to print out all the commands that user can input with usage and examples of them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Ui.showHelpUsage(COMMANDS_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 2,
      "JustinnT": 5,
      "thanhduc2000": 36,
      "andy-aw-why": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListAppointmentCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * Empty constructor. Only used to create the ListAppointmentCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class ListAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"lista : List all the appointments.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            + \"Example: lista\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public ListAppointmentCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * For this execution, it shows the list of appointments that are stored."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui.showEntireAppointmentList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JustinnT": 11,
      "Yukilite": 1,
      "andy-aw-why": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListPatientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class ListPatientCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"listp : List all the patients.\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"Example: listp\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Empty constructor. Only used to create the ListPatientCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public ListPatientCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * For this execution, the patient list will be displayed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        /** Show the enitre list. This is the only method in Ui that is static for some reason **/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Ui.showEntirePatientList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 5,
      "Yukilite": 3,
      "thanhduc2000": 4,
      "andy-aw-why": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/enums/AppointmentFieldKeys.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * This enum reflects the changeable fields for the Appointment class under the package \"record\"."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * @author Justin."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * @see seedu.duke.record.Appointment"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public enum AppointmentFieldKeys {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    INDEX,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    DATE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        switch (this) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case INDEX:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"index\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case DATE:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"date\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case TIME:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"time\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/enums/PatientFieldKeys.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * This enum reflects the changeable fields for the Patient Class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * @author Justin."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * @see seedu.duke.record.Patient"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public enum PatientFieldKeys {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    INDEX,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    NAME,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    AGE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    ADDRESS,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    CONTACT_NUMBER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This toString method overrides the default method with a specified field key"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * and returns a string when called."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        switch (this) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        case INDEX:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            return \"index\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case NAME:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"name\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case AGE:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"age\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADDRESS:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"address\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case CONTACT_NUMBER:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"phone\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 31,
      "Yukilite": 4,
      "thanhduc2000": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DescriptionIsEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class DescriptionIsEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public DescriptionIsEmptyException(String commandType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        this.command \u003d commandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getLocalizedMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"Please ensure that the fields for \" + this.command + \" is provided\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DukeExceptions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * This class throws custom exceptions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class DukeExceptions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method throws a NoKeyExistException if the key is not found in the input that the user supplied"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * For example: user input \"addp \\name Justin \\address Pasir Ris\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Key is : \"\\age\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Since \\age cannot be found in user input, this method will throw NoKeyExistException."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param keyValue the key value pair \"Key \u003d\u003e value\" as a size \u003d 2 String array."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws NoKeyExistException throws exception when there is no key associated with any value."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void doesKeyExist(String[] keyValue) throws NoKeyExistException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        if (keyValue.length !\u003d 2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new NoKeyExistException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method throws a UnknownCommandException when the user supplied in an unknown command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * All commands available are listed as final Strings in Parser class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws UnknownCommandException when user supplied command are not amongst the final Strings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void throwUnknownCommand() throws UnknownCommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        throw new UnknownCommandException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws a DescriptionIsEmptyException when the commandParsed length is not 2."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Since commandParsed is split by a delimiter with a limit of 2, if there is a description the length will be 2."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param commandParsed the full command that was parsed by a delimiter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws DescriptionIsEmptyException throws exception when length is not 2"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void isCommandDescriptionEmpty(String[] commandParsed) throws DescriptionIsEmptyException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        if (commandParsed.length !\u003d 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new DescriptionIsEmptyException(commandParsed[0]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Checks the validity of the index. If it is not valid, throws one of the two exceptions."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param indexAsString The index as a string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param command       The command that called this method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws InvalidIndexException    Throws an InvalidIndexException when the index supplied is \u003c\u003d 0"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws IndexNotIntegerException Throws an IndexNotIntegerException when the index supplied is not an integer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void checkIndexValidity(String indexAsString, String command) throws InvalidIndexException,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            IndexNotIntegerException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            int index \u003d Integer.parseInt(indexAsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            if (index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                throw new InvalidIndexException(command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new IndexNotIntegerException(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws a noFieldCommandException when the user did not include any fields in the full command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param map a HashMap that contains all the fields to be included."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws NoFieldCommandException Throws a NoFieldCommandException when none of the fields are included"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void noFieldCommand(Map\u003cString, String\u003e map, String command) throws NoFieldCommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        for (Map.Entry mapElement : map.entrySet()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            if (mapElement.getValue() \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (count \u003d\u003d map.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new NoFieldCommandException(command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 76,
      "thanhduc2000": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/IndexNotIntegerException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class IndexNotIntegerException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public IndexNotIntegerException(String commandType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        this.command \u003d commandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getLocalizedMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"Please input a valid integer as the index for the command \" + command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class InvalidIndexException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public InvalidIndexException(String commandType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        this.command \u003d commandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getLocalizedMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"Please ensure that the index for \" + this.command + \" is valid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/NoFieldCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class NoFieldCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public NoFieldCommandException(String commandType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        this.command \u003d commandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getLocalizedMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"Please ensure that the fields for \" + this.command + \" is provided\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 10,
      "thanhduc2000": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/NoKeyExistException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "public class NoKeyExistException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class UnknownCommandException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getLocalizedMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"Unknown command\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.AddAppointmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.EditAppointmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.ListAppointmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.AddPatientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.DeletePatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.EditPatientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.ListPatientCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.enums.AppointmentFieldKeys;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.enums.PatientFieldKeys;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.DescriptionIsEmptyException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.DukeExceptions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.IndexNotIntegerException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.NoFieldCommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.NoKeyExistException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final int COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final int LIMIT \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final int VALUE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final int VALUE_STRING_INDEX \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String REGEX_BACKSLASH \u003d \"\\\\\\\\\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String EXIT_COMMAND \u003d \"exit\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String ADD_PATIENT \u003d \"addp\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String EDIT_PATIENT \u003d \"editp\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String DELETE_PATIENT \u003d \"deletep\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String LIST_PATIENT \u003d \"listp\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String ADD_APPOINTMENT \u003d \"adda\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String EDIT_APPOINTMENT \u003d \"edita\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String DELETE_APPOINTMENT \u003d \"deletea\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String LIST_APPOINTMENT \u003d \"lista\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This methods returns the command from the user input string."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return the actual command to execute."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String[] getCommand(String fullCommand) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String[] splits \u003d fullCommand.split(\" \" + REGEX_BACKSLASH, LIMIT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return splits;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns strictly the String that is between the fieldKey and \" \\\" delimiter."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * It will only return the value that is behind the first key."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns an empty String if the key supplied cannot be found in the fullCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the entire command that the user supplied"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param key         the patient field, prepended with REGEX_BACKSLASH. This key is an enum."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @return value.trim() the String that is between key and \" \\\" delimiter"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String findValue(String fullCommand, String key) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String[] keyValue \u003d fullCommand.split(key, LIMIT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.doesKeyExist(keyValue);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String valueString \u003d keyValue[VALUE_STRING_INDEX];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String delimiter \u003d WHITESPACE + REGEX_BACKSLASH;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String[] b \u003d valueString.split(delimiter, LIMIT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String value \u003d b[VALUE_INDEX];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return value.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (NoKeyExistException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return BLANK_STRING;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns a HashMap that matches the Patient fields to edit to the values to edit in."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The HashMap is guaranteed to contain the keys found in the enum PatientFieldKeys."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The values however will be determined by the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @return fieldsToChange a HashMap that matches the patient\u0027s fieldKey to value."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @see PatientFieldKeys for the list of keys guaranteed to be in the HashMap."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @see #findValue(String fullCommand, String key) value returned by this method will be stored at key."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private Map\u003cString, String\u003e getPatientFields(String fullCommand) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Map\u003cString, String\u003e patientFieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (PatientFieldKeys pf : PatientFieldKeys.values()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String field \u003d pf.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String key \u003d WHITESPACE + REGEX_BACKSLASH + field;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String value \u003d findValue(fullCommand, key);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            patientFieldsToChange.put(field, value);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return patientFieldsToChange;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns a HashMap that matches the Appointment fields to edit to the values to edit in."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The HashMap is guaranteed to contain the keys found in the enum AppointmentFieldKeys."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The values however will be determined by the user. If not provided, EMPTY_STRING will be stored"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a HashMap that matches the appointment\u0027s fieldKey to value."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @see AppointmentFieldKeys"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @see #findValue(String fullcommand, String key) value returned by this method will be stored at key."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private Map\u003cString, String\u003e getAppointmentFields(String fullCommand) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Map\u003cString, String\u003e appointmentFieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (AppointmentFieldKeys af : AppointmentFieldKeys.values()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String field \u003d af.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String key \u003d WHITESPACE + REGEX_BACKSLASH + field;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String value \u003d findValue(fullCommand, key);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            appointmentFieldsToChange.put(field, value);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return appointmentFieldsToChange;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns the specific type of command object."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws an UnknownCommandException for the caller to catch when user supplied an unknown command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws InvalidIndexError when the index supplied for edit and delete commands are invalid (alphabets, \u003c\u003d 0)."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param command        the command that was specified."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fieldsToChange the HashMap of what to add or edit."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a specific command object that is specified by @param command."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws UnknownCommandException Throws custom duke exception to catch and print error message."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws InvalidIndexException   Throws a custom duke exception to catch and print error message."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private Command getCommandObject(String command, Map\u003cString, String\u003e fieldsToChange) throws"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            UnknownCommandException,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            InvalidIndexException, IndexNotIntegerException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADD_PATIENT:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Duke.patientIndexNumber++;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange.put(INDEX, Integer.toString(Duke.patientIndexNumber));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new AddPatientCommand(fieldsToChange);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case EDIT_PATIENT:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.checkIndexValidity(fieldsToChange.get(INDEX), command);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new EditPatientCommand(fieldsToChange);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case DELETE_PATIENT:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.checkIndexValidity(fieldsToChange.get(INDEX), command);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new DeletePatientCommand(fieldsToChange);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case LIST_PATIENT:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new ListPatientCommand();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADD_APPOINTMENT:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Duke.appointmentIndexNumber++;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange.put(INDEX, Integer.toString(Duke.patientIndexNumber));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new AddAppointmentCommand(fieldsToChange);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case EDIT_APPOINTMENT:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.checkIndexValidity(fieldsToChange.get(INDEX), command);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new EditAppointmentCommand(fieldsToChange);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case DELETE_APPOINTMENT:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.checkIndexValidity(fieldsToChange.get(INDEX), command);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new DeleteAppointmentCommand(fieldsToChange);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case LIST_APPOINTMENT:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new ListAppointmentCommand();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case HELP_COMMAND:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case EXIT_COMMAND:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.throwUnknownCommand();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns the command object to be executed."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws an UnknownCommandException for the caller to catch when user supplied an unknown command."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a command object to be executed."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws UnknownCommandException Throws custom duke exception to catch and print error message."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public Command parseCommand(String fullCommand) throws"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            UnknownCommandException, DescriptionIsEmptyException,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            InvalidIndexException, IndexNotIntegerException, NoFieldCommandException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String[] commandParsed \u003d getCommand(fullCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String commandAsString \u003d commandParsed[COMMAND_INDEX].trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        switch (commandAsString) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADD_PATIENT:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case EDIT_PATIENT:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case DELETE_PATIENT:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.isCommandDescriptionEmpty(commandParsed);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange \u003d getPatientFields(fullCommand);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.noFieldCommand(fieldsToChange, commandAsString);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            command \u003d getCommandObject(commandAsString, fieldsToChange);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADD_APPOINTMENT:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case EDIT_APPOINTMENT:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case DELETE_APPOINTMENT:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.isCommandDescriptionEmpty(commandParsed);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange \u003d getAppointmentFields(fullCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.noFieldCommand(fieldsToChange, commandAsString);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            command \u003d getCommandObject(commandAsString, fieldsToChange);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            command \u003d getCommandObject(commandAsString, null);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 238,
      "Yukilite": 3,
      "thanhduc2000": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/record/Appointment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class contains the date and time for each patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public Appointment(String date, String time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Update the name if it is not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param date date that needs to be updated"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!date.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This part is implemented for the EditPatientCommand class by Duc"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Update the age if it is a positive integer."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param time time that needs to be updated"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setTime(String time) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!time.isBlank()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Overrides the default toString command so that the patient\u0027s appointment."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * details can be printed in a specific string format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return newToString The formatted string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String newToString \u003d \"{\" + \"[Date]:\" + \" \" + getDate() + \" \" + \"|\" + \"[Time]:\" + \" \" + getTime() + \"}\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return newToString;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Method to update all the patient\u0027s information."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param date date that needs to be updated"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param time time that needs to be updated"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setAppointmentInfo(String date, String time) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 23,
      "JustinnT": 20,
      "thanhduc2000": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/record/Patient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class contains the patient information such as name, age, address and contact number."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * @author yukilite"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method stores the patient information when the user enters an input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @param name          the name of the patient"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @param age           the age of the patient"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @param address       the address of the patient"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @param contactNumber the phone number of the patient"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Patient(String name, int age, String address, String contactNumber) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Update the name if it is not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param name name that needs to be updated"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!name.isBlank()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Update the age if it is a positive integer."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param age age that needs to be updated"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (age \u003e\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.age \u003d age;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This part is implemented for the EditPatientCommand class by Duc"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Update the address if it is not null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param address address that needs to be updated"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!address.isBlank()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getContactNumber() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return contactNumber;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Update the contact number if it is not null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param contactNumber contact number that needs to be updated"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setContactNumber(String contactNumber) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!contactNumber.isBlank()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Overrides the default toString command so that the patient information can be printed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * in a specific string format."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return newToString The formatted string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String newToString \u003d \"{\" + \"[Name]:\" + \" \" + getName() + \" \" + \"|\" + \" \" + \"[Age]:\" + \" \" + getAge() + \" \" + \"|\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \" \" + \"[Address]:\" + \" \" + getAddress() + \" \" + \"|\" + \" \" + \"[Contact Number]:\" + \" \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + getContactNumber() + \"}\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return newToString;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Method to update all the patient\u0027s information."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param name          name that needs to be updated"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param age           age that needs to be updated"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param address       address that needs to be updated"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param contactNumber contact number that needs to be updated"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setPatientInfo(String name, int age, String address, String contactNumber) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setAge(age);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setAddress(address);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setContactNumber(contactNumber);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Yukilite": 19,
      "JustinnT": 32,
      "thanhduc2000": 72
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/AppointmentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class acts an ADT for the list containing existing Appointment objects. It contains various getter/setter"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * methods for accessing the different attributes and methods for manipulating the data structure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @author Brandon Chong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @since 2020-03-14"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class AppointmentList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static List\u003cAppointment\u003e appointmentList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public AppointmentList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public AppointmentList(List\u003cAppointment\u003e savedPatientList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        appointmentList \u003d savedPatientList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    //getter and setter"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static List\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void setAppointmentList(List appointmentListInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        appointmentList \u003d appointmentListInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static Appointment getAppointmentRecord(int appointmentIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return getAppointmentList().get(appointmentIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static int getTotalAppointments() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return appointmentList.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void removeAppointmentRecord(int appointmentIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        getAppointmentList().remove(appointmentIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 7,
      "Yukilite": 2,
      "brandoncjh": 34,
      "thanhduc2000": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/PatientList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class acts an ADT for the list containing existing Patient objects. It contains various getter/setter methods"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * for accessing the different attributes and methods for manipulating the data structure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @author Brandon Chong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @since 2020-03-14"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class PatientList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private static List\u003cPatient\u003e patientList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public PatientList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        patientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public PatientList(List\u003cPatient\u003e savedPatientList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        patientList \u003d savedPatientList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static List\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return patientList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void setPatientList(List patientListInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        patientList \u003d patientListInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static Patient getPatientRecord(int patientIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return getPatientList().get(patientIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static int getTotalPatients() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return patientList.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void removePatientRecord(int patientIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        getPatientList().remove(patientIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 9,
      "brandoncjh": 21,
      "thanhduc2000": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final String SAVE_DIRECTORY \u003d \"saves\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final String APPOINTMENT_LIST_SAVE_FILEPATH \u003d \"saves/appointments.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final String PATIENT_LIST_SAVE_FILEPATH \u003d \"saves/patients.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String PIPE_DELIMITER \u003d \" | \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static PatientList patientList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static AppointmentList appointmentList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String appointmentListSaveLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String patientListSaveLocation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.appointmentListSaveLocation \u003d APPOINTMENT_LIST_SAVE_FILEPATH;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.patientListSaveLocation \u003d PATIENT_LIST_SAVE_FILEPATH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * load save file for Appointments list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @return appointmentListToReturn returns the appointment list in the save file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @throws FileNotFoundException this exception occurs when a file is not found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public List\u003cAppointment\u003e loadSavedAppointments() throws FileNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        File appointmentSave \u003d new File(this.appointmentListSaveLocation);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (!appointmentSave.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            File newDirectory \u003d new File(SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            boolean isNewDirectoryCreated \u003d newDirectory.mkdir();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (isNewDirectoryCreated) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                File newFile \u003d new File(APPOINTMENT_LIST_SAVE_FILEPATH);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    newFile.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    Ui.showFailedToCreateFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                Ui.showFailedToCreateDirectory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        //TODO: parse the text file, return List of Appointments"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cAppointment\u003e appointmentListToReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        Scanner s \u003d new Scanner(appointmentSave);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //TODO: parse savefile substring, update Appointment constructor"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //process each line, construct new Appointment object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String appointmentString \u003d s.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String[] patientFields \u003d appointmentString.split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            for (String field : patientFields) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                if (field.trim().isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    field \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Appointment newAppointmentToLoad \u003d new Appointment(patientFields[0], patientFields[1]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            appointmentListToReturn.add(newAppointmentToLoad);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return appointmentListToReturn;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * load save file for Patients list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @return patientListToReturn the patient list for the save file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @throws FileNotFoundException this exception occurs if a file is not found."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public List\u003cPatient\u003e loadSavedPatients() throws FileNotFoundException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        File patientSave \u003d new File(this.patientListSaveLocation);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (!patientSave.exists()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            File newDirectory \u003d new File(SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            boolean isNewDirectoryCreated \u003d newDirectory.mkdir();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (isNewDirectoryCreated) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                File newFile \u003d new File(PATIENT_LIST_SAVE_FILEPATH);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    newFile.createNewFile();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    Ui.showFailedToCreateFile();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                Ui.showFailedToCreateDirectory();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        //TODO: parse the text file, return List of Patients"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cPatient\u003e patientListToReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        Scanner s \u003d new Scanner(patientSave);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //TODO: parse savefile substring, update Patient constructor"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //process each line, construct new Appointment object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String patientString \u003d s.nextLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String[] patientFields \u003d patientString.split(\" \\\\| \", 4);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            for (String field : patientFields) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                if (field.trim().isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    field \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Patient newPatientToLoad \u003d new Patient(patientFields[0], Integer.parseInt(patientFields[1]),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    patientFields[2], patientFields[3]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            patientListToReturn.add(newPatientToLoad);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return patientListToReturn;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method saves the patient\u0027s appointment details from the AppointmentList into the local save file."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @throws IOException this exception occurs if the patient\u0027s appointment details are unable to be written"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     *                     to the local save file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void saveAppointmentsList() throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        FileWriter fwAppointmentSave;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fwAppointmentSave \u003d new FileWriter(this.appointmentListSaveLocation);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String newAppointmentString \u003d null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (int i \u003d 0; i \u003c AppointmentList.getTotalAppointments(); i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Appointment newAppointmentData \u003d AppointmentList.getAppointmentRecord(i);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            newAppointmentString \u003d newAppointmentData.getDate() + PIPE_DELIMITER + newAppointmentData.getTime() + LS;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fwAppointmentSave.write(newAppointmentString);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        fwAppointmentSave.close();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method saves the patient list into the local save file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @throws IOException this exception occurs if the patient data was unable to be written to the local save file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void savePatientList() throws IOException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        FileWriter fwPatientSave;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fwPatientSave \u003d new FileWriter(this.patientListSaveLocation);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String newPatientString \u003d null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (int i \u003d 0; i \u003c PatientList.getTotalPatients(); i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Patient newPatientData \u003d PatientList.getPatientRecord(i);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            newPatientString \u003d newPatientData.getName() + PIPE_DELIMITER"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "                    + newPatientData.getAge() + PIPE_DELIMITER"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "                    + newPatientData.getAddress() + PIPE_DELIMITER"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "                    + newPatientData.getContactNumber() + LS;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fwPatientSave.write(newPatientString);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        fwPatientSave.close();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 38,
      "Yukilite": 25,
      "brandoncjh": 99,
      "thanhduc2000": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Represents the user interface that will interact with the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * @author Justin"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Prints the entire patientList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showEntirePatientList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d PatientList.getPatientList(); //getPatientList() method by @Brandonnn"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (Patient p : patientList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            System.out.println(p); //override Patient class toString by @Sammmmm"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Prints the entire appointmentList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showEntireAppointmentList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        List\u003cAppointment\u003e appointmentList \u003d AppointmentList.getAppointmentList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (Appointment a : appointmentList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            System.out.println(a);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showNumberError() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Please input an integer for index\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showIndexError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Index out of bound, please check the correct index from the list\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showDeleteAppointmentSuccess() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Appointment deleted successfully!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showDeletePatientSuccess() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Patient deleted successfully!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showUpdateAppointmentSuccess() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Appointment updated successfully!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showSetAgeError() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Received a non-integer for age, setting age to be -1.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showUpdatePatientSuccess() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Patient updated successfully!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showByeMessage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Bye!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showHelpUsage(String commandsMessageUsage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(commandsMessageUsage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showFailedToCreateFile() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Failed to create file in new directory\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showFailedToCreateDirectory() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Failed to create directory\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void showExceptionError(String localizedMessage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(localizedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void showAppointmentAddSuccess() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Appointment added successfully!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void showPatientAddSuccess() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Patient added successfully\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Prints HAMS logo."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void printHello() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"            .---------.\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       _    |:: [-\u003d-] |\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"      | |   |_________|\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"      |~|\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"      |_|                    ,;;;;,\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I\\\\  ,__ ,;;;, __,    ///\\\\\\\\\\\\\\\\\\\\\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I |{   / . . \\\\   }   / \\\"  \\\\\\\\||\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I | ) (   _   ) (    \\\\_\u003d _///\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I |{___\u0027-. .-\u0027___}\\\\___ )_\\\\\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I ||~/,\u0027~~~~~,\\\\~~|\u0027---((  \\\\\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I \\\\ //        \\\\\\\\ |     \\\\ \\\\ \\\\\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I  \\\\/         // |     | /-/\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I (/         (/  |     |/||\\\\\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I  |             |     |    |\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I  |             |     |____/\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I  :-----_o_-----:      || |\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I  | /~~|\u003d\u003d\u003d|~~\\\\ |      (( |\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"       I  ||   |\u003d\u003d\u003d|   ||      ||_/\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"      /^\\\\ \\\"~   \u0027^^^\u0027   \\\"\\\"     ((__|\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\" ____      ____  ________  _____       ______    ___   ____    ____  ________  \\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"|_  _|    |_  _||_   __  ||_   _|    .\u0027 ___  | .\u0027   `.|_   \\\\  /   _||_   __  | \\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"  \\\\ \\\\  /\\\\  / /    | |_ \\\\_|  | |     / .\u0027   \\\\_|/  .-.  \\\\ |   \\\\/   |    | |_ \\\\_| \\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"   \\\\ \\\\/  \\\\/ /     |  _| _   | |   _ | |       | |   | | | |\\\\  /| |    |  _| _  \\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"    \\\\  /\\\\  /     _| |__/ | _| |__/ |\\\\ `.___.\u0027\\\\\\\\  `-\u0027  /_| |_\\\\/_| |_  _| |__/ | \\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"     \\\\/  \\\\/     |________||________| `.____ .\u0027 `.___.\u0027|_____||_____||________| \\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"                                                                               \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        printLongSeparator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Hello I am HAMS. What can I do for you today?\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String printSeparator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void printLongSeparator() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(printSeparator() + printSeparator());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 131,
      "Yukilite": 1,
      "thanhduc2000": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddAppointmentCommandStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class AddAppointmentCommandStub {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String DATE \u003d \"date\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String TIME \u003d \"time\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public AddAppointmentCommandStub(Map\u003cString, String\u003e appointmentInfo) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.date \u003d appointmentInfo.get(DATE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.time \u003d appointmentInfo.get(TIME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method is a stub."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see AddAppointmentCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static Map\u003cString, String\u003e generateMap(int choice) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (choice \u003d\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"date\", \"asd\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"time\", \"asdsds\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } else if (choice \u003d\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"date\", \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"time\", \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return tempMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method is a stub."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see AddAppointmentCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void execute(int ui, int storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentStub newAppointment \u003d new AppointmentStub(this.date, this.time);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentListStub.createList(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentListStub.getAppointmentList().add(newAppointment);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 8,
      "JustinnT": 2,
      "andy-aw-why": 36
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddAppointmentCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "class AddAppointmentCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testNormalInput() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"date\", \"asdasd\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"time\", \"lklklk\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(tempMap);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            String date \u003d \"asdasd\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            String time \u003d \"lklklk\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(date, addAppointmentCommand.getDate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(time, addAppointmentCommand.getTime());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testEmptyString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"date\", \"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"time\", \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(tempMap);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testEmptyStringValue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"date\", \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"time\", \"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            String date \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(tempMap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(date, addAppointmentCommand.getDate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(time, addAppointmentCommand.getTime());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testAddNormalString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int ui \u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int storage \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d AddAppointmentCommandStub.generateMap(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AddAppointmentCommandStub addCommand \u003d new AddAppointmentCommandStub(tempMap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        addCommand.execute(ui, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentStub tempAppointment \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                AppointmentListStub.getAppointmentList().get(AppointmentListStub.getTotalAppointments() - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentStub newAppointment \u003d new AppointmentStub(\"asd\", \"asdsds\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(tempAppointment.getDate(), newAppointment.getDate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(tempAppointment.getTime(), newAppointment.getTime());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testAddEmptyString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int ui \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int storage \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d AddAppointmentCommandStub.generateMap(2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AddAppointmentCommandStub addCommand \u003d new AddAppointmentCommandStub(tempMap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        addCommand.execute(ui, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentStub tempAppointment \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                AppointmentListStub.getAppointmentList().get(AppointmentListStub.getTotalAppointments() - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentStub newAppointment \u003d new AppointmentStub(\"\", \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(tempAppointment.getDate(), newAppointment.getDate());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(tempAppointment.getTime(), newAppointment.getTime());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 5,
      "andy-aw-why": 81
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddPatientCommandStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Stub class for fake addCommand class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "class AddPatientCommandStub {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String PATIENT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String AGE \u003d \"age\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String ADDRESS \u003d \"address\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String CONTACT_NUMBER \u003d \"phone\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String patientName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public AddPatientCommandStub(Map\u003cString, String\u003e patientInfo) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.patientName \u003d patientInfo.get(PATIENT_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (patientInfo.get(AGE).isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            this.age \u003d -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                this.age \u003d Integer.parseInt(patientInfo.get(AGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                this.age \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.address \u003d patientInfo.get(ADDRESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.contactNumber \u003d patientInfo.get(CONTACT_NUMBER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static Map\u003cString, String\u003e generateMap(int choice) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (choice \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"name\", \"asd\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"age\", \"23\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"address\", \"asdsds\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"phone\", \"asdsadsad\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } else if (choice \u003d\u003d 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"name\", \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"age\", \"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"address\", \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"phone\", \"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return tempMap;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void execute(int ui, int storage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientStub newPatient \u003d new PatientStub(this.patientName, this.age, this.address, this.contactNumber);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientListStub.createList(1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientListStub.getPatientList().add(newPatient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 1,
      "andy-aw-why": 61
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddPatientCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "class AddPatientCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient1 \u003d new Patient(\"s;dlskd;l\", 23, \"Li\", \"121\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient2 \u003d new Patient(\" \", 15, \" \", \"15454455\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient3 \u003d new Patient(\"ewuioaiwoe\", 33, \"Lo\", \"1989\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient4 \u003d new Patient(\"aeiwae\", 13, \"to\", \" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient5 \u003d new Patient(\"LSDs\", -1, \"Lis\", \"12\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testNormalInput() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"asdasd\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"12\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"asdasd\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"asdsad\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            AddPatientCommand addPatientCommand \u003d new AddPatientCommand(tempMap);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            int number \u003d 12;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(number, addPatientCommand.getAge());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testEmptyString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            AddPatientCommand addPatientCommand \u003d new AddPatientCommand(tempMap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testAge() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            AddPatientCommand addPatientCommand \u003d new AddPatientCommand(tempMap);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            int number \u003d -1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(number, addPatientCommand.getAge());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testNonIntAge() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"asdsad\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"asdsada\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"asdsds\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"asdsadsad\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            AddPatientCommand addPatientCommand \u003d new AddPatientCommand(tempMap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            int number \u003d -1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(number, addPatientCommand.getAge());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testEmptyMap() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            AddPatientCommand addPatientCommand \u003d new AddPatientCommand(tempMap);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testAddNormalString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int ui \u003d 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int storage \u003d 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString,String\u003e tempMap \u003d AddPatientCommandStub.generateMap(1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AddPatientCommandStub addCommand \u003d new AddPatientCommandStub(tempMap);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        addCommand.execute(ui,storage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientStub temppatient \u003d PatientListStub.getPatientList().get(PatientListStub.getTotalPatients() - 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientStub newPatient \u003d new PatientStub(\"asd\", 23,\"asdsds\",\"asdsadsad\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getName(),newPatient.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getAge(),newPatient.getAge());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getAddress(),newPatient.getAddress());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getContactNumber(),newPatient.getContactNumber());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testAddEmptyString()  {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int ui \u003d 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int storage \u003d 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString,String\u003e tempMap \u003d AddPatientCommandStub.generateMap(2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AddPatientCommandStub addCommand \u003d new AddPatientCommandStub(tempMap);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        addCommand.execute(ui,storage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientStub temppatient \u003d PatientListStub.getPatientList().get(PatientListStub.getTotalPatients() - 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientStub newPatient \u003d new PatientStub(\"\", -1,\"\",\"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getName(),newPatient.getName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getAge(),newPatient.getAge());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getAddress(),newPatient.getAddress());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getContactNumber(),newPatient.getContactNumber());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 13,
      "andy-aw-why": 112
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AppointmentListStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class AppointmentListStub {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static List\u003cAppointmentStub\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static List\u003cAppointmentStub\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static int getTotalAppointments() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return appointmentList.size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method is a stub."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see seedu.duke.storage.AppointmentList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static void createList(int choice) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        appointmentList.clear();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (choice \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AppointmentStub newAppointment1 \u003d new AppointmentStub(\"s;dlskd;l\", \"Li\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AppointmentStub newAppointment2 \u003d new AppointmentStub(\" \", \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AppointmentStub newAppointment3 \u003d new AppointmentStub(\"ewuioaiwoe\", \"Lo\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AppointmentStub newAppointment4 \u003d new AppointmentStub(\"aeiwae\", \"to\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AppointmentStub newAppointment5 \u003d new AppointmentStub(\"LSDs\", \"Lis\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            appointmentList.add(newAppointment1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            appointmentList.add(newAppointment2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            appointmentList.add(newAppointment3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            appointmentList.add(newAppointment4);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            appointmentList.add(newAppointment5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 4,
      "JustinnT": 1,
      "andy-aw-why": 34
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AppointmentStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class AppointmentStub {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public AppointmentStub(String date, String time) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return \"{\" + \"[Date]:\" + \" \" + getDate() + \" \" + \"|\" + \"[Time]:\" + \" \" + getTime() + \"}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "andy-aw-why": 23
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeleteAppointmentCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class DeleteAppointmentCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute() throws Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        AppointmentList appointmentList \u003d new AppointmentList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"14/03/2020\", \"10am\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"15/03/2020\", \"11am\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"16/03/2020\", \"12am\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"17/03/2020\", \"1pm\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"18/03/2020\", \"2pm\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(APPOINTMENT_INDEX, \"3\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command command \u003d new DeleteAppointmentCommand(fieldsToChange);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        command.execute(ui, storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Date]: 14/03/2020 |[Time]: 10am}\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                appointmentList.getAppointmentRecord(0).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Date]: 15/03/2020 |[Time]: 11am}\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                appointmentList.getAppointmentRecord(1).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Date]: 17/03/2020 |[Time]: 1pm}\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                appointmentList.getAppointmentRecord(2).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Date]: 18/03/2020 |[Time]: 2pm}\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                appointmentList.getAppointmentRecord(3).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 2,
      "thanhduc2000": 28
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeletePatientCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class DeletePatientCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute_1() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        PatientList patientList \u003d new PatientList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"peony\", 33, \"clementi road\", \"61234567\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"yoshino\", 8, \"shibuya\", \"13182371\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"kurumi\", 15, \"hokkaido\", \"31732913\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(PATIENT_INDEX, \"3\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command command \u003d new DeletePatientCommand(fieldsToChange);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        command.execute(ui, storage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(4, patientList.getTotalPatients());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Name]: peony | [Age]: 33 | [Address]: clementi road | [Contact Number]: 61234567}\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                patientList.getPatientRecord(0).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Name]: yoshino | [Age]: 8 | [Address]: shibuya | [Contact Number]: 13182371}\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                patientList.getPatientRecord(1).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Name]: ren | [Age]: 17 | [Address]: tokyo | [Contact Number]: 31093991}\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                patientList.getPatientRecord(2).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Name]: ren | [Age]: 17 | [Address]: tokyo | [Contact Number]: 31093991}\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                patientList.getPatientRecord(3).toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 2,
      "thanhduc2000": 30
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/EditAppointmentCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class EditAppointmentCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute_1() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        AppointmentList appointmentList \u003d new AppointmentList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"14/03/2020\", \"10am\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"15/03/2020\", \"11am\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"16/03/2020\", \"12am\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"17/03/2020\", \"1pm\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"18/03/2020\", \"2pm\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(APPOINTMENT_INDEX, \"3\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(APPOINTMENT_DATE, \"31/12/2020\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(APPOINTMENT_TIME, \"11pm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command command \u003d new EditAppointmentCommand(fieldsToChange);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        command.execute(ui, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Date]: 31/12/2020 |[Time]: 11pm}\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                appointmentList.getAppointmentRecord(2).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 2"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute_2() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        AppointmentList appointmentList \u003d new AppointmentList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"14/03/2020\", \"10am\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"15/03/2020\", \"11am\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"16/03/2020\", \"12am\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"17/03/2020\", \"1pm\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"18/03/2020\", \"2pm\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(APPOINTMENT_INDEX, \"5\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(APPOINTMENT_DATE, \"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(APPOINTMENT_TIME, \"11pm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command command \u003d new EditAppointmentCommand(fieldsToChange);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        command.execute(ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Date]: 18/03/2020 |[Time]: 11pm}\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                appointmentList.getAppointmentRecord(4).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 4,
      "Yukilite": 4,
      "thanhduc2000": 42
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/EditPatientCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class EditPatientCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute_1() throws Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        PatientList patientList \u003d new PatientList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"peony\", 33, \"clementi road\", \"61234567\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"yoshino\", 8, \"shibuya\", \"13182371\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"kurumi\", 15, \"hokkaido\", \"31732913\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(PATIENT_INDEX, \"3\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(PATIENT_NAME, \"Joe Harris\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(AGE, \"20\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(ADDRESS, \"Jurong East\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(CONTACT_NUMBER, \"8225 3819\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command command \u003d new EditPatientCommand(fieldsToChange);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        command.execute(ui, storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Name]: Joe Harris | [Age]: 20 | [Address]: Jurong East | [Contact Number]: 8225 3819}\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                patientList.getPatientRecord(2).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 2"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute_2() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        PatientList patientList \u003d new PatientList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"peony\", 33, \"clementi road\", \"61234567\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"yoshino\", 8, \"shibuya\", \"13182371\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"kurumi\", 15, \"hokkaido\", \"31732913\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(PATIENT_INDEX, \"3\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(PATIENT_NAME, \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(AGE, \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(ADDRESS, \"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(CONTACT_NUMBER, \"8225 3819\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command command \u003d new EditPatientCommand(fieldsToChange);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        command.execute(ui, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"{[Name]: kurumi | [Age]: 15 | [Address]: hokkaido | [Contact Number]: 8225 3819}\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                patientList.getPatientRecord(2).toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 4,
      "Yukilite": 4,
      "thanhduc2000": 46
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void isExit() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command c \u003d new ExitCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(true, c.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "thanhduc2000": 13
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute() throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command command \u003d new HelpCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        command.execute(ui, storage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 16
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListAppointmentCommandStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * Stub class for ListAppointmentCommandTest."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class ListAppointmentCommandStub {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public ListAppointmentCommandStub() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub to simulate adding appointments into list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param ui      stub ui"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param storage stub storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void execute(int ui, int storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        List\u003cAppointmentStub\u003e appointmentStubList \u003d AppointmentListStub.getAppointmentList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        for (AppointmentStub a : appointmentStubList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            System.out.println(a);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 9,
      "andy-aw-why": 15
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListAppointmentCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "class ListAppointmentCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String EXPECTED_OUTPUT \u003d \"{[Date]: s;dlskd;l |[Time]: Li}\" + System.lineSeparator()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"{[Date]:   |[Time]:  }\" + System.lineSeparator()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"{[Date]: ewuioaiwoe |[Time]: Lo}\" + System.lineSeparator()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"{[Date]: aeiwae |[Time]: to}\" + System.lineSeparator()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"{[Date]: LSDs |[Time]: Lis}\" + System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testListWithPatients() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int ui \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int storage \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int savedAppointmentList \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentListStub.createList(savedAppointmentList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        ListAppointmentCommandStub listAppointmentCommandStub \u003d new ListAppointmentCommandStub();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Reused from https://coderanch.com/t/587280/java/assertEquals-println **/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        listAppointmentCommandStub.execute(ui, storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        //assertEquals(EXPECTED_OUTPUT, outContent.toString()); todo test failed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testListWithoutPatients() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int ui \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int storage \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int savedAppointmentList \u003d 2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientListStub.createList(savedAppointmentList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        ListAppointmentCommandStub listAppointmentCommandStub \u003d new ListAppointmentCommandStub();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Reused from https://coderanch.com/t/587280/java/assertEquals-println **/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        listAppointmentCommandStub.execute(ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        //assertEquals(EMPTY, outContent.toString()); todo test failed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 7,
      "andy-aw-why": 41
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListPatientCommandStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * Stub class for ListPatientCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class ListPatientCommandStub {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public ListPatientCommandStub() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub to simulate adding patients into list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param ui      stub ui"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param storage stub storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void execute(int ui, int storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        List\u003cPatientStub\u003e patientListStub \u003d PatientListStub.getPatientList(); //getPatientList() method by @Brandonnn"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        for (PatientStub p : patientListStub) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            System.out.println(p); //override Patient class toString by @Sammmmm"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 9,
      "andy-aw-why": 15
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListPatientCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "class ListPatientCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String EXPECTED_OUTPUT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            \"{[Name]: s;dlskd;l | [Age]: 23 | [Address]: Li | [Contact Number]: 121}\" + System.lineSeparator()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    + \"{[Name]:   | [Age]: 15 | [Address]:   | [Contact Number]: 15454455}\" + System.lineSeparator()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    + \"{[Name]: ewuioaiwoe | [Age]: 33 | [Address]: Lo | [Contact Number]: 1989}\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    + \"{[Name]: aeiwae | [Age]: 13 | [Address]: to | [Contact Number]:  }\" + System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    + \"{[Name]: LSDs | [Age]: -1 | [Address]: Lis | [Contact Number]: 12}\" + System.lineSeparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testListWithPatients() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int ui \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int storage \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int savedPatientList \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientListStub.createList(savedPatientList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        ListPatientCommandStub listPatientCommandStub \u003d new ListPatientCommandStub();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Reused from https://coderanch.com/t/587280/java/assertEquals-println **/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        listPatientCommandStub.execute(ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(EXPECTED_OUTPUT, outContent.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testListWithoutPatients() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int ui \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int storage \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int savedPatientList \u003d 2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientListStub.createList(savedPatientList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        ListPatientCommandStub listPatientCommandStub \u003d new ListPatientCommandStub();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Reused from https://coderanch.com/t/587280/java/assertEquals-println **/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        listPatientCommandStub.execute(ui, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(EMPTY, outContent.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 8,
      "andy-aw-why": 48
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/PatientListStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * Stub class for PatientList class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class PatientListStub {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static List\u003cPatientStub\u003e patientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param choice Stub choice"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public PatientListStub(int choice) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to return patient list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a patient list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static List\u003cPatientStub\u003e getPatientList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return patientList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to get patient list size."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return size of patient list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static int getTotalPatients() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return patientList.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to create and initialize list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param choice Stub choice"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static void createList(int choice) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientList.clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (choice \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientStub newPatient1 \u003d new PatientStub(\"s;dlskd;l\", 23, \"Li\", \"121\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientStub newPatient2 \u003d new PatientStub(\" \", 15, \" \", \"15454455\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientStub newPatient3 \u003d new PatientStub(\"ewuioaiwoe\", 33, \"Lo\", \"1989\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientStub newPatient4 \u003d new PatientStub(\"aeiwae\", 13, \"to\", \" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientStub newPatient5 \u003d new PatientStub(\"LSDs\", -1, \"Lis\", \"12\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            patientList.add(newPatient1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            patientList.add(newPatient2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            patientList.add(newPatient3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            patientList.add(newPatient4);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            patientList.add(newPatient5);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 21,
      "andy-aw-why": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/PatientStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * Stub class for fake patient class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class PatientStub {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Default constructor for stub class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param name          name of patient"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param age           age of patient"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param address       address of patient"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param contactNumber contact number of patient"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public PatientStub(String name, int age, String address, String contactNumber) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to get patient name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return patient name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to get patient age."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return patient age"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to get patient address."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return patient address"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to get patient number."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return patient number"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getContactNumber() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return contactNumber;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Override toString method for stub class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return formatted string to print"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        String newToString \u003d \"{\" + \"[Name]:\" + \" \" + getName() + \" \" + \"|\" + \" \" + \"[Age]:\" + \" \" + getAge() + \" \" + \"|\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                + \" \" + \"[Address]:\" + \" \" + getAddress() + \" \" + \"|\" + \" \" + \"[Contact Number]:\" + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                + getContactNumber() + \"}\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return newToString;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 35,
      "andy-aw-why": 40
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.AddPatientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.DeletePatientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.EditPatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.ListPatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_unknownCommand_exceptionCaught() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String userInputWithUnknownCommand \u003d \"factorial 100000\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            p.parseCommand(userInputWithUnknownCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Unknown command\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_addPatientCommand_isAddCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String addPatientUserInput1 \u003d \"addp \\\\name \\\\age \\\\address\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String addPatientUserInput2 \u003d \"addp                        \\\\unknown \\\\age \\\\name \\\\12333\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(addPatientUserInput1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(addPatientUserInput2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type1 instanceof AddPatientCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type2 instanceof AddPatientCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fail(\"Should not have thrown any exceptions\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_addPatientCommand_isNotAddCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String addPatientUserInput1 \u003d \"deletep \\\\index 3\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String addPatientUserInput2 \u003d \"edip \\\\index -100 \\\\name Justin \\\\age 23 \\\\address Pasir Ris\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String addPatientUserInput3 \u003d \"listp\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(addPatientUserInput1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(addPatientUserInput2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(addPatientUserInput3);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type1 instanceof AddPatientCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type2 instanceof AddPatientCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type3 instanceof AddPatientCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Unknown command\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void tetParseCommand_editPatientCommand_isEditCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String editPatientUserInput1 \u003d \"editp \\\\index 5 \\\\\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String editPatientUserInput2 \u003d \"editp       \\\\index 3 \\\\name \\\\age 23 \\\\address pasir ris\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String editPatientUserInput3 \u003d \"         editp  \\\\index 4      \\\\\\\\\\\\\\\\\\\\\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        PatientList stub \u003d new PatientList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Patient newPatient \u003d new Patient(\"1\", 1, \"1\", \"1\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i +\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            PatientList.getPatientList().add(newPatient);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(editPatientUserInput1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(editPatientUserInput2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(editPatientUserInput3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type1 instanceof EditPatientCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type2 instanceof EditPatientCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type3 instanceof EditPatientCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fail(\"Should not have thrown any exception\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_editPatientCommand_isNotEditCommand() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String editPatientUserInput1 \u003d \"adda \\\\index 3\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String editPatientUserInput2 \u003d \"addp                        \\\\unknown \\\\age \\\\name \\\\12333\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String editPatientUserInput3 \u003d \"list\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(editPatientUserInput1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(editPatientUserInput2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(editPatientUserInput3);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type1 instanceof EditPatientCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type2 instanceof EditPatientCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type3 instanceof EditPatientCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Unknown command\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_deletePatientCommand_isDeleteCommand() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String deletePatientUserInput1 \u003d \"         deletep  \\\\index 4      \\\\\\\\\\\\\\\\\\\\\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String deletePatientUserInput2 \u003d \"           deletep \\\\index 10\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String deletePatientUserInput3 \u003d \"deletep               \\\\index 1\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        PatientList stub \u003d new PatientList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Patient newPatient \u003d new Patient(\"1\", 1, \"1\", \"1\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i +\u003d 1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            PatientList.getPatientList().add(newPatient);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(deletePatientUserInput1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(deletePatientUserInput2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(deletePatientUserInput3);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type1 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type2 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type3 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fail(\"Should not have thrown any exceptions\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_deletePatientCommand_isNotDeleteCommand() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String deletePatientUserInput1 \u003d \"addp                        \\\\unknown \\\\age \\\\name \\\\12333\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String deletePatientUserInput2 \u003d \"           listp\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String deletePatientUserInput3 \u003d \"edipt               \\\\index 0\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(deletePatientUserInput1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(deletePatientUserInput2);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(deletePatientUserInput3);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type1 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type2 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type3 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Unknown command\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_listPatientCommand() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String listPatientUserInput1 \u003d \"listp\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String listPatientUserInput2 \u003d \"          listp                  \";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String listPatientUserInput3 \u003d \"listp \\\\name Justin\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String listPatientUserInput4 \u003d \"list\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String listPatientUserInput5 \u003d \"addp \\\\name Justin \\\\address\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String listPatientUserInput6 \u003d \"list\\\\\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(listPatientUserInput1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type1 instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(listPatientUserInput2);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type2 instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(listPatientUserInput3);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type3 instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type4 \u003d p.parseCommand(listPatientUserInput4);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type4 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type5 \u003d p.parseCommand(listPatientUserInput5);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type5 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type6 \u003d p.parseCommand(listPatientUserInput6);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type6 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Unknown command\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_helpCommand() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String helpUserInput1 \u003d \"help\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String helpUserInput2 \u003d \"       help\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String helpUserInput3 \u003d \"help          \\\\name Justin \\\\age 23 \\\\address pasir ris\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String helpUserInput4 \u003d \"elp\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String helpUserInput5 \u003d \"addp \\\\name Justin \\\\age 23 \\\\address pasir ris \\\\phone 999\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String helpUserInput6 \u003d \"editp \\\\sam \\\\age 99 \\\\address sentosa cove\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(helpUserInput1);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type1 instanceof HelpCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(helpUserInput2);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type2 instanceof HelpCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(helpUserInput3);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type3 instanceof HelpCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type4 \u003d p.parseCommand(helpUserInput4);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type4 instanceof HelpCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type5 \u003d p.parseCommand(helpUserInput5);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type5 instanceof HelpCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type6 \u003d p.parseCommand(helpUserInput6);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type6 instanceof HelpCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Unknown command\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 227
    }
  },
  {
    "path": "src/test/java/seedu/duke/record/AppointmentTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "class AppointmentTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testGetDate() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Appointment appointment \u003d new Appointment(\"22 July 2020\", \"12.30pm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"22 July 2020\", appointment.getDate());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testGetTime() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Appointment appointment \u003d new Appointment(\"22 July 2020\", \"12:30pm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"12:30pm\", appointment.getTime());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Appointment appointment \u003d new Appointment(\"22 July 2020\", \"12.30pm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"{[Date]: 22 July 2020 |[Time]: 12.30pm}\", appointment.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 25,
      "JustinnT": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/record/PatientTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "class PatientTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"61234567\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"peony\", patient.getName());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testGetAge() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"61234567\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(33, patient.getAge());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testGetAddress() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"61234567\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"clementi road\", patient.getAddress());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testGetContactNumber() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"61234567\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"61234567\", patient.getContactNumber());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"john\", 45, \"jail\", \"91234567\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"{[Name]: john | [Age]: 45 | [Address]: jail | [Contact Number]: 91234567}\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "                patient.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testSetName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setName(\"peony\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"peony\", patient.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testSetAge() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setAge(33);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(33, patient.getAge());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testSetAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setAddress(\"clementi road\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"clementi road\", patient.getAddress());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testSetContactNumber() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setContactNumber(\"11111111\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"11111111\", patient.getContactNumber());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testSetPatientInfo() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setPatientInfo(\"chucky\", 11, \"im going to kill you\", \"44444444\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"chucky\", patient.getName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(11, patient.getAge());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"im going to kill you\", patient.getAddress());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"44444444\", patient.getContactNumber());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 79,
      "JustinnT": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/AppointmentListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "class AppointmentListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private AppointmentList testAppointmentList \u003d new AppointmentList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private Appointment testAppointment1 \u003d new Appointment(\"april 1\", \"13:00\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private Appointment testAppointment2 \u003d new Appointment(\"jun 4\", \"14:00\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private Appointment testAppointment3 \u003d new Appointment(\"oct 11\", \"15:00\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    void appointmentListTest_Add() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(3, testAppointmentList.getTotalAppointments());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    void appointmentListTest_GetInfo() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(\"april 1\", testAppointmentList.getAppointmentRecord(0).getDate());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(\"13:00\", testAppointmentList.getAppointmentRecord(0).getTime());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    void appointmentListTest_Delete() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.removeAppointmentRecord(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(2, testAppointmentList.getTotalAppointments());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(\"jun 4\", testAppointmentList.getAppointmentRecord(0).getDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "brandoncjh": 38
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/PatientListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "class PatientListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private PatientList testPatientList \u003d new PatientList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private Patient testPatient1 \u003d new Patient(\"alice\", 11, \"bukit timah\", \"61111111\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private Patient testPatient2 \u003d new Patient(\"bob\", 22, \"novena\", \"822222222\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private Patient testPatient3 \u003d new Patient(\"chong\", 33, \"pasir ris\", \"93333333\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    void patientListTest_Add() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(3, testPatientList.getTotalPatients());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    void patientListTest_GetInfo() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(\"alice\", testPatientList.getPatientRecord(0).getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(11, testPatientList.getPatientRecord(0).getAge());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(\"bukit timah\", testPatientList.getPatientRecord(0).getAddress());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(\"61111111\", testPatientList.getPatientRecord(0).getContactNumber());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    void patientListTest_Delete() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.removePatientRecord(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(2, testPatientList.getTotalPatients());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(\"bob\", testPatientList.getPatientRecord(0).getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "brandoncjh": 40
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "123123"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "test"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "test"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "tset"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "p"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "p"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "p"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 10
    }
  }
]
