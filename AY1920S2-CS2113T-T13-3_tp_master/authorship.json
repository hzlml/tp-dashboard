[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    archiveBaseName \u003d \"hams\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    archiveVersion \u003d \"2.1.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    enableAssertions \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 2,
      "thanhduc2000": 1,
      "-": 38
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nguyen Thanh Duc | [Github](https://github.com/thanhduc2000) | [Portfolio](team/ducng.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Justin Tan | [Github](https://github.com/JustinnT) | [Portfolio](team/justinnt.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Brandon Chong | [Github](https://github.com/brandoncjh) | [Portfolio](https://linkedin.com/in/brandoncjh)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Andy Aw Bo Yang | [Github](https://github.com/andy-aw-why) | [Portfolio](team/andy-aw-why.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Samantha Goh | [Github](https://github.com/yukilite) | [Portfolio](team/yukilite.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "JustinnT": 4,
      "Yukilite": 1,
      "brandoncjh": 1,
      "-": 4,
      "andy-aw-why": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "# Table of content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "\u003c!-- TOC --\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    + [1.1. Purpose](#11-purpose)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    + [1.2. Product Scope](#12-product-scope)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - [1.2.1. Target User Profile](#121-target-user-profile)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - [1.2.2. Value Proposition](#122-value-proposition)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    + [1.3. Definitions](#13-definitions)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* [2. Design \u0026 Implementation](#2-design--implementation)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    * [2.1. Project Overview](#21-project-overview)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        * [2.2. Module Overview](#22-module-overview)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            * [2.2.1. Record module ](#221-sam-record-module)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            * [2.2.2. Converter module ](#222-converter-module)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            * [2.2.3. BRANDON storage module ](#223-brandon-storage-module)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            * [2.2.4. Command module ](#224-command-module)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            * [2.2.5. Parser Module ](#225-parser-module)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "                * [2.2.5.1. Object creation and input interpretation](#2251-object-creation-and-steps-in-input-interpretation)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "                * [2.2.5.2. Design Considerations ](#2252-design-considerations)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* [3. User Stories](#3-user-stories)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* [4. Non-functional requirements](#4-non-functional-requirements)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* [5. Instructions for manual testing](#5-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + [5.1, Startup, shutdown and restart](#51-startup-shutdown-and-restart-with-saved-list)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + [5.2. Adding a patient](#52-adding-a-patient)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + [5.3. Deleting a patient](#53-delete-a-patient)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "\u003c!-- TOC --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### 1.1. Purpose"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "This document specifies the architecture and software designs for "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Hospital Administrative Management System (HAMS)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### 1.2. Product Scope"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "#### 1.2.1. Target User Profile"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "The intended audience of this documentation are the developers, designers, software testers,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "operators and maintenance engineers. The below table summarizes the purposes of reading for each "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "audience."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|Role|Purpose|"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|---------|-------|"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|Developers \u0026 Designers| To understand the architecture and follow the design to build the system|"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|Software testers| To understand the internals of the system so as to test more effectively|"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|Operators| To improve productivity while using the system on a daily basis|"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|Maintenance Engineers| To understand how the system was built in order to perform enhancement or re-engineering work|"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "#### 1.2.2. Value Proposition"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "**TODO {Describe the value proposition: what problem does it solve?}**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### 1.3. Definitions"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "**TODO**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* *HAMS* - Short for Hospital Administrative Management System."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* *SAM* - Short for Stupendously AwsoMe, an acronym to describe the records module."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* *BRANDON* - Short for BRillant Ahead of its time Neat Dainty OrigNal, it is an acronym to describe the custom "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "implementation of the save file structure. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "## 2. Design \u0026 Implementation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### 2.1 Project overview"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "HAMS is built using java. Under java\u0027s write once run anywhere, HAMS can be built on any platform including Windows,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "MAC-OS and Linux. When running locally on these system, HAMS uses as custom save configuration called "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "BRillant Ahead of its time Neat Dainty OrigiNal (BRANDON) for loading and saving data. This allows HAMS\u0027 internal "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "list to be modified by operators before and during run time. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### 2.2 Module Overview"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "The major code can be broken down into modules. The below table is the breakdown of the module\u0027s custom"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "name and a summarized purpose."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "**TODO**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|Module name|Purpose|"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|---------|-------|"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "|Records|Contains and provides access to user information|"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "|Converter|Formats user input| "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|BRillant Ahead of its time Neat Dainty OrigiNal (BRANDON) **storage**|?|"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|Commands|Facade classes that deals with input so that different classes can interact with each other|"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|Parser|Parses the user input for command execution|"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "#### 2.2.1 Record module"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "The record module consists of 2 classes which represent the patients information and appointment details. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "As a reflection of real world objects, the Patient\u0027s class purpose is to store the particulars of a person while the "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Appointment\u0027s class is to store the date-time data. "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Thus, the rationale of both classes can be grouped as follows:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "\u003e As a reflection of real world entities, to create, store, and retrieve relevant information about the object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Following the above purpose, both classes consist of only getter and setter methods. This would ensure a contiguous "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "flow in logical executions as these methods can be called whenever necessary."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "##### 2.2.1.1 Process of Object Creation"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Due to the nature of the above classes containing only getter and setter methods, following how the components interact "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "with each other would provide more accuracy in understanding how these classes are called and the role of its "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "methods. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "To illustrate, the below example is used:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* editp \\index 1 \\name Justin \\age 69 \\Pasir Panjang"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "![](images/SD_Patient.png)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Upon startup, objects from ui, parser and storage are created. Prompted for user input, Duke receives the \"editp\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "command which is forwarded to the parser to be interpreted respectively. Once the `EditPatientCommand` object is "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "created, it retrieves the patient index to edit the existing patient information from the patientList. "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "The `Patient` class is called by its setter method, `setPatientInfo()`, to update the fields as provided by the user. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "This ensures that the encapsulated variables such as age, name, contact number and address are not only enforced but"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "also protected. "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "##### 2.2.1.2 Design Considerations"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "###### Aspect: Data Type for Appointment\u0027s Date and Time"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "+ Alternative 1 (current choice): Store as a String"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        - Easier implementation"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        - Greater user flexibility"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        -  Cannot sort if needed"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "+ Alternative 2: Store as Date"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        - Has flexibility to parse or format date using existing methods available for use."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        - Immutable-value classes mean it is not thread-safe (using Java.util.SimpleDateFormat)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "#### 2.2.2 Converter Module"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "The converter module consists of one class which converts the format of date and time using a custom format defined by"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "special formatting characters (ie. SimpleDateFormat). This class is primarily used to format a user-input date and time"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "in the `Appointment` class. As illustrated below, its methods are called during the creation of the `Appointment`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "object constructor. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "![](images/SD_Converter.png)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "#### 2.2.3 BRANDON storage module"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The Storage module consists of 3 different classes. "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The PatientList and AppointmentList classes act as data structures to store the records of Patient and Appointment "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "objects respectively. They function as ADTs, where various commands from Command objects can manipulate the records within."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The Storage class manages the load and save operations involving the PatientList and PatientList class. "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "These operations are usually invoked on startup, whenever changes are made to the ADTs and before exiting the program."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The class diagram for the storage module is as seen below: "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "![](images/storageclass.PNG)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "On startup, Duke invokes the loadSavedAppointment() and loadSavedPatient() methods in Storage. This allows the program "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "to retrieve previously stored data from a .txt file and convert it into the static AppointmentList and PatientList objects for use"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "within the program. "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The Storage object creates a Scanner object that will parse individual lines in the .txt file, convert them into"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "new Appointments, and then add them to an ArrayList called `appointmentListToReturn`. This `appointmentListToReturn` will be passed back to Duke to"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "construct the static AppointmentList. The sequence diagram is shown below:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "![](images/loadsavedappt_seq.PNG)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "![](images/loadsavedappt_ref1.PNG)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "When the static AppointmentList or PatientList has changes, or the program is exiting, saveAppointmentList() or savePatientList() "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "is invoked respectively. This allows the Storage object to back up existing records to a local .txt file."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The Storage object will create a FileWriter object called `fw`. The command will then iterate through the existing AppointmentList"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "and parse each Appointment within, converting it to a string. `fw` then writes this string to the .txt file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The sequence diagram is shown below:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "![](images/saveapptlist_seq.PNG)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#####2.2.3.1 FindPatient/FindAppointment"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Design considerations for findPatient:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "- general search"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "- include multiple fields in search"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Design considerations for findAppointment:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "- using specified formats for date and time, only allow one to be searched at any time"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "- general search"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "#### 2.2.4 Command module "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "The command module consist of 11 different classes, where each class does a different command by itself. "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "These classes allows the patients and appointments to be added into HAMS, allows the updating of patient and "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "appointment details, allows the admin to delete patients and appointment information and allows of listing of the "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "different patients and the appointments in HAMS. In addition, the classes also deals with displaying the list of "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "commands and as well as to allowing HAMS to exit."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/Command%20class%20diagram.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "All of these command classes inherits from the abstract ```Command``` class. Likewise, the execute function of each "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "command  class is also inherited from the abstract ```Command``` class\u0027s ```execute(Ui ui, Storage storage)``` function "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "too. Every command class (other than the  ```ExitCommand``` and ```HelpCommand```) are actually façade classes that "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "creates the connection from the ```Main``` class to the other classes required such as ```Storage``` class,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```PatientList``` class and the ```Appointment``` class to name a few. "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "##### 2.2.4.1 AddPatientCommand Class"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "To add a patient, the ```AddPatientCommand``` class is used. For this ```AddPatientCommand``` class, it serves as the "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "façade class for the ```Main```, ```Patient``` , ```PatientList``` and the ```Storage``` class to interact with one "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "another. Also, to uniquely identify a patient, an unique patientId number is assigned to each patient when they are first added into the patient list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/AddPatientDiagram.png)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "1. The ```AddPatientCommand``` class object will first be created by the ```Parser``` object, where the information "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "regarding the patient to be added will be stored in a Map, where the ```AddPatientCommand``` class object would read the Map content and store the information about the patient in said ```AddPatientCommand``` class object. "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "For the patient Id number, it will call upon the static class ```patientIdManager``` to get its unique patient id number. This unique Id number will be used later in the ```Patient``` object creation too."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "2. When the "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```execute(Ui ui, Storage storage)``` command is called, the  ```AddPatientCommand``` would first make use of the "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```Patient``` class constructor to create a new ```Patient``` object based on the information stored back in step 1. "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "3. After which, it would then call the "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```PatientList```’s ```getPatientList()``` command to get the ```List``` patient list object such that the ```Patient``` "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "object created beforehand can directly be inserted into the patient list. "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "4. After adding the patient into the patient list "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "object, the ```Storage```’s ```savePatientList()``` function will be called next so that the newly update list of "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```patient``` is saved as offline data.  "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "5. When the above operation is successful, it will call upon the ```Ui``` class’ "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```showPatientAddSuccess()``` function to display the success of adding the ```Patient``` object into the patient list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "If the supplied patient age is a word or is missing, the age will be set to ```-1```. This value is chosen to indicate "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "that there isn’t a valid age set. Thus, when displaying the age, if ```-1``` is encountered, show age as an empty string "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "instead."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Below shows the sequence diagram for ```AddPatientCommand``` class"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/AddPatientCommandSequence.png)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/AddPatientCommandSequenceAddIntoPatientList.png)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/AddPatientCommandSequenceAutoSavePatientList.png)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "##### 2.2.4.2 AddAppointmentCommand Class"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "To add an appointment, the ```AddAppointmentCommand``` class is used. For this ```AddAppointmentCommand``` class, it "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "serves as a façade class for the ```Main```, ```Appointment```, ```AppointmentList``` and the ```Storage``` class to "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "interact with one another. "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/AddAppointmentDiagram.png)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "1. Like the ```AddPatientCommand``` class, the ```AddAppointmentCommand``` object is first created by the ```Parser``` "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "object, where the information of the appointment is again stored in a Map that the ```AddAppoinmentCommand``` object would read from. "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Said information will be stored in the ```AddAppoinmentCommand``` object"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "2. When "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "the ```Main``` calls ```execute(Ui ui, Storage storage)```, the ```AddAppointmentCommand``` class would call upon the "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```Appointment``` class to make an ```Appointment``` Object. Note that in the the constructor of ```AddAppointment``` it also checks to see if the patient id is a patient id that actually exist (as in a patient has that patient id"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "). This check is done by calling the ```checkPatientIdUsed``` method of ```PatientIdManager``` class. If the patient id"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " supplied with the appointment detail does not belong to any of the present patients, the ```AddAppointmentCommand``` "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " constructor will **not** create the ```Appointment```  and will show an error instead. The ```Appointment``` object"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  will only be created if the patient id that is supplied exists (as in one of the patient has said patient id)."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "3. After which, the ```AddAppoinmentCommand``` object will "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "call upon the ```AppointmentList``` object to obtain the list of ```Appointments``` (get the ```List``` object that "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "represents the list of appointments by ```AppointmentList```’s ```getAppointmentList()``` command) so that it can "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "directly add the new ```Appointment``` object into the appointment list. "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "4. Finally, it will call upon the ```Storage``` "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "class’s ```saveAppoinmentList()``` function to save the updated appointment list. "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "5. Upon successfully adding the "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```Appointment``` object into the appointment list, it will call upon the ```Ui``` class’ "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```showAppointmentAddSuccess()``` function to display the success of adding the ```appointment``` into the appointment "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "list."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Below shows the sequence diagram for ```AddAppointmentCommand``` class:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/AddAppointCommandSequence.png)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/AddAppointCommandSequenceAddNewAppointment.png)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/AddAppointCommandSequenceAutoSavingAppointList.png)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "##### 2.2.4.3 ListPatientCommand Class"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "To display the list of patients, the ```ListPatientCommand``` class is called. This class serves as a façade class of "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```Main``` and ```Ui``` to interact with each other. "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/ListPatientDiagram.png)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "1. This class\u0027 object is first created by the ```Parser``` class, where it is then returned to the ```Main``` class to have its"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```execute(Ui ui, Storage storage)``` function be called. "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "2. When the ```Main``` class calls the "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```execute(Ui ui, Storage storage)``` function, ```ListPatientCommand``` will call upon the ```Ui```’s "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```showEntirePatientList()``` function to display the list of patients."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Below shows the sequence diagram for ```ListPatientCommand``` class"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/ListPatientCommandSequence.png)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "##### 2.2.4.4 ListAppointmentCommand Class"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "To display the list of appointments, the ```ListAppointmentCommand``` class is called. This class serves as a façade "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "class of ```Main``` and ```Ui``` to interact with each other. "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/ListAppointmentDiagram.png)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "1. This class\u0027 object is first created by the ```Parser``` class, where it is then returned to the ```Main``` class to "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "have its ```execute(Ui ui, Storage storage)``` function be called. "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "2. When the ```Main``` class calls the "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```execute(Ui ui, Storage storage)``` function, ```ListAppointmentCommand``` will call upon the ```Ui```’s "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```showEntireAppointmentList()``` function to display the list of appointments."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Below shows the sequence diagram for ```ListAppointmentCommand``` class"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](images/ListAppointmentCommandSequence.png)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "#### 2.2.4.5 PatientIdManger Class"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "The ```PatientIdManager``` class manages the patient ids. It helps to generate unique patient ids for each new"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " patient. The patient id chosen can either be a new number or a patient id number that is reused from a deleted"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  patient. By reusing the patient id number from deleted patients, it allows us to have more patient id to use before"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   the patient id number runs out."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Not only that, it ia also able to check if a patient id exist (as in is there any patients with a specific"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " patient id). This is useful because it prevents the user from adding a new appointment for a non-existing patient."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " ![](images/PatientIdManagerCommandDiagram.png)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Other than the getter and the setter methods, the most important methods in ```PatientIdManager``` are"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " ```getNextPatientId()```, ```addBackPatientId()```, ```checkPatientIdUsed()``` and ```clearPatientId()```"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " For ```checkPatientIdUsed()```, its purpose is to see if a patient Id is a currently used patient id (as in there is"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " a patient currently that has this patient id). It achieves this using a hash table called ```patientIdMap```, where the"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  key is the patient id"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  number and its value is either null (this patient id has not been used) or 1 (this patient id has been used"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  ). Whenever an appointment is added into HAMS, HAMS needs to ensure that the appointment\u0027s patient id corresponds"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   to an actual patient in HAMS. This method helps by checking if the patient id supplied in the appointment entry"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    belongs to an actual patient by checking the key-value pair in the ```patientIdMap``` and see if the patient id\u0027s"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     value is 1 in said map"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " To summarize ```checkPatientIdUsed()```"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " 1) Get the patient id to check."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " 2) Let the patient id be the key. See the patient id\u0027s value in the ```patientIdMap``` hash table. If it is 1"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " , return true (patient currently exist), else return false."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " ```checkPatientIdUsed()``` is used by the ```addAppointmentCommand``` class when adding an appointment to check if"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  the patient id supplied belongs to a real patient currently in HAMS."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "For ```addBackPatientId()```, its purpose is to save the patient id of deleted patients by storing them in the"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " reusable patient id queue ```nextNumberQueueThing```. This will be useful for the ```getNextPatientId()``` method to get a patient id from a deleted patient. We also need to update the ```patientIdMap``` to reflect the changes made."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " To summarize ```addBackPatientId()```"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " 1) Get the deleted patient id."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " 2) Check to see if the patient id is a valid id. A valid patient id is an id that does not exist in the reusable"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  patient id queue and its value cannot be below 0 and (equal and above) ```nextTopNewNumber```."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " 3) If the patient id is a valid id, then add it in the reusable patient id queue. Else, ignore it."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " 4) Once it is deleted, update the ```patientIdMap``` map to reflect that the patient id now do not belong to any patient currently (set the corresponding value to null in the map)."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " ```addBackPatientId()``` is used by the ```deletePatientClass``` when deleting a patient to store the deleted"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  patient id number."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "For ```getNextPatientId()```, its purpose is to supply a new patient id for a patient, be it a newly created id or an"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " id from a deleted patient (reusing id). This is achieved with a combination of a queue (called the"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  ```nextNumberQueueThing```) that serves to store"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  the"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  list of"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  patient ids from deleted patients and an integer that serves to represent the next highest number to use if there"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   are no patient ids that can be reused. "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "To elaborate, whenever a patient is deleted, we want to store its patient id somewhere since it can be reused for a"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " new patient (as it will still retain the uniqueness property of the patient id). Hence, a way to store those deleted"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  patient\u0027s patient id is to store them in a queue such that we can call upon the queue for any reusable patient ids"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  . We use a queue because inserting and popping elements in a queue is O(1) time, which makes it fast. If there are"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   no elements in the queue (as in we have used up all or there isn\u0027t any reusable patient id present), then there"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    exist another integer (called ```nextTopNewNumber```) that represents a new patient id that has not been used by"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     any patient before. The value of ```nextTopNewNumber``` will be used for the patient id number if the queue is"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "      empty. After which, the ```nextTopNewNumber``` value get added by 1."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "For example, when we just started HAMS and there has not been any deletion of patient thus far, the reusable"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " patient id queue is empty. By default, ```nextTopNewNumber``` starts from 0. If we were to add 3 patients, then the"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  first patient will get patient id 0 (which is the value of ```nextTopNewNumber```) currently (we use the value of"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   ```nextTopNewNumber``` if there isn\u0027t any elements present in the resusable patient id queue), while the second"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   patient gets the value of current ```nextTopNewNumber``` (which is 0) + 1, making patient number 2 has patient id"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    1 and so on and so forth. The third patient will get patient id number 2. However, lets say we deleted patient"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     number 2 and added a new patient (patient number 4, then patient number 2\u0027s patient id (patient id 1) will be"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "      stored in the queue. For the new patient added (patient number 4), instead of using the current"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       ```nextTopNewNumber``` (which is 2), we will use"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       the patient number present in the queue, which is 1. Thus, patient number 4 has the patient id of 1."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Finaly, once we chosen a number, we need to update ```patientIdMap``` map to reflect that there is now a new patient id that is used by a patient"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "One property of ```nextTopNewNumber``` is that all patient id numbers in the queue should be lesser than"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " ```nextTopNewNumber``` (```nextTopNewNumber``` serves as the current upper-bound of the possible patient id). There"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  will never exist a reusable patient id number (or any patient id number for that matter) that is bigger than"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   ```nextTopNewNumber```."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "To summarize ```getNextPatientId()```"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "1) Check if the reusable patient id queue is empty"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "2) If it is not empty, we take a patient id from the queue."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "3) On the other hand, if it is empty, we use the value of ```nextTopNewNumber``` for the patient id. We then increase"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " the value of ```nextTopNewNumber``` by 1."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "4) Once we decided on which patient id to use, update the ```patientIdMap``` map to reflect that the patient id now belongs to a patient (set the corresponding value in the map to 1)."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```getNextPatientId()``` is used by the ```addPatientCommandClass``` when adding a patient to get a unique patient id"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " for the new patient."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Lastly, for ```clearPatientId()```, it resets the value of  ```nextTopNewNumber```, clears the reusable patient id queue"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " ```nextNumberQueueThing``` and finally clears the hash table ```patientIdMap```. This method serves to reset the"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  ```patientIdManager``` back to its default state."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```clearPatientId()``` is used by both ```ClearPatientCommand``` and ```ClearAllCommand``` class to reset the"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " ```patientIdManager``` state since both commands clears all the current patients in HAMS, which meant that all the"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  patient id in HAMS must be reset as there are no patients left."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "##### 2.2.4.6 Design considerations"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "For the 5 classes listed, there were some other design considerations that was discussed for these 5 classes. Here"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ", we will discuss the other choices and the pros and cons for them."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "###### 2.2.4.6.1 Aspect: Facade classes"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 1 (current choice): Making all 4 classes facade classes"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   * Pros: "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Stronger Single Responsibility Principle (SRP) and Separation of Concerns Principle (SoC)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   * Cons:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Higher dependencies and couplings on the other classes to work."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 2: Put the actual adding logic into the classes"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Weaker dependency and couplings on the other classes"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Lower SRP and (SoC)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "###### 2.2.4.6.2 Aspect: Autosaving or no"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 1 (current choice): Allow for autosaving after each command execution"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Allow for recovery when crashing"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Negligible performance effect on higher end computer system"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Since saving is writing to disk, it may be an expensive process for weaker computer system. Weaker computer system may be slowed down by the constant saving"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 2: Save only when exiting HAMS"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Faster, especially for weaker computer systems"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - No recovery (or rather, no recovery for recent information) when HAMS crashes "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "###### 2.2.4.6.3 Aspect: Generation of Patient Id"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 1 (current choice): Allow the reuse of the patient Id from deleted patients"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Allow for reuse, which prevents the patient Id number from running out."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Slightly more complicated implementation. Also it means that there is more information that is required to be saved (such as the list of patient Id to be reused) when HAMS shuts down."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 2: Always pick a new number (don\u0027t reuse deleted patient Id number)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Easier to implement and keep track of. Also, it does not need to save much more information about the patient Id numbers (just need to save the last number assigned)."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       "
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Much more likely to run out of patient id numbers, especially if patients are getting added and deleted from HAMS continuously and consecutively."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "###### 2.2.4.6.4 Aspect: Deciding how to reuse Patient Id"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 1 (current choice): For reusable patient id, just choose the patient id number that have not been"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " assigned the longest"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Easy to implement (just use a Queue) and ensures an O(1) time."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Patient id number is not really in sequence (it is possible for a bigger patient id number might be assigned"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "         first before a smaller patient id number). As a result, the new patient id number is not that predictable"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "          (unless you are keeping track of which patient id numbers are deleted first)."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 2: Sort the reusable patient id first such that the smallest patient id is always reused first "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Patient id number is in sequence (always assign the smaller patient id number first), which seems to make"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "         it easier to predict the next patient\u0027s patient id number."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Sorting is O(n log n) time, hence making it slightly slower than current implementation."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### 2.2.4.6 EditAppointmentCommand Class"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 1 (current choice): For reusable patient id, just choose the patient id number that have not been"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " assigned the longest"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Easy to implement (just use a Queue) and ensures an O(1) time."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Patient id number is not really in sequence (it is possible for a bigger patient id number might be assigned"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "         first before a smaller patient id number). As a result, the new patient id number is not that predictable"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "          (unless you are keeping track of which patient id numbers are deleted first)."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 2: Sort the reusable patient id first such that the smallest patient id is always reused first "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Patient id number is in sequence (always assign the smaller patient id number first), which seems to make"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "         it easier to predict the next patient\u0027s patient id number."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Sorting is O(n log n) time, hence making it slightly slower than current implementation."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "#### 2.2.4.7 EditAppointmentClass"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "To edit an appointment, the ```EditAppointmentCommand``` class is used. For this ```EditAppointmentCommand``` class, it "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "serves as a facade class for the ```Main```, ```Appointment```, ```AppointmentList```, ```Ui``` and the ```Storage``` class to "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "interact with one another. "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "1. The ```EditAppointmentCommand``` class is processed by ```Parser```"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "2. When "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "the ```Main``` calls ```execute(Ui ui, Storage storage)```, the ```EditAppointmentCommand``` class would call upon the "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```Appointment``` class to make an ```Appointment``` Object. "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "3. After which, the ```EditAppoinmentCommand``` object will  call upon the ```AppointmentList``` object to get the record "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "of the record of the appointment based on the index with ```getAppointmentRecord``` ."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "4. After that, ```EditAppoinmentCommand``` will  call the ```setAppointmentInfo``` method from ```Patient`` to update the"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "appointment."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "5. The ```AppointmentList``` will be updated with the newly updated appointment."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "6. Finally, it will call upon the ```Storage``` class’s ```saveAppoinmentList()``` function to save the updated appointment list. "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "7. Upon successfully editing the "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```Appointment``` object into the appointment list, it will call upon the ```Ui``` class’ "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```showUpdateAppointmentSuccess()``` function to display the success of adding the ```appointment``` in the appointment "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "list."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Below shows the sequence diagram for ```EditAppointmentCommand``` class."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### 2.2.4.7 EditPatientCommand CLass"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "To edit an appointment, the ```EditPatientCommand``` class is used. For this ```EditPatientCommand``` class, it "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "serves as a facade class for the ```Main```, ```Patient```, ```PatientList```, ```Ui``` and the ```Storage``` class to "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "interact with one another. "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "1. The ```EditPatientCommand``` class is processed by ```Parser```"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "2. When "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "the ```Main``` calls ```execute(Ui ui, Storage storage)```, the ```EditPatientCommand``` class would call upon the "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```Patient``` class to make a ```Patient``` Object. "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "3. After which, the ```EditPatientCommand``` object will  call upon the ```PatientList``` object to get the record "
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "of the record of the patient based on the index with ```getPatientRecord``` ."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "4. After that, ```EditPatientCommand``` will  call the ```setPatientInfo``` method from ```Patient`` to update the"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "patient."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "5. The ```AppointmentList``` will be updated with the newly updated patient."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "6. Finally, it will call upon the ```Storage``` class’s ```savePatienttList()``` function to save the updated patient list. "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "7. Upon successfully editing the "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```Patient``` object into the appointment list, it will call upon the ```Ui``` class’ "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```showUpdatePatientSuccess()``` function to display the success of adding the ```patient``` in the appointment "
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "list."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Below shows the sequence diagram for ```EditPatientCommand``` class."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### 2.2.4.8 DeleteAppointmentCommand Class"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "To delete an appointment, the ```DeleteAppointmentCommand``` class is used. For this ```DeleteAppointmentCommand``` class, it "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "serves as a facade class for the ```Main```, ```Appointment```, ```AppointmentList```, ```Ui``` and the ```Storage``` class to "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "interact with one another. "
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "1. The ```DeleteAppointmentCommand``` class is processed by ```Parser```"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "2. When the ```Main``` calls ```execute(Ui ui, Storage storage)```, the ```DeleteAppointmentCommand``` class would call upon the "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```Appointment``` class to make an ```Appointment``` Object. "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "3. After which, the ```DeleteAppoinmentCommand``` object will  call upon the ```AppointmentList``` object to get the appointment"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "list with ```getAppointmentList()``` and remove the appointment record with given index from ```getAppointmentRecord()```"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "4. Finally, it will call upon the ```Storage``` class’s ```saveAppoinmentList()``` function to save the updated appointment list. "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "5. Upon successfully deleting the "
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```Appointment``` object into the appointment list, it will call upon the ```Ui``` class’ "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```showDeleteAppointmentSuccess()``` function to display the success of deleting the ```appointment```from the appointment "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "list."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Below shows the sequence diagram for ```DeleteAppointmentCommand``` class."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### 2.2.4.9 DeletePatientCommand Class"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "To delete an appointment, the ```DeletePatientCommand``` class is used. For this ```DeletePatientCommand``` class, it "
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "serves as a facade class for the ```Main```, ```Appointment```, ```AppointmentList```, ```Ui``` and the ```Storage``` class to "
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "interact with one another. "
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "1. The ```DeletePatientCommand``` class is processed by ```Parser```"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "2. When the ```Main``` calls ```execute(Ui ui, Storage storage)```, the ```DeletePatientCommand``` class would call upon the "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```Patient``` class to make a ```Patient``` Object. "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "3. After which, the ```DeletePatientCommand``` object will  call upon the ```PatientList``` object to get the patient"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "list with ```getPatientList()``` and remove the patient record with given index from ```getPatientRecord()```"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "4. Then it will go through all the items in ```AppointmentList``` with the patientId of the patient that has been deleted"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "4. Finally, it will call upon the ```Storage``` class’s ```savePatientList()``` function to save the updated patient list. "
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "5. Upon successfully deleting the ```Patient``` object from the patient list, it will call upon the ```Ui``` class’ "
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```showDeletePatientSuccess()``` function to display the success of deleting the ```patient```from the patient "
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "list."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Below shows the sequence diagram for ```DeletePatientCommand``` class."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### 2.2.4.10 ClearAllCommand Class"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "To clear both appointment list and patient list, the ```ClearAllCommand``` class is used. For this ```ClearAllCommand``` class, it "
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "serves as a facade class for the ```Main```, ```PatientList```, ```AppointmentList```, ```Ui``` and the ```Storage``` class to "
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "interact with one another. "
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "1. The ```ClearAllCommand``` class is processed by ```Parser```"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "2. When the ```Main``` calls ```execute(Ui ui, Storage storage)```, the ```ClearAllCommand``` class would call upon the "
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```PatientList``` and ```AppointmentList``` to clear all the items in both lists"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "3. It will call upon the ```Storage``` class’s ```savePatientList()``` and ```saveAppointmentList()```function "
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "to save the updated patient list and appointment list."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "4. Upon successfully clearing all the lists, it will call upon the ```Ui``` class’ ```showAllItemsDeleted()``` function "
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "to display the success of clearing all the items."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Below shows the sequence diagram for ```ClearAllCommand``` class."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### 2.2.4.11 ClearAppointmentCommand Class"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "To clear appointment list, the ```ClearAppointmentCommand``` class is used. For this ```ClearAppointmentCommand``` class, it "
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "serves as a facade class for the ```Main```, ```AppointmentList```, ```Ui``` and the ```Storage``` class to "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "interact with one another. "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "1. The ```ClearAppointmentCommand``` class is processed by ```Parser```"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "2. When the ```Main``` calls ```execute(Ui ui, Storage storage)```, the ```ClearAppointmentCommand``` class would call upon the "
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```AppointmentList``` to clear the items in appointment list."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "3. It will call upon the ```Storage``` class’s ```saveAppointmentList()```function to save the updated appointment list."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "4. Upon successfully clearing the list, it will call upon the ```Ui``` class’ ```showAppointmentsDeleted()``` function "
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "to display the success of clearing all the items in appointment list."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Below shows the sequence diagram for ```ClearAppointmentCommand``` class."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### 2.2.4.12 ClearPatientCommand Class"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "To clear patient list, the ```ClearPatientCommand``` class is used. For this ```ClearPatientCommand``` class, it "
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "serves as a facade class for the ```Main```, ```PatientList```, ```Ui``` and the ```Storage``` class to "
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "interact with one another. "
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "1. The ```ClearPatientCommand``` class is processed by ```Parser```"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "2. When the ```Main``` calls ```execute(Ui ui, Storage storage)```, the ```ClearPatientCommand``` class would call upon the "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "```PatientList``` to clear the items in patient list."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "3. It will call upon the ```Storage``` class’s ```savePatientList()```function to save the updated patient list."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "4. Upon successfully clearing the list, it will call upon the ```Ui``` class’ ```showPatientsDeleted()``` function "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "to display the success of clearing all the items in patient list."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Below shows the sequence diagram for ```ClearPatientCommand``` class."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### 2.2.4.13 HelpCommand"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "To see the help usage for the commands in HAMS, the ```HelpCommand``` class is used. For this ```HelpCommand``` class, it "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "serves as a facade class for the ```Main```, ```Ui``` class to interact. The purpose of the class is to print out the usage"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "for all the commands in HAMS through ```showHelpUsage()``` in ```Ui```."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Below shows the sequence diagram for ```HelpCommand``` class."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " "
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### 2.2.4.14 ExitCommand"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " "
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "To print the bye message for HAMS, the ```HelpCommand``` class is used. For this ```ClearPatientCommand``` class, it "
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "serves as a facade class for the ```Main```, ```Ui``` class to interact."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "1. The ```Main``` class will check whether ```isExit()``` is set to be true or not."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "2. ```Ui``` class\u0027 ```showByeMessage()``` method is used to print the bye message for users."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " "
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Below shows the sequence diagram for ```ExitCommand``` class."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "#### 2.2.5 Parser module"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "This section describes the implementation of Parser class, as well as the design considerations and rational behind the "
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "current implementation."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "The main purpose of the Parser class is as below."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "1.  To interpret user inputs so that the correct command can be executed "
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "2.  Functions as the first line to sanitize user input"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "As such, the Parser class only has one publicly callable method and that returns the command object for execution. "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "To assist the public method, Parser class has multiple private helper methods, as well as access to the Exception handler"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "to ensure that the user input is formatted correctly. This way, purpose 1 and 2 is satisfied. "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "##### 2.2.5.1 Object creation and steps in input interpretation"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "1.  The `Parser` object is first created in `Duke` class and subsequently used until program termination."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "2.  User input is received and handed over to `Parser` object for interpretation."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "3. In the `Parser` object, the type of command is first determined via helper method `getCommand(userInput)`."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + Example: `addp \\age 23 \\name Justin`, the `addp` command will be determined."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "4. The remaining fields will be recorded in a hashMap through either `fillPatientFields(userInput)` or `fillAppointmentFields(userInput)`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "depending on the command type in Step 3."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + The type of category of the command can be determined based on the last alphabet of the first word. "
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + The command `addp` has the last alphabet is `p`, `fillPatientFields()` will be called. "
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    Likewise, if it ise `adda`, it will be `fillAppointmentFields()`."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + Example: `addp \\name Sam \\age 18`, the method `fillPatientFields(userInput)` will be called. The hashMap will contain"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    age -\u003e 23, name -\u003e Sam. "
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "5. At the end of the execution, a reference to the command object will be returned. "
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e![](images/SD_parser/Capture2.JPG)"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e![](images/SD_parser/Capture.JPG)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram when `parseCommand(userInput)` is initially called"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/SD_parser/Slide1.JPG)"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for `addp`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/SD_parser/Slide2.JPG)"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for `editp`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/SD_parser/Slide3.JPG)"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for `deletep`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/SD_parser/Slide4.JPG)"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for `adda`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/SD_parser/Slide5.JPG)"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for `edita`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/SD_parser/Slide6.JPG)"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for `deletea`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/SD_parser/Slide7.JPG)"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram when it is an unknown command"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/SD_parser/Slide8.JPG)"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for the creation of the command Object"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/SD_parser/Slide9.JPG)"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for error checking when `DukeExpcetion` is called"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/SD_parser/Slide10.JPG)"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for calling an enum"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/SD_parser/Slide11.JPG)"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for error checking when `DukeExpcetion` is called"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/SD_parser/Slide12.JPG)"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e![](images/SD_parser/Capture3.JPG)"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|Enum|PatientFieldKeys|AppointmentFieldKeys"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|--------|-------|------|"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|.|INDEX|INDEX|"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|.|NAME|DATE|"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|.|AGE|TIME|"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|.|ADDRESS|.|"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|.|CONTACT_NUMBER|.|"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e![](images/SD_parser/Capture4.JPG)"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|DukeExceptions|checkFieldEmpty|checkIndexValidity"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|--------|-------|------|"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|.|Based on the above enum table, checks that at least 1 field  is provided. \u003cbr\u003e\u003cbr\u003eThrows NoFieldCommandException if all fields are empty|Check that the index provided is valid. \u003cbr\u003e\u003cbr\u003e If it is less than 0 or not an integer, throw InvalidIndex and IndexNotInteger respectively.|"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "##### 2.2.5.2 Design considerations"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "###### Aspect: Symbol for delimiter"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "+   Alternative 1 (current choice): Backslash `\\` is used. "
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    *   Pros: "
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Backslash is the least used symbol in the english language."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    *   Cons: "
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - More caution must be exercised to used backslash in computer language as REGEX uses it as a delimiter by"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          default."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          "
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - Might break the speed at which user type since backslash is located where it would be hard to reach with"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          regular typing. "
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "+   Alternative 2: Slash is `/` used."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - easier to access when typing"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - some people may have a slash in their legal name - `Suresh S/O Ravindran`"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     "
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "###### Aspect: Symbol for delimiter"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "+   Alternative 1 (current choice): Each command will call its own method to parse field. "
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    *   Pros: "
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Decouples commands from method, making the code more modular."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Increases testability, bugs found can be isolated to the individual command and method respectively"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Changes to one method will only affect the command calling it and vice-versa."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    *   Cons: "
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Code duplication will increase"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " "
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "+   Alternative 2: Every command calls a common method to parse the remaining fields. "
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Less code duplication"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Easier to understand code. "
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - Leads to tighter coupling"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   All command depends on this common method to parse fields, if the method changes, it may return the wrong"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        result for some commands. "
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "## 3. User Stories"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|v1.0|new admin assistant|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|v1.0|admin assistant|add upcoming appointments|set the patient\u0027s future appointments|"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|v1.0|admin assistant|obtain upcoming appointments|remind patients of their appointment|"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|v1.0|admin assistant|reschedule appointments|help the patient change his appointment dates|"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|v1.0|admin assistant|add and delete patient\u0027s address|update the information in the system|"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|v1.0|admin assistant|add and delete telephone number|contact the patient directly|"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|v1.0|admin assistant|have an interface|easily update the patient\u0027s personal information|"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|v1.0|admin assistant|register new patient\u0027s medical information|so that it can be stored and accessed whenever needed|"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "|v1.0|admin assistant|save my data on shutdown|continue my work the next day|"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|v2.0|busy admin assistant|immediately know if the patient is scheduled for today|so I can process them better|"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|v2.0|admin assistant|be able to find a specific patient|check their appointment details|"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|v2.0|admin assistant|clear my lists|keep my list organized when the appointment is over|"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "## 4. Non-Functional Requirements"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* HAMS should be usable with minimal training, all commands should be self-explanatory and viewing the in-application"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "help menu should be sufficient for basic usage. "
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* HAMS should be resistant to software crashes and if a crash does happens, the latest patient and "
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "appointment list should be saved. In addition, user should be able to manually save their work. "
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* Each function of HAMS can be executed in a single line."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "* HAMS should be fast and responsive"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "**TODO**"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "## 5. Instructions for Manual Testing"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "### 5.1 Startup, shutdown and restart with saved list."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    1. Download the latest release from [here](https://github.com/AY1920S2-CS2113T-T13-3/tp/releases)"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    2. Move the .jar to an empty folder"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    3. Open Command Prompt"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    4. In Command Prompt, change your current working directory to the folder containing the .jar using $ `cd \u003cPath of folder containing .jar\u003e`"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    5. Run the .jar using $ `java -jar hams-2.0.jar`"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    Expected: Shows a welcome screen for HAMS."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "2. Shutdown"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    1. Run the .jar file"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    2. Test case: `exit`"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    Expected: Bye message is printed and program closes."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " "
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "3. Restart with saved list"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    1. Run the .jar file"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    2. Add some patients and appointments."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    3. Restart the program"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    4. Test case: `listp`"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    Expected: Previous saved list should be shown."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "### 5.2 Adding a patient"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "1. Successfully adding a patient (All fields)"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    1. Run the .jar file."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    2. Test case: `addp \\name Justin \\age 23 \\address Pasir Ris \\phone 91234567`"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    Expected: Success message is printed. To double check, type `listp` and ensure that the test case"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    is inside."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "2. Successfully adding a patient (at least 1 field)"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    1. Run the .jar file."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    2. Test case: `addp \\name Sam`"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    Expected: Success message is printed. HAMS accept `addp` as long as 1 field is present. To double check, type `listp` and ensure that the test case"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    is inside."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "3. Unsuccessful add a patient  (no fields provided)"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    1. Run the .jar file."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    2. Test case: `addp`"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    Expected: Error message is printed. To double check, type `listp` and ensure that the test case"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    is **not** inside."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "### 5.3 Delete a patient"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "1. Deleting a patient "
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    1. Prerequisites: list all patients using `listp`. Multiple patients in list."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    2. Test case: `deletep \\index 1`"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    Expected: First patient in the list is deleted. "
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 196,
      "Yukilite": 65,
      "brandoncjh": 42,
      "thanhduc2000": 179,
      "-": 30,
      "andy-aw-why": 413
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "HAMS is a CLI-based medical facility administration system that assists in the maintenance of various medical records."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Its functionality has some resemblance to the Duke ChatBot, a CS2113 individual project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "HAMS is designed for administrative assistants in medical facilities, like hospitals or polyclinics, that prefer using CLI to keep track of various medical records and can type fast."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "andy-aw-why": 5
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "# User Guide For Hospital Management System v2.0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "# Table of content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "\u003c!-- TOC --\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "* [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    + [1.1. Starting HAMS](#11-starting-hams)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "* [2. Features](#2-features)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "* [3. Command Format](#3-command-format)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "* [4. Command Usage](#4-command-usage)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    + [4.1. Patient Commands](#41-patient-commands)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.1.1 Add new patient record](#411-add-a-new-patient-record)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.1.2 List all existing patient records](#412-list-all-existing-patients)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.1.3 Delete existing patient record](#413-delete-an-existing-patient)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.1.4 Edit existing patient record](#414-edit-an-existing-patient)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        + [4.1.5 Find existing patient record](#415-find-an-existing-patient)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        + [4.1.6 Clear all patient records](#416-clear-patient-records)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    + [4.2. Appointment Commands](#42-appointment-commands)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.2.1 Add new appointment record](#421-add-a-new-appointment-record)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.2.2 List all existing appointment records](#422-list-all-existing-appointments)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.2.3 Delete existing appointment record](#423-delete-an-existing-appointment)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        + [4.2.4 Edit existing appointment record](#424-edit-an-existing-appointment)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        + [4.2.5 Find existing appointment record](#425-find-an-existing-appointment)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        + [4.2.6 Clear all appointment records](#426-clear-appointment-records)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + [4.3 Clear all records](#43-clear-all-records)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + [4.4. Viewing help](#44-view-help)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + [4.5. Exiting the program](#45-exit-hams-program)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "* [5. Command Summary](#5-command-summary)  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "* [6. FAQ](#6-faq)  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003c!-- /TOC --\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "This document serves as a user guide for HAMS. It teaches the user how to install HAMS, describes the features of HAMS, "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "explains how HAMS can be used and finally answer some frequently asked questions about HAMS."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "HAMS is a CLI-based medical facility administration system that assists in the maintenance of various medical records. "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "HAMS is designed for administrative assistants in medical facilities, like hospitals or polyclinics, that *prefer using"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "CLI to keep track of various medical records* and *can type fast*."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "***"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "### 1.1 Starting HAMS"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "1. Ensure you have JDK 11 installed on your computer. You can download the installer for your OS from [here](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "2. Download the latest .jar file release for HAMS from [GitHub](https://github.com/AY1920S2-CS2113T-T13-3/tp/releases)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "3. Move the .jar to an empty folder."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "4. Open Command Prompt."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "5. In Command Prompt, change your current working directory to the folder containing the .jar using $ `cd \u003cPath of folder containing .jar\u003e`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "6. Run the .jar using $ `java -jar (latest version).jar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "***"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "## 2. Features"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### Keep track of different record types"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "HAMS provides you with an easy-to-use system that helps manage and keep track of two types of medical records: *Patients* and *Appointments*."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### View all your tasks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The `lista` or `listp` command that HAMS provides can display all the Appointment or Patient records within the system in a readable format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### Auto-save and store these records"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "HAMS has an auto-save feature which stores Patient and Appointments every time you add or modify them. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "With this feature, your tasks will be saved every time you leave the application and can be easily retrieved when you reopen the application subsequently."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "***"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "## 3. Command Format"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Words enclosed within angle brackets `[]` are the parameters to be supplied by the user. Other keywords stated are compulsory and they should be included."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "For example, in `adda \\date [date] \\time [time] \\pid [patient id]`, `adda` is the command keyword that adds an Appointment record. "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "`\\date` and `\\time` are compulsory labels to denoting what field the subsequent information belongs to."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "`[date]` is the date of the appointment to be supplied by you. `[time]` represents the time of the appointment to be supplied by you."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "A valid input would be `adda \\date 22/05/2020 \\time 1200 \\pid 1`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/command_format_hint.JPG)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/command_format_hint2.JPG)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/command_format_hint3.JPG)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "***"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "## 4. Command Usage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### 4.1 Patient Commands"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.1.1 Add a new Patient record"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "The program allows you to add a new Patient record to the current list of Patient records. Note that patient id"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " number (pid) is decided by HAMS and not the user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Format: `addp \\name [name] \\age [age] \\address [address] \\phone [phone]`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `addp` keyword"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\name` followed by the name of the patient "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\age` followed by the age of the patient"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\address` followed by the address of the patient"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\phone` followed by the contact number of the patient"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/addp_hint.JPG)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/patientid_hint.JPG)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/limit_warning.JPG)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/addp_format_no_value.JPG)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Examples of Usage"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "OK? |   Usage    |   Outcome "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "------------- | ------------- | ---------------"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK | `addp \\name Justin \\address Pasir Ris \\age 20 \\phone 98889888` | ![](images/addp%20success.PNG)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK | `addp \\age 20 \\phone 98889888 \\name Justin \\address Pasir Ris` | ![](images/addp%20success2.PNG)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "NOT OK | `addp` | ![](images/addp%20fail.PNG)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.1.2 List all existing Patients"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "The program allows you to list all existing Patients. The command simply contains the \u0027listp\u0027 keyword."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Format: `listp`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Is Patient list empty? |   Usage    |   Outcome   "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ":--------------------: | ---------- | ----------- "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "NO |`listp` | \u003cimg src\u003d\"images/listp.PNG\"\u003e  "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "YES | `listp` | \u003cimg src\u003d\"images/UG/clearp_success.JPG\" width\u003d\"600\"\u003e "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.1.3 Delete an existing Patient"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "The program allows you to delete an existing Patient record by its index in the list. "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Format: `deletep \\index [index number in list]`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `deletep` keyword"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\index` followed by the index number of the patient to be deleted "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/index_compulsory.JPG)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/deletep_editp_hint.JPG)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example of usage:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "OK? |   Usage    |   Outcome "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "------------- | ------------- | ---------------"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK | `deletep \\index 2` | ![](images/delete_success.PNG)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "NOT OK | `deletep \\index a` | ![](images/delete_fail.PNG)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.1.4 Edit an existing Patient"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "The program allows you to make changes to an existing Patient record by its index in the list. Note that you cannot"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " edit the patient id number."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Format: `editp \\index [index number in list] \\name [name] \\age [age] \\address [address] \\phone [phone]`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `editp` keyword"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\index` followed by the index number of the Patient record in the list"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\name` followed by the name of the patient"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\age` followed by the age of the patient"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\address` followed by the address of the patient"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\phone` the contact number of the patient"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/index_compulsory.JPG)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/editp_hint.JPG)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/patientid_hint.JPG)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/deletep_editp_hint.JPG)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/limit_warning.JPG)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/editp_format_no_value.JPG)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example List (Before)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " \u003cimg src \u003d\"images/Patient_list_before.PNG\" width \u003d \"600\"\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Examples of usage:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**Please refer to the above \"Before\" list to compare the changes.**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK? |   Usage    |   Outcome \u0026 After |"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "------------- | ------------- | --------------- |"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK | `editp \\index 2  \\name Lam \\phone 83487846` | \u003cimg src \u003d\"images/UG/editp_success1.JPG\" width \u003d \"600\"\u003e  \u003cimg src \u003d\"images/UG/editp_after.JPG\" width \u003d \"600\"\u003e "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK | `editp \\age 99 \\address Bedok \\phone 89993999 \\name Justin \\index 3` |  \u003cimg src \u003d\"images/UG/editp_success2.JPG\" width \u003d \"600\"\u003e \u003cimg src \u003d\"images/UG/editp_after1.JPG\" width \u003d \"600\"\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "NOT OK | `editp \\index a \\address Paris Ris \\phone 93489678` | \u003cimg src \u003d\"images/UG/editp_fail.JPG\" width \u003d \"600\"\u003e "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Final List "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003cimg src \u003d\"images/UG/Patient_list_after.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### 4.1.5 Find an existing patient"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "The program allows you to find to an existing Patient record based on a search value."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Format: `findp [search value]`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "* `findp` keyword"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "* `search value` followed by a search value."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/findp_hint.JPG)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/warning_casesensitive.JPG)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example list "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003cimg src\u003d\"images/UG/findp_patient_list.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Examples of usage: "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**Please refer to the example list above**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Does it exist in list? |   Usage    |   Outcome  |"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ":--------------------: | ---------- | ---------- |"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " YES |`findp kurumi` | \u003cimg src\u003d\"images/UG/findp_kurumi.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " NO | `findp ayame` | \u003cimg src\u003d\"images/UG/findp_nothing.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### 4.1.6 Clear patient records"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "The program allows you to clear the patient list. "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Format: `clearp`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e![](images/UG/clearp_warning.JPG)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example list"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003cimg src\u003d\"images/UG/findp_patient_list.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example of usage:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**Please refer to the example list above**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|   Usage    |   Outcome \u0026 After  |"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "-------------| ------------------ |"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`clearp` | \u003cimg src\u003d\"images/UG/clearp.JPG\" width\u003d\"600\"\u003e \u003cimg src\u003d\"images/UG/clearp_success.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "***"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### 4.2 Appointment Commands"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.2.1 Add a new Appointment record"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "The program allows you to add a new Appointment record to the current list of Appointment records. With the addition "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "of the `pid` field, it allows users to link the appointment to a specific patient. "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Format: `adda \\date [date] \\time [time] \\pid [patient id]`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `adda` keyword"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\date` followed by the date of the appointment"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\time` followed by the time of the appointment"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "* `\\pid` followed by a unique Patient ID (pid)."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/adda_hint.JPG)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/Warning_pid.JPG)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/appointment_invalid_date.JPG)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK? |   Usage    |   Outcome "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "--- | ---------- | -------------"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK  | `adda \\date 14/03/2020 \\time 1000 \\pid 1` | \u003cimg src \u003d\"images/adda_eg1.PNG\" width \u003d \"600\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "NOT OK | `adda \\date 14/03/2020` | \u003cimg src\u003d\"images/UG/adda_fail.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "NOT OK | `adda \\date 31/02/2020 \\time 1234 \\pid 1` | \u003cimg src\u003d\"images/UG/adda_fail_invalid_date.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.2.2 List all existing Appointments"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "The program allows you to list all existing Appointments. The command simply contains the \u0027lista\u0027 keyword."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Format: `lista`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Is Appointment list empty? |   Usage    |   Outcome "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ":------------------------: | ---------- | -------------"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "NO | `lista` | \u003cimg src \u003d\"images/UG/lista_not_empty.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "YES | `lista` | \u003cimg src \u003d\"images/UG/lista_empty.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.2.3 Delete an existing Appointment"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "The program allows you to delete an existing Appointment record by its index in the list. "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Format: `deletea \\index [index number in list]`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `deletea` keyword"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\index` followed by the index number of the Appointment to be deleted "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/index_compulsory.JPG)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/deletea_edita_hint.JPG)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Examples of Usage"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "OK? |   Usage    |   Outcome "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "------------- | ------------- | ---------------"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK | `deletea \\index 3` | \u003cimg src \u003d\"images/delete_eg1.PNG\" width \u003d \"600\"\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "NOT OK | `deletea \\index 999` | \u003cimg src \u003d\"images/delete_wrongeg1.PNG\" width \u003d \"600\"\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/deletea_hint.JPG)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "#### 4.2.4 Edit an existing Appointment"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "The program allows you to make changes to an existing Appointment record by its index in the list."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Format: `edita \\index [index number in list] \\date [date] \\time [time]`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `edita` keyword"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\index` followed by the index number of the Appointment in the list."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\date` followed by the date of the appointment "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `\\time` followed by the time of the appointment"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/adda_hint.JPG)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/deletea_edita_hint.JPG)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/index_compulsory.JPG)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/edita_hint.JPG)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/edita_warning.JPG)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example List (Before)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003cimg src \u003d\"images/edita_before.PNG\" width \u003d \"400\"\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**Please refer to the above \"Before\" list to compare the changes.**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK? |   Usage    |   Outcome \u0026 After |"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "------------- | ------------- | --------------- |"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK | `edita \\index 3 \\date 20/05/2021 \\time 2300` | \u003cimg src \u003d\"images/edita_eg1.PNG\" width \u003d \"600\"\u003e \u003cimg src \u003d\"images/edita_eg1after_crop2.PNG\" width \u003d \"600\"\u003e |  |"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK | `edita \\index 1 \\time 1300` | \u003cimg src \u003d\"images/edita_eg2.PNG\" width \u003d \"600\"\u003e \u003cimg src \u003d\"images/edita_eg2after-crop.png\" width \u003d \"600\"\u003e |  |                       "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "NOT OK | `edita` | \u003cimg src \u003d\"images/edita_error.PNG\" width \u003d \"600\"\u003e |   "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                 "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "##### Final list:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003cimg src \u003d\"images/edita_eg2after.PNG\" width \u003d \"400\"\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### 4.2.5 Find an existing Appointment"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "The program allows you to find to an existing Appointment record based on a search value."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Format: `finda [search value]`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "* `finda` keyword"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "* `search value` followed by a search value."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/findp_hint.JPG)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/finda_search_by_date.JPG)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/finda_search_by_time.JPG)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](images/UG/warning_casesensitive.JPG)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example list:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003cimg src \u003d\"images/UG/lista_not_empty.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**Please refer to the example list above**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Does it exist in list? |   Usage    |   Outcome  |"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ":--------------------: | ---------- | ---------- |"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "YES | `finda Fri` | \u003cimg src\u003d\"images/UG/finda_fri.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "NO | `finda Oct` | \u003cimg src\u003d\"images/UG/finda_nothing.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### 4.2.6 Clear appointment records"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "The program allows you to clear the appointment list. "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Format: `cleara`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "* `cleara` keyword"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e![](images/UG/cleara_warning.JPG)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example list"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " \u003cimg src\u003d\"images/UG/lista_not_empty.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " #### Example of usage:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " **Please refer to the example list above**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " |   Usage    |   Outcome \u0026 After  |"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " -------------| ------------------ |"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " `cleara` | \u003cimg src\u003d\"images/UG/clear_success.JPG\" width\u003d\"600\"\u003e \u003cimg src \u003d\"images/UG/lista_empty.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "***"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "## 4.3 Clear all records"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "The program allows you to clear all lists."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Format: `clearall`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "* `clearall` keyword"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e![](images/UG/clearall_warning.JPG) "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example list"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " \u003cimg src\u003d\"images/UG/findp_patient_list.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " \u003cimg src\u003d\"images/UG/lista_not_empty.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example of usage:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " **Please refer to the example lists above**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Is both list empty? |   Usage    |   Outcome \u0026 After  |"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ":------------------:| ---------- | ------------------ |"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " NO | `clearall` | \u003cimg src\u003d\"images/UG/clearall.JPG\" width\u003d\"600\"\u003e \u003cimg src\u003d\"images/UG/clearp_success.JPG\" width\u003d\"600\"\u003e \u003cimg src \u003d\"images/UG/lista_empty.JPG\" width\u003d\"600\"\u003e "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "### 4.4 View help"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "The \u0027help\u0027 keyword provides you with a list of valid commands, their functions and their proper usages."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/UG/help_part1.JPG)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](images/UG/help_part2.JPG)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "### 4.5 Exit HAMS program"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "This command exits the HAMS program and saves the current Patient/Appointment data into separate local save files (in"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " `/saves/appointments.txt` and `/saves/patients.txt` respectively. Also, the patient id state will also be saved in"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  `/saves/patientId.txt`). These files will be loaded to the program when it is run again subsequently."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "#### Example of usage: "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "`exit`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "##### Expected outcome: "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003cimg src \u003d\"images/exit_eg1.PNG\" width \u003d \"400\"\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "   Command    |   Description "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "   ------------- | ---------------"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`adda \\date [date] \\time [time] \\pid [pid]` |  Adds date and time of an appointment and links it to a patient based on their id"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "`addp \\name [name] \\age [age] \\address [address] \\phone [phone]` | Adds name, age, address, and contact number of patient"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`finda [search value]`| Searches through all appointment records for the search value"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`findp [search value]`| Searches through all patient records for the search value"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "`lista` | List all the appointments from the appointment\u0027s list"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "`listp` | List all the patients from the patient\u0027s list"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`cleara`| Clears all appointment records"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`clearp`| Clears all patient records"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`clearall`| Clears both appointment and patient records"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`deletea \\index [index number in list]` | Delete an appointment by the list\u0027s appointment number"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`deletep \\index [index number in list]` | Delete a patient by the list\u0027s patient number"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`edita \\index [index number in list] \\date [date] \\time [time]` | Edit date or time of an appointment by the list\u0027s appointment number"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`editp \\index [index number in list] \\name [name] \\age [age] \\address [address] \\phone [phone]` | Edit date or time of an appointment by the list\u0027s appointment number"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "`help` | Give you a manual on a list of valid commands and their usage"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "`exit` | Exit the program and save the task into an offline data file (in `/saves/appointments.txt` or `/saves/patients.txt`)"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "## 6. FAQ"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**Q**: Would my details be captured if I randomize the input order of the keywords?"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `addp \\phone 12345678 \\address NUS \\age 22 \\name John Doe`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `addp \\name John Doe \\address NUS \\ age 22 \\ phone 12345678`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**A**: Yes. The system is keyword-sensitive. Regardless of the order given, it stores the information within each command used respectively. Both examples provided above would result in the same information stored. "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "**Q**: Why does my patient list does not display any value in the age field?"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* `{[Name]: Tommy | [Age]:  | [Address]:  | [Contact Number]: 92331234}`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "**A**: The age supplied might not be in the correct format (eg age given is a negative number or as a string)."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**Q**: Why am I not able to find anything using finda or findp? "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**A**: Please note that all search values are case-sensitive. For example, `Sam` will not match with `sam`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "because of the first letter capitalization. "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**Q**: What is `pid` for in the command `adda`?"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**A**: `pid` stands for Patient ID, it is a unique ID tag to each patient. In order to link appointments "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "to the patient, the pid tag must be present. "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**Q**: I accidentally put in the wrong Patient ID when adding an appointment using `adda`. How can I change the patientID?"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**A**: Unfortunately upon entering the Patient ID in `adda`, there is no way of changing the Patient ID. Please remove the incorrect appointment and add the correct appointment in again."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### [Back to top \u0026#x2191;](#table-of-content)"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JustinnT": 264,
      "Yukilite": 54,
      "brandoncjh": 76,
      "thanhduc2000": 57,
      "-": 26,
      "andy-aw-why": 32
    }
  },
  {
    "path": "docs/team/andy-aw-why.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "# Andy Aw Bo Yang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Hospital Administrative Management System (HAMS) is a CLI-based medical facility administration system that is used for "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "maintaining medical records. It is written in Java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "- **Major enhancement 1:** Added the command classes for add patient (```addPatientCommandClass```), add appointment"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " (```addAppointmentCommandClass```), list patient (```listPatientCommandClass```) and list appointment"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  (```listAppointmnetCommandClass```)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    - What it does: Serves as a facade class to allow different classes to be able to interact with one another so"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     as to be able to execute the adding of commands, appointments as well as listing of patients and appointments"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "      successfully."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    - Justification: Each of the other classes are very highly cohesive and isolated from one another. The command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     classes, which acts as facade classes, make use of the other classes methods and properties such that the other"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "      classes can interact with one another to actually execute the user commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    - Highlights: The add patient and add appointment class has its own checks as well to catch other errors that the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     parser might has missed out on. The implementation for the commands classes is surprisingly challenging because"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "      not only do I have to understand how every other classes works, what the classes can do and what their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       intricacies (be it obvious or hidden) are, I also have to figure out how to carefully stitch the different"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        functionalities present in the other"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        classes too so as to execute the user\u0027s commands. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "- **Major enhancement 2:**  Added a patient id manager to manage the different patient id."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    - What it does: Able to manage the different patient\u0027s patient id such as giving new patients a unique patient id"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     (be it creating a new patient id or finding and reusing a patient id from a deleted patient) and checking to see if"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "      a patient id is currently being used by an existing patient."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    - Justification: The patient id uniquely identifies all the patients (serves as a key for the patients). It"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     also ensures that patients are linked to appointments."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     - Highlights: Implementation of this class is challenging as both major functions (first function being the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "      creating of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "      new patient"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "      id by either creating a new unique id or to find and reuse patient id of deleted patients and the second"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       function being the finding and checking of"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       patient id that actually exist) has to be quick (preferably in O(1) time) and correct (especially for the solution"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        created for the first function as it is quite difficult to prove the correctness of the solution). I managed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "         to come up with O(1) solutions for both functions."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "- **Minor enhancement:** Helped in the creation of the abstract command class that all commands inherits from. Also"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " fixed bugs in other classes so that it not only interact correctly with the facade class but also the other classes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  too."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "- **Code contributed:** [[tP Code Dashboard]](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dandy-aw-why\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "- **Other contribution:** "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    - Wrote extensive tests for my commands classes despite being facade classes"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    - Correct minor typos and formatting issues in the user and developer guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "# Table of content"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "\u003c!-- TOC --\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    + [1.1. Starting HAMS](#11-starting-hams)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* [2. Features](#2-features)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* [3. Command Format](#3-command-format)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* [4. Command Usage](#4-command-usage)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    + [4.1. Patient Commands](#41-patient-commands)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        + [4.1.1 Add new patient record](#411-add-a-new-patient-record)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        + [4.1.2 List all existing patient records](#412-list-all-existing-patients)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        + [4.1.3 Delete existing patient record](#413-delete-an-existing-patient)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        + [4.1.4 Edit existing patient record](#414-edit-an-existing-patient)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        + [4.1.5 Find existing patient record](#415-find-an-existing-patient)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        + [4.1.6 Clear all patient records](#416-clear-patient-records)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    + [4.2. Appointment Commands](#42-appointment-commands)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        + [4.2.1 Add new appointment record](#421-add-a-new-appointment-record)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        + [4.2.2 List all existing appointment records](#422-list-all-existing-appointments)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        + [4.2.3 Delete existing appointment record](#423-delete-an-existing-appointment)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        + [4.2.4 Edit existing appointment record](#424-edit-an-existing-appointment)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        + [4.2.5 Find existing appointment record](#425-find-an-existing-appointment)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        + [4.2.6 Clear all appointment records](#426-clear-appointment-records)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    + [4.3 Clear all records](#43-clear-all-records)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    + [4.4. Viewing help](#44-view-help)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    + [4.5. Exiting the program](#45-exit-hams-program)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* [5. Command Summary](#5-command-summary)  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "* [6. FAQ](#6-faq)  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "\u003c!-- /TOC --\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "This document serves as a user guide for HAMS. It teaches the user how to install HAMS, describes the features of HAMS, "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "explains how HAMS can be used and finally answer some frequently asked questions about HAMS."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "5. In Command Prompt, change your current working directory to the folder containing the .jar using $ `cd \u003cPath of folder containing .jar\u003e`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "This command exits the HAMS program and saves the current Patient/Appointment data into separate local save files (in"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " `/saves/appointments.txt` and `/saves/patients.txt` respectively. Also, the patient id state will also be saved in"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  `/saves/patientId.txt`). These files will be loaded to the program when it is run again subsequently."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  **Q**: Why does my patient list does not display any value in the age field?"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  * `{[Name]: Tommy | [Age]:  | [Address]:  | [Contact Number]: 92331234}`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  **A**: The age supplied might not be in the correct format (eg age given is a negative number or as a string)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "  "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### Back to top \u0026#x2191;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "- My contribution are mostly fixes in typos and aesthetics (such as adding a ```back to top``` link). This is because"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " the user guide for HAMS is actually my DUKE ip\u0027s user guide only slightly modified to fit HAMS. In a sense"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " , I technically created the user guide while my teammates modified it to fit HAMS."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " Provided below are some sections I contributed to the Developer Guide. They demonstrate my ability to communicate my "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " technical contributions to the project and rationale for technical implementation."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "#### 2.2.4 A\u0026D command module "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "##### 2.2.4.1 AddPatientCommand Class"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Below shows the sequence diagram for ```AddPatientCommand``` class"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](../images/AddPatientCommandSequence.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](../images/AddPatientCommandSequenceAddIntoPatientList.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](../images/AddPatientCommandSequenceAutoSavePatientList.png)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "##### 2.2.4.2 AddAppointmentCommand Class"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Below shows the sequence diagram for ```AddAppointmentCommand``` class:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](../images/AddAppointCommandSequence.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](../images/AddAppointCommandSequenceAddNewAppointment.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](../images/AddAppointCommandSequenceAutoSavingAppointList.png)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "##### 2.2.4.3 ListPatientCommand Class"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "Below shows the sequence diagram for ```ListPatientCommand``` class"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](../images/ListPatientCommandSequence.png)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "##### 2.2.4.4 ListAppointmentCommand Class"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "![](../images/ListAppointmentCommandSequence.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "##### 2.2.4.6 Design considerations"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "For the 5 classes listed, there were some other design considerations that was discussed for these 5 classes. Here"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ", we will discuss the other choices and the pros and cons for them."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "###### 2.2.4.6.1 Aspect: Facade classes"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 1 (current choice): Making all 4 classes facade classes"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   * Pros: "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Stronger Single Responsibility Principle (SRP) and Separation of Concerns Principle (SoC)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "   * Cons:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Higher dependencies and couplings on the other classes to work."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 2: Put the actual adding logic into the classes"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Weaker dependency and couplings on the other classes"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Lower SRP and (SoC)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "###### 2.2.4.6.2 Aspect: Autosaving or no"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 1 (current choice): Allow for autosaving after each command execution"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Allow for recovery when crashing"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Negligible performance effect on higher end computer system"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Since saving is writing to disk, it may be an expensive process for weaker computer system. Weaker computer system may be slowed down by the constant saving"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 2: Save only when exiting HAMS"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Faster, especially for weaker computer systems"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - No recovery (or rather, no recovery for recent information) when HAMS crashes "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "###### 2.2.4.6.3 Aspect: Generation of Patient Id"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 1 (current choice): Allow the reuse of the patient Id from deleted patients"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Allow for reuse, which prevents the patient Id number from running out."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Slightly more complicated implementation. Also it means that there is more information that is required to be saved (such as the list of patient Id to be reused) when HAMS shuts down."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 2: Always pick a new number (don\u0027t reuse deleted patient Id number)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Easier to implement and keep track of. Also, it does not need to save much more information about the patient Id numbers (just need to save the last number assigned)."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "       "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Much more likely to run out of patient id numbers, especially if patients are getting added and deleted from HAMS continuously and consecutively."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "###### 2.2.4.6.4 Aspect: Deciding how to reuse Patient Id"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 1 (current choice): For reusable patient id, just choose the patient id number that have not been"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " assigned the longest"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Easy to implement (just use a Queue) and ensures an O(1) time."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Patient id number is not really in sequence (it is possible for a bigger patient id number might be assigned"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "         first before a smaller patient id number). As a result, the new patient id number is not that predictable"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "          (unless you are keeping track of which patient id numbers are deleted first)."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "+ Alternative 2: Sort the reusable patient id first such that the smallest patient id is always reused first "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Patient id number is in sequence (always assign the smaller patient id number first), which seems to make"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "         it easier to predict the next patient\u0027s patient id number."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        - Sorting is O(n log n) time, hence making it slightly slower than current implementation."
      }
    ],
    "authorContributionMap": {
      "andy-aw-why": 220
    }
  },
  {
    "path": "docs/team/justinnt.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "# Tan Zheng Fu Justin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Hospital Administrative Management System (HAMS) is a CLI-based medical facility administration system that is used for "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "maintaining medical records. It is written in Java."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "- **Major Enhancement 1**: implemented the logic for `Parser`."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    - What it does: Interprets the User\u0027s input so that the correct command can be executed. It also functions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    as the first line to sanitize user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "   "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    - Justification: As the backbone of the program, it potentially interacts with all of the commands. As such, the correct"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    format and values should be given to these commands for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    - Highlights: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - The current implementation allows Users to input the format in any order, as long as it is an accepted format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          For Example, for the valid command: `addp` and accepted formats `\\name` and `\\age`, both commands below will "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          yield the same outcome."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "      "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          Command 1: `addp \\name Justin \\age 24`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          Command 2: `addp \\age 24 \\Justin`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - There is a need to analysis and think in terms of User behaviour as there is no telling what the User will input "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          into the command line. This aspect makes it challenging, as various circumstances from the user\u0027s point of view"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          needs to be considered. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          For example, what if the users did not provide any formats? What if the users provide the formats but did not"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          give any values? What is the index provided is not an integer? These questions then have to be converted into"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          codes and custom exceptions for each situation has to be created. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - Ease of maintainability and upgrade. The Parser has a modular design, all different commands are handled in"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          different methods. This allows separation of work and makes it easy for any future developers to modify anything."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          In addition, with regards to future upgrades, additional formats might be introduced, such as `\\bloodtype` "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          when adding a patient. It is extremely easy to add new formats into the Parser class due to its modularity. "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          Simply add the requires field into the correct enum, and the Parser will loop through the enum to find the "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          required formats inside. "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "***"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "- **Major Enhancement 2**: implemented the `DukeExceptions` for error checking."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    - What it does: `DukeExceptions` acts like a public class with methods to call to check the parameters for correctness."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    - Justifications: It abstracts out lengthy checks for classes that class `DukeExceptions\u0027s` methods. This reduces code "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    duplication and increases abstraction."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        For example: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        `DukeExceptions.checkIndexValidity(indexValue, String);` is a one liner called for different commands to check if"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "         the index is valid. If it is not abstracted out, then there will be duplicated code blocks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    - Highlights: "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - It is easy to add new checks and exceptions, since all checks in DukeExceptions are public methods. These "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        methods can then throw custom exceptions if the parameters being checked is wrong. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - For custom exceptions, I utilized overriding the getLocalizedMessage method. This then allows me catch a general"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        exception and then print `exception.getLocalizedMessage()` instead of making creating custom print message. This "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        method is good because all error messages are located in their specific custom exception class instead of it "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        being printed in one class or area. "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "- **Minor Enhancement** added ui that does most of the printing to user. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "- **Code contributed:** [tP code Dashboard](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djustinnt\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "- **Other contribution:** "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    - Project management:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - Managed v2.0 release on Github"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    - Documentation:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - Fixed issues regarding UG after PE-D [Pull requests #132](https://github.com/AY1920S2-CS2113T-T13-3/tp/pull/132)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - Added and maintain warning and hint pictures for UG [#132](https://github.com/AY1920S2-CS2113T-T13-3/tp/pull/132) [#156](https://github.com/AY1920S2-CS2113T-T13-3/tp/pull/156)  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    - Community:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - Reported bugs and suggestions for other teams in the class [Example: 1,](https://github.com/JustinnT/ped/issues) [2](https://github.com/nus-cs2113-AY1920S2/tp/pull/28)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - Liaise with another team to review their program. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**For 3. Command Format, I ensured that the commands and examples are up to date. I also included in visual hints (pictures) that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "can be useful for Users.**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "## 3. Command Format"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Words enclosed within angle brackets `[]` are the parameters to be supplied by the user. Other keywords stated are "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "compulsory and they should be included."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "For example, in `adda \\date [date] \\time [time] \\pid [patient id]`, `adda` is the command keyword that adds an "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Appointment record. "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`\\date` and `\\time` are compulsory labels to denoting what field the subsequent information belongs to."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "`[date]` is the date of the appointment to be supplied by you. `[time]` represents the time of the appointment to be "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "supplied by you."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "A valid input would be `adda \\date 22/05/2020 \\time 1200 \\pid 1`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](../images/UG/command_format_hint.JPG)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](../images/UG/command_format_hint2.JPG)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e ![](../images/UG/command_format_hint3.JPG)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "***"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**For the below UG snippet, I placed moved all command examples to table form, as well as providing a \"Before\" and \"After\" list for"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "the user to reference.**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Example List (Before)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " \u003cimg src \u003d\"../images/Patient_list_before.PNG\" width \u003d \"600\"\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Examples of usage:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**Please refer to the above \"Before\" list to compare the changes.**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK? |   Usage    |   Outcome \u0026 After |"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "------------- | ------------- | --------------- |"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK | `editp \\index 2  \\name Lam \\phone 83487846` | \u003cimg src \u003d\"../images/UG/editp_success1.JPG\" width \u003d \"600\"\u003e  \u003cimg src \u003d\"../images/UG/editp_after.JPG\" width \u003d \"600\"\u003e "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "OK | `editp \\age 99 \\address Bedok \\phone 89993999 \\name Justin \\index 3` |  \u003cimg src \u003d\"../images/UG/editp_success2.JPG\" width \u003d \"600\"\u003e \u003cimg src \u003d\"../images/UG/editp_after1.JPG\" width \u003d \"600\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "NOT OK | `editp \\index a \\address Paris Ris \\phone 93489678` | \u003cimg src \u003d\"../images/UG/editp_fail.JPG\" width \u003d \"600\"\u003e "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Final List "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003cimg src \u003d\"../images/UG/Patient_list_after.JPG\" width\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "***"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**The below parts are not in the User Guide but are some additional features and designs I would like to propose**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "### Handling of duplicate fields"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Current implementation: "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/UG/command_format_hint3.JPG)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### Proposed implementation:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/UG/last_occur.JPG)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Context: The user has typed a lot of stuff, and realizes that somewhere at the "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "front he had a typo. So instead of retyping the commands, he can simply duplicate the header with the correct information."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "{Explain how and why the user might want to take advantage of this feature}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "***"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " Provided below are sections I contributed to the Developer Guide. They demonstrate my ability to communicate my "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " technical contributions to the project and rationale for technical implementation."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**I provided the write up for the introduction part of the Developer Guide as shown below**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "### 1.1. Purpose"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "This document specifies the architecture and software designs for "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Hospital Administrative Management System (HAMS)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "### 1.2. Product Scope"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### 1.2.1. Target User Profile"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "The intended audience of this documentation are the developers, designers, software testers,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "operators and maintenance engineers. The below table summarizes the purposes of reading for each "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "audience."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|Role|Purpose|"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|---------|-------|"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|Developers \u0026 Designers| To understand the architecture and follow the design to build the system|"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|Software testers| To understand the internals of the system so as to test more effectively|"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|Operators| To improve productivity while using the system on a daily basis|"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|Maintenance Engineers| To understand how the system was built in order to perform enhancement or re-engineering work|"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "***"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "**I developed the Parser module, listing out the main purpose and steps in input interpretation. At the end of the section,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "I provided design considerations while implementing this module.**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "#### 2.2.5 Parser module"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "This section describes the implementation of Parser class, as well as the design considerations and rational behind the "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "current implementation."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "The main purpose of the Parser class is as below."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "1.  To interpret user inputs so that the correct command can be executed "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "2.  Functions as the first line to sanitize user input"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "As such, the Parser class only has one publicly callable method and that returns the command object for execution. "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "To assist the public method, Parser class has multiple private helper methods, as well as access to the Exception handler"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "to ensure that the user input is formatted correctly. This way, purpose 1 and 2 is satisfied. "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "##### 2.2.5.1 Object creation and steps in input interpretation"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "1.  The `Parser` object is first created in `Duke` class and subsequently used until program termination."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "2.  User input is received and handed over to `Parser` object for interpretation."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "3. In the `Parser` object, the type of command is first determined via helper method `getCommand(userInput)`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + Example: `addp \\age 23 \\name Justin`, the `addp` command will be determined."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "4. The remaining fields will be recorded in a hashMap through either `fillPatientFields(userInput)` or `fillAppointmentFields(userInput)`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "depending on the command type in Step 3."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + The type of category of the command can be determined based on the last alphabet of the first word. "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + The command `addp` has the last alphabet is `p`, `fillPatientFields()` will be called. "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    Likewise, if it ise `adda`, it will be `fillAppointmentFields()`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    + Example: `addp \\name Sam \\age 18`, the method `fillPatientFields(userInput)` will be called. The hashMap will contain"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    age -\u003e 23, name -\u003e Sam. "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "5. At the end of the execution, a reference to the command object will be returned. "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e![](../images/SD_parser/Capture2.JPG)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e![](../images/SD_parser/Capture.JPG)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram when `parseCommand(userInput)` is initially called"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/SD_parser/Slide1.JPG)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for `addp`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/SD_parser/Slide2.JPG)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for `editp`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/SD_parser/Slide3.JPG)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for `deletep`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/SD_parser/Slide4.JPG)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for `adda`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/SD_parser/Slide5.JPG)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for `edita`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/SD_parser/Slide6.JPG)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for `deletea`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/SD_parser/Slide7.JPG)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram when it is an unknown command"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/SD_parser/Slide8.JPG)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for the creation of the command Object"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/SD_parser/Slide9.JPG)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for error checking when `DukeExpcetion` is called"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/SD_parser/Slide10.JPG)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for calling an enum"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/SD_parser/Slide11.JPG)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "Sequence Diagram for error checking when `DukeExpcetion` is called"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "![](../images/SD_parser/Slide12.JPG)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e![](../images/SD_parser/Capture3.JPG)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|Enum|PatientFieldKeys|AppointmentFieldKeys"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|--------|-------|------|"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|.|INDEX|INDEX|"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|.|NAME|DATE|"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|.|AGE|TIME|"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|.|ADDRESS|.|"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|.|CONTACT_NUMBER|.|"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "\u003e![](../images/SD_parser/Capture4.JPG)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|DukeExceptions|checkFieldEmpty|checkIndexValidity"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|--------|-------|------|"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "|.|Based on the above enum table, checks that at least 1 field  is provided. \u003cbr\u003e\u003cbr\u003eThrows NoFieldCommandException if all fields are empty|Check that the index provided is valid. \u003cbr\u003e\u003cbr\u003e If it is less than 0 or not an integer, throw InvalidIndex and IndexNotInteger respectively.|"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "##### 2.2.5.2 Design considerations"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "###### Aspect: Symbol for delimiter"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "+   Alternative 1 (current choice): Backslash `\\` is used. "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    *   Pros: "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Backslash is the least used symbol in the english language."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    *   Cons: "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - More caution must be exercised to used backslash in computer language as REGEX uses it as a delimiter by"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          default."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - Might break the speed at which user type since backslash is located where it would be hard to reach with"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "          regular typing. "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "+   Alternative 2: Slash is `/` used."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - easier to access when typing"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - some people may have a slash in their legal name - `Suresh S/O Ravindran`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "###### Aspect: Symbol for delimiter"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "+   Alternative 1 (current choice): Each command will call its own method to parse field. "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    *   Pros: "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Decouples commands from method, making the code more modular."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Increases testability, bugs found can be isolated to the individual command and method respectively"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Changes to one method will only affect the command calling it and vice-versa."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    *   Cons: "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Code duplication will increase"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "+   Alternative 2: Every command calls a common method to parse the remaining fields. "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Less code duplication"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   Easier to understand code. "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        - Leads to tighter coupling"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        -   All command depends on this common method to parse fields, if the method changes, it may return the wrong"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        result for some commands. "
      }
    ],
    "authorContributionMap": {
      "JustinnT": 331
    }
  },
  {
    "path": "docs/team/thanhduc2000.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "# Nguyen Thanh Duc - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "## PROJECT: Hospital Management System v2.0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "Hospital Administrative Management System - HAMS is a CLI-based medical facility administration system that assists in the maintenance of various medical records. "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "HAMS is designed for administrative assistants in medical facilities, like hospitals or polyclinics, that *prefer using"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "CLI to keep track of various medical records* and *can type fast*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 9,
      "-": 5
    }
  },
  {
    "path": "docs/team/yukilite.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "# Samantha Goh - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Hospital Administrative Management System (HAMS) is a CLI-based medical facility administration system that is used for "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "maintaining medical records. It is written in Java."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* **Enhancement**: added the Converter module "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * What it does: allows the user input to be formatted into a desired date and time output."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Justification: This improves the readability of using the application because date and time is now standardised. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    Furthermore, the user may enter invalid inputs and the application should be able to prompt users with proper "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    error messages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Credits: Used SimpleDateFormat to implement the formatting."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* **Minor Enhancement**: added the Appointment and Patient classes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* Code contributed: [[tP Code Dashboard]](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dyukilite\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* Other contributions:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Enhancements to existing features: "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        * Wrote additional tests for existing features to increase coverage from xx% to xx% (Pull requests egs)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Documentation: "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        * Did cosmetics tweaks to the User Guide: ()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Community:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Provided below are sections I contributed to the User Guide. I took charge of editing the presentation using markdown "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "features like tables and bulleting in the first version for submission."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "```"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "## 6. FAQ"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**Q**: Would my details be captured if I randomize the input order of the keywords?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `addp \\phone 12345678 \\address NUS \\age 22 \\name John Doe`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `addp \\name John Doe \\address NUS \\ age 22 \\ phone 12345678`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**A**: Yes. The system is keyword-sensitive. Regardless of the order given, it stores the information within each command used respectively. Both examples provided above would result in the same information stored. "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**Q**: Why does my patient list does not display any value in the age field?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* `{[Name]: Tommy | [Age]:  | [Address]:  | [Contact Number]: 92331234}`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**A**: The age supplied might not be in the correct format (eg age given is a negative number or as a string)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**Q**: Why am I not able to find anything using finda or findp? "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**A**: Please note that all search values are case-sensitive. For example, `Sam` will not match with `sam`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "because of the first letter capitalization. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**Q**: What is `pid` for in the command `adda`?"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "**A**: `pid` stands for Patient ID, it is a unique ID tag to each patient. In order to link appointments "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "to the patient, the pid tag must be present. "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Provided below are sections I contributed to the Developer Guide. They demonstrate my ability to communicate my "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "technical contributions to the project and rationale for technical implementation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "#### 2.2.1 Record module"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "The record module consists of 2 classes which represent the patients information and appointment details. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "As a reflection of real world objects, the Patient\u0027s class purpose is to store the particulars of a person while the "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Appointment\u0027s class is to store the date-time data. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Thus, the rationale of both classes can be grouped as follows:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "\u003e As a reflection of real world entities, to create, store, and retrieve relevant information about the object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Following the above purpose, both classes consist of only getter and setter methods. This would ensure a contiguous "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "flow in logical executions as these methods can be called whenever necessary."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "##### 2.2.1.1 Process of Object Creation"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Due to the nature of the above classes containing only getter and setter methods, following how the components interact "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "with each other would provide more accuracy in understanding how these classes are called and the role of its "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "methods. "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "To illustrate, the below example is used:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "* editp \\index 1 \\name Justin \\age 69 \\Pasir Panjang"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "![](images/SD_Patient.png)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "Upon startup, objects from ui, parser and storage are created. Prompted for user input, Duke receives the \"editp\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "command which is forwarded to the parser to be interpreted respectively. Once the `EditPatientCommand` object is "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "created, it retrieves the patient index to edit the existing patient information from the patientList. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "The `Patient` class is called by its setter method, `setPatientInfo()`, to update the fields as provided by the user. "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "This ensures that the encapsulated variables such as age, name, contact number and address are not only enforced but"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "also protected. "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "##### 2.2.1.2 Design Considerations"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "###### Aspect: Data Type for Appointment\u0027s Date and Time"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "+ Alternative 1 (current choice): Store as a String"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Pros: "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        - Easier implementation"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        - Greater user flexibility"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        -  Cannot sort if needed"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "+ Alternative 2: Store as Date"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Pros:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        - Has flexibility to parse or format date using existing methods available for use."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    * Cons:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        - Immutable-value classes mean it is not thread-safe (using Java.util.SimpleDateFormat).    "
      }
    ],
    "authorContributionMap": {
      "Yukilite": 106
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.exceptions.FileCorruptedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.exceptions.IndexNotIntegerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.NoFieldCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.PidEmptyException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static int patientIndexNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static int appointmentIndexNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static PatientList patientList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static AppointmentList appointmentList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This constructor initializes the other ui, parser and storage classes to be used in the java.duke.Duke program."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see Ui"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see Parser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see Storage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        patientIndexNumber \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        appointmentIndexNumber \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        ui.printHello();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method loads any previous patient particulars and its respective appointment details"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * from storage if any, or creates a new one if its a new entry."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see PatientList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see Storage"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void startup() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cPatient\u003e patientListToLoad \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cAppointment\u003e appointmentListToLoad \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            patientListToLoad \u003d storage.loadSavedPatients();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (FileNotFoundException | FileCorruptedException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            patientListToLoad \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            patientList \u003d new PatientList(patientListToLoad);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            appointmentListToLoad \u003d storage.loadSavedAppointments();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (FileNotFoundException | ParseException | FileCorruptedException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            appointmentListToLoad \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            appointmentList \u003d new AppointmentList(appointmentListToLoad);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Runs the program."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        startup();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                String fullCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                Command c \u003d parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                assert c !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                c.execute(ui, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            } catch (UnknownCommandException | InvalidIndexException | IndexNotIntegerException"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                    | NoFieldCommandException | PidEmptyException | InvalidFormatException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                ui.showExceptionError(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                //todo justin ui print error message"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                System.out.println(\"Please fill in a valid date in the right format: dd/mm/yyyy and/or \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                        + \"a valid time in the 24 hour format: hhmm\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 44,
      "Yukilite": 15,
      "brandoncjh": 26,
      "thanhduc2000": 20,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.generator.PatientIdManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class deals with the command relating to adding of appointments into the appointment list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * It achieves this by acting as a bridge to connect the functions of {@link seedu.duke.parser.Parser},"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * {@link Appointment}, {@link AppointmentList} and {@link Storage}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * To elaborate, it converts the output of {@link seedu.duke.parser.Parser} into a {@link Appointment} object, after"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * which the {@link Appointment} object is then"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * added into the {@link AppointmentList} list. Finally, the {@link Storage} class will be used to save the updated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * list into offline data to reflect the change."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * @author Andy"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class AddAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"adda\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private static final String EXAMPLE \u003d \"adda \\\\date 20/12/2020 \\\\time 2300 \\\\pid 23\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add an appointment to the appointment\u0027s list.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String DATE \u003d \"date\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String TIME \u003d \"time\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String PATIENT_ID \u003d \"pid\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static final String PID \u003d \"pid\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private int patientId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Constructor for the appointment class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param appointmentInfo the \u003ccode\u003eMap\u003c/code\u003e that contains the information relating to the appointment."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public AddAppointmentCommand(Map\u003cString, String\u003e appointmentInfo) throws InvalidFormatException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.date \u003d appointmentInfo.get(DATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.time \u003d appointmentInfo.get(TIME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            this.patientId \u003d Integer.parseInt(appointmentInfo.get(PID));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            if (this.patientId \u003c 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                this.patientId \u003d -1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            if (!PatientIdManager.checkPatientIdUsed(patientId)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                this.patientId \u003d -2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            this.patientId \u003d -1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * For this execution, the appointment information is added into the appointment list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @throws IOException this exception is thrown by the {@link Storage} class if it fails to save the current"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     *                     appointment list into offline data."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException, ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (this.patientId \u003d\u003d -1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            Ui.showWrongPid();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (this.patientId \u003d\u003d -2) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            Ui.showNoPidExist();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Appointment appointment \u003d new Appointment(this.date, this.time, this.patientId);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        /* Hacky method to add appointments into the appointment list.*/"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentList.getAppointmentList().add(appointment);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        /* For Auto-saving */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        storage.saveAppointmentsList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        ui.showAppointmentAddSuccess();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 20,
      "Yukilite": 7,
      "thanhduc2000": 3,
      "andy-aw-why": 76
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.data.Address;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.data.Age;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.data.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.data.Phone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.generator.PatientIdManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class deals with the command relating to adding of patient into the patient list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * It achieves this by acting as a bridge to connect the functions of {@link seedu.duke.parser.Parser} class,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * {@link Patient} class and {@link PatientList} class\u003c/p\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003cp\u003eTo elaborate, it converts the output of {@link seedu.duke.parser.Parser} into a {@link Patient} object, after"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * which the {@link Patient} object is then added into the {@link PatientList} list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * @author Andy"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class AddPatientCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addp\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static final String PATIENT_ID \u003d \"pid\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String PATIENT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String AGE \u003d \"age\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String ADDRESS \u003d \"address\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String CONTACT_NUMBER \u003d \"phone\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private static final String EXAMPLE \u003d \"addp \\\\name Justin \\\\address Pasir Ris \\\\age 20 \\\\phone 98889888\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a patient to the patient\u0027s list.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String patientName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private int patientID;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Constructor for the AddPatientCommand."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param patientInfo the map containing the patient information"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @see PatientIdManager#getNextPatientId"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public AddPatientCommand(Map\u003cString, String\u003e patientInfo) throws InvalidFormatException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.patientName \u003d new Name(patientInfo.get(PATIENT_NAME)).toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.age \u003d new Age(patientInfo.get(AGE)).getAge();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.address \u003d new Address(patientInfo.get(ADDRESS)).toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.contactNumber \u003d new Phone(patientInfo.get(CONTACT_NUMBER)).toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.patientID \u003d PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * For this execution, the patient will be added into the patient list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param ui      ui object for displaying information"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param storage storage object to do auto saving"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @see PatientList#getPatientList"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @see Storage#savePatientList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient \u003d new Patient(this.patientName, this.age, this.address, this.contactNumber, this.patientID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Hacky method to add patient into patient list **/"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientList.getPatientList().add(newPatient);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Checking to see if patient object is created and placed correctly in the patient list **/"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assert PatientList.getPatientList().get(PatientList.getTotalPatients() - 1).getName().equals(this.patientName) :"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                \"Wrong name!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assert PatientList.getPatientList().get(PatientList.getTotalPatients() - 1).getAge() \u003d\u003d this.age : \"Wrong \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                + \"age!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assert PatientList.getPatientList().get(PatientList.getTotalPatients() - 1).getAddress().equals(this.address) :"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                \"Wrong address!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assert PatientList.getPatientList().get(PatientList.getTotalPatients() - 1).getContactNumber()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                .equals(this.contactNumber) : \"Wrong number!\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assert PatientList.getPatientList().get(PatientList.getTotalPatients() - 1).getPatientID()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                \u003d\u003d this.patientID : \"Wrong patientID!\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Autosaving upon each add **/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        storage.savePatientList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        /** Assuming that there is a confimation message indicating the adding of patient is a success**/"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        ui.showPatientAddSuccess();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 9,
      "Yukilite": 2,
      "thanhduc2000": 7,
      "andy-aw-why": 81
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ClearAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.EmptyListsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.generator.PatientIdManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * Clear all the patients from patients\u0027 list and appointments from appointments\u0027 list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-29"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class ClearAllCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearall\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"clearall\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clear all patients and appointments from both lists.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public ClearAllCommand() throws InvalidFormatException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to clear all the items in both lists if available, if"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * there is nothing to clear return a warning to users."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException    when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws ParseException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see ParseException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see DukeExceptions#checkEmptyLists"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see AppointmentList#getAppointmentList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see PatientList#getPatientList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#saveAppointmentsList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#savePatientList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException, ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            //Check if the list is empty or not"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            DukeExceptions.checkEmptyLists();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Clear all the items in appointments\u0027 list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            AppointmentList.getAppointmentList().clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Clear all the items in patients\u0027 list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            PatientList.getPatientList().clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            // Reset the patient id manager state"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientIdManager.clearPatientId();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Make sure that the size of both patients\u0027 list and appointments\u0027 list are 0"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            assert AppointmentList.getTotalAppointments() \u003d\u003d 0 \u0026\u0026 PatientList.getTotalPatients() \u003d\u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Auto save the change in appointments\u0027 list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            storage.saveAppointmentsList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Auto save the change in patients\u0027 list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            storage.savePatientList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Show all items in both lists deleted message"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            ui.showAllItemsDeleted();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (EmptyListsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            System.out.println(\"There is nothing to clear in both lists\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // ui.showNothingToClearBothLists(); // TODO Justin"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 14,
      "thanhduc2000": 62,
      "andy-aw-why": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ClearAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.EmptyAppointmentsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * Clear all appointments from appointments\u0027 list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-29"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class ClearAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cleara\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"cleara\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clear all appointments from the list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public ClearAppointmentCommand() throws InvalidFormatException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to clear all appointments in the list if available, if"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * there is nothing to clear return a warning to users."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws ParseException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see ParseException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see DukeExceptions#checkEmptyAppointments"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see AppointmentList#getAppointmentList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#saveAppointmentsList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            //Check if appointments\u0027 list is empty"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            DukeExceptions.checkEmptyAppointments();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Clear all the items in appointments\u0027 list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            AppointmentList.getAppointmentList().clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Make sure that the size of appointments\u0027 list is 0"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            assert AppointmentList.getTotalAppointments() \u003d\u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Auto save the change in appointments\u0027 list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            storage.saveAppointmentsList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Show all items in both lists deleted message"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // ui.showAppointmentsDeleted(); // TODO Justin"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            System.out.println(\"All appointment cleared!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (EmptyAppointmentsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            System.out.println(\"There is nothing to clear in appointments\u0027 list\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // ui.showNothingToClearAppointments() // TODO Justin"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 14,
      "thanhduc2000": 53,
      "andy-aw-why": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ClearPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.EmptyPatientsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.generator.PatientIdManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * Clear all patients from patients\u0027 list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-29"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class ClearPatientCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearp\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"clearp\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clear all patients from the list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public ClearPatientCommand() throws InvalidFormatException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to clear all patients in the list if available, if"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * there is nothing to clear return a warning to users."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws ParseException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see ParseException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see DukeExceptions#checkEmptyAppointments"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see PatientList#getPatientList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#savePatientList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @see PatientIdManager#clearPatientId()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Check if patients\u0027 list is empty"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            DukeExceptions.checkEmptyPatients();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Clear all the items in patients\u0027 list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            PatientList.getPatientList().clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // CLear all the appointments as well"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            new ClearAppointmentCommand().execute(ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            // Reset the patient id manager state"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientIdManager.clearPatientId();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Make sure that the size of patients\u0027 list is 0"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            assert PatientList.getTotalPatients() \u003d\u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Auto save the change in patients\u0027 list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            storage.savePatientList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Show all patients deleted message"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // ui.showPatientsDeleted(); //TODO Justin"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            System.out.println(\"All patients cleared!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (EmptyPatientsException | InvalidFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            System.out.println(\"There is nothing to clear in patients\u0027 list\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // ui.showNothingToClearPatients(); //TODO Justin"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 13,
      "thanhduc2000": 57,
      "andy-aw-why": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Super class for all the types of command sub-classes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Command() throws InvalidFormatException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Method to return false in default for exit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Execution method that will be overriden its child classes (the different command classes)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public abstract void execute(Ui ui, Storage storage) throws IOException, ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 4,
      "JustinnT": 1,
      "thanhduc2000": 29,
      "andy-aw-why": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Delete an appointment\u0027s record with certain index in the appointment\u0027s list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-14"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class DeleteAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletea\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"deletea \\\\index 12\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete an appointment from the list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String APPOINTMENT_INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor which pass a hash map with only 1 item containing the index of"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * the patient that needs to be removed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param fieldsToChange a hash map with only 1 item which is a field called"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *                       \"index\" and the value of the index needed to delete"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public DeleteAppointmentCommand(Map\u003cString, String\u003e fieldsToChange) throws IndexOutOfBoundsException,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            InvalidFormatException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.index \u003d Integer.parseInt(fieldsToChange.get(APPOINTMENT_INDEX));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            if (index \u003e AppointmentList.getTotalAppointments() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showNumberError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showIndexError();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to check if the right index is returned to the class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return index index in the list that information needs to be updated"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to delete the appointment from the list by getting that appointment\u0027s index then"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * remove it and auto-save the changes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see AppointmentList#getAppointmentRecord"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#saveAppointmentsList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Ui#showDeleteAppointmentSuccess()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Get the appointment\u0027s record based on its index from the list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            Appointment appointment \u003d AppointmentList.getAppointmentRecord(index - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Get the original appointment\u0027s list size"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            int originalSize \u003d AppointmentList.getTotalAppointments();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Remove the appointment\u0027s information from the patient\u0027s list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            AppointmentList.getAppointmentList().remove(appointment);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Check with assertions that the size has been decremented"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            assert AppointmentList.getTotalAppointments() \u003d\u003d originalSize - 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Auto-save the changes"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            storage.saveAppointmentsList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Show deleted appointment successfully message"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showDeleteAppointmentSuccess();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        } catch (IndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 5,
      "JustinnT": 8,
      "thanhduc2000": 87
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeletePatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.generator.PatientIdManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Delete a patient\u0027s record with certain index in the patient\u0027s list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-08"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class DeletePatientCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletep\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"deletep \\\\index 12\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete a patient from the list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String PATIENT_INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int patientIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor which pass a hash map with only 1 item containing the index of"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * the patient that needs to be removed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param fieldsToChange a hash map with only 1 item which is a field called"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *                       \"index\" and the value of the index needed to delete"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public DeletePatientCommand(Map\u003cString, String\u003e fieldsToChange) throws InvalidFormatException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.patientIndex \u003d Integer.parseInt(fieldsToChange.get(PATIENT_INDEX));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            if (patientIndex \u003e PatientList.getTotalPatients() || patientIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showNumberError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showIndexError();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to check if the right index is returned to the class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return patientIndex index of patient that needs to be updated"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public int getPatientIndex() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return patientIndex;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to delete the patient from the list by getting that patient\u0027s index then"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * remove it and auto-save the changes."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see PatientList#getPatientRecord"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#savePatientList"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Ui#showDeletePatientSuccess"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Get the patient\u0027s record based on its index from the list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Patient patient \u003d PatientList.getPatientRecord(patientIndex - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Get the patient\u0027s patient ID"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            int deletedPatientId \u003d patient.getPatientID();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            // Add back the patient id"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            PatientIdManager.addBackPatientId(deletedPatientId);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Get the original appointment\u0027s list size"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            int originalSize \u003d PatientList.getTotalPatients();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Remove the patient\u0027s information from the patient\u0027s list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            PatientList.getPatientList().remove(patient);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Check with assertions that the size has been decremented"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            assert PatientList.getTotalPatients() \u003d\u003d originalSize - 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // A new list to store the newly update appointments"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            ArrayList\u003cAppointment\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Find appointments with the deleted patient IDs and delete those appointments also"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            for (int i \u003d 0; i \u003c AppointmentList.getTotalAppointments(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                Appointment appointment \u003d AppointmentList.getAppointmentRecord(i);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                int idToBeDeleted \u003d appointment.getPatientId();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                if (idToBeDeleted !\u003d deletedPatientId) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                    newList.add(appointment);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                    Ui.showDeleteAppointmentSuccess();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Update the appointment list after deleting patientIDs being deleted"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            AppointmentList.setAppointmentList(newList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Auto-save the changes in patient list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            storage.savePatientList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Auto-save the change in the appointments with patient IDs being deleted"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            storage.saveAppointmentsList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Show deleted patient successfully message"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showDeletePatientSuccess();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 3,
      "JustinnT": 11,
      "thanhduc2000": 111,
      "andy-aw-why": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.converter.TimeConverter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.sql.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Edit the information of the appointment existed in the appointment\u0027s list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-14"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class EditAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edita\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"edita \\\\index 5  \\\\date 01/03/2020 \\\\time 10am\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String APPOINTMENT_INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String APPOINTMENT_DATE \u003d \"date\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String APPOINTMENT_TIME \u003d \"time\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edit the information of appointment in the list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor which pass a hash map with keys as fields to change and values"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * as content in that fields that needs to be changed. If there is no need to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * change in a field in the appointment\u0027s record, it will be automatically set as"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param fieldsToChange a hash map which pass all the fields needed to be changed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *                       as key and content as values"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public EditAppointmentCommand(Map\u003cString, String\u003e fieldsToChange) throws InvalidFormatException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.index \u003d Integer.parseInt(fieldsToChange.get(APPOINTMENT_INDEX));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            if (index \u003e AppointmentList.getTotalAppointments() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showNumberError();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showIndexError();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.date \u003d fieldsToChange.get(APPOINTMENT_DATE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.time \u003d fieldsToChange.get(APPOINTMENT_TIME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to check if the right index is returned to the class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return index index in the list that information needs to be updated"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to check if the right date is returned to the class."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return date that needs to be updated"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to check if the right time is returned to the class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return time needs to be updated"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to update the appointment by getting the appointment\u0027s record based on its index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * and update it based on the queries by users, and auto-save it to the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see AppointmentList#getAppointmentRecord"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Appointment#setAppointmentInfo"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#saveAppointmentsList"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Ui#showUpdateAppointmentSuccess"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Get the appointment\u0027s record based on its index from the list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            Appointment appointment \u003d AppointmentList.getAppointmentRecord(index - 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Updating the information"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            appointment.setAppointmentInfo(date, time);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Updating it back to its corresponding index in the appointment\u0027s list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            AppointmentList.getAppointmentList().set(index - 1, appointment);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Check with assertions to make sure that the updated fields are correct"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            assert date.equals(BLANK_STRING)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                    || AppointmentList.getAppointmentRecord(index - 1).getDate()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                    .equals(TimeConverter.oldDate(this.date)) : \"Wrong date!\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            assert time.equals(BLANK_STRING)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                    || AppointmentList.getAppointmentRecord(index - 1).getTime()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                    .equals(TimeConverter.oldTime(this.time)) : \"Wrong time!\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Auto-save the changes"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            storage.saveAppointmentsList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Show updated successfully message"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showUpdateAppointmentSuccess();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 3,
      "JustinnT": 8,
      "thanhduc2000": 122
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.data.Address;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.data.Age;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.data.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.data.Phone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Edit the information of the patient existed in the patient\u0027s list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-08"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class EditPatientCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editp\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String EXAMPLE \u003d \"editp \\\\index 5  \\\\address Clementi \\\\phone 83487846\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String PATIENT_INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String PATIENT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String AGE \u003d \"age\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String ADDRESS \u003d \"address\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String CONTACT_NUMBER \u003d \"phone\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Update the information of patient in the list.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final int INVALID_AGE \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int patientIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String patientName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor which pass a hash map with keys as fields to change and values"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * as content in that fields that needs to be changed. If there is no need to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * change in a field in the patient\u0027s record, it will be automatically set as"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param fieldsToChange a hash map which pass all the fields needed to be changed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *                       as key and content as values"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public EditPatientCommand(Map\u003cString, String\u003e fieldsToChange) throws InvalidFormatException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.patientIndex \u003d Integer.parseInt(fieldsToChange.get(PATIENT_INDEX));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            if (patientIndex \u003e PatientList.getTotalPatients() || patientIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showNumberError();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showIndexError();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.patientName \u003d new Name(fieldsToChange.get(PATIENT_NAME)).toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.age \u003d new Age(fieldsToChange.get(AGE)).getAge();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.address \u003d new Address(fieldsToChange.get(ADDRESS)).toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.contactNumber \u003d new Phone(fieldsToChange.get(CONTACT_NUMBER)).toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to check if the right index is returned to the class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return patientIndex index of patient that needs to be updated"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public int getPatientIndex() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return patientIndex;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to check if the right patient\u0027s name is returned to the class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return patientName name of patient that needs to be updated"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String getPatientName() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return patientName;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to check if the right age is returned to the class."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return age age that needs to be updated"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to check if the right address is returned to the class."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return address that needs to be updated"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to check if the right phone number is returned to the class."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return contactNumber that needs to be updated"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String getContactNumber() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return contactNumber;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Method to update the patient by getting the patient\u0027s record based on its index"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * and update it based on the queries by users, and auto-save it to the data file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see PatientList#getPatientRecord"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Patient#setPatientInfo"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Storage#savePatientList"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Ui#showUpdatePatientSuccess"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Get the patient\u0027s record based on its index from the list"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Patient patient \u003d PatientList.getPatientRecord(patientIndex - 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Updating the information"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            patient.setPatientInfo(patientName, age, address, contactNumber);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Updating it back to its corresponding index in the patient\u0027s list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            PatientList.getPatientList().set(patientIndex - 1, patient);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Check with assertions to make sure that the updated fields are correct"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            assert patientName.equals(BLANK_STRING)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                    || PatientList.getPatientRecord(patientIndex - 1).getName().equals(patientName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            assert age \u003c INVALID_AGE"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                    || PatientList.getPatientRecord(patientIndex - 1).getAge() \u003d\u003d age;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            assert address.equals(BLANK_STRING)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                    || PatientList.getPatientRecord(patientIndex - 1).getAddress().equals(address);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            assert contactNumber.equals(BLANK_STRING)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                    || PatientList.getPatientRecord(patientIndex - 1).getContactNumber()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                    .equals(contactNumber);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Auto-save the changes"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            storage.savePatientList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            // Show updated successfully patient\u0027s list message"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Ui.showUpdatePatientSuccess();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 3,
      "JustinnT": 7,
      "thanhduc2000": 152
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Terminate the program when the user\u0027s input is \"exit\"."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-14"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Type to exit the program.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public ExitCommand() throws InvalidFormatException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Set the termination of the program to be true."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Method to print the bye message for users."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Ui.showByeMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 3,
      "JustinnT": 1,
      "thanhduc2000": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.converter.TimeConverter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.sql.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class deals with the command relating to finding the list of appointments containing a specific keyword."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This command utilises the functions in {@link seedu.duke.parser.Parser} and searches {@link Appointment} objects"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * within the saved {@link AppointmentList} that is managed by {@link Storage}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * To elaborate, it converts the output of {@link seedu.duke.parser.Parser} into a {@link Appointment} object, after"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * which the {@link Appointment} object is then"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * added into the {@link AppointmentList} list. Finally, the {@link Storage} class will be used to save the updated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * list into offline data to reflect the change."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @author Brandon Chong"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @since 28/3/2020"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class FindAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"finda\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private static final String EXAMPLE \u003d \"finda 20/12/2020\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Find an appointment by keyword.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String searchValue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private TimeConverter timeConverter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final int TIME_INPUT_LENGTH \u003d 8;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final int DATE_INPUT_LENGTH \u003d 10;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * Constructor for the find appointment command class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param searchValue the \u003ccode\u003eString\u003c/code\u003e object representing the keyword to search for in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *                    each Appointment object\u0027s fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public FindAppointmentCommand(String searchValue) throws InvalidFormatException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.searchValue \u003d searchValue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getSearchValue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return searchValue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * For this execution, the existing list of Appointment records is searched for a keyword."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *\u003cp\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * We check the searchValue to see if it is of the correct format (dd/mm/yyyy for date, hh:mm am/pm for time)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * If input is invalid format, we exit. Else, we search the list of Appointments for the search keyword."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * Records that contain the keyword will be added to a separate List and printed out in a readable format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *\u003c/p\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws IOException this exception is thrown by the {@link Storage} class if it fails to save the current"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *                     appointment list into offline data."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        boolean isDateInput \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        boolean isTimeInput \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        /* the time string hh:mm (am/pm) should have 8 characters in total"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        *  the date string dd/mm/yyyy should have 10 characters in total"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        *  we only check strings of these two lengths if they are in the correct format"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (Integer.valueOf(this.getSearchValue().length()) \u003d\u003d TIME_INPUT_LENGTH) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (!checkValidTime(this.getSearchValue())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                ui.printInvalidAppointmentSearchTimeMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            isTimeInput \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } else if (Integer.valueOf(this.getSearchValue().length()) \u003d\u003d DATE_INPUT_LENGTH) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (!checkValidDate(this.getSearchValue())) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                ui.printInvalidAppointmentSearchDateMessage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            isDateInput \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            ui.printInvalidAppointmentSearchFormatMessage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String parsedSearchValue \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (isDateInput) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                parsedSearchValue \u003d timeConverter.oldDate(this.getSearchValue());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                ui.printSearchValueConversionErrorMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (isTimeInput) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            parsedSearchValue \u003d this.getSearchValue();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assert parsedSearchValue !\u003d null : \"The searchValue should contain a non-null value.\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cAppointment\u003e searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        /*get the list of all Appointments from Storage to conduct search*/"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        for (Appointment appointment : AppointmentList.getAppointmentList()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (appointment.getDate().contains(parsedSearchValue)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    || appointment.getTime().contains(parsedSearchValue)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                searchResults.add(appointment);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        ui.printAppointmentSearchResults(searchResults);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method checks if the search input is a valid date."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param dateInput the date input (determined to be a date due to its length)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @return a boolean indicating if the input is a valid date."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private boolean checkValidDate(String dateInput) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            this.timeConverter.oldDate(dateInput);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method checks if the search input is a valid time."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param timeInput the input (determined to be a time search value due to its length)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @return a boolean indicating if the value is a valid date."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private boolean checkValidTime(String timeInput) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            this.timeConverter.convertTime(timeInput);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 153,
      "thanhduc2000": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class deals with the command relating to finding the list of appointments containing a specific keyword."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This command utilises the functions in {@link seedu.duke.parser.Parser} and searches {@link Patient} objects"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * within the saved {@link PatientList} that is managed by {@link Storage}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * To elaborate, it converts the output of {@link seedu.duke.parser.Parser} into a {@link Patient} object, after"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * which the {@link Patient} object is then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * added into the {@link PatientList} list. Finally, the {@link Storage} class will be used to save the updated"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * list into offline data to reflect the change."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @author Brandon Chong"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @since 28/3/2020"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class FindPatientCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findp\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final String EXAMPLE \u003d \"findp john tan\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Find a patient by keyword.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            + \"Example: \" + EXAMPLE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String searchValue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * Constructor for the find patient command class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param searchValue the \u003ccode\u003eString\u003c/code\u003e object representing the keyword to search for in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *                    each Patient object\u0027s fields"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public FindPatientCommand(String searchValue) throws InvalidFormatException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.searchValue \u003d searchValue;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getsearchValue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return searchValue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * For this execution, the existing list of Patient records is searched for a keyword."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * Records that contain the keyword will be added to a separate List and printed out in a readable format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param ui the ui object which can be used to display text"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws IOException this exception is thrown by the {@link Storage} class if it fails to save the current"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *                     Patient list into offline data."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cPatient\u003e searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        /*get the list of all Patients from Storage to conduct search*/"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        for (Patient patient : PatientList.getPatientList()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (patient.getName().contains(this.getsearchValue())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    || Integer.toString(patient.getAge()).contains(this.getsearchValue())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    || patient.getAddress().contains(this.getsearchValue())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    || patient.getContactNumber().contains(this.getsearchValue())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    || Integer.toString(patient.getPatientID()).contains(this.getsearchValue())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                searchResults.add(patient);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        ui.printPatientSearchResults(searchResults);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 76,
      "thanhduc2000": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Show a list of commands and what is the correct input\u0027s format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author Nguyen Thanh Duc"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @since 2020-03-08"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String COMMANDS_MESSAGE_USAGE \u003d AddAppointmentCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + AddPatientCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + ClearAllCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + ClearAppointmentCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + ClearPatientCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + EditAppointmentCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + EditPatientCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + FindAppointmentCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + FindPatientCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + DeleteAppointmentCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + DeletePatientCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + ListAppointmentCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + ListPatientCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + HelpCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"\\n\" + \"\\n\" + ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public HelpCommand() throws InvalidFormatException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Method to print out all the commands that user can input with usage and examples of them."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws IOException when there is error in the index\u0027s input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see IOException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @see Ui#showHelpUsage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Ui.showHelpUsage(COMMANDS_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 2,
      "JustinnT": 3,
      "thanhduc2000": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListAppointmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * Command class to list the list of appointment."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * @author Andy"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class ListAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"lista : List all the appointments.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            + \"Example: lista\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Empty constructor. Only used to create the ListAppointmentCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public ListAppointmentCommand() throws InvalidFormatException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * For this execution, it shows the list of appointments that are stored."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui.showEntireAppointmentList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JustinnT": 11,
      "Yukilite": 1,
      "thanhduc2000": 2,
      "andy-aw-why": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * Command class to list the patients."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * @author Andy"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class ListPatientCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"listp : List all the patients.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"Example: listp\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Empty constructor. Only used to create the ListPatientCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public ListPatientCommand() throws InvalidFormatException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * For this execution, the patient list will be displayed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param ui      the ui object which can be used to display text"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param storage the storage object for auto saving function"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        /** Show the enitre list. This is the only method in Ui that is static for some reason **/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Ui.showEntirePatientList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 4,
      "Yukilite": 3,
      "thanhduc2000": 6,
      "andy-aw-why": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/converter/TimeConverter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.converter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class converts the String time and date entered by the user into the String of the desired format."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * @author Samantha Goh"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "public class TimeConverter {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method converts the old date into a new date format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @param oldDate the date entered by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @return newDate the date in the desired format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @throws ParseException the error occurs if the date is not found."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public static String oldDate(String oldDate) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        SimpleDateFormat simpleDateFormat1 \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        simpleDateFormat1.setLenient(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Date date \u003d simpleDateFormat1.parse(oldDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        SimpleDateFormat simpleDateFormat2 \u003d new SimpleDateFormat(\"EEE dd MMM yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        simpleDateFormat2.setLenient(false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        String newDate \u003d simpleDateFormat2.format(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        return newDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method converts the old time into a new time format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @param oldTime the time entered by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @return newTime the time in the desired format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @throws ParseException the error occurs if the time is not found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public static String oldTime(String oldTime) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        SimpleDateFormat simpleDateFormat1 \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        simpleDateFormat1.setLenient(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        Date time \u003d simpleDateFormat1.parse(oldTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        SimpleDateFormat simpleDateFormat2 \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        simpleDateFormat2.setLenient(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        String newTime \u003d simpleDateFormat2.format(time);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        return newTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method converts the date back into the format of dd/mm/yyyy."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param oldDate the time entered by the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return convertedDate the time in the desired format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws ParseException the error occurs if the time is not found."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static String convertDate(String oldDate) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        SimpleDateFormat simpleDateFormat1 \u003d new SimpleDateFormat(\"EEE dd MMM yyyy\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        simpleDateFormat1.setLenient(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Date date \u003d simpleDateFormat1.parse(oldDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        SimpleDateFormat simpleDateFormat2 \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String convertedDate \u003d simpleDateFormat2.format(date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return convertedDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method converts the old time back into the format of hh:mm."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param oldTime the time entered by the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return convertedTime the time in the desired format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws ParseException the error occurs if the time is not found."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static String convertTime(String oldTime) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        SimpleDateFormat simpleDateFormat1 \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        simpleDateFormat1.setLenient(false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Date time \u003d simpleDateFormat1.parse(oldTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        SimpleDateFormat simpleDateFormat2 \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        simpleDateFormat2.setLenient(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String convertedTime \u003d simpleDateFormat2.format(time);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return convertedTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 46,
      "JustinnT": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * Used to validate the format of address."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author DUC"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d \"Patient\u0027s addresses is limited to 64 characters \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"including of whitespaces\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor for address."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param address address from the hash map created in Parser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws InvalidFormatException when the address is invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Address(String address) throws InvalidFormatException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!isValidAddress(address)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            throw new InvalidFormatException(MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private static boolean isValidAddress(String address) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return address.length() \u003c\u003d 64 || address.isBlank();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Age.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * Class to validate age."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author DUC"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"The format of age is positive integer within 0 and 150\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public int age;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor for Age."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param age getting from Parser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws InvalidFormatException when age is invalid"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Age(String age) throws InvalidFormatException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        boolean isAgeEqualNull \u003d age.isBlank();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (isAgeEqualNull) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.age \u003d -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                this.age \u003d Integer.parseInt(age);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                this.age \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!isValidAge(this.age) \u0026\u0026 !isAgeEqualNull) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            throw new InvalidFormatException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static boolean isValidAge(int age) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return age \u003e\u003d 0 \u0026\u0026 age \u003c\u003d 150;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * Class for name\u0027s validation."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author DUC"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Name to be added/edited should contain spaces optionally \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"and alphabetic characters with length of between 1 and 64\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alpha} ]+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor of Name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param name getting from Parser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws InvalidFormatException when name is invalid"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Name(String name) throws InvalidFormatException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!isValidName(name)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            throw new InvalidFormatException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static boolean isValidName(String validatedString) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return (validatedString.matches(NAME_VALIDATION_REGEX) \u0026\u0026 validatedString.length() \u003c\u003d 64)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "                || validatedString.isBlank();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 39
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * Class for phone\u0027s validation."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author DUC"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d \"Patient\u0027s phone numbers should contain 8 numbers \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            + \"and no whitespaces between digits\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor of Phone."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param phone getting from Parser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws InvalidFormatException when phone is invalid"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Phone(String phone) throws InvalidFormatException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!isValidPhone(phone)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            throw new InvalidFormatException(MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static boolean isValidPhone(String phone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return (phone.matches(PHONE_VALIDATION_REGEX) \u0026\u0026 phone.length() \u003d\u003d 8) || phone.isBlank();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/enums/AppointmentFieldKeys.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * This enum reflects the changeable fields for the Appointment class under the package \"record\"."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * @author Justin."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * @see seedu.duke.record.Appointment"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public enum AppointmentFieldKeys {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    INDEX,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    DATE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    TIME,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    PATIENT_ID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        switch (this) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case INDEX:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"index\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case DATE:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"date\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case TIME:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"time\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case PATIENT_ID:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"pid\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/enums/PatientFieldKeys.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * This enum reflects the changeable fields for the Patient Class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * @author Justin."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * @see seedu.duke.record.Patient"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public enum PatientFieldKeys {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    INDEX,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    NAME,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    AGE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    ADDRESS,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    CONTACT_NUMBER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This toString method overrides the default method with a specified field key"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * and returns a string when called."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        switch (this) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        case INDEX:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            return \"index\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case NAME:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"name\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case AGE:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"age\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADDRESS:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"address\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case CONTACT_NUMBER:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return \"phone\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 31,
      "Yukilite": 4,
      "thanhduc2000": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DescriptionIsEmptyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class DescriptionIsEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public DescriptionIsEmptyException(String commandType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        this.command \u003d commandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getLocalizedMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"Please ensure that the fields for \" + this.command + \" is provided\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DukeExceptions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.enums.AppointmentFieldKeys;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.enums.PatientFieldKeys;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * This class throws custom exceptions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class DukeExceptions {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String ADD_PATIENT_COMMAND \u003d \"addp\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method throws a NoKeyExistException if the key is not found in the input that the user supplied"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * For example: user input \"addp \\name Justin \\address Pasir Ris\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Key is : \"\\age\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Since \\age cannot be found in user input, this method will throw NoKeyExistException."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param keyValue the key value pair \"Key \u003d\u003e value\" as a size \u003d 2 String array."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws NoKeyExistException throws exception when there is no key associated with any value."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void doesKeyExist(String[] keyValue) throws NoKeyExistException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        if (keyValue.length !\u003d 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new NoKeyExistException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method throws a UnknownCommandException when the user supplied in an unknown command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * All commands available are listed as final Strings in Parser class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws UnknownCommandException when user supplied command are not amongst the final Strings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void throwUnknownCommand() throws UnknownCommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        throw new UnknownCommandException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Checks the validity of the index. If it is not valid, throws one of the two exceptions."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param indexAsString The index as a string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param command       The command that called this method"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws InvalidIndexException    Throws an InvalidIndexException when the index supplied is \u003c\u003d 0"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws IndexNotIntegerException Throws an IndexNotIntegerException when the index supplied is not an integer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void checkIndexValidity(String indexAsString, String command) throws InvalidIndexException,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            IndexNotIntegerException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            int index \u003d Integer.parseInt(indexAsString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            if (index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                throw new InvalidIndexException(command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new IndexNotIntegerException(command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Checks that at least 1 field is included in the user input for the command addp."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * If all fields is blank, then NoFieldCommandException is thrown."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param patientFieldsToAdd the HashMap of the Patient Field to add."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws NoFieldCommandException throws a NoFieldCommandException when all values that match to keys are empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void checkFieldEmptyAddPatient(Map\u003cString, String\u003e patientFieldsToAdd)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throws NoFieldCommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        boolean isEmpty \u003d isPatientFieldEmpty(patientFieldsToAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new NoFieldCommandException(ADD_PATIENT_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Checks if the field-values are empty for the command \"editp\"."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throw a NoFieldCommandException if all fields are empty."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param patientFieldsToEdit the HashMap of key values."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws NoFieldCommandException if all fields are empty."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void checkFieldEmptyEditPatient(Map\u003cString, String\u003e patientFieldsToEdit)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throws NoFieldCommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        boolean isEmpty \u003d isPatientFieldEmpty(patientFieldsToEdit);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new NoFieldCommandException(\"editp\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * A helper method to check if the HashMap\u0027s values are all empty."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns false immediately if at least 1 is not empty."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param patientFieldsToEdit the HashMap of key values."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return true if all empty, false if at least 1 is not empty."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static boolean isPatientFieldEmpty(Map\u003cString, String\u003e patientFieldsToEdit) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (PatientFieldKeys pf : PatientFieldKeys.values()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String field \u003d pf.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            /* ignores the index field */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assert field !\u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            if (field.equals(PatientFieldKeys.INDEX.toString())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String value \u003d patientFieldsToEdit.get(field);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            if (!value.equals(BLANK_STRING)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Checks if the field-values are empty for the command \"adda\"."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throw a NoFieldCommandException if all fields are empty."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param appointmentFieldsToChange the HashMap of key values."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws NoFieldCommandException if all fields are empty."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void checkFieldEmptyAddAppointment(Map\u003cString, String\u003e appointmentFieldsToChange)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throws NoFieldCommandException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        boolean isEmpty \u003d isAppointmentFieldEmpty(appointmentFieldsToChange);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new NoFieldCommandException(\"adda\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * A helper method to check if the HashMap\u0027s values are all empty."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns false immediately if at least 1 is not empty."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param appointmentFieldsToChange the HashMap of key values."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return true if all empty, false if at least 1 is not empty."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static boolean isAppointmentFieldEmpty(Map\u003cString, String\u003e appointmentFieldsToChange) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (AppointmentFieldKeys af : AppointmentFieldKeys.values()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String field \u003d af.toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assert field !\u003d null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            if (field.equals(AppointmentFieldKeys.INDEX.toString())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    || field.equals(AppointmentFieldKeys.PATIENT_ID.toString())) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String value \u003d appointmentFieldsToChange.get(field);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            if (!value.equals(BLANK_STRING)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Checks if the field-values are empty for the command \"edita\"."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throw a NoFieldCommandException if all fields are empty."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param appointmentFieldsToEdit the HashMap of key values."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws NoFieldCommandException if all fields are empty."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void checkFieldEmptyEditAppointment(Map\u003cString, String\u003e appointmentFieldsToEdit)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throws NoFieldCommandException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        boolean isEmpty \u003d isAppointmentFieldEmpty(appointmentFieldsToEdit);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new NoFieldCommandException(\"edita\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Checks if the value of key \"pid\" is empty."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * If it is empty, throw a PidEmptyException."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param appointmentFieldsToAdd the HashMap of KeyValues"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws PidEmptyException If the value for the key \"pid\" is empty."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void checkPidEmpty(Map\u003cString, String\u003e appointmentFieldsToAdd) throws PidEmptyException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String pid \u003d appointmentFieldsToAdd.get(\"pid\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        if (pid.isEmpty()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new PidEmptyException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Check if both lists are empty."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * If it is empty, throw EmptyListsException."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws EmptyListsException when both lists are empty"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @author Duc"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static void checkEmptyLists() throws EmptyListsException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (AppointmentList.getTotalAppointments() \u003d\u003d 0 \u0026\u0026 PatientList.getTotalPatients() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            throw new EmptyListsException();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Check if appointment\u0027s list is empty."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * If it is empty, throw EmptyAppointmentsException."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws EmptyAppointmentsException when appointment\u0027s list is empty"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @author Duc"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static void checkEmptyAppointments() throws EmptyAppointmentsException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (AppointmentList.getTotalAppointments() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            throw new EmptyAppointmentsException();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Check if patient\u0027s list is empty."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * If it is empty, throw EmptyPatientsException."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @throws EmptyPatientsException when patient\u0027s list is empty"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @author Duc"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static void checkEmptyPatients() throws EmptyPatientsException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (PatientList.getTotalPatients() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            throw new EmptyPatientsException();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 191,
      "thanhduc2000": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/EmptyAppointmentsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class EmptyAppointmentsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/EmptyListsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class EmptyListsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/EmptyPatientsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class EmptyPatientsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/FileCorruptedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class FileCorruptedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/IndexNotIntegerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class IndexNotIntegerException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public IndexNotIntegerException(String commandType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        this.command \u003d commandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getLocalizedMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"Please input a valid integer as the index for the command \" + command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidDateTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class InvalidDateTimeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public String getLocalizedMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        return \"Please fill in date in right format: dd/mm/yyyy and time in the 24 hour format: hhmm\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    //TODO Note to self: this class is not being utilized at all. How can I use this class to replace ParseExceptions?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 7,
      "JustinnT": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * Source:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *  /data/exception/IllegalValueException.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " *  Handle with format validation in addp/editp"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " * @author DUC"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class InvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Constructor of InvalidFormatException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public InvalidFormatException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class InvalidIndexException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public InvalidIndexException(String commandType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        this.command \u003d commandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getLocalizedMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"Please ensure that the index for \" + this.command + \" is valid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/NoFieldCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class NoFieldCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public NoFieldCommandException(String commandType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        this.command \u003d commandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getLocalizedMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"Please ensure that at least one field for \" + this.command + \" is provided\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 10,
      "thanhduc2000": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/NoKeyExistException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "public class NoKeyExistException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/PidEmptyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class PidEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getLocalizedMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"Please ensure that pid is not empty.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/UnknownCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "public class UnknownCommandException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getLocalizedMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"Unknown command\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/generator/PatientIdManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.generator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * The class to manage patient id numbers. Also allows patient id to be reused if said patient is deleted from HAMS."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * All done in 0(1) time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * @author Andy"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class PatientIdManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static int nextTopNewNumber \u003d 0; // Patient ID to choose if queue is empty"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static Queue\u003cInteger\u003e nextNumberQueueThing \u003d new LinkedList\u003c\u003e(); // Queue of patient id numbers from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    // deleted patients"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static Map\u003cInteger, Integer\u003e patientIdMap \u003d new HashMap\u003c\u003e(); // Map containing all the patientid used thus"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    // far"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Getter method for the getPatientIdMap (map of the patient id that is currently used)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @return the map of the patientId that is currently used."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static Map\u003cInteger, Integer\u003e getPatientIdMap() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return patientIdMap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Setter Getter method for the getPatientIdMap (map of the patient id that is currently used)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param patientIdMap the new map to update."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static void setPatientIdMap(Map\u003cInteger, Integer\u003e patientIdMap) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.patientIdMap \u003d patientIdMap;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Get nextTopNewNumber value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @return the new nextTopNewNumber."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static int getNextTopNewNumber() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return nextTopNewNumber;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Setter method for nextTopNewNumber."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param nextTopNewNumber the new top number."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static void setNextTopNewNumber(int nextTopNewNumber) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.nextTopNewNumber \u003d nextTopNewNumber;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Getter method to get the queue of reusable patientID numbers."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @return the queue containing the reusable patientId numbers."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static Queue\u003cInteger\u003e getNextNumberQueueThing() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return nextNumberQueueThing;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Get a patient ID number, be it a new one or from a deleted patient."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @return the new patient ID number"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static int getNextPatientId() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int returnNumber \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (nextNumberQueueThing.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            returnNumber \u003d nextTopNewNumber;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            nextTopNewNumber \u003d nextTopNewNumber + 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            patientIdMap.put(returnNumber, 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            return returnNumber;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        returnNumber \u003d nextNumberQueueThing.remove();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientIdMap.put(returnNumber, 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return returnNumber;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Method called when patient is deleted. Ensure that the deleted patient number can be reused."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param patientID the patient Id from the deleted patient."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static void addBackPatientId(int patientID) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (patientID \u003c 0 || patientID \u003e\u003d nextTopNewNumber) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (nextNumberQueueThing.contains(patientID)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assert patientID \u003e\u003d 0 \u0026\u0026 patientID \u003c nextTopNewNumber;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assert !nextNumberQueueThing.contains(patientID);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        nextNumberQueueThing.add(patientID);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientIdMap.put(patientID, null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Check to see if the patient id actually belongs to any of the patients present."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param patientID the patient id to check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @return True if patient id exist. False if it does not"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static boolean checkPatientIdUsed(int patientID) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /* Quick checks */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (patientID \u003e Integer.MAX_VALUE) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (patientID \u003c 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Integer number \u003d patientIdMap.get(patientID);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return number !\u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Called only when the clear all patient command is called."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * This reset the patient Id manager state back to the beginning."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static void clearPatientId() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        nextTopNewNumber \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        nextNumberQueueThing.clear();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientIdMap.clear();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andy-aw-why": 131
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.AddAppointmentCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.AddPatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.ClearAllCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.ClearAppointmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.ClearPatientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.DeletePatientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.EditAppointmentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.EditPatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.FindAppointmentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.FindPatientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.ListAppointmentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.ListPatientCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.enums.AppointmentFieldKeys;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.enums.PatientFieldKeys;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.DukeExceptions;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.IndexNotIntegerException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.NoFieldCommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.NoKeyExistException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.PidEmptyException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final int COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final int LIMIT \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final int VALUE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final int VALUE_STRING_INDEX \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String REGEX_BACKSLASH \u003d \"\\\\\\\\\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String BLANK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String EXIT_COMMAND \u003d \"exit\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String ADD_PATIENT \u003d \"addp\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String EDIT_PATIENT \u003d \"editp\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String DELETE_PATIENT \u003d \"deletep\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String LIST_PATIENT \u003d \"listp\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String ADD_APPOINTMENT \u003d \"adda\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String EDIT_APPOINTMENT \u003d \"edita\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String DELETE_APPOINTMENT \u003d \"deletea\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String LIST_APPOINTMENT \u003d \"lista\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static final String FIND_APPOINTMENT \u003d \"finda\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static final String FIND_PATIENTS \u003d \"findp\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static final String CLEAR_PATIENTS_COMMAND \u003d \"clearp\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static final String CLEAR_APPOINTMENTS_COMMAND \u003d \"cleara\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static final String CLEAR_ALL_COMMAND \u003d \"clearall\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This methods returns the command from the user input string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return the actual command to execute."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String[] getCommand(String fullCommand) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String[] splits \u003d fullCommand.split(\" \", LIMIT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return splits;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns strictly the String that is between the fieldKey and \" \\\" delimiter."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * It will only return the value that is behind the first key."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns an empty String if the key supplied cannot be found in the fullCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the entire command that the user supplied"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param key         the patient field, prepended with REGEX_BACKSLASH. This key is an enum."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @return value.trim() the String that is between key and \" \\\" delimiter"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String findValue(String fullCommand, String key) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String[] keyValue \u003d fullCommand.split(key, LIMIT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.doesKeyExist(keyValue);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String valueString \u003d WHITESPACE + keyValue[VALUE_STRING_INDEX];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String delimiter \u003d WHITESPACE + REGEX_BACKSLASH;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String[] b \u003d valueString.split(delimiter, LIMIT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String value \u003d b[VALUE_INDEX];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return value.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (NoKeyExistException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return BLANK_STRING;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This is a helper method to fill the HashMap with the values read from user input."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand        the full command read from the user"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param patientFieldsToAdd the HashMap to store the values read from the fullCommand"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private void fillPatientFields(String fullCommand, Map\u003cString, String\u003e patientFieldsToAdd) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (PatientFieldKeys pf : PatientFieldKeys.values()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String field \u003d pf.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assert field !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            if (field.equals(PatientFieldKeys.INDEX.toString())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String key \u003d WHITESPACE + REGEX_BACKSLASH + field + WHITESPACE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String value \u003d findValue(fullCommand, key);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            patientFieldsToAdd.put(field, value);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns a HashMap that take keys from PatientFieldKeys and values from user input."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The HashMap is guaranteed to contain the keys found in the enum PatientFieldKeys."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The values however will be determined by the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method is only used for \"addp\"."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws a noFieldCommandException when all fields are blank."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @return fieldsToChange a HashMap that matches the patient\u0027s fieldKey to value."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws NoFieldCommandException Throws a noFieldCommandException when all fields are blank."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @see PatientFieldKeys for the list of keys guaranteed to be in the HashMap."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @see #findValue(String fullCommand, String key) value returned by this method will be stored at key."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private Map\u003cString, String\u003e getPatientFieldsAdd(String fullCommand) throws NoFieldCommandException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Map\u003cString, String\u003e patientFieldsToAdd \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        fillPatientFields(fullCommand, patientFieldsToAdd);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        //check if there is at least 1 field inside."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        DukeExceptions.checkFieldEmptyAddPatient(patientFieldsToAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return patientFieldsToAdd;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns a HashMap that take keys from PatientFieldKeys and values from user input."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The HashMap is guaranteed to contain the keys found in the enum PatientFieldKeys."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The values however will be determined by the user."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method is only used for \"editp\"."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws a InvalidIndexException when the index is \u003c\u003d 0."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws a IndexNotIntegerException when index is not an integer."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws a NoFieldCommandException when all fields are blank."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return fieldsToChange a HashMap that matches the patient\u0027s fieldKey to value."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws InvalidIndexException    when the index is \u003c\u003d 0."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws IndexNotIntegerException when index is not an integer."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws NoFieldCommandException  when all fields are blank."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private Map\u003cString, String\u003e getPatientFieldsEdit(String fullCommand) throws InvalidIndexException,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            IndexNotIntegerException, NoFieldCommandException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Map\u003cString, String\u003e patientFieldsToEdit \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String index \u003d WHITESPACE + REGEX_BACKSLASH + PatientFieldKeys.INDEX.toString() + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String indexValue \u003d findValue(fullCommand, index);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        DukeExceptions.checkIndexValidity(indexValue, \"editp\"); //TODO remove magic string"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        patientFieldsToEdit.put(PatientFieldKeys.INDEX.toString(), indexValue);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        fillPatientFields(fullCommand, patientFieldsToEdit);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        //check if there is at least 1 field inside."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        DukeExceptions.checkFieldEmptyEditPatient(patientFieldsToEdit);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return patientFieldsToEdit;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns a HashMap that take keys from PatientFieldKeys and values from user input."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The HashMap is guaranteed to contain the keys found in the enum PatientFieldKeys."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The values however will be determined by the user."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method is only used for \"editp\"."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws a InvalidIndexException when the index is \u003c\u003d 0."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws a IndexNotIntegerException when index is not an integer."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return fieldsToChange a HashMap that only contains index as key"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws InvalidIndexException    when the index is \u003c\u003d 0."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws IndexNotIntegerException when index is not an integer."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private Map\u003cString, String\u003e getPatientFieldsDelete(String fullCommand) throws InvalidIndexException,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            IndexNotIntegerException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Map\u003cString, String\u003e patientFieldsToDelete \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String index \u003d WHITESPACE + REGEX_BACKSLASH + PatientFieldKeys.INDEX.toString() + WHITESPACE;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String indexValue \u003d findValue(fullCommand, index);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        DukeExceptions.checkIndexValidity(indexValue, \"deletep\"); //TODO remove magic string"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        patientFieldsToDelete.put(PatientFieldKeys.INDEX.toString(), indexValue);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return patientFieldsToDelete;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This is a helper method to fill the HashMap with the values read from user input."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand               the full command read from the user"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param appointmentFieldsToChange the HashMap to store the values read from the fullCommand"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private void fillAppointmentFields(String fullCommand, Map\u003cString, String\u003e appointmentFieldsToChange) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (AppointmentFieldKeys af : AppointmentFieldKeys.values()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String field \u003d af.toString();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assert field !\u003d null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            if (field.equals(AppointmentFieldKeys.INDEX.toString())) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String key \u003d WHITESPACE + REGEX_BACKSLASH + field + WHITESPACE;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String value \u003d findValue(fullCommand, key);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            appointmentFieldsToChange.put(field, value);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns a HashMap that takes the key from AppointmentFieldKeys and values from user input."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The HashMap is guaranteed to contain the keys found in the enum AppointmentFieldKeys."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The values however will be determined by the user. If not provided, EMPTY_STRING will be stored."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method is only for \"adda\"."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throw NoFieldCommandException when all fields are blank."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a HashMap that matches the appointment\u0027s fieldKey to value."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @see AppointmentFieldKeys"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @see #findValue(String fullcommand, String key) value returned by this method will be stored at key."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private Map\u003cString, String\u003e getAppointmentFieldsAdd(String fullCommand) throws NoFieldCommandException,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            PidEmptyException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Map\u003cString, String\u003e appointmentFieldsToAdd \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        fillAppointmentFields(fullCommand, appointmentFieldsToAdd);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        /* check if there is at least 1 field inside. */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        DukeExceptions.checkFieldEmptyAddAppointment(appointmentFieldsToAdd);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        DukeExceptions.checkPidEmpty(appointmentFieldsToAdd);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return appointmentFieldsToAdd;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns a HashMap that takes the key from AppointmentFieldKeys and values from user input."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The HashMap is guaranteed to contain the keys found in the enum AppointmentFieldKeys."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The values however will be determined by the user. If not provided, EMPTY_STRING will be stored."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method is only for \"edita\"."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throw InvalidIndexException when index \u003c\u003d 0."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throw IndexNotIntegerException when index is not an integer."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throw NoFieldCommandException when all fields are blank."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a HashMap that matches the appointment\u0027s fieldKey to value."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws InvalidIndexException    when index \u003c\u003d 0."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws IndexNotIntegerException when index is not an integer,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws NoFieldCommandException  when all fields are blank."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private Map\u003cString, String\u003e getAppointmentFieldsEdit(String fullCommand) throws InvalidIndexException,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            IndexNotIntegerException, NoFieldCommandException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Map\u003cString, String\u003e appointmentFieldsToEdit \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String index \u003d WHITESPACE + REGEX_BACKSLASH + AppointmentFieldKeys.INDEX.toString() + WHITESPACE;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String indexValue \u003d findValue(fullCommand, index);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        DukeExceptions.checkIndexValidity(indexValue, \"edita\"); //TODO remove magic string"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        appointmentFieldsToEdit.put(AppointmentFieldKeys.INDEX.toString(), indexValue);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        fillAppointmentFields(fullCommand, appointmentFieldsToEdit);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        /* check if there is at least 1 field inside. */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        DukeExceptions.checkFieldEmptyEditAppointment(appointmentFieldsToEdit);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return appointmentFieldsToEdit;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns a HashMap that takes the key from AppointmentFieldKeys and values from user input."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The HashMap is guaranteed to contain the keys found in the enum AppointmentFieldKeys."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * The values however will be determined by the user. If not provided, EMPTY_STRING will be stored."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This method is only for \"deletea\"."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throw InvalidIndexException when index \u003c\u003d 0."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throw IndexNotIntegerException when index is not an integer."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a HashMap that matches the appointment\u0027s fieldKey to value."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws InvalidIndexException    when index \u003c\u003d 0."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws IndexNotIntegerException when index is not an integer."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private Map\u003cString, String\u003e getAppointmentFieldsDelete(String fullCommand) throws InvalidIndexException,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            IndexNotIntegerException {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Map\u003cString, String\u003e appointmentFieldsToDelete \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String index \u003d WHITESPACE + REGEX_BACKSLASH + AppointmentFieldKeys.INDEX.toString() + WHITESPACE;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String indexValue \u003d findValue(fullCommand, index);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        DukeExceptions.checkIndexValidity(indexValue, \"deletea\"); //TODO remove magic string"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        appointmentFieldsToDelete.put(AppointmentFieldKeys.INDEX.toString(), indexValue);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return appointmentFieldsToDelete;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String getSearchValue(String[] commandParsed) throws NoFieldCommandException {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        if (commandParsed.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            throw new NoFieldCommandException(commandParsed[0]);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return commandParsed[1];"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns the specific type of command object."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws an UnknownCommandException for the caller to catch when user supplied an unknown command."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws InvalidIndexError when the index supplied for edit and delete commands are invalid (alphabets, \u003c\u003d 0)."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param command        the command that was specified."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fieldsToChange the HashMap of what to add or edit."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a specific command object that is specified by @param command."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws UnknownCommandException Throws custom duke exception to catch and print error message."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private Command getCommandObject(String command, Map\u003cString, String\u003e fieldsToChange) throws"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            UnknownCommandException, InvalidFormatException {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADD_PATIENT:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Duke.patientIndexNumber++;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange.put(INDEX, Integer.toString(Duke.patientIndexNumber));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new AddPatientCommand(fieldsToChange);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case EDIT_PATIENT:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new EditPatientCommand(fieldsToChange);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case DELETE_PATIENT:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new DeletePatientCommand(fieldsToChange);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case LIST_PATIENT:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new ListPatientCommand();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADD_APPOINTMENT:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Duke.appointmentIndexNumber++;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange.put(INDEX, Integer.toString(Duke.patientIndexNumber));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new AddAppointmentCommand(fieldsToChange);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case EDIT_APPOINTMENT:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new EditAppointmentCommand(fieldsToChange);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case DELETE_APPOINTMENT:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new DeleteAppointmentCommand(fieldsToChange);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case LIST_APPOINTMENT:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new ListAppointmentCommand();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case HELP_COMMAND:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case EXIT_COMMAND:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case CLEAR_PATIENTS_COMMAND:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new ClearPatientCommand();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case CLEAR_APPOINTMENTS_COMMAND:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new ClearAppointmentCommand();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case CLEAR_ALL_COMMAND:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new ClearAllCommand();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            DukeExceptions.throwUnknownCommand();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Returns the command object to be executed."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Throws an UnknownCommandException for the caller to catch when user supplied an unknown command."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param fullCommand the user input that the user provided."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a command object to be executed."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @throws UnknownCommandException Throws custom duke exception to catch and print error message."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public Command parseCommand(String fullCommand) throws"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            UnknownCommandException, InvalidIndexException, IndexNotIntegerException, NoFieldCommandException,"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            PidEmptyException, InvalidFormatException {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String trimCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String[] commandParsed \u003d getCommand(trimCommand);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String commandAsString \u003d commandParsed[COMMAND_INDEX].trim();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String searchValue;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        switch (commandAsString) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADD_PATIENT:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange \u003d getPatientFieldsAdd(fullCommand);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            command \u003d getCommandObject(commandAsString, fieldsToChange);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case EDIT_PATIENT:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange \u003d getPatientFieldsEdit((fullCommand));"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            command \u003d getCommandObject(commandAsString, fieldsToChange);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case DELETE_PATIENT:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange \u003d getPatientFieldsDelete(fullCommand);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            command \u003d getCommandObject(commandAsString, fieldsToChange);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case ADD_APPOINTMENT:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange \u003d getAppointmentFieldsAdd(fullCommand);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            command \u003d getCommandObject(commandAsString, fieldsToChange);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case EDIT_APPOINTMENT:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange \u003d getAppointmentFieldsEdit(fullCommand);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            command \u003d getCommandObject(commandAsString, fieldsToChange);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case DELETE_APPOINTMENT:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fieldsToChange \u003d getAppointmentFieldsDelete(fullCommand);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            command \u003d getCommandObject(commandAsString, fieldsToChange);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case FIND_PATIENTS:"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            searchValue \u003d getSearchValue(commandParsed);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new FindPatientCommand(searchValue);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        case FIND_APPOINTMENT:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            searchValue \u003d getSearchValue(commandParsed);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            return new FindAppointmentCommand(searchValue);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            command \u003d getCommandObject(commandAsString, null);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 437,
      "Yukilite": 3,
      "thanhduc2000": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/record/Appointment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import seedu.duke.converter.TimeConverter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.sql.Time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class contains the date and time for each patient."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private int patientId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This constructor converts the input date and time into the desired format. During initialization, the date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * and time will be in the right format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @param date      the date input by user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @param time      the time input by user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param patientId the patientid of the patient of this appointment."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @throws ParseException this error occurs when date or string is empty."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public Appointment(String date, String time, int patientId) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assert time !\u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        this.date \u003d TimeConverter.oldDate(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        this.time \u003d TimeConverter.oldTime(time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.patientId \u003d patientId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public int getPatientId() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return patientId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void setPatientId(int patientId) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.patientId \u003d patientId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Update the name if it is not null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param date date that needs to be updated"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public void setDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!date.isBlank()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            this.date \u003d TimeConverter.oldDate(date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This part is implemented for the EditPatientCommand class by Duc"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Update the age if it is a positive integer."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param time time that needs to be updated"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public void setTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!time.isBlank()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            this.time \u003d TimeConverter.oldTime(time);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Overrides the default toString command so that the patient\u0027s appointment."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * details can be printed in a specific string format."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return newToString The formatted string"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        String newToString \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        newToString \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                \"{\" + \"[Date]:\" + \" \" + getDate() + \" \" + \"|\" + \"[Time]:\" + \" \" + getTime() + \" | \" + \"[PatientId]: \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                        + getPatientId() + \"}\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return newToString;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Method to update all the patient\u0027s information."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param date date that needs to be updated"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param time time that needs to be updated"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public void setAppointmentInfo(String date, String time) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 43,
      "JustinnT": 18,
      "thanhduc2000": 26,
      "andy-aw-why": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/record/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class contains the patient information such as name, age, address and contact number."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * @author yukilite"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private int patientID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method stores the patient information when the user enters an input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @param name          the name of the patient"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @param age           the age of the patient"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @param address       the address of the patient"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @param contactNumber the phone number of the patient"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param patientID     the patientID number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public Patient(String name, int age, String address, String contactNumber, int patientID) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.patientID \u003d patientID;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public int getPatientID() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return patientID;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void setPatientID(int patientID) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.patientID \u003d patientID;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assert name !\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Update the name if it is not null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param name name that needs to be updated"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!name.isBlank()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            assert name !\u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Update the age if it is a positive integer."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param age age that needs to be updated"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (age \u003e\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            assert age \u003e\u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.age \u003d age;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * This part is implemented for the EditPatientCommand class by Duc"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Update the address if it is not null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param address address that needs to be updated"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setAddress(String address) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!address.isBlank()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            assert address !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public String getContactNumber() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return contactNumber;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Update the contact number if it is not null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param contactNumber contact number that needs to be updated"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setContactNumber(String contactNumber) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        if (!contactNumber.isBlank()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "            assert contactNumber !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Overrides the default toString command so that the patient information can be printed"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * in a specific string format."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return newToString The formatted string"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Override public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        String newToString \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                \"{\" + \"[Name]:\" + \" \" + getName() + \" \" + \"|\" + \" \" + \"[Age]:\" + \" \" + getAge() + \" \" + \"|\" + \" \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                        + \"[Address]:\" + \" \" + getAddress() + \" \" + \"|\" + \" \" + \"[Contact Number]:\" + \" \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                        + getContactNumber() + \" | \" + \"[PatientID]: \" + getPatientID() + \"}\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        if (age \u003c\u003d -1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            newToString \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                    \"{\" + \"[Name]:\" + \" \" + getName() + \" \" + \"|\" + \" \" + \"[Age]:\" + \"  \" + \"|\" + \" \" + \"[Address]:\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                            + \" \" + getAddress() + \" \" + \"|\" + \" \" + \"[Contact Number]:\" + \" \" + getContactNumber()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                            + \" | \" + \"[PatientID]: \" + getPatientID() + \"}\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return newToString;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * Method to update all the patient\u0027s information."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param name          name that needs to be updated"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param age           age that needs to be updated"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param address       address that needs to be updated"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * @param contactNumber contact number that needs to be updated"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public void setPatientInfo(String name, int age, String address, String contactNumber) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setAge(age);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setAddress(address);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        setContactNumber(contactNumber);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Yukilite": 23,
      "JustinnT": 28,
      "thanhduc2000": 73,
      "andy-aw-why": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/AppointmentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * This class acts an ADT for the list containing existing Appointment objects. It contains various getter/setter"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * methods for accessing the different attributes and methods for manipulating the data structure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @author Brandon Chong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @since 2020-03-14"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class AppointmentList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static List\u003cAppointment\u003e appointmentList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public AppointmentList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public AppointmentList(List\u003cAppointment\u003e savedPatientList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        appointmentList \u003d savedPatientList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    //getter and setter"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static List\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static void setAppointmentList(List appointmentListInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        appointmentList \u003d appointmentListInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public static Appointment getAppointmentRecord(int appointmentIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        return getAppointmentList().get(appointmentIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static int getTotalAppointments() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return appointmentList.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void removeAppointmentRecord(int appointmentIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        getAppointmentList().remove(appointmentIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 7,
      "Yukilite": 2,
      "brandoncjh": 33,
      "thanhduc2000": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/PatientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class acts an ADT for the list containing existing Patient objects. It contains various getter/setter methods"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * for accessing the different attributes and methods for manipulating the data structure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @author Brandon Chong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @since 2020-03-14"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class PatientList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    private static List\u003cPatient\u003e patientList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public PatientList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        patientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public PatientList(List\u003cPatient\u003e savedPatientList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        patientList \u003d savedPatientList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static List\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return patientList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void setPatientList(List patientListInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        patientList \u003d patientListInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static Patient getPatientRecord(int patientIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return getPatientList().get(patientIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static int getTotalPatients() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return patientList.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void removePatientRecord(int patientIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        getPatientList().remove(patientIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 9,
      "brandoncjh": 21,
      "thanhduc2000": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.converter.TimeConverter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.generator.PatientIdManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.exceptions.FileCorruptedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.ObjectInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.sql.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static final String PATIENT_ID_SAVE_FILEPATH \u003d \"saves/patientId.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final String SAVE_DIRECTORY \u003d \"saves\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final String APPOINTMENT_LIST_SAVE_FILEPATH \u003d \"saves/appointments.txt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final String PATIENT_LIST_SAVE_FILEPATH \u003d \"saves/patients.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String PATIENT_ID_PRESENT_SAVE_FILEPATH \u003d \"saves/patientsIdExist.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String PIPE_DELIMITER \u003d \" | \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static PatientList patientList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static AppointmentList appointmentList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String appointmentListSaveLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String patientListSaveLocation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String patientIdSaveLocation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String patientIdExistSaveLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.appointmentListSaveLocation \u003d APPOINTMENT_LIST_SAVE_FILEPATH;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.patientListSaveLocation \u003d PATIENT_LIST_SAVE_FILEPATH;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.patientIdSaveLocation \u003d PATIENT_ID_SAVE_FILEPATH;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.patientIdExistSaveLocation \u003d PATIENT_ID_PRESENT_SAVE_FILEPATH;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * load save file for Appointments list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @return appointmentListToReturn returns the appointment list in the save file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @throws FileNotFoundException this exception occurs when a file is not found"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public List\u003cAppointment\u003e loadSavedAppointments() throws FileNotFoundException, ParseException,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            FileCorruptedException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        File appointmentSave \u003d new File(this.appointmentListSaveLocation);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (!appointmentSave.exists()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            File newDirectory \u003d new File(SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            boolean isNewDirectoryCreated \u003d newDirectory.mkdir();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (isNewDirectoryCreated || newDirectory.exists()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                File newFile \u003d new File(APPOINTMENT_LIST_SAVE_FILEPATH);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    newFile.createNewFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    Ui.showFailedToCreateFile();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                Ui.showFailedToCreateDirectory();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cAppointment\u003e appointmentListToReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        Scanner s \u003d new Scanner(appointmentSave);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //process each line, construct new Appointment object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String appointmentString \u003d s.nextLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            String[] patientFields \u003d appointmentString.split(\" \\\\| \", 3);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "            //assert patientFields.length \u003d\u003d 2 : \"not enough fields in this line:\" + appointmentString;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            for (String field : patientFields) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                if (field.trim().isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    field \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String convertedDate \u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String convertedTime \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                convertedDate \u003d TimeConverter.convertDate(patientFields[0]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                convertedTime \u003d TimeConverter.convertTime(patientFields[1]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                Ui.printSaveFileCorruptedMessage();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    appointmentSave.delete();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    appointmentSave.createNewFile();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                } catch (IOException newError) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    Ui.printFileCreationErrorMessage();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                throw new FileCorruptedException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            assert convertedDate !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            assert convertedTime !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                Appointment newAppointmentToLoad \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                        new Appointment(convertedDate, convertedTime, Integer.parseInt(patientFields[2]));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                appointmentListToReturn.add(newAppointmentToLoad);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                Ui.printSaveFileCorruptedMessage();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    appointmentSave.delete();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    appointmentSave.createNewFile();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                } catch (IOException newError) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    Ui.printFileCreationErrorMessage();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                throw new FileCorruptedException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return appointmentListToReturn;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * load save file for Patients list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @return patientListToReturn the patient list for the save file."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @throws FileNotFoundException this exception occurs if a file is not found."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public List\u003cPatient\u003e loadSavedPatients() throws FileNotFoundException, FileCorruptedException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        File patientSave \u003d new File(this.patientListSaveLocation);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (!patientSave.exists()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            File newDirectory \u003d new File(SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            boolean isNewDirectoryCreated \u003d newDirectory.mkdir();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (isNewDirectoryCreated || newDirectory.exists()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                File newFile \u003d new File(PATIENT_LIST_SAVE_FILEPATH);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    newFile.createNewFile();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    Ui.showFailedToCreateFile();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                Ui.showFailedToCreateDirectory();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        List\u003cPatient\u003e patientListToReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        Scanner s \u003d new Scanner(patientSave);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cInteger, Integer\u003e patientIdMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //process each line, construct new Appointment object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            String patientString \u003d s.nextLine();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            String[] patientFields \u003d patientString.split(\" \\\\| \", 5);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            for (String field : patientFields) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                if (field.trim().isEmpty()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    field \u003d null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (patientFields[1].isEmpty()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                patientFields[1] \u003d \"-1\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                Patient newPatientToLoad \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                        new Patient(patientFields[0], Integer.parseInt(patientFields[1]), patientFields[2],"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                                patientFields[3], Integer.parseInt(patientFields[4]));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                patientListToReturn.add(newPatientToLoad);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                patientIdMap.put(Integer.parseInt(patientFields[4]), 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                Ui.printSaveFileCorruptedMessage();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    patientSave.delete();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    patientSave.createNewFile();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                } catch (IOException newError) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    Ui.printFileCreationErrorMessage();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                throw new FileCorruptedException();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        loadPatientIdState(patientIdMap);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return patientListToReturn;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Load the state of the patient id(s) into our patient id management system."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param patientIdMap the map of patient id as obtained from patient information."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @throws FileNotFoundException if there is an error locating the file to save to."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private void loadPatientIdState(Map\u003cInteger, Integer\u003e patientIdMap) throws FileNotFoundException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /* Preparing the file reader */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        File patientIdSave \u003d new File(this.patientIdSaveLocation);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (!patientIdSave.exists()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            File newDirectory \u003d new File(SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            boolean isNewDirectoryCreated \u003d newDirectory.mkdir();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (isNewDirectoryCreated || newDirectory.exists()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                File newFile \u003d new File(PATIENT_ID_SAVE_FILEPATH);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                    newFile.createNewFile();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                    Ui.showFailedToCreateFile();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                Ui.showFailedToCreateDirectory();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /* Actual file reading */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Scanner s \u003d new Scanner(patientIdSave);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /* There is information saved about the patientIds */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (s.hasNext()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientIdManager.setNextTopNewNumber(Integer.parseInt(s.nextLine()));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /* There are reusable patient id*/"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (s.hasNext()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            String patientIdString \u003d s.nextLine();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            String[] patientIdStringArray \u003d patientIdString.split(WHITESPACE);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            for (String number : patientIdStringArray) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                PatientIdManager.addBackPatientId(Integer.parseInt(number));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /* Loadking back the hash table of existing patient id */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setPatientIdMap(patientIdMap);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method saves the patient\u0027s appointment details from the AppointmentList into the local save file."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @throws IOException this exception occurs if the patient\u0027s appointment details are unable to be written"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     *                     to the local save file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    public void saveAppointmentsList() throws IOException, ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        FileWriter fwAppointmentSave;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fwAppointmentSave \u003d new FileWriter(this.appointmentListSaveLocation);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String newAppointmentString \u003d null;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (int i \u003d 0; i \u003c AppointmentList.getTotalAppointments(); i++) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Appointment newAppointmentData \u003d AppointmentList.getAppointmentRecord(i);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            newAppointmentString \u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                    newAppointmentData.getDate() + PIPE_DELIMITER + newAppointmentData.getTime() + PIPE_DELIMITER"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                            + newAppointmentData.getPatientId() + LS;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fwAppointmentSave.write(newAppointmentString);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        fwAppointmentSave.close();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method saves the patient list into the local save file."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @throws IOException this exception occurs if the patient data was unable to be written to the local save file."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void savePatientList() throws IOException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        FileWriter fwPatientSave;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fwPatientSave \u003d new FileWriter(this.patientListSaveLocation);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String newPatientString \u003d null;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (int i \u003d 0; i \u003c PatientList.getTotalPatients(); i++) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Patient newPatientData \u003d PatientList.getPatientRecord(i);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            newPatientString \u003d newPatientData.getName() + PIPE_DELIMITER + newPatientData.getAge() + PIPE_DELIMITER"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                    + newPatientData.getAddress() + PIPE_DELIMITER + newPatientData.getContactNumber() + PIPE_DELIMITER"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                    + newPatientData.getPatientID() + LS;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fwPatientSave.write(newPatientString);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        savePatientIdState();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        fwPatientSave.close();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Save the patient id management system state."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @throws IOException if the file cannot be written for some reason"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private void savePatientIdState() throws IOException {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /* Preparing file writer*/"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        FileWriter fwPatientIdSave \u003d null;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fwPatientIdSave \u003d new FileWriter(this.patientIdSaveLocation);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int tempNextTopNumber \u003d PatientIdManager.getNextTopNewNumber();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Queue\u003cInteger\u003e tempQueue \u003d PatientIdManager.getNextNumberQueueThing();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /* Saving of actual patient id management system state data */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        fwPatientIdSave.write(tempNextTopNumber + LS);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (!tempQueue.isEmpty()) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            for (Integer number : tempQueue) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                fwPatientIdSave.write(number + WHITESPACE);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        fwPatientIdSave.close();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 36,
      "Yukilite": 21,
      "brandoncjh": 141,
      "thanhduc2000": 14,
      "andy-aw-why": 119
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Represents the user interface that will interact with the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * @author Justin"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     * Empty Ui constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Prints the entire patientList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showEntirePatientList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d PatientList.getPatientList(); //getPatientList() method by @Brandonnn"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (patientList.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            System.out.println(\"No patient records found!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            for (Patient p : patientList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                System.out.println(index + \". \" + p); //override Patient class toString by @Sammmmm"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Prints the entire appointmentList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showEntireAppointmentList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        List\u003cAppointment\u003e appointmentList \u003d AppointmentList.getAppointmentList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (appointmentList.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            System.out.println(\"No appointment records present!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            for (Appointment a : appointmentList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                System.out.println(index + \". \" + a);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showNumberError() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Please input an integer for index\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showIndexError() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Index out of bound, please check the correct index from the list\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showDeleteAppointmentSuccess() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Appointment deleted successfully!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showDeletePatientSuccess() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Patient deleted successfully!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showUpdateAppointmentSuccess() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Appointment updated successfully!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showSetAgeError() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Received a non-integer for age, setting age to be blank.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static void showPatientIdError() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.out.println(\"Something is wrong with the patientId given. Creating new patientId\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showUpdatePatientSuccess() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Patient updated successfully!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showByeMessage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Bye!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showHelpUsage(String commandsMessageUsage) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(commandsMessageUsage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showFailedToCreateFile() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Failed to create file in new directory\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void showFailedToCreateDirectory() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        System.out.println(\"No existing \u0027save\u0027 directory found. Directory has been created.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static void showWrongPid() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.out.println(\"Wrong pid. This will not be added to the appointment list.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static void printSaveFileCorruptedMessage() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        System.out.println(\"A save file was corrupted. Clearing save file data...\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static void printFileCreationErrorMessage() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        System.out.println(\"An error occured while attempting to create the save file.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static void showNoPidExist() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.out.println(\"Patient Id don\u0027t exist! No appointment record will be made.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static void showWrongAge() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.out.println(\"Received age seems wrong, setting age to be blank\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "      "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public static void printInvalidPhoneNumberMessage() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Invalid phone number, phone number field will be set to empty.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void showExceptionError(String localizedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(localizedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void showAppointmentAddSuccess() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Appointment added successfully!\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void showPatientAddSuccess() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Patient added successfully\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Prints HAMS logo."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void printHello() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                \"            .---------.\\n\" + \"       _    |:: [-\u003d-] |\\n\" + \"      | |   |_________|\\n\" + \"      |~|\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                        + \"      |_|                    ,;;;;,\\n\" + \"       I\\\\  ,__ ,;;;, __,    ///\\\\\\\\\\\\\\\\\\\\\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                        + \"       I |{   / . . \\\\   }   / \\\"  \\\\\\\\||\\n\" + \"       I | ) (   _   ) (    \\\\_\u003d _///\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                        + \"       I |{___\u0027-. .-\u0027___}\\\\___ )_\\\\\\n\" + \"       I ||~/,\u0027~~~~~,\\\\~~|\u0027---((  \\\\\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                        + \"       I \\\\ //        \\\\\\\\ |     \\\\ \\\\ \\\\\\n\" + \"       I  \\\\/         // |     | /-/\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                        + \"       I (/         (/  |     |/||\\\\\\n\" + \"       I  |             |     |    |\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                        + \"       I  |             |     |____/\\n\" + \"       I  :-----_o_-----:      || |\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                        + \"       I  | /~~|\u003d\u003d\u003d|~~\\\\ |      (( |\\n\" + \"       I  ||   |\u003d\u003d\u003d|   ||      ||_/\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                        + \"      /^\\\\ \\\"~   \u0027^^^\u0027   \\\"\\\"     ((__|\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\" ____      ____  ________  _____       ______    ___   ____    ____  ________  \\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"|_  _|    |_  _||_   __  ||_   _|    .\u0027 ___  | .\u0027   `.|_   \\\\  /   _||_   __  | \\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"  \\\\ \\\\  /\\\\  / /    | |_ \\\\_|  | |     / .\u0027   \\\\_|/  .-.  \\\\ |   \\\\/   |    | |_ \\\\_| \\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"   \\\\ \\\\/  \\\\/ /     |  _| _   | |   _ | |       | |   | | | |\\\\  /| |    |  _| _  \\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"    \\\\  /\\\\  /     _| |__/ | _| |__/ |\\\\ `.___.\u0027\\\\\\\\  `-\u0027  /_| |_\\\\/_| |_  _| |__/ | \\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"     \\\\/  \\\\/     |________||________| `.____ .\u0027 `.___.\u0027|_____||_____||________| \\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                + \"                                                                               \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        printLongSeparator();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Hello I am HAMS. What can I do for you today?\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private String printSeparator() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        return \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void printLongSeparator() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(printSeparator() + printSeparator());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method prints out a list of Appointments containing a specific keyword in a readable format."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * It is used in the FindAppointmentCommand class."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param foundAppointments list of Appointment search results"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void printAppointmentSearchResults(List\u003cAppointment\u003e foundAppointments) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (foundAppointments.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            System.out.println(\"No appointment records containing the keyword were found.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        int currentIndex \u003d 1;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        for (Appointment result : foundAppointments) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            System.out.println(currentIndex + \". \" + result.toString());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            currentIndex++;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method prints out a list of Patients containing a specific keyword in a readable format."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * It is used in the FindPatientCommand class."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param foundPatients list of Patient search results"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void printPatientSearchResults(List\u003cPatient\u003e foundPatients) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (foundPatients.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            System.out.println(\"No patient records containing the keyword were found.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        int currentIndex \u003d 1;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        for (Patient result : foundPatients) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            System.out.println(currentIndex + \". \" + result.toString());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            currentIndex++;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void printInvalidAppointmentSearchDateMessage() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        System.out.println(\"The input does not follow the correct time search format: \\n\\\u0027dd/mm/yyyy\\\u0027\\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                + \"Please try again. \");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void printInvalidAppointmentSearchTimeMessage() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        System.out.println(\"The input does not follow the correct time search format: \\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                + \"\\\u0027hh:mm (am/pm)\\\u0027\\nPlease try again. \");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void printInvalidAppointmentSearchFormatMessage() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        System.out.println(\"The input does not follow the correct date or time search format: \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                + \"\\n\\\u0027dd/mm/yyyy\\\u0027 for dates\\n\\\u0027hh:mm (am/pm)\\\u0027 for times\\nPlease try again. \");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void printSearchValueConversionErrorMessage() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        System.out.println(\"An error occured when trying to parse the search input. Please try again.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    public void showAllItemsDeleted() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        System.out.println(\"Both list cleared!\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 118,
      "Yukilite": 1,
      "brandoncjh": 63,
      "thanhduc2000": 13,
      "andy-aw-why": 36
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddAppointmentCommandStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " * Stub class for AddAppointment class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class AddAppointmentCommandStub extends AddAppointmentCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String DATE \u003d \"date\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String TIME \u003d \"time\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Constructor thing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param appointmentInfo fake map of info."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public AddAppointmentCommandStub(Map\u003cString, String\u003e appointmentInfo) throws InvalidFormatException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        super(appointmentInfo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.date \u003d appointmentInfo.get(DATE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.time \u003d appointmentInfo.get(TIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method is a stub."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see AddAppointmentCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static Map\u003cString, String\u003e generateMap(int choice) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (choice \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"date\", \"asd\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"time\", \"asdsds\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } else if (choice \u003d\u003d 2) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"date\", \"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"time\", \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return tempMap;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method is a stub."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see AddAppointmentCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentStub newAppointment \u003d new AppointmentStub(this.date, this.time);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentListStub.createList(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentListStub.getAppointmentList().add(newAppointment);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 8,
      "JustinnT": 2,
      "thanhduc2000": 2,
      "andy-aw-why": 46
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "class AddAppointmentCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testNormalInput() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"date\", \"asdasd\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"time\", \"lklklk\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(tempMap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            String date \u003d \"asdasd\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            String time \u003d \"lklklk\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(date, addAppointmentCommand.getDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(time, addAppointmentCommand.getTime());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testEmptyString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"date\", \"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"time\", \"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(tempMap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testEmptyStringValue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"date\", \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"time\", \"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            String date \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(tempMap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(date, addAppointmentCommand.getDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(time, addAppointmentCommand.getTime());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void testAddNormalString() throws IOException, ParseException, InvalidFormatException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui ui \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d AddAppointmentCommandStub.generateMap(1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AddAppointmentCommand addCommand \u003d new AddAppointmentCommandStub(tempMap);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        addCommand.execute(ui, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentStub tempAppointment \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                AppointmentListStub.getAppointmentList().get(AppointmentListStub.getTotalAppointments() - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentStub newAppointment \u003d new AppointmentStub(\"asd\", \"asdsds\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(tempAppointment.getDate(), newAppointment.getDate());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(tempAppointment.getTime(), newAppointment.getTime());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void testAddEmptyString() throws IOException, InvalidFormatException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui ui \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d AddAppointmentCommandStub.generateMap(2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AddAppointmentCommandStub addCommand \u003d new AddAppointmentCommandStub(tempMap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        addCommand.execute(ui, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentStub tempAppointment \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                AppointmentListStub.getAppointmentList().get(AppointmentListStub.getTotalAppointments() - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentStub newAppointment \u003d new AppointmentStub(\"\", \"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(tempAppointment.getDate(), newAppointment.getDate());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(tempAppointment.getTime(), newAppointment.getTime());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 1,
      "JustinnT": 5,
      "thanhduc2000": 3,
      "andy-aw-why": 82
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddPatientCommandStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": " * Stub class for fake addCommand class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "class AddPatientCommandStub extends AddPatientCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String PATIENT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String AGE \u003d \"age\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String ADDRESS \u003d \"address\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String CONTACT_NUMBER \u003d \"phone\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String patientName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public AddPatientCommandStub(Map\u003cString, String\u003e patientInfo) throws InvalidFormatException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        super(patientInfo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.patientName \u003d patientInfo.get(PATIENT_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (patientInfo.get(AGE).isBlank()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            this.age \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                this.age \u003d Integer.parseInt(patientInfo.get(AGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                this.age \u003d -1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.address \u003d patientInfo.get(ADDRESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.contactNumber \u003d patientInfo.get(CONTACT_NUMBER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * Just to generate the fake map of information."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param choice the type of fake map to generate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @return the fake map of information"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static Map\u003cString, String\u003e generateMap(int choice) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (choice \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"name\", \"asd\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"age\", \"23\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"address\", \"asdsds\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"phone\", \"asdsadsad\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } else if (choice \u003d\u003d 2) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"name\", \"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"age\", \"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"address\", \"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            tempMap.put(\"phone\", \"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return tempMap;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * To act as a stub for execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param ui      ui object for displaying information"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     * @param storage storage object to do auto saving"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientStub newPatient \u003d new PatientStub(this.patientName, this.age, this.address, this.contactNumber);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientListStub.createList(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientListStub.getPatientList().add(newPatient);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 1,
      "thanhduc2000": 2,
      "andy-aw-why": 74
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "class AddPatientCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient1 \u003d new Patient(\"s;dlskd;l\", 23, \"Li\", \"121\", 123);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient2 \u003d new Patient(\" \", 15, \" \", \"15454455\", 232);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient3 \u003d new Patient(\"ewuioaiwoe\", 33, \"Lo\", \"1989\", 129991);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient4 \u003d new Patient(\"aeiwae\", 13, \"to\", \" \", 11122);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    Patient newPatient5 \u003d new Patient(\"LSDs\", -1, \"Lis\", \"12\", 7788);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testNormalInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"asdasd\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"12\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"asdasd\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"asdsad\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            AddPatientCommand addPatientCommand \u003d new AddPatientCommand(tempMap);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            int number \u003d 12;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(number, addPatientCommand.getAge());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testEmptyString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            AddPatientCommand addPatientCommand \u003d new AddPatientCommand(tempMap);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testAge() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            AddPatientCommand addPatientCommand \u003d new AddPatientCommand(tempMap);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            int number \u003d -1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(number, addPatientCommand.getAge());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testNonIntAge() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"name\", \"asdsad\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"age\", \"asdsada\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"address\", \"asdsds\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        tempMap.put(\"phone\", \"asdsadsad\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            AddPatientCommand addPatientCommand \u003d new AddPatientCommand(tempMap);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            int number \u003d -1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(number, addPatientCommand.getAge());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void testEmptyMap() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString, String\u003e tempMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            AddPatientCommand addPatientCommand \u003d new AddPatientCommand(tempMap);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void testAddNormalString() throws IOException, InvalidFormatException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui ui \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            Map\u003cString, String\u003e tempMap \u003d AddPatientCommandStub.generateMap(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AddPatientCommand addCommand \u003d new AddPatientCommandStub(tempMap);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            addCommand.execute(ui, storage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientStub temppatient \u003d PatientListStub.getPatientList().get(PatientListStub.getTotalPatients() - 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientStub newPatient \u003d new PatientStub(\"asd\", 23, \"asdsds\", \"asdsadsad\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(temppatient.getName(), newPatient.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(temppatient.getAge(), newPatient.getAge());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(temppatient.getAddress(), newPatient.getAddress());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertEquals(temppatient.getContactNumber(), newPatient.getContactNumber());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void testAddEmptyString() throws IOException, InvalidFormatException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui ui \u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cString,String\u003e tempMap \u003d AddPatientCommandStub.generateMap(2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AddPatientCommand addCommand \u003d new AddPatientCommandStub(tempMap);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        addCommand.execute(ui,storage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientStub temppatient \u003d PatientListStub.getPatientList().get(PatientListStub.getTotalPatients() - 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientStub newPatient \u003d new PatientStub(\"\", -1,\"\",\"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getName(),newPatient.getName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getAge(),newPatient.getAge());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getAddress(),newPatient.getAddress());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(temppatient.getContactNumber(),newPatient.getContactNumber());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 13,
      "thanhduc2000": 3,
      "andy-aw-why": 120
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AppointmentListStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class AppointmentListStub {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static List\u003cAppointmentStub\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static List\u003cAppointmentStub\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static int getTotalAppointments() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return appointmentList.size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * This method is a stub."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     * @see seedu.duke.storage.AppointmentList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static void createList(int choice) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        appointmentList.clear();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (choice \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AppointmentStub newAppointment1 \u003d new AppointmentStub(\"s;dlskd;l\", \"Li\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AppointmentStub newAppointment2 \u003d new AppointmentStub(\" \", \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AppointmentStub newAppointment3 \u003d new AppointmentStub(\"ewuioaiwoe\", \"Lo\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AppointmentStub newAppointment4 \u003d new AppointmentStub(\"aeiwae\", \"to\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            AppointmentStub newAppointment5 \u003d new AppointmentStub(\"LSDs\", \"Lis\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            appointmentList.add(newAppointment1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            appointmentList.add(newAppointment2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            appointmentList.add(newAppointment3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            appointmentList.add(newAppointment4);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            appointmentList.add(newAppointment5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 4,
      "JustinnT": 1,
      "andy-aw-why": 34
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AppointmentStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class AppointmentStub {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public AppointmentStub(String date, String time) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return \"{\" + \"[Date]:\" + \" \" + getDate() + \" \" + \"|\" + \"[Time]:\" + \" \" + getTime() + \"}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "andy-aw-why": 23
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeleteAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class DeleteAppointmentCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        AppointmentList appointmentList \u003d new AppointmentList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"14/03/2020\", \"1000\", 1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"15/03/2020\", \"1100\", 1));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"16/03/2020\", \"0000\", 1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"17/03/2020\", \"1300\", 1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"18/03/2020\", \"1400\", 1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"index\", \"3\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        DeleteAppointmentCommand command \u003d new DeleteAppointmentCommand(fieldsToChange);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(3,command.getIndex());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "thanhduc2000": 21,
      "andy-aw-why": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeletePatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class DeletePatientCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute_1() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        PatientList patientList \u003d new PatientList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"peony\", 33, \"clementi road\", \"61234567\",123));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"yoshino\", 8, \"shibuya\", \"13182371\",456));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"kurumi\", 15, \"hokkaido\", \"31732913\",789));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\",10));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\",12));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"index\", \"3\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        DeletePatientCommand command \u003d new DeletePatientCommand(fieldsToChange);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(3,command.getPatientIndex());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "thanhduc2000": 22,
      "andy-aw-why": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/EditAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.AppointmentList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class EditAppointmentCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute_1() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        AppointmentList appointmentList \u003d new AppointmentList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"14/03/2020\", \"1000\", 1));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"15/03/2020\", \"1100\", 1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"16/03/2020\", \"1200\", 1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"17/03/2020\", \"1300\", 1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        appointmentList.getAppointmentList().add(new Appointment(\"18/03/2020\", \"1400\", 1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"index\", \"3\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"date\", \"31/12/2020\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        fieldsToChange.put(\"time\", \"11:00 pm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        EditAppointmentCommand command \u003d new EditAppointmentCommand(fieldsToChange);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(3,command.getIndex());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"31/12/2020\",command.getDate());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"11:00 pm\",command.getTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute_2() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"index\", \"5\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"date\", \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        fieldsToChange.put(\"time\", \"11:00 pm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        EditAppointmentCommand command \u003d new EditAppointmentCommand(fieldsToChange);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(5,command.getIndex());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"\", command.getDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"11:00 pm\", command.getTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 2,
      "Yukilite": 4,
      "thanhduc2000": 35,
      "andy-aw-why": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/EditPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class EditPatientCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test void execute_1() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        PatientList patientList \u003d new PatientList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientList.getPatientList().add(new Patient(\"peony\", 33, \"clementi road\", \"61234567\", 1312));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientList.getPatientList().add(new Patient(\"yoshino\", 8, \"shibuya\", \"13182371\", 1112));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientList.getPatientList().add(new Patient(\"kurumi\", 15, \"hokkaido\", \"31732913\", 190));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\", 998));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientList.getPatientList().add(new Patient(\"ren\", 17, \"tokyo\", \"31093991\", 1212));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"index\", \"3\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"name\", \"Joe Harris\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"age\", \"20\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"address\", \"Jurong East\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"phone\", \"82253819\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        EditPatientCommand command \u003d new EditPatientCommand(fieldsToChange);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(3, command.getPatientIndex());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"Joe Harris\", command.getPatientName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(20, command.getAge());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"Jurong East\", command.getAddress());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"82253819\", command.getContactNumber());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    //Test case 2"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test void execute_2() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Map\u003cString, String\u003e fieldsToChange \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"index\", \"3\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"name\", \"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"age\", \"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"address\", \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        fieldsToChange.put(\"phone\", \"82253819\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        EditPatientCommand command \u003d new EditPatientCommand(fieldsToChange);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(3, command.getPatientIndex());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"\", command.getPatientName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(-1, command.getAge());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"\", command.getAddress());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(\"82253819\", command.getContactNumber());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "thanhduc2000": 43,
      "andy-aw-why": 7
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void isExit() throws InvalidFormatException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command c \u003d new ExitCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        assertEquals(true, c.isExit());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "thanhduc2000": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void execute() throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Command command \u003d new HelpCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        command.execute(ui, storage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thanhduc2000": 16
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListAppointmentCommandStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * Stub class for ListAppointmentCommandTest."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class ListAppointmentCommandStub extends ListAppointmentCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public ListAppointmentCommandStub() throws InvalidFormatException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub to simulate adding appointments into list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param ui      stub ui"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param storage stub storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        List\u003cAppointmentStub\u003e appointmentStubList \u003d AppointmentListStub.getAppointmentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        for (AppointmentStub a : appointmentStubList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            System.out.println(a);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 9,
      "thanhduc2000": 2,
      "andy-aw-why": 17
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListAppointmentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "class ListAppointmentCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static final String EXPECTED_OUTPUT \u003d \"{[Date]: s;dlskd;l |[Time]: Li}\" + System.lineSeparator()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"{[Date]:   |[Time]:  }\" + System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"{[Date]: ewuioaiwoe |[Time]: Lo}\" + System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"{[Date]: aeiwae |[Time]: to}\" + System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            + \"{[Date]: LSDs |[Time]: Lis}\" + System.lineSeparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void testListWithPatients() throws InvalidFormatException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui ui \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int savedAppointmentList \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        AppointmentListStub.createList(savedAppointmentList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        ListAppointmentCommand listAppointmentCommandStub \u003d new ListAppointmentCommandStub();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Reused from https://coderanch.com/t/587280/java/assertEquals-println **/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        listAppointmentCommandStub.execute(ui, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        //assertEquals(EXPECTED_OUTPUT, outContent.toString()); todo test failed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void testListWithoutPatients() throws InvalidFormatException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui ui \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int savedAppointmentList \u003d 2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientListStub.createList(savedAppointmentList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        ListAppointmentCommand listAppointmentCommandStub \u003d new ListAppointmentCommandStub();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Reused from https://coderanch.com/t/587280/java/assertEquals-println **/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        listAppointmentCommandStub.execute(ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        //assertEquals(EMPTY, outContent.toString()); todo test failed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 7,
      "thanhduc2000": 3,
      "andy-aw-why": 41
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListPatientCommandStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * Stub class for ListPatientCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class ListPatientCommandStub extends ListPatientCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    public ListPatientCommandStub() throws InvalidFormatException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub to simulate adding patients into list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param ui      stub ui"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param storage stub storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        List\u003cPatientStub\u003e patientListStub \u003d PatientListStub.getPatientList(); //getPatientList() method by @Brandonnn"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        for (PatientStub p : patientListStub) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            System.out.println(p); //override Patient class toString by @Sammmmm"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 9,
      "thanhduc2000": 2,
      "andy-aw-why": 17
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "import seedu.duke.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "class ListPatientCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String EXPECTED_OUTPUT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            \"{[Name]: s;dlskd;l | [Age]: 23 | [Address]: Li | [Contact Number]: 121}\" + System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    + \"{[Name]:   | [Age]: 15 | [Address]:   | [Contact Number]: 15454455}\" + System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    + \"{[Name]: ewuioaiwoe | [Age]: 33 | [Address]: Lo | [Contact Number]: 1989}\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    + \"{[Name]: aeiwae | [Age]: 13 | [Address]: to | [Contact Number]:  }\" + System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "                    + \"{[Name]: LSDs | [Age]: -1 | [Address]: Lis | [Contact Number]: 12}\" + System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void testListWithPatients() throws InvalidFormatException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui ui \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int savedPatientList \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientListStub.createList(savedPatientList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        ListPatientCommandStub listPatientCommandStub \u003d new ListPatientCommandStub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Reused from https://coderanch.com/t/587280/java/assertEquals-println **/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        listPatientCommandStub.execute(ui, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(EXPECTED_OUTPUT, outContent.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "    void testListWithoutPatients() throws InvalidFormatException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Ui ui \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int savedPatientList \u003d 2;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientListStub.createList(savedPatientList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        ListPatientCommandStub listPatientCommandStub \u003d new ListPatientCommandStub();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        /** Reused from https://coderanch.com/t/587280/java/assertEquals-println **/"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        listPatientCommandStub.execute(ui, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(EMPTY, outContent.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 8,
      "thanhduc2000": 3,
      "andy-aw-why": 48
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/PatientListStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * Stub class for PatientList class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class PatientListStub {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private static List\u003cPatientStub\u003e patientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param choice Stub choice"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public PatientListStub(int choice) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to return patient list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return a patient list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static List\u003cPatientStub\u003e getPatientList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return patientList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to get patient list size."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return size of patient list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static int getTotalPatients() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return patientList.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to create and initialize list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param choice Stub choice"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public static void createList(int choice) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientList.clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        if (choice \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientStub newPatient1 \u003d new PatientStub(\"s;dlskd;l\", 23, \"Li\", \"121\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientStub newPatient2 \u003d new PatientStub(\" \", 15, \" \", \"15454455\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientStub newPatient3 \u003d new PatientStub(\"ewuioaiwoe\", 33, \"Lo\", \"1989\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientStub newPatient4 \u003d new PatientStub(\"aeiwae\", 13, \"to\", \" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientStub newPatient5 \u003d new PatientStub(\"LSDs\", -1, \"Lis\", \"12\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            patientList.add(newPatient1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            patientList.add(newPatient2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            patientList.add(newPatient3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            patientList.add(newPatient4);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            patientList.add(newPatient5);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 21,
      "andy-aw-why": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/PatientStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": " * Stub class for fake patient class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "public class PatientStub {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private String contactNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Default constructor for stub class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param name          name of patient"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param age           age of patient"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param address       address of patient"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @param contactNumber contact number of patient"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public PatientStub(String name, int age, String address, String contactNumber) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to get patient name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return patient name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to get patient age."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return patient age"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to get patient address."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return patient address"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Stub method to get patient number."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return patient number"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String getContactNumber() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return contactNumber;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * Override toString method for stub class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     * @return formatted string to print"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        String newToString \u003d \"{\" + \"[Name]:\" + \" \" + getName() + \" \" + \"|\" + \" \" + \"[Age]:\" + \" \" + getAge() + \" \" + \"|\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                + \" \" + \"[Address]:\" + \" \" + getAddress() + \" \" + \"|\" + \" \" + \"[Contact Number]:\" + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                + getContactNumber() + \"}\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        return newToString;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 35,
      "andy-aw-why": 40
    }
  },
  {
    "path": "src/test/java/seedu/duke/converter/TimeConverterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.converter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "class TimeConverterTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testOldDate() throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        String oldDate \u003d \"29/3/2020\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"Sun 29 Mar 2020\", TimeConverter.oldDate(oldDate));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testOldTime() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        String oldTime \u003d \"2315\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"11:15 PM\", TimeConverter.oldTime(oldTime));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 23
    }
  },
  {
    "path": "src/test/java/seedu/duke/generator/PatientIdManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "package seedu.duke.generator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "class PatientIdManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private Map\u003cInteger, Integer\u003e patientIdMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            patientIdMap.put(i * 2, 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientIdMap.clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setNextTopNewNumber(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.getNextNumberQueueThing().clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.getPatientIdMap().clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getPatientIdMap() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setPatientIdMap(patientIdMap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cInteger, Integer\u003e tempmap \u003d PatientIdManager.getPatientIdMap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(tempmap, patientIdMap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getPatientIdMapOnAdd() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setPatientIdMap(patientIdMap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setNextTopNewNumber(100);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cInteger, Integer\u003e tempmap \u003d PatientIdManager.getPatientIdMap();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientIdMap.put(100, 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(patientIdMap, tempmap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getPatientIdMapOnAddAndDelete() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setPatientIdMap(patientIdMap);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setNextTopNewNumber(100);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(10);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cInteger, Integer\u003e tempmap \u003d PatientIdManager.getPatientIdMap();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cInteger, Integer\u003e patientIdMap2 \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            if (i !\u003d 1 \u0026\u0026 i !\u003d 5) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                patientIdMap2.put(i * 2, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "                patientIdMap2.put(i * 2, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        patientIdMap2.put(100, 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(patientIdMap2, tempmap);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void setPatientIdMap() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setPatientIdMap(patientIdMap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cInteger, Integer\u003e tempmap \u003d PatientIdManager.getPatientIdMap();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(tempmap, patientIdMap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getNextTopNewNumber() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setNextTopNewNumber(23);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(23, PatientIdManager.getNextTopNewNumber());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getNextTopNewNumberNew() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(0, PatientIdManager.getNextTopNewNumber());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getNextTopNewNumberUponAddPatient() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            int temp \u003d PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(10, PatientIdManager.getNextTopNewNumber());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getNextTopNewNumberUponAddAndDeletePatient() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            int temp \u003d PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(3);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(4);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int temp \u003d PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(10, PatientIdManager.getNextTopNewNumber());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void setNextTopNewNumber() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setNextTopNewNumber(23);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(23, PatientIdManager.getNextTopNewNumber());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getNextNumberQueueThingDeletePatient() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Queue\u003cInteger\u003e tempQueue \u003d PatientIdManager.getNextNumberQueueThing();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(2, tempQueue.remove());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getNextNumberQueueThing() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Queue\u003cInteger\u003e tempQueue \u003d PatientIdManager.getNextNumberQueueThing();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Queue\u003cInteger\u003e emptyQueue \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(emptyQueue, tempQueue);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getNextPatientId() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setNextTopNewNumber(100);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(100, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getNextPatientIdOnAdd() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setNextTopNewNumber(100);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int temp \u003d PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(101, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getNextPatientIdOnAddAndDelete() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setNextTopNewNumber(100);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int temp \u003d PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(11);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(2);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(12);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(13);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(34);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(36);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int temp2 \u003d PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(42);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(61);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(11, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getNextPatientIdOnAddAndDelete2() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setNextTopNewNumber(100);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(100, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(2);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(11);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(2);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(12);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(13);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(34);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(36);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(2, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(11, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(12, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(13, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(34, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(36, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(101, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(102, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void getNextPatientIdOnError() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setNextTopNewNumber(100);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(-300);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(100, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(1000);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(101, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void addBackPatientId() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setNextTopNewNumber(100);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(2);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(2, PatientIdManager.getNextPatientId());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void checkPatientIdUsed() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.setNextTopNewNumber(100);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int temp \u003d PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(2);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(11);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(2);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(12);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.addBackPatientId(13);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int temp2 \u003d PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        int temp3 \u003d PatientIdManager.getNextPatientId();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertTrue(PatientIdManager.checkPatientIdUsed(100));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertTrue(PatientIdManager.checkPatientIdUsed(2));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertTrue(PatientIdManager.checkPatientIdUsed(11));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertFalse(PatientIdManager.checkPatientIdUsed(12));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertFalse(PatientIdManager.checkPatientIdUsed(13));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertFalse(PatientIdManager.checkPatientIdUsed(101));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    void clearPatientId() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        PatientIdManager.clearPatientId();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Queue\u003cInteger\u003e emptyQueue \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Map\u003cInteger, Integer\u003e emptyPatientIdMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(0, PatientIdManager.getNextTopNewNumber());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(emptyQueue, PatientIdManager.getNextNumberQueueThing());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(emptyPatientIdMap, PatientIdManager.getPatientIdMap());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andy-aw-why": 239
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.AddPatientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.DeletePatientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.EditPatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.command.ListPatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.DescriptionIsEmptyException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.IndexNotIntegerException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.InvalidIndexException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.NoFieldCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import seedu.duke.storage.PatientList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    private static Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_unknownCommand_exceptionCaught() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String userInputWithUnknownCommand \u003d \"factorial 100000\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            p.parseCommand(userInputWithUnknownCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Unknown command\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_addPatientCommand_isAddCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String addPatientUserInput1 \u003d \"addp \\\\name Justin \\\\age \\\\address\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String addPatientUserInput2 \u003d \"addp                        \\\\unknown \\\\age 23 \\\\name \\\\12333\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(addPatientUserInput1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(addPatientUserInput2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type1 instanceof AddPatientCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type2 instanceof AddPatientCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_addPatientCommand_isNotAddCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String addPatientUserInput1 \u003d \"deletep \\\\index 3\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String addPatientUserInput2 \u003d \"edip \\\\index -100 \\\\name Justin \\\\age 23 \\\\address Pasir Ris\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String addPatientUserInput3 \u003d \"listp\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(addPatientUserInput1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(addPatientUserInput2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(addPatientUserInput3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type1 instanceof AddPatientCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type2 instanceof AddPatientCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type3 instanceof AddPatientCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Unknown command\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void tetParseCommand_editPatientCommand_isEditCommand() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String editPatientUserInput1 \u003d \"editp \\\\index 5 \\\\name Himiko\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String editPatientUserInput2 \u003d \"editp       \\\\index 3 \\\\name \\\\age 23 \\\\address pasir ris\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thanhduc2000"
        },
        "content": "        String editPatientUserInput3 \u003d \"         editp  \\\\index 4 \\\\phone 97283449\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        PatientList stub \u003d new PatientList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient \u003d new Patient(\"1\", 1, \"1\", \"1\",1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i +\u003d 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            PatientList.getPatientList().add(newPatient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(editPatientUserInput1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(editPatientUserInput2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(editPatientUserInput3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type1 instanceof EditPatientCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type2 instanceof EditPatientCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type3 instanceof EditPatientCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fail(\"Should not have thrown any exception\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_editPatientCommand_isNotEditCommand() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String editPatientUserInput1 \u003d \"adda \\\\index 3\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String editPatientUserInput2 \u003d \"addp                        \\\\unknown \\\\age \\\\name \\\\12333\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String editPatientUserInput3 \u003d \"list\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(editPatientUserInput1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(editPatientUserInput2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(editPatientUserInput3);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type1 instanceof EditPatientCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type2 instanceof EditPatientCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type3 instanceof EditPatientCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (UnknownCommandException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Unknown command\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (NoFieldCommandException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Please ensure that at least one field for adda is provided\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_deletePatientCommand_isDeleteCommand() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String deletePatientUserInput1 \u003d \"         deletep  \\\\index 4      \\\\\\\\\\\\\\\\\\\\\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String deletePatientUserInput2 \u003d \"           deletep \\\\index 10\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String deletePatientUserInput3 \u003d \"deletep               \\\\index 1\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        PatientList stub \u003d new PatientList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient newPatient \u003d new Patient(\"1\", 1, \"1\", \"1\", 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i +\u003d 1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            PatientList.getPatientList().add(newPatient);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(deletePatientUserInput1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(deletePatientUserInput2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(deletePatientUserInput3);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type1 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type2 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type3 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            fail(\"Should not have thrown any exceptions\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_deletePatientCommand_isNotDeleteCommand() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String deletePatientUserInput1 \u003d \"addp                        \\\\unknown \\\\age 23 \\\\name \\\\12333\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String deletePatientUserInput2 \u003d \"           listp\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        String deletePatientUserInput3 \u003d \"edipt               \\\\index 0\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(deletePatientUserInput1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(deletePatientUserInput2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(deletePatientUserInput3);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type1 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type2 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type3 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Unknown command\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_listPatientCommand() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String listPatientUserInput1 \u003d \"listp\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String listPatientUserInput2 \u003d \"          listp                  \";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String listPatientUserInput3 \u003d \"listp \\\\name Justin\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String listPatientUserInput4 \u003d \"list\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String listPatientUserInput5 \u003d \"addp \\\\name Justin \\\\address\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String listPatientUserInput6 \u003d \"list\\\\\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(listPatientUserInput1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type1 instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(listPatientUserInput2);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type2 instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(listPatientUserInput3);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type3 instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type4 \u003d p.parseCommand(listPatientUserInput4);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type4 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type5 \u003d p.parseCommand(listPatientUserInput5);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type5 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type6 \u003d p.parseCommand(listPatientUserInput6);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type6 instanceof DeletePatientCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Unknown command\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    void testParseCommand_helpCommand() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String helpUserInput1 \u003d \"help\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String helpUserInput2 \u003d \"       help\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String helpUserInput3 \u003d \"help          \\\\name Justin \\\\age 23 \\\\address pasir ris\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String helpUserInput4 \u003d \"elp\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String helpUserInput5 \u003d \"addp \\\\name Justin \\\\age 23 \\\\address pasir ris \\\\phone 999\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        final String helpUserInput6 \u003d \"editp \\\\sam \\\\age 99 \\\\address sentosa cove\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type1 \u003d p.parseCommand(helpUserInput1);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type1 instanceof HelpCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type2 \u003d p.parseCommand(helpUserInput2);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type2 instanceof HelpCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type3 \u003d p.parseCommand(helpUserInput3);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertTrue(type3 instanceof HelpCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type4 \u003d p.parseCommand(helpUserInput4);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type4 instanceof HelpCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type5 \u003d p.parseCommand(helpUserInput5);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type5 instanceof HelpCommand);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            Command type6 \u003d p.parseCommand(helpUserInput6);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertFalse(type6 instanceof HelpCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        } catch (Exception | UnknownCommandException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "            assertEquals(\"Unknown command\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JustinnT"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 231,
      "thanhduc2000": 1,
      "andy-aw-why": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/record/AppointmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "class AppointmentTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testGetDate() throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Appointment appointment \u003d new Appointment(\"22/7/2020\", \"1230\", 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"Wed 22 Jul 2020\", appointment.getDate());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testGetTime() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Appointment appointment \u003d new Appointment(\"22/7/2020\", \"1230\", 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"12:30 PM\", appointment.getTime());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    void testToString() throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Appointment appointment \u003d new Appointment(\"22/7/2020\", \"1230\", 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(\"{[Date]: Wed 22 Jul 2020 |[Time]: 12:30 PM | [PatientId]: 1}\", appointment.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 23,
      "JustinnT": 1,
      "andy-aw-why": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/record/PatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "package seedu.duke.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "class PatientTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test void getName() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"61234567\", 12);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"peony\", patient.getName());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test void testGetAge() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"61234567\", 12);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(33, patient.getAge());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test void testGetAddress() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"61234567\", 12);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"clementi road\", patient.getAddress());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test void testGetContactNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"61234567\", 12);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"61234567\", patient.getContactNumber());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test void testToString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient patient \u003d new Patient(\"john\", 45, \"jail\", \"91234567\", 12);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        assertEquals(\"{[Name]: john | [Age]: 45 | [Address]: jail | [Contact Number]: 91234567 | [PatientID]: 12}\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "                patient.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test void testSetName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\", 12);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setName(\"peony\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"peony\", patient.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test void testSetAge() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\", 12);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setAge(33);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(33, patient.getAge());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test void testSetAddress() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\", 12);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setAddress(\"clementi road\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"clementi road\", patient.getAddress());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test void testSetContactNumber() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\", 12);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setContactNumber(\"11111111\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"11111111\", patient.getContactNumber());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    @Test void testSetPatientInfo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "        Patient patient \u003d new Patient(\"peony\", 33, \"clementi road\", \"91234567\", 12);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        patient.setPatientInfo(\"chucky\", 11, \"im going to kill you\", \"44444444\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"chucky\", patient.getName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(11, patient.getAge());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"im going to kill you\", patient.getAddress());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"44444444\", patient.getContactNumber());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 48,
      "JustinnT": 1,
      "andy-aw-why": 21
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/AppointmentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.record.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "class AppointmentListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private AppointmentList testAppointmentList \u003d new AppointmentList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private Appointment testAppointment1 \u003d new Appointment(\"29/03/2020\", \"1300\", 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private Appointment testAppointment2 \u003d new Appointment(\"28/03/2020\", \"1400\", 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private Appointment testAppointment3 \u003d new Appointment(\"27/03/2020\", \"1500\", 1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yukilite"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    AppointmentListTest() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    void appointmentListTest_Add() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(3, testAppointmentList.getTotalAppointments());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    void appointmentListTest_GetInfo() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"Sun 29 Mar 2020\", testAppointmentList.getAppointmentRecord(0).getDate());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"01:00 PM\", testAppointmentList.getAppointmentRecord(0).getTime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    void appointmentListTest_Delete() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.getAppointmentList().add(testAppointment3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testAppointmentList.removeAppointmentRecord(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(2, testAppointmentList.getTotalAppointments());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yukilite"
        },
        "content": "        assertEquals(\"Sat 28 Mar 2020\", testAppointmentList.getAppointmentRecord(0).getDate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yukilite": 8,
      "JustinnT": 1,
      "brandoncjh": 32,
      "andy-aw-why": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/PatientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import seedu.duke.record.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "class PatientListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private PatientList testPatientList \u003d new PatientList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private Patient testPatient1 \u003d new Patient(\"alice\", 11, \"bukit timah\", \"61111111\",13);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private Patient testPatient2 \u003d new Patient(\"bob\", 22, \"novena\", \"822222222\",14);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andy-aw-why"
        },
        "content": "    private Patient testPatient3 \u003d new Patient(\"chong\", 33, \"pasir ris\", \"93333333\",15);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    void patientListTest_Add() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(3, testPatientList.getTotalPatients());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    void patientListTest_GetInfo() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(\"alice\", testPatientList.getPatientRecord(0).getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(11, testPatientList.getPatientRecord(0).getAge());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(\"bukit timah\", testPatientList.getPatientRecord(0).getAddress());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(\"61111111\", testPatientList.getPatientRecord(0).getContactNumber());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    void patientListTest_Delete() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.getPatientList().add(testPatient3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        testPatientList.removePatientRecord(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(2, testPatientList.getTotalPatients());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        assertEquals(\"bob\", testPatientList.getPatientRecord(0).getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 1,
      "brandoncjh": 37,
      "andy-aw-why": 3
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "123123"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "test"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "test"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "tset"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "p"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "p"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JustinnT"
        },
        "content": "p"
      }
    ],
    "authorContributionMap": {
      "JustinnT": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "pause"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 2,
      "-": 19
    }
  }
]
